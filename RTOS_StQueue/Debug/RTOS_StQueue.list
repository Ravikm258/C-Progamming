
RTOS_StQueue.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006ee0  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000148  080070a0  080070a0  000170a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080071e8  080071e8  00020064  2**0
                  CONTENTS
  4 .ARM          00000008  080071e8  080071e8  000171e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080071f0  080071f0  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080071f0  080071f0  000171f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080071f4  080071f4  000171f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  080071f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00007bc8  20000064  0800725c  00020064  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20007c2c  0800725c  00027c2c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 13 .debug_info   00017714  00000000  00000000  000200d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000325b  00000000  00000000  000377eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001428  00000000  00000000  0003aa48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000fb5  00000000  00000000  0003be70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002be60  00000000  00000000  0003ce25  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001891f  00000000  00000000  00068c85  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00110cec  00000000  00000000  000815a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000591c  00000000  00000000  00192290  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000052  00000000  00000000  00197bac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000064 	.word	0x20000064
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08007088 	.word	0x08007088

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000068 	.word	0x20000068
 80001fc:	08007088 	.word	0x08007088

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b970 	b.w	8000598 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9e08      	ldr	r6, [sp, #32]
 80002d6:	460d      	mov	r5, r1
 80002d8:	4604      	mov	r4, r0
 80002da:	460f      	mov	r7, r1
 80002dc:	2b00      	cmp	r3, #0
 80002de:	d14a      	bne.n	8000376 <__udivmoddi4+0xa6>
 80002e0:	428a      	cmp	r2, r1
 80002e2:	4694      	mov	ip, r2
 80002e4:	d965      	bls.n	80003b2 <__udivmoddi4+0xe2>
 80002e6:	fab2 f382 	clz	r3, r2
 80002ea:	b143      	cbz	r3, 80002fe <__udivmoddi4+0x2e>
 80002ec:	fa02 fc03 	lsl.w	ip, r2, r3
 80002f0:	f1c3 0220 	rsb	r2, r3, #32
 80002f4:	409f      	lsls	r7, r3
 80002f6:	fa20 f202 	lsr.w	r2, r0, r2
 80002fa:	4317      	orrs	r7, r2
 80002fc:	409c      	lsls	r4, r3
 80002fe:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000302:	fa1f f58c 	uxth.w	r5, ip
 8000306:	fbb7 f1fe 	udiv	r1, r7, lr
 800030a:	0c22      	lsrs	r2, r4, #16
 800030c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000310:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000314:	fb01 f005 	mul.w	r0, r1, r5
 8000318:	4290      	cmp	r0, r2
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x62>
 800031c:	eb1c 0202 	adds.w	r2, ip, r2
 8000320:	f101 37ff 	add.w	r7, r1, #4294967295
 8000324:	f080 811c 	bcs.w	8000560 <__udivmoddi4+0x290>
 8000328:	4290      	cmp	r0, r2
 800032a:	f240 8119 	bls.w	8000560 <__udivmoddi4+0x290>
 800032e:	3902      	subs	r1, #2
 8000330:	4462      	add	r2, ip
 8000332:	1a12      	subs	r2, r2, r0
 8000334:	b2a4      	uxth	r4, r4
 8000336:	fbb2 f0fe 	udiv	r0, r2, lr
 800033a:	fb0e 2210 	mls	r2, lr, r0, r2
 800033e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000342:	fb00 f505 	mul.w	r5, r0, r5
 8000346:	42a5      	cmp	r5, r4
 8000348:	d90a      	bls.n	8000360 <__udivmoddi4+0x90>
 800034a:	eb1c 0404 	adds.w	r4, ip, r4
 800034e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000352:	f080 8107 	bcs.w	8000564 <__udivmoddi4+0x294>
 8000356:	42a5      	cmp	r5, r4
 8000358:	f240 8104 	bls.w	8000564 <__udivmoddi4+0x294>
 800035c:	4464      	add	r4, ip
 800035e:	3802      	subs	r0, #2
 8000360:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000364:	1b64      	subs	r4, r4, r5
 8000366:	2100      	movs	r1, #0
 8000368:	b11e      	cbz	r6, 8000372 <__udivmoddi4+0xa2>
 800036a:	40dc      	lsrs	r4, r3
 800036c:	2300      	movs	r3, #0
 800036e:	e9c6 4300 	strd	r4, r3, [r6]
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	428b      	cmp	r3, r1
 8000378:	d908      	bls.n	800038c <__udivmoddi4+0xbc>
 800037a:	2e00      	cmp	r6, #0
 800037c:	f000 80ed 	beq.w	800055a <__udivmoddi4+0x28a>
 8000380:	2100      	movs	r1, #0
 8000382:	e9c6 0500 	strd	r0, r5, [r6]
 8000386:	4608      	mov	r0, r1
 8000388:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038c:	fab3 f183 	clz	r1, r3
 8000390:	2900      	cmp	r1, #0
 8000392:	d149      	bne.n	8000428 <__udivmoddi4+0x158>
 8000394:	42ab      	cmp	r3, r5
 8000396:	d302      	bcc.n	800039e <__udivmoddi4+0xce>
 8000398:	4282      	cmp	r2, r0
 800039a:	f200 80f8 	bhi.w	800058e <__udivmoddi4+0x2be>
 800039e:	1a84      	subs	r4, r0, r2
 80003a0:	eb65 0203 	sbc.w	r2, r5, r3
 80003a4:	2001      	movs	r0, #1
 80003a6:	4617      	mov	r7, r2
 80003a8:	2e00      	cmp	r6, #0
 80003aa:	d0e2      	beq.n	8000372 <__udivmoddi4+0xa2>
 80003ac:	e9c6 4700 	strd	r4, r7, [r6]
 80003b0:	e7df      	b.n	8000372 <__udivmoddi4+0xa2>
 80003b2:	b902      	cbnz	r2, 80003b6 <__udivmoddi4+0xe6>
 80003b4:	deff      	udf	#255	; 0xff
 80003b6:	fab2 f382 	clz	r3, r2
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	f040 8090 	bne.w	80004e0 <__udivmoddi4+0x210>
 80003c0:	1a8a      	subs	r2, r1, r2
 80003c2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003c6:	fa1f fe8c 	uxth.w	lr, ip
 80003ca:	2101      	movs	r1, #1
 80003cc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003d0:	fb07 2015 	mls	r0, r7, r5, r2
 80003d4:	0c22      	lsrs	r2, r4, #16
 80003d6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003da:	fb0e f005 	mul.w	r0, lr, r5
 80003de:	4290      	cmp	r0, r2
 80003e0:	d908      	bls.n	80003f4 <__udivmoddi4+0x124>
 80003e2:	eb1c 0202 	adds.w	r2, ip, r2
 80003e6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x122>
 80003ec:	4290      	cmp	r0, r2
 80003ee:	f200 80cb 	bhi.w	8000588 <__udivmoddi4+0x2b8>
 80003f2:	4645      	mov	r5, r8
 80003f4:	1a12      	subs	r2, r2, r0
 80003f6:	b2a4      	uxth	r4, r4
 80003f8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003fc:	fb07 2210 	mls	r2, r7, r0, r2
 8000400:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000404:	fb0e fe00 	mul.w	lr, lr, r0
 8000408:	45a6      	cmp	lr, r4
 800040a:	d908      	bls.n	800041e <__udivmoddi4+0x14e>
 800040c:	eb1c 0404 	adds.w	r4, ip, r4
 8000410:	f100 32ff 	add.w	r2, r0, #4294967295
 8000414:	d202      	bcs.n	800041c <__udivmoddi4+0x14c>
 8000416:	45a6      	cmp	lr, r4
 8000418:	f200 80bb 	bhi.w	8000592 <__udivmoddi4+0x2c2>
 800041c:	4610      	mov	r0, r2
 800041e:	eba4 040e 	sub.w	r4, r4, lr
 8000422:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000426:	e79f      	b.n	8000368 <__udivmoddi4+0x98>
 8000428:	f1c1 0720 	rsb	r7, r1, #32
 800042c:	408b      	lsls	r3, r1
 800042e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000432:	ea4c 0c03 	orr.w	ip, ip, r3
 8000436:	fa05 f401 	lsl.w	r4, r5, r1
 800043a:	fa20 f307 	lsr.w	r3, r0, r7
 800043e:	40fd      	lsrs	r5, r7
 8000440:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000444:	4323      	orrs	r3, r4
 8000446:	fbb5 f8f9 	udiv	r8, r5, r9
 800044a:	fa1f fe8c 	uxth.w	lr, ip
 800044e:	fb09 5518 	mls	r5, r9, r8, r5
 8000452:	0c1c      	lsrs	r4, r3, #16
 8000454:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000458:	fb08 f50e 	mul.w	r5, r8, lr
 800045c:	42a5      	cmp	r5, r4
 800045e:	fa02 f201 	lsl.w	r2, r2, r1
 8000462:	fa00 f001 	lsl.w	r0, r0, r1
 8000466:	d90b      	bls.n	8000480 <__udivmoddi4+0x1b0>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000470:	f080 8088 	bcs.w	8000584 <__udivmoddi4+0x2b4>
 8000474:	42a5      	cmp	r5, r4
 8000476:	f240 8085 	bls.w	8000584 <__udivmoddi4+0x2b4>
 800047a:	f1a8 0802 	sub.w	r8, r8, #2
 800047e:	4464      	add	r4, ip
 8000480:	1b64      	subs	r4, r4, r5
 8000482:	b29d      	uxth	r5, r3
 8000484:	fbb4 f3f9 	udiv	r3, r4, r9
 8000488:	fb09 4413 	mls	r4, r9, r3, r4
 800048c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000490:	fb03 fe0e 	mul.w	lr, r3, lr
 8000494:	45a6      	cmp	lr, r4
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x1da>
 8000498:	eb1c 0404 	adds.w	r4, ip, r4
 800049c:	f103 35ff 	add.w	r5, r3, #4294967295
 80004a0:	d26c      	bcs.n	800057c <__udivmoddi4+0x2ac>
 80004a2:	45a6      	cmp	lr, r4
 80004a4:	d96a      	bls.n	800057c <__udivmoddi4+0x2ac>
 80004a6:	3b02      	subs	r3, #2
 80004a8:	4464      	add	r4, ip
 80004aa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004ae:	fba3 9502 	umull	r9, r5, r3, r2
 80004b2:	eba4 040e 	sub.w	r4, r4, lr
 80004b6:	42ac      	cmp	r4, r5
 80004b8:	46c8      	mov	r8, r9
 80004ba:	46ae      	mov	lr, r5
 80004bc:	d356      	bcc.n	800056c <__udivmoddi4+0x29c>
 80004be:	d053      	beq.n	8000568 <__udivmoddi4+0x298>
 80004c0:	b156      	cbz	r6, 80004d8 <__udivmoddi4+0x208>
 80004c2:	ebb0 0208 	subs.w	r2, r0, r8
 80004c6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ca:	fa04 f707 	lsl.w	r7, r4, r7
 80004ce:	40ca      	lsrs	r2, r1
 80004d0:	40cc      	lsrs	r4, r1
 80004d2:	4317      	orrs	r7, r2
 80004d4:	e9c6 7400 	strd	r7, r4, [r6]
 80004d8:	4618      	mov	r0, r3
 80004da:	2100      	movs	r1, #0
 80004dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004e0:	f1c3 0120 	rsb	r1, r3, #32
 80004e4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004e8:	fa20 f201 	lsr.w	r2, r0, r1
 80004ec:	fa25 f101 	lsr.w	r1, r5, r1
 80004f0:	409d      	lsls	r5, r3
 80004f2:	432a      	orrs	r2, r5
 80004f4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f8:	fa1f fe8c 	uxth.w	lr, ip
 80004fc:	fbb1 f0f7 	udiv	r0, r1, r7
 8000500:	fb07 1510 	mls	r5, r7, r0, r1
 8000504:	0c11      	lsrs	r1, r2, #16
 8000506:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800050a:	fb00 f50e 	mul.w	r5, r0, lr
 800050e:	428d      	cmp	r5, r1
 8000510:	fa04 f403 	lsl.w	r4, r4, r3
 8000514:	d908      	bls.n	8000528 <__udivmoddi4+0x258>
 8000516:	eb1c 0101 	adds.w	r1, ip, r1
 800051a:	f100 38ff 	add.w	r8, r0, #4294967295
 800051e:	d22f      	bcs.n	8000580 <__udivmoddi4+0x2b0>
 8000520:	428d      	cmp	r5, r1
 8000522:	d92d      	bls.n	8000580 <__udivmoddi4+0x2b0>
 8000524:	3802      	subs	r0, #2
 8000526:	4461      	add	r1, ip
 8000528:	1b49      	subs	r1, r1, r5
 800052a:	b292      	uxth	r2, r2
 800052c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000530:	fb07 1115 	mls	r1, r7, r5, r1
 8000534:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000538:	fb05 f10e 	mul.w	r1, r5, lr
 800053c:	4291      	cmp	r1, r2
 800053e:	d908      	bls.n	8000552 <__udivmoddi4+0x282>
 8000540:	eb1c 0202 	adds.w	r2, ip, r2
 8000544:	f105 38ff 	add.w	r8, r5, #4294967295
 8000548:	d216      	bcs.n	8000578 <__udivmoddi4+0x2a8>
 800054a:	4291      	cmp	r1, r2
 800054c:	d914      	bls.n	8000578 <__udivmoddi4+0x2a8>
 800054e:	3d02      	subs	r5, #2
 8000550:	4462      	add	r2, ip
 8000552:	1a52      	subs	r2, r2, r1
 8000554:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000558:	e738      	b.n	80003cc <__udivmoddi4+0xfc>
 800055a:	4631      	mov	r1, r6
 800055c:	4630      	mov	r0, r6
 800055e:	e708      	b.n	8000372 <__udivmoddi4+0xa2>
 8000560:	4639      	mov	r1, r7
 8000562:	e6e6      	b.n	8000332 <__udivmoddi4+0x62>
 8000564:	4610      	mov	r0, r2
 8000566:	e6fb      	b.n	8000360 <__udivmoddi4+0x90>
 8000568:	4548      	cmp	r0, r9
 800056a:	d2a9      	bcs.n	80004c0 <__udivmoddi4+0x1f0>
 800056c:	ebb9 0802 	subs.w	r8, r9, r2
 8000570:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000574:	3b01      	subs	r3, #1
 8000576:	e7a3      	b.n	80004c0 <__udivmoddi4+0x1f0>
 8000578:	4645      	mov	r5, r8
 800057a:	e7ea      	b.n	8000552 <__udivmoddi4+0x282>
 800057c:	462b      	mov	r3, r5
 800057e:	e794      	b.n	80004aa <__udivmoddi4+0x1da>
 8000580:	4640      	mov	r0, r8
 8000582:	e7d1      	b.n	8000528 <__udivmoddi4+0x258>
 8000584:	46d0      	mov	r8, sl
 8000586:	e77b      	b.n	8000480 <__udivmoddi4+0x1b0>
 8000588:	3d02      	subs	r5, #2
 800058a:	4462      	add	r2, ip
 800058c:	e732      	b.n	80003f4 <__udivmoddi4+0x124>
 800058e:	4608      	mov	r0, r1
 8000590:	e70a      	b.n	80003a8 <__udivmoddi4+0xd8>
 8000592:	4464      	add	r4, ip
 8000594:	3802      	subs	r0, #2
 8000596:	e742      	b.n	800041e <__udivmoddi4+0x14e>

08000598 <__aeabi_idiv0>:
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop

0800059c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800059c:	b5b0      	push	{r4, r5, r7, lr}
 800059e:	b08a      	sub	sp, #40	; 0x28
 80005a0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005a2:	f000 fc22 	bl	8000dea <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005a6:	f000 f85d 	bl	8000664 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005aa:	f000 f8ef 	bl	800078c <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 80005ae:	f000 f8a1 	bl	80006f4 <MX_LPUART1_UART_Init>
  /* USER CODE BEGIN 2 */
  xTaskCreate(Sender_HPT_Task, "Sender1", 1024, NULL, 2, &lpt_task_handler);
 80005b2:	4b20      	ldr	r3, [pc, #128]	; (8000634 <main+0x98>)
 80005b4:	9301      	str	r3, [sp, #4]
 80005b6:	2302      	movs	r3, #2
 80005b8:	9300      	str	r3, [sp, #0]
 80005ba:	2300      	movs	r3, #0
 80005bc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80005c0:	491d      	ldr	r1, [pc, #116]	; (8000638 <main+0x9c>)
 80005c2:	481e      	ldr	r0, [pc, #120]	; (800063c <main+0xa0>)
 80005c4:	f004 fa42 	bl	8004a4c <xTaskCreate>
  xTaskCreate(Sender_LPT_Task, "Sender2", 1024, NULL, 1, &hpt_task_handler);
 80005c8:	4b1d      	ldr	r3, [pc, #116]	; (8000640 <main+0xa4>)
 80005ca:	9301      	str	r3, [sp, #4]
 80005cc:	2301      	movs	r3, #1
 80005ce:	9300      	str	r3, [sp, #0]
 80005d0:	2300      	movs	r3, #0
 80005d2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80005d6:	491b      	ldr	r1, [pc, #108]	; (8000644 <main+0xa8>)
 80005d8:	481b      	ldr	r0, [pc, #108]	; (8000648 <main+0xac>)
 80005da:	f004 fa37 	bl	8004a4c <xTaskCreate>
  xTaskCreate(Receiver_Task, "Receiver", 1024, NULL, 1, &receiver_handler);
 80005de:	4b1b      	ldr	r3, [pc, #108]	; (800064c <main+0xb0>)
 80005e0:	9301      	str	r3, [sp, #4]
 80005e2:	2301      	movs	r3, #1
 80005e4:	9300      	str	r3, [sp, #0]
 80005e6:	2300      	movs	r3, #0
 80005e8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80005ec:	4918      	ldr	r1, [pc, #96]	; (8000650 <main+0xb4>)
 80005ee:	4819      	ldr	r0, [pc, #100]	; (8000654 <main+0xb8>)
 80005f0:	f004 fa2c 	bl	8004a4c <xTaskCreate>

  st_queue_handler = xQueueCreate(2,sizeof(my_struct));
 80005f4:	2200      	movs	r2, #0
 80005f6:	210c      	movs	r1, #12
 80005f8:	2002      	movs	r0, #2
 80005fa:	f003 fe97 	bl	800432c <xQueueGenericCreate>
 80005fe:	4603      	mov	r3, r0
 8000600:	4a15      	ldr	r2, [pc, #84]	; (8000658 <main+0xbc>)
 8000602:	6013      	str	r3, [r2, #0]
  if(st_queue_handler == 0)
 8000604:	4b14      	ldr	r3, [pc, #80]	; (8000658 <main+0xbc>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	2b00      	cmp	r3, #0
 800060a:	d10f      	bne.n	800062c <main+0x90>
  {
	  uint8_t ret[] = "failed to create queue\n\r";
 800060c:	4b13      	ldr	r3, [pc, #76]	; (800065c <main+0xc0>)
 800060e:	1d3c      	adds	r4, r7, #4
 8000610:	461d      	mov	r5, r3
 8000612:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000614:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000616:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800061a:	c403      	stmia	r4!, {r0, r1}
 800061c:	7022      	strb	r2, [r4, #0]
	  HAL_UART_Transmit(&hlpuart1, ret, sizeof(ret), 1000);
 800061e:	1d39      	adds	r1, r7, #4
 8000620:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000624:	2219      	movs	r2, #25
 8000626:	480e      	ldr	r0, [pc, #56]	; (8000660 <main+0xc4>)
 8000628:	f002 feb8 	bl	800339c <HAL_UART_Transmit>
  }

  vTaskStartScheduler();
 800062c:	f004 fba0 	bl	8004d70 <vTaskStartScheduler>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000630:	e7fe      	b.n	8000630 <main+0x94>
 8000632:	bf00      	nop
 8000634:	20000118 	.word	0x20000118
 8000638:	080070a0 	.word	0x080070a0
 800063c:	08000961 	.word	0x08000961
 8000640:	2000011c 	.word	0x2000011c
 8000644:	080070a8 	.word	0x080070a8
 8000648:	080009c9 	.word	0x080009c9
 800064c:	20000120 	.word	0x20000120
 8000650:	080070b0 	.word	0x080070b0
 8000654:	08000a31 	.word	0x08000a31
 8000658:	20000114 	.word	0x20000114
 800065c:	080070bc 	.word	0x080070bc
 8000660:	20000080 	.word	0x20000080

08000664 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b096      	sub	sp, #88	; 0x58
 8000668:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800066a:	f107 0314 	add.w	r3, r7, #20
 800066e:	2244      	movs	r2, #68	; 0x44
 8000670:	2100      	movs	r1, #0
 8000672:	4618      	mov	r0, r3
 8000674:	f006 f884 	bl	8006780 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000678:	463b      	mov	r3, r7
 800067a:	2200      	movs	r2, #0
 800067c:	601a      	str	r2, [r3, #0]
 800067e:	605a      	str	r2, [r3, #4]
 8000680:	609a      	str	r2, [r3, #8]
 8000682:	60da      	str	r2, [r3, #12]
 8000684:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000686:	f44f 7000 	mov.w	r0, #512	; 0x200
 800068a:	f000 fead 	bl	80013e8 <HAL_PWREx_ControlVoltageScaling>
 800068e:	4603      	mov	r3, r0
 8000690:	2b00      	cmp	r3, #0
 8000692:	d001      	beq.n	8000698 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000694:	f000 fa20 	bl	8000ad8 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000698:	2310      	movs	r3, #16
 800069a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800069c:	2301      	movs	r3, #1
 800069e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80006a0:	2300      	movs	r3, #0
 80006a2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_8;
 80006a4:	2380      	movs	r3, #128	; 0x80
 80006a6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006a8:	2300      	movs	r3, #0
 80006aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006ac:	f107 0314 	add.w	r3, r7, #20
 80006b0:	4618      	mov	r0, r3
 80006b2:	f000 ff4d 	bl	8001550 <HAL_RCC_OscConfig>
 80006b6:	4603      	mov	r3, r0
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d001      	beq.n	80006c0 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 80006bc:	f000 fa0c 	bl	8000ad8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006c0:	230f      	movs	r3, #15
 80006c2:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80006c4:	2300      	movs	r3, #0
 80006c6:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006c8:	2300      	movs	r3, #0
 80006ca:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80006d0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006d2:	2300      	movs	r3, #0
 80006d4:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006d6:	463b      	mov	r3, r7
 80006d8:	2100      	movs	r1, #0
 80006da:	4618      	mov	r0, r3
 80006dc:	f001 fb52 	bl	8001d84 <HAL_RCC_ClockConfig>
 80006e0:	4603      	mov	r3, r0
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d001      	beq.n	80006ea <SystemClock_Config+0x86>
  {
    Error_Handler();
 80006e6:	f000 f9f7 	bl	8000ad8 <Error_Handler>
  }
}
 80006ea:	bf00      	nop
 80006ec:	3758      	adds	r7, #88	; 0x58
 80006ee:	46bd      	mov	sp, r7
 80006f0:	bd80      	pop	{r7, pc}
	...

080006f4 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80006f8:	4b22      	ldr	r3, [pc, #136]	; (8000784 <MX_LPUART1_UART_Init+0x90>)
 80006fa:	4a23      	ldr	r2, [pc, #140]	; (8000788 <MX_LPUART1_UART_Init+0x94>)
 80006fc:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 80006fe:	4b21      	ldr	r3, [pc, #132]	; (8000784 <MX_LPUART1_UART_Init+0x90>)
 8000700:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000704:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000706:	4b1f      	ldr	r3, [pc, #124]	; (8000784 <MX_LPUART1_UART_Init+0x90>)
 8000708:	2200      	movs	r2, #0
 800070a:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 800070c:	4b1d      	ldr	r3, [pc, #116]	; (8000784 <MX_LPUART1_UART_Init+0x90>)
 800070e:	2200      	movs	r2, #0
 8000710:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000712:	4b1c      	ldr	r3, [pc, #112]	; (8000784 <MX_LPUART1_UART_Init+0x90>)
 8000714:	2200      	movs	r2, #0
 8000716:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000718:	4b1a      	ldr	r3, [pc, #104]	; (8000784 <MX_LPUART1_UART_Init+0x90>)
 800071a:	220c      	movs	r2, #12
 800071c:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800071e:	4b19      	ldr	r3, [pc, #100]	; (8000784 <MX_LPUART1_UART_Init+0x90>)
 8000720:	2200      	movs	r2, #0
 8000722:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000724:	4b17      	ldr	r3, [pc, #92]	; (8000784 <MX_LPUART1_UART_Init+0x90>)
 8000726:	2200      	movs	r2, #0
 8000728:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800072a:	4b16      	ldr	r3, [pc, #88]	; (8000784 <MX_LPUART1_UART_Init+0x90>)
 800072c:	2200      	movs	r2, #0
 800072e:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000730:	4b14      	ldr	r3, [pc, #80]	; (8000784 <MX_LPUART1_UART_Init+0x90>)
 8000732:	2200      	movs	r2, #0
 8000734:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8000736:	4b13      	ldr	r3, [pc, #76]	; (8000784 <MX_LPUART1_UART_Init+0x90>)
 8000738:	2200      	movs	r2, #0
 800073a:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800073c:	4811      	ldr	r0, [pc, #68]	; (8000784 <MX_LPUART1_UART_Init+0x90>)
 800073e:	f002 fddd 	bl	80032fc <HAL_UART_Init>
 8000742:	4603      	mov	r3, r0
 8000744:	2b00      	cmp	r3, #0
 8000746:	d001      	beq.n	800074c <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 8000748:	f000 f9c6 	bl	8000ad8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800074c:	2100      	movs	r1, #0
 800074e:	480d      	ldr	r0, [pc, #52]	; (8000784 <MX_LPUART1_UART_Init+0x90>)
 8000750:	f003 fc02 	bl	8003f58 <HAL_UARTEx_SetTxFifoThreshold>
 8000754:	4603      	mov	r3, r0
 8000756:	2b00      	cmp	r3, #0
 8000758:	d001      	beq.n	800075e <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 800075a:	f000 f9bd 	bl	8000ad8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800075e:	2100      	movs	r1, #0
 8000760:	4808      	ldr	r0, [pc, #32]	; (8000784 <MX_LPUART1_UART_Init+0x90>)
 8000762:	f003 fc37 	bl	8003fd4 <HAL_UARTEx_SetRxFifoThreshold>
 8000766:	4603      	mov	r3, r0
 8000768:	2b00      	cmp	r3, #0
 800076a:	d001      	beq.n	8000770 <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 800076c:	f000 f9b4 	bl	8000ad8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000770:	4804      	ldr	r0, [pc, #16]	; (8000784 <MX_LPUART1_UART_Init+0x90>)
 8000772:	f003 fbb8 	bl	8003ee6 <HAL_UARTEx_DisableFifoMode>
 8000776:	4603      	mov	r3, r0
 8000778:	2b00      	cmp	r3, #0
 800077a:	d001      	beq.n	8000780 <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 800077c:	f000 f9ac 	bl	8000ad8 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000780:	bf00      	nop
 8000782:	bd80      	pop	{r7, pc}
 8000784:	20000080 	.word	0x20000080
 8000788:	40008000 	.word	0x40008000

0800078c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b08c      	sub	sp, #48	; 0x30
 8000790:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000792:	f107 031c 	add.w	r3, r7, #28
 8000796:	2200      	movs	r2, #0
 8000798:	601a      	str	r2, [r3, #0]
 800079a:	605a      	str	r2, [r3, #4]
 800079c:	609a      	str	r2, [r3, #8]
 800079e:	60da      	str	r2, [r3, #12]
 80007a0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007a2:	4b6a      	ldr	r3, [pc, #424]	; (800094c <MX_GPIO_Init+0x1c0>)
 80007a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007a6:	4a69      	ldr	r2, [pc, #420]	; (800094c <MX_GPIO_Init+0x1c0>)
 80007a8:	f043 0304 	orr.w	r3, r3, #4
 80007ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007ae:	4b67      	ldr	r3, [pc, #412]	; (800094c <MX_GPIO_Init+0x1c0>)
 80007b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007b2:	f003 0304 	and.w	r3, r3, #4
 80007b6:	61bb      	str	r3, [r7, #24]
 80007b8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007ba:	4b64      	ldr	r3, [pc, #400]	; (800094c <MX_GPIO_Init+0x1c0>)
 80007bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007be:	4a63      	ldr	r2, [pc, #396]	; (800094c <MX_GPIO_Init+0x1c0>)
 80007c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007c6:	4b61      	ldr	r3, [pc, #388]	; (800094c <MX_GPIO_Init+0x1c0>)
 80007c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007ce:	617b      	str	r3, [r7, #20]
 80007d0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007d2:	4b5e      	ldr	r3, [pc, #376]	; (800094c <MX_GPIO_Init+0x1c0>)
 80007d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007d6:	4a5d      	ldr	r2, [pc, #372]	; (800094c <MX_GPIO_Init+0x1c0>)
 80007d8:	f043 0302 	orr.w	r3, r3, #2
 80007dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007de:	4b5b      	ldr	r3, [pc, #364]	; (800094c <MX_GPIO_Init+0x1c0>)
 80007e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007e2:	f003 0302 	and.w	r3, r3, #2
 80007e6:	613b      	str	r3, [r7, #16]
 80007e8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007ea:	4b58      	ldr	r3, [pc, #352]	; (800094c <MX_GPIO_Init+0x1c0>)
 80007ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007ee:	4a57      	ldr	r2, [pc, #348]	; (800094c <MX_GPIO_Init+0x1c0>)
 80007f0:	f043 0308 	orr.w	r3, r3, #8
 80007f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007f6:	4b55      	ldr	r3, [pc, #340]	; (800094c <MX_GPIO_Init+0x1c0>)
 80007f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007fa:	f003 0308 	and.w	r3, r3, #8
 80007fe:	60fb      	str	r3, [r7, #12]
 8000800:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000802:	4b52      	ldr	r3, [pc, #328]	; (800094c <MX_GPIO_Init+0x1c0>)
 8000804:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000806:	4a51      	ldr	r2, [pc, #324]	; (800094c <MX_GPIO_Init+0x1c0>)
 8000808:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800080c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800080e:	4b4f      	ldr	r3, [pc, #316]	; (800094c <MX_GPIO_Init+0x1c0>)
 8000810:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000812:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000816:	60bb      	str	r3, [r7, #8]
 8000818:	68bb      	ldr	r3, [r7, #8]
  HAL_PWREx_EnableVddIO2();
 800081a:	f000 fe89 	bl	8001530 <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800081e:	4b4b      	ldr	r3, [pc, #300]	; (800094c <MX_GPIO_Init+0x1c0>)
 8000820:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000822:	4a4a      	ldr	r2, [pc, #296]	; (800094c <MX_GPIO_Init+0x1c0>)
 8000824:	f043 0301 	orr.w	r3, r3, #1
 8000828:	64d3      	str	r3, [r2, #76]	; 0x4c
 800082a:	4b48      	ldr	r3, [pc, #288]	; (800094c <MX_GPIO_Init+0x1c0>)
 800082c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800082e:	f003 0301 	and.w	r3, r3, #1
 8000832:	607b      	str	r3, [r7, #4]
 8000834:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000836:	2200      	movs	r2, #0
 8000838:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 800083c:	4844      	ldr	r0, [pc, #272]	; (8000950 <MX_GPIO_Init+0x1c4>)
 800083e:	f000 fd81 	bl	8001344 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000842:	2200      	movs	r2, #0
 8000844:	2140      	movs	r1, #64	; 0x40
 8000846:	4843      	ldr	r0, [pc, #268]	; (8000954 <MX_GPIO_Init+0x1c8>)
 8000848:	f000 fd7c 	bl	8001344 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 800084c:	2200      	movs	r2, #0
 800084e:	2180      	movs	r1, #128	; 0x80
 8000850:	4841      	ldr	r0, [pc, #260]	; (8000958 <MX_GPIO_Init+0x1cc>)
 8000852:	f000 fd77 	bl	8001344 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000856:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800085a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800085c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000860:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000862:	2300      	movs	r3, #0
 8000864:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000866:	f107 031c 	add.w	r3, r7, #28
 800086a:	4619      	mov	r1, r3
 800086c:	483a      	ldr	r0, [pc, #232]	; (8000958 <MX_GPIO_Init+0x1cc>)
 800086e:	f000 fbd7 	bl	8001020 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 8000872:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 8000876:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000878:	2301      	movs	r3, #1
 800087a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087c:	2300      	movs	r3, #0
 800087e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000880:	2300      	movs	r3, #0
 8000882:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000884:	f107 031c 	add.w	r3, r7, #28
 8000888:	4619      	mov	r1, r3
 800088a:	4831      	ldr	r0, [pc, #196]	; (8000950 <MX_GPIO_Init+0x1c4>)
 800088c:	f000 fbc8 	bl	8001020 <HAL_GPIO_Init>

  /*Configure GPIO pins : STLK_RX_Pin STLK_TX_Pin */
  GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000890:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000894:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000896:	2302      	movs	r3, #2
 8000898:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089a:	2300      	movs	r3, #0
 800089c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800089e:	2303      	movs	r3, #3
 80008a0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80008a2:	2307      	movs	r3, #7
 80008a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008a6:	f107 031c 	add.w	r3, r7, #28
 80008aa:	4619      	mov	r1, r3
 80008ac:	482b      	ldr	r0, [pc, #172]	; (800095c <MX_GPIO_Init+0x1d0>)
 80008ae:	f000 fbb7 	bl	8001020 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80008b2:	2320      	movs	r3, #32
 80008b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008b6:	2300      	movs	r3, #0
 80008b8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ba:	2300      	movs	r3, #0
 80008bc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80008be:	f107 031c 	add.w	r3, r7, #28
 80008c2:	4619      	mov	r1, r3
 80008c4:	4823      	ldr	r0, [pc, #140]	; (8000954 <MX_GPIO_Init+0x1c8>)
 80008c6:	f000 fbab 	bl	8001020 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80008ca:	2340      	movs	r3, #64	; 0x40
 80008cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ce:	2301      	movs	r3, #1
 80008d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d2:	2300      	movs	r3, #0
 80008d4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d6:	2300      	movs	r3, #0
 80008d8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80008da:	f107 031c 	add.w	r3, r7, #28
 80008de:	4619      	mov	r1, r3
 80008e0:	481c      	ldr	r0, [pc, #112]	; (8000954 <MX_GPIO_Init+0x1c8>)
 80008e2:	f000 fb9d 	bl	8001020 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD1_Pin */
  GPIO_InitStruct.Pin = LD1_Pin;
 80008e6:	2380      	movs	r3, #128	; 0x80
 80008e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ea:	2301      	movs	r3, #1
 80008ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ee:	2300      	movs	r3, #0
 80008f0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f2:	2300      	movs	r3, #0
 80008f4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD1_GPIO_Port, &GPIO_InitStruct);
 80008f6:	f107 031c 	add.w	r3, r7, #28
 80008fa:	4619      	mov	r1, r3
 80008fc:	4816      	ldr	r0, [pc, #88]	; (8000958 <MX_GPIO_Init+0x1cc>)
 80008fe:	f000 fb8f 	bl	8001020 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000902:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000906:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000908:	2302      	movs	r3, #2
 800090a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090c:	2300      	movs	r3, #0
 800090e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000910:	2303      	movs	r3, #3
 8000912:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000914:	230a      	movs	r3, #10
 8000916:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000918:	f107 031c 	add.w	r3, r7, #28
 800091c:	4619      	mov	r1, r3
 800091e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000922:	f000 fb7d 	bl	8001020 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000926:	f44f 7300 	mov.w	r3, #512	; 0x200
 800092a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800092c:	2300      	movs	r3, #0
 800092e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000930:	2300      	movs	r3, #0
 8000932:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000934:	f107 031c 	add.w	r3, r7, #28
 8000938:	4619      	mov	r1, r3
 800093a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800093e:	f000 fb6f 	bl	8001020 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000942:	bf00      	nop
 8000944:	3730      	adds	r7, #48	; 0x30
 8000946:	46bd      	mov	sp, r7
 8000948:	bd80      	pop	{r7, pc}
 800094a:	bf00      	nop
 800094c:	40021000 	.word	0x40021000
 8000950:	48000400 	.word	0x48000400
 8000954:	48001800 	.word	0x48001800
 8000958:	48000800 	.word	0x48000800
 800095c:	48000c00 	.word	0x48000c00

08000960 <Sender_HPT_Task>:

/* USER CODE BEGIN 4 */
void Sender_HPT_Task(void * argument)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b084      	sub	sp, #16
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
	my_struct *ptr;
	while(1)
	{
		ptr = pvPortMalloc(sizeof(my_struct));
 8000968:	200c      	movs	r0, #12
 800096a:	f005 fd1d 	bl	80063a8 <pvPortMalloc>
 800096e:	4603      	mov	r3, r0
 8000970:	60fb      	str	r3, [r7, #12]

		ptr->num = index1++;
 8000972:	4b11      	ldr	r3, [pc, #68]	; (80009b8 <Sender_HPT_Task+0x58>)
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	1c5a      	adds	r2, r3, #1
 8000978:	490f      	ldr	r1, [pc, #60]	; (80009b8 <Sender_HPT_Task+0x58>)
 800097a:	600a      	str	r2, [r1, #0]
 800097c:	68fa      	ldr	r2, [r7, #12]
 800097e:	6053      	str	r3, [r2, #4]
		ptr->str = "Higher_pripority task";
 8000980:	68fb      	ldr	r3, [r7, #12]
 8000982:	4a0e      	ldr	r2, [pc, #56]	; (80009bc <Sender_HPT_Task+0x5c>)
 8000984:	601a      	str	r2, [r3, #0]
		ptr->value = 0x1234;
 8000986:	68fb      	ldr	r3, [r7, #12]
 8000988:	f241 2234 	movw	r2, #4660	; 0x1234
 800098c:	811a      	strh	r2, [r3, #8]

		if(xQueueSend(st_queue_handler,&ptr,10) == pdPASS){
 800098e:	4b0c      	ldr	r3, [pc, #48]	; (80009c0 <Sender_HPT_Task+0x60>)
 8000990:	6818      	ldr	r0, [r3, #0]
 8000992:	f107 010c 	add.w	r1, r7, #12
 8000996:	2300      	movs	r3, #0
 8000998:	220a      	movs	r2, #10
 800099a:	f003 fd35 	bl	8004408 <xQueueGenericSend>
 800099e:	4603      	mov	r3, r0
 80009a0:	2b01      	cmp	r3, #1
 80009a2:	d103      	bne.n	80009ac <Sender_HPT_Task+0x4c>
			HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 80009a4:	2180      	movs	r1, #128	; 0x80
 80009a6:	4807      	ldr	r0, [pc, #28]	; (80009c4 <Sender_HPT_Task+0x64>)
 80009a8:	f000 fce4 	bl	8001374 <HAL_GPIO_TogglePin>
		}
		vTaskDelay(pdMS_TO_TICKS(2000));
 80009ac:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80009b0:	f004 f9aa 	bl	8004d08 <vTaskDelay>
		ptr = pvPortMalloc(sizeof(my_struct));
 80009b4:	e7d8      	b.n	8000968 <Sender_HPT_Task+0x8>
 80009b6:	bf00      	nop
 80009b8:	20000124 	.word	0x20000124
 80009bc:	080070d8 	.word	0x080070d8
 80009c0:	20000114 	.word	0x20000114
 80009c4:	48000800 	.word	0x48000800

080009c8 <Sender_LPT_Task>:

	}
}
void Sender_LPT_Task(void *argument)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b084      	sub	sp, #16
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]
	my_struct *ptr;
	while(1)
	{
		ptr = pvPortMalloc(sizeof(my_struct));
 80009d0:	200c      	movs	r0, #12
 80009d2:	f005 fce9 	bl	80063a8 <pvPortMalloc>
 80009d6:	4603      	mov	r3, r0
 80009d8:	60fb      	str	r3, [r7, #12]

		ptr->num = index2++;
 80009da:	4b11      	ldr	r3, [pc, #68]	; (8000a20 <Sender_LPT_Task+0x58>)
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	1c5a      	adds	r2, r3, #1
 80009e0:	490f      	ldr	r1, [pc, #60]	; (8000a20 <Sender_LPT_Task+0x58>)
 80009e2:	600a      	str	r2, [r1, #0]
 80009e4:	68fa      	ldr	r2, [r7, #12]
 80009e6:	6053      	str	r3, [r2, #4]
		ptr->str = "Lower_pripority task";
 80009e8:	68fb      	ldr	r3, [r7, #12]
 80009ea:	4a0e      	ldr	r2, [pc, #56]	; (8000a24 <Sender_LPT_Task+0x5c>)
 80009ec:	601a      	str	r2, [r3, #0]
		ptr->value = 0x2345;
 80009ee:	68fb      	ldr	r3, [r7, #12]
 80009f0:	f242 3245 	movw	r2, #9029	; 0x2345
 80009f4:	811a      	strh	r2, [r3, #8]

		if(xQueueSend(st_queue_handler,&ptr,0) == pdPASS){
 80009f6:	4b0c      	ldr	r3, [pc, #48]	; (8000a28 <Sender_LPT_Task+0x60>)
 80009f8:	6818      	ldr	r0, [r3, #0]
 80009fa:	f107 010c 	add.w	r1, r7, #12
 80009fe:	2300      	movs	r3, #0
 8000a00:	2200      	movs	r2, #0
 8000a02:	f003 fd01 	bl	8004408 <xQueueGenericSend>
 8000a06:	4603      	mov	r3, r0
 8000a08:	2b01      	cmp	r3, #1
 8000a0a:	d103      	bne.n	8000a14 <Sender_LPT_Task+0x4c>
			HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000a0c:	2180      	movs	r1, #128	; 0x80
 8000a0e:	4807      	ldr	r0, [pc, #28]	; (8000a2c <Sender_LPT_Task+0x64>)
 8000a10:	f000 fcb0 	bl	8001374 <HAL_GPIO_TogglePin>
		}

		vTaskDelay(pdMS_TO_TICKS(2000));
 8000a14:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000a18:	f004 f976 	bl	8004d08 <vTaskDelay>
		ptr = pvPortMalloc(sizeof(my_struct));
 8000a1c:	e7d8      	b.n	80009d0 <Sender_LPT_Task+0x8>
 8000a1e:	bf00      	nop
 8000a20:	20000128 	.word	0x20000128
 8000a24:	080070f0 	.word	0x080070f0
 8000a28:	20000114 	.word	0x20000114
 8000a2c:	48000400 	.word	0x48000400

08000a30 <Receiver_Task>:
	}

}
void Receiver_Task(void *argument)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b088      	sub	sp, #32
 8000a34:	af02      	add	r7, sp, #8
 8000a36:	6078      	str	r0, [r7, #4]
	my_struct *rptr;
	char *lptr;

	while(1)
	{
		if(xQueueReceive(st_queue_handler, &rptr, 100) == pdPASS){
 8000a38:	4b1a      	ldr	r3, [pc, #104]	; (8000aa4 <Receiver_Task+0x74>)
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	f107 010c 	add.w	r1, r7, #12
 8000a40:	2264      	movs	r2, #100	; 0x64
 8000a42:	4618      	mov	r0, r3
 8000a44:	f003 fdde 	bl	8004604 <xQueueReceive>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	2b01      	cmp	r3, #1
 8000a4c:	d120      	bne.n	8000a90 <Receiver_Task+0x60>

			lptr = pvPortMalloc(150*sizeof(char));
 8000a4e:	2096      	movs	r0, #150	; 0x96
 8000a50:	f005 fcaa 	bl	80063a8 <pvPortMalloc>
 8000a54:	6178      	str	r0, [r7, #20]
			int len = sprintf(lptr,"string is = %s number is %d value is %0x\n\r",rptr->str,rptr->num,rptr->value);
 8000a56:	68fb      	ldr	r3, [r7, #12]
 8000a58:	681a      	ldr	r2, [r3, #0]
 8000a5a:	68fb      	ldr	r3, [r7, #12]
 8000a5c:	6859      	ldr	r1, [r3, #4]
 8000a5e:	68fb      	ldr	r3, [r7, #12]
 8000a60:	891b      	ldrh	r3, [r3, #8]
 8000a62:	9300      	str	r3, [sp, #0]
 8000a64:	460b      	mov	r3, r1
 8000a66:	4910      	ldr	r1, [pc, #64]	; (8000aa8 <Receiver_Task+0x78>)
 8000a68:	6978      	ldr	r0, [r7, #20]
 8000a6a:	f005 fe69 	bl	8006740 <siprintf>
 8000a6e:	6138      	str	r0, [r7, #16]
			HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8000a70:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a74:	480d      	ldr	r0, [pc, #52]	; (8000aac <Receiver_Task+0x7c>)
 8000a76:	f000 fc7d 	bl	8001374 <HAL_GPIO_TogglePin>
			HAL_UART_Transmit(&hlpuart1, (uint8_t*)lptr, len, 1000);
 8000a7a:	693b      	ldr	r3, [r7, #16]
 8000a7c:	b29a      	uxth	r2, r3
 8000a7e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a82:	6979      	ldr	r1, [r7, #20]
 8000a84:	480a      	ldr	r0, [pc, #40]	; (8000ab0 <Receiver_Task+0x80>)
 8000a86:	f002 fc89 	bl	800339c <HAL_UART_Transmit>
			vPortFree(lptr);
 8000a8a:	6978      	ldr	r0, [r7, #20]
 8000a8c:	f005 fd46 	bl	800651c <vPortFree>
		}
		vPortFree(rptr);
 8000a90:	68fb      	ldr	r3, [r7, #12]
 8000a92:	4618      	mov	r0, r3
 8000a94:	f005 fd42 	bl	800651c <vPortFree>
		vTaskDelay(pdMS_TO_TICKS(1000));
 8000a98:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a9c:	f004 f934 	bl	8004d08 <vTaskDelay>
		if(xQueueReceive(st_queue_handler, &rptr, 100) == pdPASS){
 8000aa0:	e7ca      	b.n	8000a38 <Receiver_Task+0x8>
 8000aa2:	bf00      	nop
 8000aa4:	20000114 	.word	0x20000114
 8000aa8:	08007108 	.word	0x08007108
 8000aac:	48000400 	.word	0x48000400
 8000ab0:	20000080 	.word	0x20000080

08000ab4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b082      	sub	sp, #8
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	4a04      	ldr	r2, [pc, #16]	; (8000ad4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000ac2:	4293      	cmp	r3, r2
 8000ac4:	d101      	bne.n	8000aca <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000ac6:	f000 f9a9 	bl	8000e1c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000aca:	bf00      	nop
 8000acc:	3708      	adds	r7, #8
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bd80      	pop	{r7, pc}
 8000ad2:	bf00      	nop
 8000ad4:	40012c00 	.word	0x40012c00

08000ad8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000adc:	b672      	cpsid	i
}
 8000ade:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ae0:	e7fe      	b.n	8000ae0 <Error_Handler+0x8>
	...

08000ae4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	b083      	sub	sp, #12
 8000ae8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000aea:	4b0f      	ldr	r3, [pc, #60]	; (8000b28 <HAL_MspInit+0x44>)
 8000aec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000aee:	4a0e      	ldr	r2, [pc, #56]	; (8000b28 <HAL_MspInit+0x44>)
 8000af0:	f043 0301 	orr.w	r3, r3, #1
 8000af4:	6613      	str	r3, [r2, #96]	; 0x60
 8000af6:	4b0c      	ldr	r3, [pc, #48]	; (8000b28 <HAL_MspInit+0x44>)
 8000af8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000afa:	f003 0301 	and.w	r3, r3, #1
 8000afe:	607b      	str	r3, [r7, #4]
 8000b00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b02:	4b09      	ldr	r3, [pc, #36]	; (8000b28 <HAL_MspInit+0x44>)
 8000b04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b06:	4a08      	ldr	r2, [pc, #32]	; (8000b28 <HAL_MspInit+0x44>)
 8000b08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b0c:	6593      	str	r3, [r2, #88]	; 0x58
 8000b0e:	4b06      	ldr	r3, [pc, #24]	; (8000b28 <HAL_MspInit+0x44>)
 8000b10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b16:	603b      	str	r3, [r7, #0]
 8000b18:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b1a:	bf00      	nop
 8000b1c:	370c      	adds	r7, #12
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop
 8000b28:	40021000 	.word	0x40021000

08000b2c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b0ae      	sub	sp, #184	; 0xb8
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b34:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000b38:	2200      	movs	r2, #0
 8000b3a:	601a      	str	r2, [r3, #0]
 8000b3c:	605a      	str	r2, [r3, #4]
 8000b3e:	609a      	str	r2, [r3, #8]
 8000b40:	60da      	str	r2, [r3, #12]
 8000b42:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b44:	f107 0310 	add.w	r3, r7, #16
 8000b48:	2294      	movs	r2, #148	; 0x94
 8000b4a:	2100      	movs	r1, #0
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	f005 fe17 	bl	8006780 <memset>
  if(huart->Instance==LPUART1)
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	4a22      	ldr	r2, [pc, #136]	; (8000be0 <HAL_UART_MspInit+0xb4>)
 8000b58:	4293      	cmp	r3, r2
 8000b5a:	d13d      	bne.n	8000bd8 <HAL_UART_MspInit+0xac>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000b5c:	2320      	movs	r3, #32
 8000b5e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000b60:	2300      	movs	r3, #0
 8000b62:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b64:	f107 0310 	add.w	r3, r7, #16
 8000b68:	4618      	mov	r0, r3
 8000b6a:	f001 fbfb 	bl	8002364 <HAL_RCCEx_PeriphCLKConfig>
 8000b6e:	4603      	mov	r3, r0
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d001      	beq.n	8000b78 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000b74:	f7ff ffb0 	bl	8000ad8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000b78:	4b1a      	ldr	r3, [pc, #104]	; (8000be4 <HAL_UART_MspInit+0xb8>)
 8000b7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000b7c:	4a19      	ldr	r2, [pc, #100]	; (8000be4 <HAL_UART_MspInit+0xb8>)
 8000b7e:	f043 0301 	orr.w	r3, r3, #1
 8000b82:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000b84:	4b17      	ldr	r3, [pc, #92]	; (8000be4 <HAL_UART_MspInit+0xb8>)
 8000b86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000b88:	f003 0301 	and.w	r3, r3, #1
 8000b8c:	60fb      	str	r3, [r7, #12]
 8000b8e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b90:	4b14      	ldr	r3, [pc, #80]	; (8000be4 <HAL_UART_MspInit+0xb8>)
 8000b92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b94:	4a13      	ldr	r2, [pc, #76]	; (8000be4 <HAL_UART_MspInit+0xb8>)
 8000b96:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b9a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b9c:	4b11      	ldr	r3, [pc, #68]	; (8000be4 <HAL_UART_MspInit+0xb8>)
 8000b9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ba0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ba4:	60bb      	str	r3, [r7, #8]
 8000ba6:	68bb      	ldr	r3, [r7, #8]
    HAL_PWREx_EnableVddIO2();
 8000ba8:	f000 fcc2 	bl	8001530 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_TX_Pin|STLINK_RX_Pin;
 8000bac:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000bb0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bb4:	2302      	movs	r3, #2
 8000bb6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bc0:	2303      	movs	r3, #3
 8000bc2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8000bc6:	2308      	movs	r3, #8
 8000bc8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000bcc:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000bd0:	4619      	mov	r1, r3
 8000bd2:	4805      	ldr	r0, [pc, #20]	; (8000be8 <HAL_UART_MspInit+0xbc>)
 8000bd4:	f000 fa24 	bl	8001020 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8000bd8:	bf00      	nop
 8000bda:	37b8      	adds	r7, #184	; 0xb8
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	bd80      	pop	{r7, pc}
 8000be0:	40008000 	.word	0x40008000
 8000be4:	40021000 	.word	0x40021000
 8000be8:	48001800 	.word	0x48001800

08000bec <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b08c      	sub	sp, #48	; 0x30
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000bfa:	4b2e      	ldr	r3, [pc, #184]	; (8000cb4 <HAL_InitTick+0xc8>)
 8000bfc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000bfe:	4a2d      	ldr	r2, [pc, #180]	; (8000cb4 <HAL_InitTick+0xc8>)
 8000c00:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000c04:	6613      	str	r3, [r2, #96]	; 0x60
 8000c06:	4b2b      	ldr	r3, [pc, #172]	; (8000cb4 <HAL_InitTick+0xc8>)
 8000c08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c0a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000c0e:	60bb      	str	r3, [r7, #8]
 8000c10:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000c12:	f107 020c 	add.w	r2, r7, #12
 8000c16:	f107 0310 	add.w	r3, r7, #16
 8000c1a:	4611      	mov	r1, r2
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	f001 faaf 	bl	8002180 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000c22:	f001 fa97 	bl	8002154 <HAL_RCC_GetPCLK2Freq>
 8000c26:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000c28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c2a:	4a23      	ldr	r2, [pc, #140]	; (8000cb8 <HAL_InitTick+0xcc>)
 8000c2c:	fba2 2303 	umull	r2, r3, r2, r3
 8000c30:	0c9b      	lsrs	r3, r3, #18
 8000c32:	3b01      	subs	r3, #1
 8000c34:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000c36:	4b21      	ldr	r3, [pc, #132]	; (8000cbc <HAL_InitTick+0xd0>)
 8000c38:	4a21      	ldr	r2, [pc, #132]	; (8000cc0 <HAL_InitTick+0xd4>)
 8000c3a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000c3c:	4b1f      	ldr	r3, [pc, #124]	; (8000cbc <HAL_InitTick+0xd0>)
 8000c3e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000c42:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000c44:	4a1d      	ldr	r2, [pc, #116]	; (8000cbc <HAL_InitTick+0xd0>)
 8000c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c48:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000c4a:	4b1c      	ldr	r3, [pc, #112]	; (8000cbc <HAL_InitTick+0xd0>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c50:	4b1a      	ldr	r3, [pc, #104]	; (8000cbc <HAL_InitTick+0xd0>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c56:	4b19      	ldr	r3, [pc, #100]	; (8000cbc <HAL_InitTick+0xd0>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000c5c:	4817      	ldr	r0, [pc, #92]	; (8000cbc <HAL_InitTick+0xd0>)
 8000c5e:	f002 f899 	bl	8002d94 <HAL_TIM_Base_Init>
 8000c62:	4603      	mov	r3, r0
 8000c64:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8000c68:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d11b      	bne.n	8000ca8 <HAL_InitTick+0xbc>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000c70:	4812      	ldr	r0, [pc, #72]	; (8000cbc <HAL_InitTick+0xd0>)
 8000c72:	f002 f8f1 	bl	8002e58 <HAL_TIM_Base_Start_IT>
 8000c76:	4603      	mov	r3, r0
 8000c78:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8000c7c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d111      	bne.n	8000ca8 <HAL_InitTick+0xbc>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000c84:	2019      	movs	r0, #25
 8000c86:	f000 f9bd 	bl	8001004 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	2b0f      	cmp	r3, #15
 8000c8e:	d808      	bhi.n	8000ca2 <HAL_InitTick+0xb6>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 8000c90:	2200      	movs	r2, #0
 8000c92:	6879      	ldr	r1, [r7, #4]
 8000c94:	2019      	movs	r0, #25
 8000c96:	f000 f999 	bl	8000fcc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c9a:	4a0a      	ldr	r2, [pc, #40]	; (8000cc4 <HAL_InitTick+0xd8>)
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	6013      	str	r3, [r2, #0]
 8000ca0:	e002      	b.n	8000ca8 <HAL_InitTick+0xbc>
      }
      else
      {
        status = HAL_ERROR;
 8000ca2:	2301      	movs	r3, #1
 8000ca4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000ca8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000cac:	4618      	mov	r0, r3
 8000cae:	3730      	adds	r7, #48	; 0x30
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	bd80      	pop	{r7, pc}
 8000cb4:	40021000 	.word	0x40021000
 8000cb8:	431bde83 	.word	0x431bde83
 8000cbc:	2000012c 	.word	0x2000012c
 8000cc0:	40012c00 	.word	0x40012c00
 8000cc4:	20000004 	.word	0x20000004

08000cc8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ccc:	e7fe      	b.n	8000ccc <NMI_Handler+0x4>

08000cce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cce:	b480      	push	{r7}
 8000cd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cd2:	e7fe      	b.n	8000cd2 <HardFault_Handler+0x4>

08000cd4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cd8:	e7fe      	b.n	8000cd8 <MemManage_Handler+0x4>

08000cda <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cda:	b480      	push	{r7}
 8000cdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cde:	e7fe      	b.n	8000cde <BusFault_Handler+0x4>

08000ce0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ce4:	e7fe      	b.n	8000ce4 <UsageFault_Handler+0x4>

08000ce6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ce6:	b480      	push	{r7}
 8000ce8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cea:	bf00      	nop
 8000cec:	46bd      	mov	sp, r7
 8000cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf2:	4770      	bx	lr

08000cf4 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000cf8:	4802      	ldr	r0, [pc, #8]	; (8000d04 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8000cfa:	f002 f91d 	bl	8002f38 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000cfe:	bf00      	nop
 8000d00:	bd80      	pop	{r7, pc}
 8000d02:	bf00      	nop
 8000d04:	2000012c 	.word	0x2000012c

08000d08 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b086      	sub	sp, #24
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d10:	4a14      	ldr	r2, [pc, #80]	; (8000d64 <_sbrk+0x5c>)
 8000d12:	4b15      	ldr	r3, [pc, #84]	; (8000d68 <_sbrk+0x60>)
 8000d14:	1ad3      	subs	r3, r2, r3
 8000d16:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d18:	697b      	ldr	r3, [r7, #20]
 8000d1a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d1c:	4b13      	ldr	r3, [pc, #76]	; (8000d6c <_sbrk+0x64>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d102      	bne.n	8000d2a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d24:	4b11      	ldr	r3, [pc, #68]	; (8000d6c <_sbrk+0x64>)
 8000d26:	4a12      	ldr	r2, [pc, #72]	; (8000d70 <_sbrk+0x68>)
 8000d28:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d2a:	4b10      	ldr	r3, [pc, #64]	; (8000d6c <_sbrk+0x64>)
 8000d2c:	681a      	ldr	r2, [r3, #0]
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	4413      	add	r3, r2
 8000d32:	693a      	ldr	r2, [r7, #16]
 8000d34:	429a      	cmp	r2, r3
 8000d36:	d207      	bcs.n	8000d48 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d38:	f005 fd2a 	bl	8006790 <__errno>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	220c      	movs	r2, #12
 8000d40:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d42:	f04f 33ff 	mov.w	r3, #4294967295
 8000d46:	e009      	b.n	8000d5c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d48:	4b08      	ldr	r3, [pc, #32]	; (8000d6c <_sbrk+0x64>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d4e:	4b07      	ldr	r3, [pc, #28]	; (8000d6c <_sbrk+0x64>)
 8000d50:	681a      	ldr	r2, [r3, #0]
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	4413      	add	r3, r2
 8000d56:	4a05      	ldr	r2, [pc, #20]	; (8000d6c <_sbrk+0x64>)
 8000d58:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d5a:	68fb      	ldr	r3, [r7, #12]
}
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	3718      	adds	r7, #24
 8000d60:	46bd      	mov	sp, r7
 8000d62:	bd80      	pop	{r7, pc}
 8000d64:	200a0000 	.word	0x200a0000
 8000d68:	00000400 	.word	0x00000400
 8000d6c:	20000178 	.word	0x20000178
 8000d70:	20007c30 	.word	0x20007c30

08000d74 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000d74:	b480      	push	{r7}
 8000d76:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000d78:	4b06      	ldr	r3, [pc, #24]	; (8000d94 <SystemInit+0x20>)
 8000d7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d7e:	4a05      	ldr	r2, [pc, #20]	; (8000d94 <SystemInit+0x20>)
 8000d80:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d84:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000d88:	bf00      	nop
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d90:	4770      	bx	lr
 8000d92:	bf00      	nop
 8000d94:	e000ed00 	.word	0xe000ed00

08000d98 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000d98:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000dd0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000d9c:	f7ff ffea 	bl	8000d74 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000da0:	480c      	ldr	r0, [pc, #48]	; (8000dd4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000da2:	490d      	ldr	r1, [pc, #52]	; (8000dd8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000da4:	4a0d      	ldr	r2, [pc, #52]	; (8000ddc <LoopForever+0xe>)
  movs r3, #0
 8000da6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000da8:	e002      	b.n	8000db0 <LoopCopyDataInit>

08000daa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000daa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000dac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dae:	3304      	adds	r3, #4

08000db0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000db0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000db2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000db4:	d3f9      	bcc.n	8000daa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000db6:	4a0a      	ldr	r2, [pc, #40]	; (8000de0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000db8:	4c0a      	ldr	r4, [pc, #40]	; (8000de4 <LoopForever+0x16>)
  movs r3, #0
 8000dba:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000dbc:	e001      	b.n	8000dc2 <LoopFillZerobss>

08000dbe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dbe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000dc0:	3204      	adds	r2, #4

08000dc2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dc2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000dc4:	d3fb      	bcc.n	8000dbe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000dc6:	f005 fce9 	bl	800679c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000dca:	f7ff fbe7 	bl	800059c <main>

08000dce <LoopForever>:

LoopForever:
    b LoopForever
 8000dce:	e7fe      	b.n	8000dce <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000dd0:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8000dd4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000dd8:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8000ddc:	080071f8 	.word	0x080071f8
  ldr r2, =_sbss
 8000de0:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8000de4:	20007c2c 	.word	0x20007c2c

08000de8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000de8:	e7fe      	b.n	8000de8 <ADC1_IRQHandler>

08000dea <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dea:	b580      	push	{r7, lr}
 8000dec:	b082      	sub	sp, #8
 8000dee:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000df0:	2300      	movs	r3, #0
 8000df2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000df4:	2003      	movs	r0, #3
 8000df6:	f000 f8de 	bl	8000fb6 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000dfa:	200f      	movs	r0, #15
 8000dfc:	f7ff fef6 	bl	8000bec <HAL_InitTick>
 8000e00:	4603      	mov	r3, r0
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d002      	beq.n	8000e0c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000e06:	2301      	movs	r3, #1
 8000e08:	71fb      	strb	r3, [r7, #7]
 8000e0a:	e001      	b.n	8000e10 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000e0c:	f7ff fe6a 	bl	8000ae4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000e10:	79fb      	ldrb	r3, [r7, #7]
}
 8000e12:	4618      	mov	r0, r3
 8000e14:	3708      	adds	r7, #8
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}
	...

08000e1c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000e20:	4b06      	ldr	r3, [pc, #24]	; (8000e3c <HAL_IncTick+0x20>)
 8000e22:	781b      	ldrb	r3, [r3, #0]
 8000e24:	461a      	mov	r2, r3
 8000e26:	4b06      	ldr	r3, [pc, #24]	; (8000e40 <HAL_IncTick+0x24>)
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	4413      	add	r3, r2
 8000e2c:	4a04      	ldr	r2, [pc, #16]	; (8000e40 <HAL_IncTick+0x24>)
 8000e2e:	6013      	str	r3, [r2, #0]
}
 8000e30:	bf00      	nop
 8000e32:	46bd      	mov	sp, r7
 8000e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e38:	4770      	bx	lr
 8000e3a:	bf00      	nop
 8000e3c:	20000008 	.word	0x20000008
 8000e40:	2000017c 	.word	0x2000017c

08000e44 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e44:	b480      	push	{r7}
 8000e46:	af00      	add	r7, sp, #0
  return uwTick;
 8000e48:	4b03      	ldr	r3, [pc, #12]	; (8000e58 <HAL_GetTick+0x14>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
}
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e54:	4770      	bx	lr
 8000e56:	bf00      	nop
 8000e58:	2000017c 	.word	0x2000017c

08000e5c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	b085      	sub	sp, #20
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	f003 0307 	and.w	r3, r3, #7
 8000e6a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e6c:	4b0c      	ldr	r3, [pc, #48]	; (8000ea0 <__NVIC_SetPriorityGrouping+0x44>)
 8000e6e:	68db      	ldr	r3, [r3, #12]
 8000e70:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e72:	68ba      	ldr	r2, [r7, #8]
 8000e74:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e78:	4013      	ands	r3, r2
 8000e7a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e80:	68bb      	ldr	r3, [r7, #8]
 8000e82:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e84:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e8c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e8e:	4a04      	ldr	r2, [pc, #16]	; (8000ea0 <__NVIC_SetPriorityGrouping+0x44>)
 8000e90:	68bb      	ldr	r3, [r7, #8]
 8000e92:	60d3      	str	r3, [r2, #12]
}
 8000e94:	bf00      	nop
 8000e96:	3714      	adds	r7, #20
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9e:	4770      	bx	lr
 8000ea0:	e000ed00 	.word	0xe000ed00

08000ea4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ea8:	4b04      	ldr	r3, [pc, #16]	; (8000ebc <__NVIC_GetPriorityGrouping+0x18>)
 8000eaa:	68db      	ldr	r3, [r3, #12]
 8000eac:	0a1b      	lsrs	r3, r3, #8
 8000eae:	f003 0307 	and.w	r3, r3, #7
}
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eba:	4770      	bx	lr
 8000ebc:	e000ed00 	.word	0xe000ed00

08000ec0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	b083      	sub	sp, #12
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000eca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	db0b      	blt.n	8000eea <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ed2:	79fb      	ldrb	r3, [r7, #7]
 8000ed4:	f003 021f 	and.w	r2, r3, #31
 8000ed8:	4907      	ldr	r1, [pc, #28]	; (8000ef8 <__NVIC_EnableIRQ+0x38>)
 8000eda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ede:	095b      	lsrs	r3, r3, #5
 8000ee0:	2001      	movs	r0, #1
 8000ee2:	fa00 f202 	lsl.w	r2, r0, r2
 8000ee6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000eea:	bf00      	nop
 8000eec:	370c      	adds	r7, #12
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef4:	4770      	bx	lr
 8000ef6:	bf00      	nop
 8000ef8:	e000e100 	.word	0xe000e100

08000efc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000efc:	b480      	push	{r7}
 8000efe:	b083      	sub	sp, #12
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	4603      	mov	r3, r0
 8000f04:	6039      	str	r1, [r7, #0]
 8000f06:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	db0a      	blt.n	8000f26 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f10:	683b      	ldr	r3, [r7, #0]
 8000f12:	b2da      	uxtb	r2, r3
 8000f14:	490c      	ldr	r1, [pc, #48]	; (8000f48 <__NVIC_SetPriority+0x4c>)
 8000f16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f1a:	0112      	lsls	r2, r2, #4
 8000f1c:	b2d2      	uxtb	r2, r2
 8000f1e:	440b      	add	r3, r1
 8000f20:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f24:	e00a      	b.n	8000f3c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f26:	683b      	ldr	r3, [r7, #0]
 8000f28:	b2da      	uxtb	r2, r3
 8000f2a:	4908      	ldr	r1, [pc, #32]	; (8000f4c <__NVIC_SetPriority+0x50>)
 8000f2c:	79fb      	ldrb	r3, [r7, #7]
 8000f2e:	f003 030f 	and.w	r3, r3, #15
 8000f32:	3b04      	subs	r3, #4
 8000f34:	0112      	lsls	r2, r2, #4
 8000f36:	b2d2      	uxtb	r2, r2
 8000f38:	440b      	add	r3, r1
 8000f3a:	761a      	strb	r2, [r3, #24]
}
 8000f3c:	bf00      	nop
 8000f3e:	370c      	adds	r7, #12
 8000f40:	46bd      	mov	sp, r7
 8000f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f46:	4770      	bx	lr
 8000f48:	e000e100 	.word	0xe000e100
 8000f4c:	e000ed00 	.word	0xe000ed00

08000f50 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f50:	b480      	push	{r7}
 8000f52:	b089      	sub	sp, #36	; 0x24
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	60f8      	str	r0, [r7, #12]
 8000f58:	60b9      	str	r1, [r7, #8]
 8000f5a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	f003 0307 	and.w	r3, r3, #7
 8000f62:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f64:	69fb      	ldr	r3, [r7, #28]
 8000f66:	f1c3 0307 	rsb	r3, r3, #7
 8000f6a:	2b04      	cmp	r3, #4
 8000f6c:	bf28      	it	cs
 8000f6e:	2304      	movcs	r3, #4
 8000f70:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f72:	69fb      	ldr	r3, [r7, #28]
 8000f74:	3304      	adds	r3, #4
 8000f76:	2b06      	cmp	r3, #6
 8000f78:	d902      	bls.n	8000f80 <NVIC_EncodePriority+0x30>
 8000f7a:	69fb      	ldr	r3, [r7, #28]
 8000f7c:	3b03      	subs	r3, #3
 8000f7e:	e000      	b.n	8000f82 <NVIC_EncodePriority+0x32>
 8000f80:	2300      	movs	r3, #0
 8000f82:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f84:	f04f 32ff 	mov.w	r2, #4294967295
 8000f88:	69bb      	ldr	r3, [r7, #24]
 8000f8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f8e:	43da      	mvns	r2, r3
 8000f90:	68bb      	ldr	r3, [r7, #8]
 8000f92:	401a      	ands	r2, r3
 8000f94:	697b      	ldr	r3, [r7, #20]
 8000f96:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f98:	f04f 31ff 	mov.w	r1, #4294967295
 8000f9c:	697b      	ldr	r3, [r7, #20]
 8000f9e:	fa01 f303 	lsl.w	r3, r1, r3
 8000fa2:	43d9      	mvns	r1, r3
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fa8:	4313      	orrs	r3, r2
         );
}
 8000faa:	4618      	mov	r0, r3
 8000fac:	3724      	adds	r7, #36	; 0x24
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb4:	4770      	bx	lr

08000fb6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fb6:	b580      	push	{r7, lr}
 8000fb8:	b082      	sub	sp, #8
 8000fba:	af00      	add	r7, sp, #0
 8000fbc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fbe:	6878      	ldr	r0, [r7, #4]
 8000fc0:	f7ff ff4c 	bl	8000e5c <__NVIC_SetPriorityGrouping>
}
 8000fc4:	bf00      	nop
 8000fc6:	3708      	adds	r7, #8
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bd80      	pop	{r7, pc}

08000fcc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b086      	sub	sp, #24
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	60b9      	str	r1, [r7, #8]
 8000fd6:	607a      	str	r2, [r7, #4]
 8000fd8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000fde:	f7ff ff61 	bl	8000ea4 <__NVIC_GetPriorityGrouping>
 8000fe2:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fe4:	687a      	ldr	r2, [r7, #4]
 8000fe6:	68b9      	ldr	r1, [r7, #8]
 8000fe8:	6978      	ldr	r0, [r7, #20]
 8000fea:	f7ff ffb1 	bl	8000f50 <NVIC_EncodePriority>
 8000fee:	4602      	mov	r2, r0
 8000ff0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ff4:	4611      	mov	r1, r2
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	f7ff ff80 	bl	8000efc <__NVIC_SetPriority>
}
 8000ffc:	bf00      	nop
 8000ffe:	3718      	adds	r7, #24
 8001000:	46bd      	mov	sp, r7
 8001002:	bd80      	pop	{r7, pc}

08001004 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b082      	sub	sp, #8
 8001008:	af00      	add	r7, sp, #0
 800100a:	4603      	mov	r3, r0
 800100c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800100e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001012:	4618      	mov	r0, r3
 8001014:	f7ff ff54 	bl	8000ec0 <__NVIC_EnableIRQ>
}
 8001018:	bf00      	nop
 800101a:	3708      	adds	r7, #8
 800101c:	46bd      	mov	sp, r7
 800101e:	bd80      	pop	{r7, pc}

08001020 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001020:	b480      	push	{r7}
 8001022:	b087      	sub	sp, #28
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
 8001028:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800102a:	2300      	movs	r3, #0
 800102c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800102e:	e166      	b.n	80012fe <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001030:	683b      	ldr	r3, [r7, #0]
 8001032:	681a      	ldr	r2, [r3, #0]
 8001034:	2101      	movs	r1, #1
 8001036:	697b      	ldr	r3, [r7, #20]
 8001038:	fa01 f303 	lsl.w	r3, r1, r3
 800103c:	4013      	ands	r3, r2
 800103e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	2b00      	cmp	r3, #0
 8001044:	f000 8158 	beq.w	80012f8 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001048:	683b      	ldr	r3, [r7, #0]
 800104a:	685b      	ldr	r3, [r3, #4]
 800104c:	f003 0303 	and.w	r3, r3, #3
 8001050:	2b01      	cmp	r3, #1
 8001052:	d005      	beq.n	8001060 <HAL_GPIO_Init+0x40>
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	685b      	ldr	r3, [r3, #4]
 8001058:	f003 0303 	and.w	r3, r3, #3
 800105c:	2b02      	cmp	r3, #2
 800105e:	d130      	bne.n	80010c2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	689b      	ldr	r3, [r3, #8]
 8001064:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001066:	697b      	ldr	r3, [r7, #20]
 8001068:	005b      	lsls	r3, r3, #1
 800106a:	2203      	movs	r2, #3
 800106c:	fa02 f303 	lsl.w	r3, r2, r3
 8001070:	43db      	mvns	r3, r3
 8001072:	693a      	ldr	r2, [r7, #16]
 8001074:	4013      	ands	r3, r2
 8001076:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	68da      	ldr	r2, [r3, #12]
 800107c:	697b      	ldr	r3, [r7, #20]
 800107e:	005b      	lsls	r3, r3, #1
 8001080:	fa02 f303 	lsl.w	r3, r2, r3
 8001084:	693a      	ldr	r2, [r7, #16]
 8001086:	4313      	orrs	r3, r2
 8001088:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	693a      	ldr	r2, [r7, #16]
 800108e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	685b      	ldr	r3, [r3, #4]
 8001094:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001096:	2201      	movs	r2, #1
 8001098:	697b      	ldr	r3, [r7, #20]
 800109a:	fa02 f303 	lsl.w	r3, r2, r3
 800109e:	43db      	mvns	r3, r3
 80010a0:	693a      	ldr	r2, [r7, #16]
 80010a2:	4013      	ands	r3, r2
 80010a4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80010a6:	683b      	ldr	r3, [r7, #0]
 80010a8:	685b      	ldr	r3, [r3, #4]
 80010aa:	091b      	lsrs	r3, r3, #4
 80010ac:	f003 0201 	and.w	r2, r3, #1
 80010b0:	697b      	ldr	r3, [r7, #20]
 80010b2:	fa02 f303 	lsl.w	r3, r2, r3
 80010b6:	693a      	ldr	r2, [r7, #16]
 80010b8:	4313      	orrs	r3, r2
 80010ba:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	693a      	ldr	r2, [r7, #16]
 80010c0:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80010c2:	683b      	ldr	r3, [r7, #0]
 80010c4:	685b      	ldr	r3, [r3, #4]
 80010c6:	f003 0303 	and.w	r3, r3, #3
 80010ca:	2b03      	cmp	r3, #3
 80010cc:	d017      	beq.n	80010fe <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	68db      	ldr	r3, [r3, #12]
 80010d2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80010d4:	697b      	ldr	r3, [r7, #20]
 80010d6:	005b      	lsls	r3, r3, #1
 80010d8:	2203      	movs	r2, #3
 80010da:	fa02 f303 	lsl.w	r3, r2, r3
 80010de:	43db      	mvns	r3, r3
 80010e0:	693a      	ldr	r2, [r7, #16]
 80010e2:	4013      	ands	r3, r2
 80010e4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80010e6:	683b      	ldr	r3, [r7, #0]
 80010e8:	689a      	ldr	r2, [r3, #8]
 80010ea:	697b      	ldr	r3, [r7, #20]
 80010ec:	005b      	lsls	r3, r3, #1
 80010ee:	fa02 f303 	lsl.w	r3, r2, r3
 80010f2:	693a      	ldr	r2, [r7, #16]
 80010f4:	4313      	orrs	r3, r2
 80010f6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	693a      	ldr	r2, [r7, #16]
 80010fc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010fe:	683b      	ldr	r3, [r7, #0]
 8001100:	685b      	ldr	r3, [r3, #4]
 8001102:	f003 0303 	and.w	r3, r3, #3
 8001106:	2b02      	cmp	r3, #2
 8001108:	d123      	bne.n	8001152 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800110a:	697b      	ldr	r3, [r7, #20]
 800110c:	08da      	lsrs	r2, r3, #3
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	3208      	adds	r2, #8
 8001112:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001116:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001118:	697b      	ldr	r3, [r7, #20]
 800111a:	f003 0307 	and.w	r3, r3, #7
 800111e:	009b      	lsls	r3, r3, #2
 8001120:	220f      	movs	r2, #15
 8001122:	fa02 f303 	lsl.w	r3, r2, r3
 8001126:	43db      	mvns	r3, r3
 8001128:	693a      	ldr	r2, [r7, #16]
 800112a:	4013      	ands	r3, r2
 800112c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800112e:	683b      	ldr	r3, [r7, #0]
 8001130:	691a      	ldr	r2, [r3, #16]
 8001132:	697b      	ldr	r3, [r7, #20]
 8001134:	f003 0307 	and.w	r3, r3, #7
 8001138:	009b      	lsls	r3, r3, #2
 800113a:	fa02 f303 	lsl.w	r3, r2, r3
 800113e:	693a      	ldr	r2, [r7, #16]
 8001140:	4313      	orrs	r3, r2
 8001142:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001144:	697b      	ldr	r3, [r7, #20]
 8001146:	08da      	lsrs	r2, r3, #3
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	3208      	adds	r2, #8
 800114c:	6939      	ldr	r1, [r7, #16]
 800114e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001158:	697b      	ldr	r3, [r7, #20]
 800115a:	005b      	lsls	r3, r3, #1
 800115c:	2203      	movs	r2, #3
 800115e:	fa02 f303 	lsl.w	r3, r2, r3
 8001162:	43db      	mvns	r3, r3
 8001164:	693a      	ldr	r2, [r7, #16]
 8001166:	4013      	ands	r3, r2
 8001168:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800116a:	683b      	ldr	r3, [r7, #0]
 800116c:	685b      	ldr	r3, [r3, #4]
 800116e:	f003 0203 	and.w	r2, r3, #3
 8001172:	697b      	ldr	r3, [r7, #20]
 8001174:	005b      	lsls	r3, r3, #1
 8001176:	fa02 f303 	lsl.w	r3, r2, r3
 800117a:	693a      	ldr	r2, [r7, #16]
 800117c:	4313      	orrs	r3, r2
 800117e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	693a      	ldr	r2, [r7, #16]
 8001184:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001186:	683b      	ldr	r3, [r7, #0]
 8001188:	685b      	ldr	r3, [r3, #4]
 800118a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800118e:	2b00      	cmp	r3, #0
 8001190:	f000 80b2 	beq.w	80012f8 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001194:	4b61      	ldr	r3, [pc, #388]	; (800131c <HAL_GPIO_Init+0x2fc>)
 8001196:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001198:	4a60      	ldr	r2, [pc, #384]	; (800131c <HAL_GPIO_Init+0x2fc>)
 800119a:	f043 0301 	orr.w	r3, r3, #1
 800119e:	6613      	str	r3, [r2, #96]	; 0x60
 80011a0:	4b5e      	ldr	r3, [pc, #376]	; (800131c <HAL_GPIO_Init+0x2fc>)
 80011a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011a4:	f003 0301 	and.w	r3, r3, #1
 80011a8:	60bb      	str	r3, [r7, #8]
 80011aa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80011ac:	4a5c      	ldr	r2, [pc, #368]	; (8001320 <HAL_GPIO_Init+0x300>)
 80011ae:	697b      	ldr	r3, [r7, #20]
 80011b0:	089b      	lsrs	r3, r3, #2
 80011b2:	3302      	adds	r3, #2
 80011b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011b8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80011ba:	697b      	ldr	r3, [r7, #20]
 80011bc:	f003 0303 	and.w	r3, r3, #3
 80011c0:	009b      	lsls	r3, r3, #2
 80011c2:	220f      	movs	r2, #15
 80011c4:	fa02 f303 	lsl.w	r3, r2, r3
 80011c8:	43db      	mvns	r3, r3
 80011ca:	693a      	ldr	r2, [r7, #16]
 80011cc:	4013      	ands	r3, r2
 80011ce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80011d6:	d02b      	beq.n	8001230 <HAL_GPIO_Init+0x210>
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	4a52      	ldr	r2, [pc, #328]	; (8001324 <HAL_GPIO_Init+0x304>)
 80011dc:	4293      	cmp	r3, r2
 80011de:	d025      	beq.n	800122c <HAL_GPIO_Init+0x20c>
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	4a51      	ldr	r2, [pc, #324]	; (8001328 <HAL_GPIO_Init+0x308>)
 80011e4:	4293      	cmp	r3, r2
 80011e6:	d01f      	beq.n	8001228 <HAL_GPIO_Init+0x208>
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	4a50      	ldr	r2, [pc, #320]	; (800132c <HAL_GPIO_Init+0x30c>)
 80011ec:	4293      	cmp	r3, r2
 80011ee:	d019      	beq.n	8001224 <HAL_GPIO_Init+0x204>
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	4a4f      	ldr	r2, [pc, #316]	; (8001330 <HAL_GPIO_Init+0x310>)
 80011f4:	4293      	cmp	r3, r2
 80011f6:	d013      	beq.n	8001220 <HAL_GPIO_Init+0x200>
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	4a4e      	ldr	r2, [pc, #312]	; (8001334 <HAL_GPIO_Init+0x314>)
 80011fc:	4293      	cmp	r3, r2
 80011fe:	d00d      	beq.n	800121c <HAL_GPIO_Init+0x1fc>
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	4a4d      	ldr	r2, [pc, #308]	; (8001338 <HAL_GPIO_Init+0x318>)
 8001204:	4293      	cmp	r3, r2
 8001206:	d007      	beq.n	8001218 <HAL_GPIO_Init+0x1f8>
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	4a4c      	ldr	r2, [pc, #304]	; (800133c <HAL_GPIO_Init+0x31c>)
 800120c:	4293      	cmp	r3, r2
 800120e:	d101      	bne.n	8001214 <HAL_GPIO_Init+0x1f4>
 8001210:	2307      	movs	r3, #7
 8001212:	e00e      	b.n	8001232 <HAL_GPIO_Init+0x212>
 8001214:	2308      	movs	r3, #8
 8001216:	e00c      	b.n	8001232 <HAL_GPIO_Init+0x212>
 8001218:	2306      	movs	r3, #6
 800121a:	e00a      	b.n	8001232 <HAL_GPIO_Init+0x212>
 800121c:	2305      	movs	r3, #5
 800121e:	e008      	b.n	8001232 <HAL_GPIO_Init+0x212>
 8001220:	2304      	movs	r3, #4
 8001222:	e006      	b.n	8001232 <HAL_GPIO_Init+0x212>
 8001224:	2303      	movs	r3, #3
 8001226:	e004      	b.n	8001232 <HAL_GPIO_Init+0x212>
 8001228:	2302      	movs	r3, #2
 800122a:	e002      	b.n	8001232 <HAL_GPIO_Init+0x212>
 800122c:	2301      	movs	r3, #1
 800122e:	e000      	b.n	8001232 <HAL_GPIO_Init+0x212>
 8001230:	2300      	movs	r3, #0
 8001232:	697a      	ldr	r2, [r7, #20]
 8001234:	f002 0203 	and.w	r2, r2, #3
 8001238:	0092      	lsls	r2, r2, #2
 800123a:	4093      	lsls	r3, r2
 800123c:	693a      	ldr	r2, [r7, #16]
 800123e:	4313      	orrs	r3, r2
 8001240:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001242:	4937      	ldr	r1, [pc, #220]	; (8001320 <HAL_GPIO_Init+0x300>)
 8001244:	697b      	ldr	r3, [r7, #20]
 8001246:	089b      	lsrs	r3, r3, #2
 8001248:	3302      	adds	r3, #2
 800124a:	693a      	ldr	r2, [r7, #16]
 800124c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001250:	4b3b      	ldr	r3, [pc, #236]	; (8001340 <HAL_GPIO_Init+0x320>)
 8001252:	689b      	ldr	r3, [r3, #8]
 8001254:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	43db      	mvns	r3, r3
 800125a:	693a      	ldr	r2, [r7, #16]
 800125c:	4013      	ands	r3, r2
 800125e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	685b      	ldr	r3, [r3, #4]
 8001264:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001268:	2b00      	cmp	r3, #0
 800126a:	d003      	beq.n	8001274 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 800126c:	693a      	ldr	r2, [r7, #16]
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	4313      	orrs	r3, r2
 8001272:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001274:	4a32      	ldr	r2, [pc, #200]	; (8001340 <HAL_GPIO_Init+0x320>)
 8001276:	693b      	ldr	r3, [r7, #16]
 8001278:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800127a:	4b31      	ldr	r3, [pc, #196]	; (8001340 <HAL_GPIO_Init+0x320>)
 800127c:	68db      	ldr	r3, [r3, #12]
 800127e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	43db      	mvns	r3, r3
 8001284:	693a      	ldr	r2, [r7, #16]
 8001286:	4013      	ands	r3, r2
 8001288:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800128a:	683b      	ldr	r3, [r7, #0]
 800128c:	685b      	ldr	r3, [r3, #4]
 800128e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001292:	2b00      	cmp	r3, #0
 8001294:	d003      	beq.n	800129e <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8001296:	693a      	ldr	r2, [r7, #16]
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	4313      	orrs	r3, r2
 800129c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800129e:	4a28      	ldr	r2, [pc, #160]	; (8001340 <HAL_GPIO_Init+0x320>)
 80012a0:	693b      	ldr	r3, [r7, #16]
 80012a2:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80012a4:	4b26      	ldr	r3, [pc, #152]	; (8001340 <HAL_GPIO_Init+0x320>)
 80012a6:	685b      	ldr	r3, [r3, #4]
 80012a8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	43db      	mvns	r3, r3
 80012ae:	693a      	ldr	r2, [r7, #16]
 80012b0:	4013      	ands	r3, r2
 80012b2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	685b      	ldr	r3, [r3, #4]
 80012b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d003      	beq.n	80012c8 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 80012c0:	693a      	ldr	r2, [r7, #16]
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	4313      	orrs	r3, r2
 80012c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80012c8:	4a1d      	ldr	r2, [pc, #116]	; (8001340 <HAL_GPIO_Init+0x320>)
 80012ca:	693b      	ldr	r3, [r7, #16]
 80012cc:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80012ce:	4b1c      	ldr	r3, [pc, #112]	; (8001340 <HAL_GPIO_Init+0x320>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	43db      	mvns	r3, r3
 80012d8:	693a      	ldr	r2, [r7, #16]
 80012da:	4013      	ands	r3, r2
 80012dc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80012de:	683b      	ldr	r3, [r7, #0]
 80012e0:	685b      	ldr	r3, [r3, #4]
 80012e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d003      	beq.n	80012f2 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 80012ea:	693a      	ldr	r2, [r7, #16]
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	4313      	orrs	r3, r2
 80012f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80012f2:	4a13      	ldr	r2, [pc, #76]	; (8001340 <HAL_GPIO_Init+0x320>)
 80012f4:	693b      	ldr	r3, [r7, #16]
 80012f6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80012f8:	697b      	ldr	r3, [r7, #20]
 80012fa:	3301      	adds	r3, #1
 80012fc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012fe:	683b      	ldr	r3, [r7, #0]
 8001300:	681a      	ldr	r2, [r3, #0]
 8001302:	697b      	ldr	r3, [r7, #20]
 8001304:	fa22 f303 	lsr.w	r3, r2, r3
 8001308:	2b00      	cmp	r3, #0
 800130a:	f47f ae91 	bne.w	8001030 <HAL_GPIO_Init+0x10>
  }
}
 800130e:	bf00      	nop
 8001310:	bf00      	nop
 8001312:	371c      	adds	r7, #28
 8001314:	46bd      	mov	sp, r7
 8001316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131a:	4770      	bx	lr
 800131c:	40021000 	.word	0x40021000
 8001320:	40010000 	.word	0x40010000
 8001324:	48000400 	.word	0x48000400
 8001328:	48000800 	.word	0x48000800
 800132c:	48000c00 	.word	0x48000c00
 8001330:	48001000 	.word	0x48001000
 8001334:	48001400 	.word	0x48001400
 8001338:	48001800 	.word	0x48001800
 800133c:	48001c00 	.word	0x48001c00
 8001340:	40010400 	.word	0x40010400

08001344 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001344:	b480      	push	{r7}
 8001346:	b083      	sub	sp, #12
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
 800134c:	460b      	mov	r3, r1
 800134e:	807b      	strh	r3, [r7, #2]
 8001350:	4613      	mov	r3, r2
 8001352:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001354:	787b      	ldrb	r3, [r7, #1]
 8001356:	2b00      	cmp	r3, #0
 8001358:	d003      	beq.n	8001362 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800135a:	887a      	ldrh	r2, [r7, #2]
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001360:	e002      	b.n	8001368 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001362:	887a      	ldrh	r2, [r7, #2]
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001368:	bf00      	nop
 800136a:	370c      	adds	r7, #12
 800136c:	46bd      	mov	sp, r7
 800136e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001372:	4770      	bx	lr

08001374 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001374:	b480      	push	{r7}
 8001376:	b085      	sub	sp, #20
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
 800137c:	460b      	mov	r3, r1
 800137e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	695b      	ldr	r3, [r3, #20]
 8001384:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001386:	887a      	ldrh	r2, [r7, #2]
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	4013      	ands	r3, r2
 800138c:	041a      	lsls	r2, r3, #16
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	43d9      	mvns	r1, r3
 8001392:	887b      	ldrh	r3, [r7, #2]
 8001394:	400b      	ands	r3, r1
 8001396:	431a      	orrs	r2, r3
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	619a      	str	r2, [r3, #24]
}
 800139c:	bf00      	nop
 800139e:	3714      	adds	r7, #20
 80013a0:	46bd      	mov	sp, r7
 80013a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a6:	4770      	bx	lr

080013a8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80013a8:	b480      	push	{r7}
 80013aa:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80013ac:	4b0d      	ldr	r3, [pc, #52]	; (80013e4 <HAL_PWREx_GetVoltageRange+0x3c>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80013b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80013b8:	d102      	bne.n	80013c0 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 80013ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80013be:	e00b      	b.n	80013d8 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 80013c0:	4b08      	ldr	r3, [pc, #32]	; (80013e4 <HAL_PWREx_GetVoltageRange+0x3c>)
 80013c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80013c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80013ce:	d102      	bne.n	80013d6 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 80013d0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80013d4:	e000      	b.n	80013d8 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 80013d6:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 80013d8:	4618      	mov	r0, r3
 80013da:	46bd      	mov	sp, r7
 80013dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e0:	4770      	bx	lr
 80013e2:	bf00      	nop
 80013e4:	40007000 	.word	0x40007000

080013e8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80013e8:	b480      	push	{r7}
 80013ea:	b085      	sub	sp, #20
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d141      	bne.n	800147a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80013f6:	4b4b      	ldr	r3, [pc, #300]	; (8001524 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80013fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001402:	d131      	bne.n	8001468 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001404:	4b47      	ldr	r3, [pc, #284]	; (8001524 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001406:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800140a:	4a46      	ldr	r2, [pc, #280]	; (8001524 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800140c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001410:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001414:	4b43      	ldr	r3, [pc, #268]	; (8001524 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800141c:	4a41      	ldr	r2, [pc, #260]	; (8001524 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800141e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001422:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8001424:	4b40      	ldr	r3, [pc, #256]	; (8001528 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	2232      	movs	r2, #50	; 0x32
 800142a:	fb02 f303 	mul.w	r3, r2, r3
 800142e:	4a3f      	ldr	r2, [pc, #252]	; (800152c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001430:	fba2 2303 	umull	r2, r3, r2, r3
 8001434:	0c9b      	lsrs	r3, r3, #18
 8001436:	3301      	adds	r3, #1
 8001438:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800143a:	e002      	b.n	8001442 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	3b01      	subs	r3, #1
 8001440:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001442:	4b38      	ldr	r3, [pc, #224]	; (8001524 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001444:	695b      	ldr	r3, [r3, #20]
 8001446:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800144a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800144e:	d102      	bne.n	8001456 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	2b00      	cmp	r3, #0
 8001454:	d1f2      	bne.n	800143c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001456:	4b33      	ldr	r3, [pc, #204]	; (8001524 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001458:	695b      	ldr	r3, [r3, #20]
 800145a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800145e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001462:	d158      	bne.n	8001516 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001464:	2303      	movs	r3, #3
 8001466:	e057      	b.n	8001518 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001468:	4b2e      	ldr	r3, [pc, #184]	; (8001524 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800146a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800146e:	4a2d      	ldr	r2, [pc, #180]	; (8001524 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001470:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001474:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001478:	e04d      	b.n	8001516 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001480:	d141      	bne.n	8001506 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001482:	4b28      	ldr	r3, [pc, #160]	; (8001524 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800148a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800148e:	d131      	bne.n	80014f4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001490:	4b24      	ldr	r3, [pc, #144]	; (8001524 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001492:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001496:	4a23      	ldr	r2, [pc, #140]	; (8001524 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001498:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800149c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80014a0:	4b20      	ldr	r3, [pc, #128]	; (8001524 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80014a8:	4a1e      	ldr	r2, [pc, #120]	; (8001524 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014aa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80014ae:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80014b0:	4b1d      	ldr	r3, [pc, #116]	; (8001528 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	2232      	movs	r2, #50	; 0x32
 80014b6:	fb02 f303 	mul.w	r3, r2, r3
 80014ba:	4a1c      	ldr	r2, [pc, #112]	; (800152c <HAL_PWREx_ControlVoltageScaling+0x144>)
 80014bc:	fba2 2303 	umull	r2, r3, r2, r3
 80014c0:	0c9b      	lsrs	r3, r3, #18
 80014c2:	3301      	adds	r3, #1
 80014c4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80014c6:	e002      	b.n	80014ce <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	3b01      	subs	r3, #1
 80014cc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80014ce:	4b15      	ldr	r3, [pc, #84]	; (8001524 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014d0:	695b      	ldr	r3, [r3, #20]
 80014d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80014da:	d102      	bne.n	80014e2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d1f2      	bne.n	80014c8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80014e2:	4b10      	ldr	r3, [pc, #64]	; (8001524 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014e4:	695b      	ldr	r3, [r3, #20]
 80014e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80014ee:	d112      	bne.n	8001516 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80014f0:	2303      	movs	r3, #3
 80014f2:	e011      	b.n	8001518 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80014f4:	4b0b      	ldr	r3, [pc, #44]	; (8001524 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80014fa:	4a0a      	ldr	r2, [pc, #40]	; (8001524 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001500:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001504:	e007      	b.n	8001516 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001506:	4b07      	ldr	r3, [pc, #28]	; (8001524 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800150e:	4a05      	ldr	r2, [pc, #20]	; (8001524 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001510:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001514:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001516:	2300      	movs	r3, #0
}
 8001518:	4618      	mov	r0, r3
 800151a:	3714      	adds	r7, #20
 800151c:	46bd      	mov	sp, r7
 800151e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001522:	4770      	bx	lr
 8001524:	40007000 	.word	0x40007000
 8001528:	20000000 	.word	0x20000000
 800152c:	431bde83 	.word	0x431bde83

08001530 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8001530:	b480      	push	{r7}
 8001532:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8001534:	4b05      	ldr	r3, [pc, #20]	; (800154c <HAL_PWREx_EnableVddIO2+0x1c>)
 8001536:	685b      	ldr	r3, [r3, #4]
 8001538:	4a04      	ldr	r2, [pc, #16]	; (800154c <HAL_PWREx_EnableVddIO2+0x1c>)
 800153a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800153e:	6053      	str	r3, [r2, #4]
}
 8001540:	bf00      	nop
 8001542:	46bd      	mov	sp, r7
 8001544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001548:	4770      	bx	lr
 800154a:	bf00      	nop
 800154c:	40007000 	.word	0x40007000

08001550 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b088      	sub	sp, #32
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	2b00      	cmp	r3, #0
 800155c:	d102      	bne.n	8001564 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800155e:	2301      	movs	r3, #1
 8001560:	f000 bc08 	b.w	8001d74 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001564:	4b96      	ldr	r3, [pc, #600]	; (80017c0 <HAL_RCC_OscConfig+0x270>)
 8001566:	689b      	ldr	r3, [r3, #8]
 8001568:	f003 030c 	and.w	r3, r3, #12
 800156c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800156e:	4b94      	ldr	r3, [pc, #592]	; (80017c0 <HAL_RCC_OscConfig+0x270>)
 8001570:	68db      	ldr	r3, [r3, #12]
 8001572:	f003 0303 	and.w	r3, r3, #3
 8001576:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	f003 0310 	and.w	r3, r3, #16
 8001580:	2b00      	cmp	r3, #0
 8001582:	f000 80e4 	beq.w	800174e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001586:	69bb      	ldr	r3, [r7, #24]
 8001588:	2b00      	cmp	r3, #0
 800158a:	d007      	beq.n	800159c <HAL_RCC_OscConfig+0x4c>
 800158c:	69bb      	ldr	r3, [r7, #24]
 800158e:	2b0c      	cmp	r3, #12
 8001590:	f040 808b 	bne.w	80016aa <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001594:	697b      	ldr	r3, [r7, #20]
 8001596:	2b01      	cmp	r3, #1
 8001598:	f040 8087 	bne.w	80016aa <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800159c:	4b88      	ldr	r3, [pc, #544]	; (80017c0 <HAL_RCC_OscConfig+0x270>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f003 0302 	and.w	r3, r3, #2
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d005      	beq.n	80015b4 <HAL_RCC_OscConfig+0x64>
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	699b      	ldr	r3, [r3, #24]
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d101      	bne.n	80015b4 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80015b0:	2301      	movs	r3, #1
 80015b2:	e3df      	b.n	8001d74 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	6a1a      	ldr	r2, [r3, #32]
 80015b8:	4b81      	ldr	r3, [pc, #516]	; (80017c0 <HAL_RCC_OscConfig+0x270>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f003 0308 	and.w	r3, r3, #8
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d004      	beq.n	80015ce <HAL_RCC_OscConfig+0x7e>
 80015c4:	4b7e      	ldr	r3, [pc, #504]	; (80017c0 <HAL_RCC_OscConfig+0x270>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80015cc:	e005      	b.n	80015da <HAL_RCC_OscConfig+0x8a>
 80015ce:	4b7c      	ldr	r3, [pc, #496]	; (80017c0 <HAL_RCC_OscConfig+0x270>)
 80015d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80015d4:	091b      	lsrs	r3, r3, #4
 80015d6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80015da:	4293      	cmp	r3, r2
 80015dc:	d223      	bcs.n	8001626 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	6a1b      	ldr	r3, [r3, #32]
 80015e2:	4618      	mov	r0, r3
 80015e4:	f000 fdfe 	bl	80021e4 <RCC_SetFlashLatencyFromMSIRange>
 80015e8:	4603      	mov	r3, r0
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d001      	beq.n	80015f2 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80015ee:	2301      	movs	r3, #1
 80015f0:	e3c0      	b.n	8001d74 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80015f2:	4b73      	ldr	r3, [pc, #460]	; (80017c0 <HAL_RCC_OscConfig+0x270>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	4a72      	ldr	r2, [pc, #456]	; (80017c0 <HAL_RCC_OscConfig+0x270>)
 80015f8:	f043 0308 	orr.w	r3, r3, #8
 80015fc:	6013      	str	r3, [r2, #0]
 80015fe:	4b70      	ldr	r3, [pc, #448]	; (80017c0 <HAL_RCC_OscConfig+0x270>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	6a1b      	ldr	r3, [r3, #32]
 800160a:	496d      	ldr	r1, [pc, #436]	; (80017c0 <HAL_RCC_OscConfig+0x270>)
 800160c:	4313      	orrs	r3, r2
 800160e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001610:	4b6b      	ldr	r3, [pc, #428]	; (80017c0 <HAL_RCC_OscConfig+0x270>)
 8001612:	685b      	ldr	r3, [r3, #4]
 8001614:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	69db      	ldr	r3, [r3, #28]
 800161c:	021b      	lsls	r3, r3, #8
 800161e:	4968      	ldr	r1, [pc, #416]	; (80017c0 <HAL_RCC_OscConfig+0x270>)
 8001620:	4313      	orrs	r3, r2
 8001622:	604b      	str	r3, [r1, #4]
 8001624:	e025      	b.n	8001672 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001626:	4b66      	ldr	r3, [pc, #408]	; (80017c0 <HAL_RCC_OscConfig+0x270>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	4a65      	ldr	r2, [pc, #404]	; (80017c0 <HAL_RCC_OscConfig+0x270>)
 800162c:	f043 0308 	orr.w	r3, r3, #8
 8001630:	6013      	str	r3, [r2, #0]
 8001632:	4b63      	ldr	r3, [pc, #396]	; (80017c0 <HAL_RCC_OscConfig+0x270>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	6a1b      	ldr	r3, [r3, #32]
 800163e:	4960      	ldr	r1, [pc, #384]	; (80017c0 <HAL_RCC_OscConfig+0x270>)
 8001640:	4313      	orrs	r3, r2
 8001642:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001644:	4b5e      	ldr	r3, [pc, #376]	; (80017c0 <HAL_RCC_OscConfig+0x270>)
 8001646:	685b      	ldr	r3, [r3, #4]
 8001648:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	69db      	ldr	r3, [r3, #28]
 8001650:	021b      	lsls	r3, r3, #8
 8001652:	495b      	ldr	r1, [pc, #364]	; (80017c0 <HAL_RCC_OscConfig+0x270>)
 8001654:	4313      	orrs	r3, r2
 8001656:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001658:	69bb      	ldr	r3, [r7, #24]
 800165a:	2b00      	cmp	r3, #0
 800165c:	d109      	bne.n	8001672 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	6a1b      	ldr	r3, [r3, #32]
 8001662:	4618      	mov	r0, r3
 8001664:	f000 fdbe 	bl	80021e4 <RCC_SetFlashLatencyFromMSIRange>
 8001668:	4603      	mov	r3, r0
 800166a:	2b00      	cmp	r3, #0
 800166c:	d001      	beq.n	8001672 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800166e:	2301      	movs	r3, #1
 8001670:	e380      	b.n	8001d74 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001672:	f000 fcc1 	bl	8001ff8 <HAL_RCC_GetSysClockFreq>
 8001676:	4602      	mov	r2, r0
 8001678:	4b51      	ldr	r3, [pc, #324]	; (80017c0 <HAL_RCC_OscConfig+0x270>)
 800167a:	689b      	ldr	r3, [r3, #8]
 800167c:	091b      	lsrs	r3, r3, #4
 800167e:	f003 030f 	and.w	r3, r3, #15
 8001682:	4950      	ldr	r1, [pc, #320]	; (80017c4 <HAL_RCC_OscConfig+0x274>)
 8001684:	5ccb      	ldrb	r3, [r1, r3]
 8001686:	f003 031f 	and.w	r3, r3, #31
 800168a:	fa22 f303 	lsr.w	r3, r2, r3
 800168e:	4a4e      	ldr	r2, [pc, #312]	; (80017c8 <HAL_RCC_OscConfig+0x278>)
 8001690:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001692:	4b4e      	ldr	r3, [pc, #312]	; (80017cc <HAL_RCC_OscConfig+0x27c>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	4618      	mov	r0, r3
 8001698:	f7ff faa8 	bl	8000bec <HAL_InitTick>
 800169c:	4603      	mov	r3, r0
 800169e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80016a0:	7bfb      	ldrb	r3, [r7, #15]
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d052      	beq.n	800174c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80016a6:	7bfb      	ldrb	r3, [r7, #15]
 80016a8:	e364      	b.n	8001d74 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	699b      	ldr	r3, [r3, #24]
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d032      	beq.n	8001718 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80016b2:	4b43      	ldr	r3, [pc, #268]	; (80017c0 <HAL_RCC_OscConfig+0x270>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	4a42      	ldr	r2, [pc, #264]	; (80017c0 <HAL_RCC_OscConfig+0x270>)
 80016b8:	f043 0301 	orr.w	r3, r3, #1
 80016bc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80016be:	f7ff fbc1 	bl	8000e44 <HAL_GetTick>
 80016c2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80016c4:	e008      	b.n	80016d8 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80016c6:	f7ff fbbd 	bl	8000e44 <HAL_GetTick>
 80016ca:	4602      	mov	r2, r0
 80016cc:	693b      	ldr	r3, [r7, #16]
 80016ce:	1ad3      	subs	r3, r2, r3
 80016d0:	2b02      	cmp	r3, #2
 80016d2:	d901      	bls.n	80016d8 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80016d4:	2303      	movs	r3, #3
 80016d6:	e34d      	b.n	8001d74 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80016d8:	4b39      	ldr	r3, [pc, #228]	; (80017c0 <HAL_RCC_OscConfig+0x270>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f003 0302 	and.w	r3, r3, #2
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d0f0      	beq.n	80016c6 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80016e4:	4b36      	ldr	r3, [pc, #216]	; (80017c0 <HAL_RCC_OscConfig+0x270>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	4a35      	ldr	r2, [pc, #212]	; (80017c0 <HAL_RCC_OscConfig+0x270>)
 80016ea:	f043 0308 	orr.w	r3, r3, #8
 80016ee:	6013      	str	r3, [r2, #0]
 80016f0:	4b33      	ldr	r3, [pc, #204]	; (80017c0 <HAL_RCC_OscConfig+0x270>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	6a1b      	ldr	r3, [r3, #32]
 80016fc:	4930      	ldr	r1, [pc, #192]	; (80017c0 <HAL_RCC_OscConfig+0x270>)
 80016fe:	4313      	orrs	r3, r2
 8001700:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001702:	4b2f      	ldr	r3, [pc, #188]	; (80017c0 <HAL_RCC_OscConfig+0x270>)
 8001704:	685b      	ldr	r3, [r3, #4]
 8001706:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	69db      	ldr	r3, [r3, #28]
 800170e:	021b      	lsls	r3, r3, #8
 8001710:	492b      	ldr	r1, [pc, #172]	; (80017c0 <HAL_RCC_OscConfig+0x270>)
 8001712:	4313      	orrs	r3, r2
 8001714:	604b      	str	r3, [r1, #4]
 8001716:	e01a      	b.n	800174e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001718:	4b29      	ldr	r3, [pc, #164]	; (80017c0 <HAL_RCC_OscConfig+0x270>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	4a28      	ldr	r2, [pc, #160]	; (80017c0 <HAL_RCC_OscConfig+0x270>)
 800171e:	f023 0301 	bic.w	r3, r3, #1
 8001722:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001724:	f7ff fb8e 	bl	8000e44 <HAL_GetTick>
 8001728:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800172a:	e008      	b.n	800173e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800172c:	f7ff fb8a 	bl	8000e44 <HAL_GetTick>
 8001730:	4602      	mov	r2, r0
 8001732:	693b      	ldr	r3, [r7, #16]
 8001734:	1ad3      	subs	r3, r2, r3
 8001736:	2b02      	cmp	r3, #2
 8001738:	d901      	bls.n	800173e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800173a:	2303      	movs	r3, #3
 800173c:	e31a      	b.n	8001d74 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800173e:	4b20      	ldr	r3, [pc, #128]	; (80017c0 <HAL_RCC_OscConfig+0x270>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f003 0302 	and.w	r3, r3, #2
 8001746:	2b00      	cmp	r3, #0
 8001748:	d1f0      	bne.n	800172c <HAL_RCC_OscConfig+0x1dc>
 800174a:	e000      	b.n	800174e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800174c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f003 0301 	and.w	r3, r3, #1
 8001756:	2b00      	cmp	r3, #0
 8001758:	d073      	beq.n	8001842 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800175a:	69bb      	ldr	r3, [r7, #24]
 800175c:	2b08      	cmp	r3, #8
 800175e:	d005      	beq.n	800176c <HAL_RCC_OscConfig+0x21c>
 8001760:	69bb      	ldr	r3, [r7, #24]
 8001762:	2b0c      	cmp	r3, #12
 8001764:	d10e      	bne.n	8001784 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001766:	697b      	ldr	r3, [r7, #20]
 8001768:	2b03      	cmp	r3, #3
 800176a:	d10b      	bne.n	8001784 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800176c:	4b14      	ldr	r3, [pc, #80]	; (80017c0 <HAL_RCC_OscConfig+0x270>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001774:	2b00      	cmp	r3, #0
 8001776:	d063      	beq.n	8001840 <HAL_RCC_OscConfig+0x2f0>
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	2b00      	cmp	r3, #0
 800177e:	d15f      	bne.n	8001840 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001780:	2301      	movs	r3, #1
 8001782:	e2f7      	b.n	8001d74 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	685b      	ldr	r3, [r3, #4]
 8001788:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800178c:	d106      	bne.n	800179c <HAL_RCC_OscConfig+0x24c>
 800178e:	4b0c      	ldr	r3, [pc, #48]	; (80017c0 <HAL_RCC_OscConfig+0x270>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	4a0b      	ldr	r2, [pc, #44]	; (80017c0 <HAL_RCC_OscConfig+0x270>)
 8001794:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001798:	6013      	str	r3, [r2, #0]
 800179a:	e025      	b.n	80017e8 <HAL_RCC_OscConfig+0x298>
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	685b      	ldr	r3, [r3, #4]
 80017a0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80017a4:	d114      	bne.n	80017d0 <HAL_RCC_OscConfig+0x280>
 80017a6:	4b06      	ldr	r3, [pc, #24]	; (80017c0 <HAL_RCC_OscConfig+0x270>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	4a05      	ldr	r2, [pc, #20]	; (80017c0 <HAL_RCC_OscConfig+0x270>)
 80017ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80017b0:	6013      	str	r3, [r2, #0]
 80017b2:	4b03      	ldr	r3, [pc, #12]	; (80017c0 <HAL_RCC_OscConfig+0x270>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	4a02      	ldr	r2, [pc, #8]	; (80017c0 <HAL_RCC_OscConfig+0x270>)
 80017b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017bc:	6013      	str	r3, [r2, #0]
 80017be:	e013      	b.n	80017e8 <HAL_RCC_OscConfig+0x298>
 80017c0:	40021000 	.word	0x40021000
 80017c4:	08007144 	.word	0x08007144
 80017c8:	20000000 	.word	0x20000000
 80017cc:	20000004 	.word	0x20000004
 80017d0:	4ba0      	ldr	r3, [pc, #640]	; (8001a54 <HAL_RCC_OscConfig+0x504>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	4a9f      	ldr	r2, [pc, #636]	; (8001a54 <HAL_RCC_OscConfig+0x504>)
 80017d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017da:	6013      	str	r3, [r2, #0]
 80017dc:	4b9d      	ldr	r3, [pc, #628]	; (8001a54 <HAL_RCC_OscConfig+0x504>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	4a9c      	ldr	r2, [pc, #624]	; (8001a54 <HAL_RCC_OscConfig+0x504>)
 80017e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017e6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	685b      	ldr	r3, [r3, #4]
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d013      	beq.n	8001818 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017f0:	f7ff fb28 	bl	8000e44 <HAL_GetTick>
 80017f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80017f6:	e008      	b.n	800180a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017f8:	f7ff fb24 	bl	8000e44 <HAL_GetTick>
 80017fc:	4602      	mov	r2, r0
 80017fe:	693b      	ldr	r3, [r7, #16]
 8001800:	1ad3      	subs	r3, r2, r3
 8001802:	2b64      	cmp	r3, #100	; 0x64
 8001804:	d901      	bls.n	800180a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001806:	2303      	movs	r3, #3
 8001808:	e2b4      	b.n	8001d74 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800180a:	4b92      	ldr	r3, [pc, #584]	; (8001a54 <HAL_RCC_OscConfig+0x504>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001812:	2b00      	cmp	r3, #0
 8001814:	d0f0      	beq.n	80017f8 <HAL_RCC_OscConfig+0x2a8>
 8001816:	e014      	b.n	8001842 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001818:	f7ff fb14 	bl	8000e44 <HAL_GetTick>
 800181c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800181e:	e008      	b.n	8001832 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001820:	f7ff fb10 	bl	8000e44 <HAL_GetTick>
 8001824:	4602      	mov	r2, r0
 8001826:	693b      	ldr	r3, [r7, #16]
 8001828:	1ad3      	subs	r3, r2, r3
 800182a:	2b64      	cmp	r3, #100	; 0x64
 800182c:	d901      	bls.n	8001832 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800182e:	2303      	movs	r3, #3
 8001830:	e2a0      	b.n	8001d74 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001832:	4b88      	ldr	r3, [pc, #544]	; (8001a54 <HAL_RCC_OscConfig+0x504>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800183a:	2b00      	cmp	r3, #0
 800183c:	d1f0      	bne.n	8001820 <HAL_RCC_OscConfig+0x2d0>
 800183e:	e000      	b.n	8001842 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001840:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f003 0302 	and.w	r3, r3, #2
 800184a:	2b00      	cmp	r3, #0
 800184c:	d060      	beq.n	8001910 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800184e:	69bb      	ldr	r3, [r7, #24]
 8001850:	2b04      	cmp	r3, #4
 8001852:	d005      	beq.n	8001860 <HAL_RCC_OscConfig+0x310>
 8001854:	69bb      	ldr	r3, [r7, #24]
 8001856:	2b0c      	cmp	r3, #12
 8001858:	d119      	bne.n	800188e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800185a:	697b      	ldr	r3, [r7, #20]
 800185c:	2b02      	cmp	r3, #2
 800185e:	d116      	bne.n	800188e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001860:	4b7c      	ldr	r3, [pc, #496]	; (8001a54 <HAL_RCC_OscConfig+0x504>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001868:	2b00      	cmp	r3, #0
 800186a:	d005      	beq.n	8001878 <HAL_RCC_OscConfig+0x328>
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	68db      	ldr	r3, [r3, #12]
 8001870:	2b00      	cmp	r3, #0
 8001872:	d101      	bne.n	8001878 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001874:	2301      	movs	r3, #1
 8001876:	e27d      	b.n	8001d74 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001878:	4b76      	ldr	r3, [pc, #472]	; (8001a54 <HAL_RCC_OscConfig+0x504>)
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	691b      	ldr	r3, [r3, #16]
 8001884:	061b      	lsls	r3, r3, #24
 8001886:	4973      	ldr	r1, [pc, #460]	; (8001a54 <HAL_RCC_OscConfig+0x504>)
 8001888:	4313      	orrs	r3, r2
 800188a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800188c:	e040      	b.n	8001910 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	68db      	ldr	r3, [r3, #12]
 8001892:	2b00      	cmp	r3, #0
 8001894:	d023      	beq.n	80018de <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001896:	4b6f      	ldr	r3, [pc, #444]	; (8001a54 <HAL_RCC_OscConfig+0x504>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	4a6e      	ldr	r2, [pc, #440]	; (8001a54 <HAL_RCC_OscConfig+0x504>)
 800189c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018a2:	f7ff facf 	bl	8000e44 <HAL_GetTick>
 80018a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80018a8:	e008      	b.n	80018bc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018aa:	f7ff facb 	bl	8000e44 <HAL_GetTick>
 80018ae:	4602      	mov	r2, r0
 80018b0:	693b      	ldr	r3, [r7, #16]
 80018b2:	1ad3      	subs	r3, r2, r3
 80018b4:	2b02      	cmp	r3, #2
 80018b6:	d901      	bls.n	80018bc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80018b8:	2303      	movs	r3, #3
 80018ba:	e25b      	b.n	8001d74 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80018bc:	4b65      	ldr	r3, [pc, #404]	; (8001a54 <HAL_RCC_OscConfig+0x504>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d0f0      	beq.n	80018aa <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018c8:	4b62      	ldr	r3, [pc, #392]	; (8001a54 <HAL_RCC_OscConfig+0x504>)
 80018ca:	685b      	ldr	r3, [r3, #4]
 80018cc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	691b      	ldr	r3, [r3, #16]
 80018d4:	061b      	lsls	r3, r3, #24
 80018d6:	495f      	ldr	r1, [pc, #380]	; (8001a54 <HAL_RCC_OscConfig+0x504>)
 80018d8:	4313      	orrs	r3, r2
 80018da:	604b      	str	r3, [r1, #4]
 80018dc:	e018      	b.n	8001910 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80018de:	4b5d      	ldr	r3, [pc, #372]	; (8001a54 <HAL_RCC_OscConfig+0x504>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	4a5c      	ldr	r2, [pc, #368]	; (8001a54 <HAL_RCC_OscConfig+0x504>)
 80018e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80018e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018ea:	f7ff faab 	bl	8000e44 <HAL_GetTick>
 80018ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80018f0:	e008      	b.n	8001904 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018f2:	f7ff faa7 	bl	8000e44 <HAL_GetTick>
 80018f6:	4602      	mov	r2, r0
 80018f8:	693b      	ldr	r3, [r7, #16]
 80018fa:	1ad3      	subs	r3, r2, r3
 80018fc:	2b02      	cmp	r3, #2
 80018fe:	d901      	bls.n	8001904 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001900:	2303      	movs	r3, #3
 8001902:	e237      	b.n	8001d74 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001904:	4b53      	ldr	r3, [pc, #332]	; (8001a54 <HAL_RCC_OscConfig+0x504>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800190c:	2b00      	cmp	r3, #0
 800190e:	d1f0      	bne.n	80018f2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f003 0308 	and.w	r3, r3, #8
 8001918:	2b00      	cmp	r3, #0
 800191a:	d03c      	beq.n	8001996 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	695b      	ldr	r3, [r3, #20]
 8001920:	2b00      	cmp	r3, #0
 8001922:	d01c      	beq.n	800195e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001924:	4b4b      	ldr	r3, [pc, #300]	; (8001a54 <HAL_RCC_OscConfig+0x504>)
 8001926:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800192a:	4a4a      	ldr	r2, [pc, #296]	; (8001a54 <HAL_RCC_OscConfig+0x504>)
 800192c:	f043 0301 	orr.w	r3, r3, #1
 8001930:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001934:	f7ff fa86 	bl	8000e44 <HAL_GetTick>
 8001938:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800193a:	e008      	b.n	800194e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800193c:	f7ff fa82 	bl	8000e44 <HAL_GetTick>
 8001940:	4602      	mov	r2, r0
 8001942:	693b      	ldr	r3, [r7, #16]
 8001944:	1ad3      	subs	r3, r2, r3
 8001946:	2b02      	cmp	r3, #2
 8001948:	d901      	bls.n	800194e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800194a:	2303      	movs	r3, #3
 800194c:	e212      	b.n	8001d74 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800194e:	4b41      	ldr	r3, [pc, #260]	; (8001a54 <HAL_RCC_OscConfig+0x504>)
 8001950:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001954:	f003 0302 	and.w	r3, r3, #2
 8001958:	2b00      	cmp	r3, #0
 800195a:	d0ef      	beq.n	800193c <HAL_RCC_OscConfig+0x3ec>
 800195c:	e01b      	b.n	8001996 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800195e:	4b3d      	ldr	r3, [pc, #244]	; (8001a54 <HAL_RCC_OscConfig+0x504>)
 8001960:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001964:	4a3b      	ldr	r2, [pc, #236]	; (8001a54 <HAL_RCC_OscConfig+0x504>)
 8001966:	f023 0301 	bic.w	r3, r3, #1
 800196a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800196e:	f7ff fa69 	bl	8000e44 <HAL_GetTick>
 8001972:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001974:	e008      	b.n	8001988 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001976:	f7ff fa65 	bl	8000e44 <HAL_GetTick>
 800197a:	4602      	mov	r2, r0
 800197c:	693b      	ldr	r3, [r7, #16]
 800197e:	1ad3      	subs	r3, r2, r3
 8001980:	2b02      	cmp	r3, #2
 8001982:	d901      	bls.n	8001988 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001984:	2303      	movs	r3, #3
 8001986:	e1f5      	b.n	8001d74 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001988:	4b32      	ldr	r3, [pc, #200]	; (8001a54 <HAL_RCC_OscConfig+0x504>)
 800198a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800198e:	f003 0302 	and.w	r3, r3, #2
 8001992:	2b00      	cmp	r3, #0
 8001994:	d1ef      	bne.n	8001976 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f003 0304 	and.w	r3, r3, #4
 800199e:	2b00      	cmp	r3, #0
 80019a0:	f000 80a6 	beq.w	8001af0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80019a4:	2300      	movs	r3, #0
 80019a6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80019a8:	4b2a      	ldr	r3, [pc, #168]	; (8001a54 <HAL_RCC_OscConfig+0x504>)
 80019aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d10d      	bne.n	80019d0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80019b4:	4b27      	ldr	r3, [pc, #156]	; (8001a54 <HAL_RCC_OscConfig+0x504>)
 80019b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019b8:	4a26      	ldr	r2, [pc, #152]	; (8001a54 <HAL_RCC_OscConfig+0x504>)
 80019ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019be:	6593      	str	r3, [r2, #88]	; 0x58
 80019c0:	4b24      	ldr	r3, [pc, #144]	; (8001a54 <HAL_RCC_OscConfig+0x504>)
 80019c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019c8:	60bb      	str	r3, [r7, #8]
 80019ca:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80019cc:	2301      	movs	r3, #1
 80019ce:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80019d0:	4b21      	ldr	r3, [pc, #132]	; (8001a58 <HAL_RCC_OscConfig+0x508>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d118      	bne.n	8001a0e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80019dc:	4b1e      	ldr	r3, [pc, #120]	; (8001a58 <HAL_RCC_OscConfig+0x508>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	4a1d      	ldr	r2, [pc, #116]	; (8001a58 <HAL_RCC_OscConfig+0x508>)
 80019e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019e6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80019e8:	f7ff fa2c 	bl	8000e44 <HAL_GetTick>
 80019ec:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80019ee:	e008      	b.n	8001a02 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019f0:	f7ff fa28 	bl	8000e44 <HAL_GetTick>
 80019f4:	4602      	mov	r2, r0
 80019f6:	693b      	ldr	r3, [r7, #16]
 80019f8:	1ad3      	subs	r3, r2, r3
 80019fa:	2b02      	cmp	r3, #2
 80019fc:	d901      	bls.n	8001a02 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80019fe:	2303      	movs	r3, #3
 8001a00:	e1b8      	b.n	8001d74 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a02:	4b15      	ldr	r3, [pc, #84]	; (8001a58 <HAL_RCC_OscConfig+0x508>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d0f0      	beq.n	80019f0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	689b      	ldr	r3, [r3, #8]
 8001a12:	2b01      	cmp	r3, #1
 8001a14:	d108      	bne.n	8001a28 <HAL_RCC_OscConfig+0x4d8>
 8001a16:	4b0f      	ldr	r3, [pc, #60]	; (8001a54 <HAL_RCC_OscConfig+0x504>)
 8001a18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a1c:	4a0d      	ldr	r2, [pc, #52]	; (8001a54 <HAL_RCC_OscConfig+0x504>)
 8001a1e:	f043 0301 	orr.w	r3, r3, #1
 8001a22:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001a26:	e029      	b.n	8001a7c <HAL_RCC_OscConfig+0x52c>
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	689b      	ldr	r3, [r3, #8]
 8001a2c:	2b05      	cmp	r3, #5
 8001a2e:	d115      	bne.n	8001a5c <HAL_RCC_OscConfig+0x50c>
 8001a30:	4b08      	ldr	r3, [pc, #32]	; (8001a54 <HAL_RCC_OscConfig+0x504>)
 8001a32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a36:	4a07      	ldr	r2, [pc, #28]	; (8001a54 <HAL_RCC_OscConfig+0x504>)
 8001a38:	f043 0304 	orr.w	r3, r3, #4
 8001a3c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001a40:	4b04      	ldr	r3, [pc, #16]	; (8001a54 <HAL_RCC_OscConfig+0x504>)
 8001a42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a46:	4a03      	ldr	r2, [pc, #12]	; (8001a54 <HAL_RCC_OscConfig+0x504>)
 8001a48:	f043 0301 	orr.w	r3, r3, #1
 8001a4c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001a50:	e014      	b.n	8001a7c <HAL_RCC_OscConfig+0x52c>
 8001a52:	bf00      	nop
 8001a54:	40021000 	.word	0x40021000
 8001a58:	40007000 	.word	0x40007000
 8001a5c:	4b9d      	ldr	r3, [pc, #628]	; (8001cd4 <HAL_RCC_OscConfig+0x784>)
 8001a5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a62:	4a9c      	ldr	r2, [pc, #624]	; (8001cd4 <HAL_RCC_OscConfig+0x784>)
 8001a64:	f023 0301 	bic.w	r3, r3, #1
 8001a68:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001a6c:	4b99      	ldr	r3, [pc, #612]	; (8001cd4 <HAL_RCC_OscConfig+0x784>)
 8001a6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a72:	4a98      	ldr	r2, [pc, #608]	; (8001cd4 <HAL_RCC_OscConfig+0x784>)
 8001a74:	f023 0304 	bic.w	r3, r3, #4
 8001a78:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	689b      	ldr	r3, [r3, #8]
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d016      	beq.n	8001ab2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a84:	f7ff f9de 	bl	8000e44 <HAL_GetTick>
 8001a88:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001a8a:	e00a      	b.n	8001aa2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a8c:	f7ff f9da 	bl	8000e44 <HAL_GetTick>
 8001a90:	4602      	mov	r2, r0
 8001a92:	693b      	ldr	r3, [r7, #16]
 8001a94:	1ad3      	subs	r3, r2, r3
 8001a96:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a9a:	4293      	cmp	r3, r2
 8001a9c:	d901      	bls.n	8001aa2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001a9e:	2303      	movs	r3, #3
 8001aa0:	e168      	b.n	8001d74 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001aa2:	4b8c      	ldr	r3, [pc, #560]	; (8001cd4 <HAL_RCC_OscConfig+0x784>)
 8001aa4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001aa8:	f003 0302 	and.w	r3, r3, #2
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d0ed      	beq.n	8001a8c <HAL_RCC_OscConfig+0x53c>
 8001ab0:	e015      	b.n	8001ade <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ab2:	f7ff f9c7 	bl	8000e44 <HAL_GetTick>
 8001ab6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001ab8:	e00a      	b.n	8001ad0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001aba:	f7ff f9c3 	bl	8000e44 <HAL_GetTick>
 8001abe:	4602      	mov	r2, r0
 8001ac0:	693b      	ldr	r3, [r7, #16]
 8001ac2:	1ad3      	subs	r3, r2, r3
 8001ac4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ac8:	4293      	cmp	r3, r2
 8001aca:	d901      	bls.n	8001ad0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001acc:	2303      	movs	r3, #3
 8001ace:	e151      	b.n	8001d74 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001ad0:	4b80      	ldr	r3, [pc, #512]	; (8001cd4 <HAL_RCC_OscConfig+0x784>)
 8001ad2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ad6:	f003 0302 	and.w	r3, r3, #2
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d1ed      	bne.n	8001aba <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001ade:	7ffb      	ldrb	r3, [r7, #31]
 8001ae0:	2b01      	cmp	r3, #1
 8001ae2:	d105      	bne.n	8001af0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ae4:	4b7b      	ldr	r3, [pc, #492]	; (8001cd4 <HAL_RCC_OscConfig+0x784>)
 8001ae6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ae8:	4a7a      	ldr	r2, [pc, #488]	; (8001cd4 <HAL_RCC_OscConfig+0x784>)
 8001aea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001aee:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f003 0320 	and.w	r3, r3, #32
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d03c      	beq.n	8001b76 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d01c      	beq.n	8001b3e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001b04:	4b73      	ldr	r3, [pc, #460]	; (8001cd4 <HAL_RCC_OscConfig+0x784>)
 8001b06:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001b0a:	4a72      	ldr	r2, [pc, #456]	; (8001cd4 <HAL_RCC_OscConfig+0x784>)
 8001b0c:	f043 0301 	orr.w	r3, r3, #1
 8001b10:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b14:	f7ff f996 	bl	8000e44 <HAL_GetTick>
 8001b18:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001b1a:	e008      	b.n	8001b2e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001b1c:	f7ff f992 	bl	8000e44 <HAL_GetTick>
 8001b20:	4602      	mov	r2, r0
 8001b22:	693b      	ldr	r3, [r7, #16]
 8001b24:	1ad3      	subs	r3, r2, r3
 8001b26:	2b02      	cmp	r3, #2
 8001b28:	d901      	bls.n	8001b2e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8001b2a:	2303      	movs	r3, #3
 8001b2c:	e122      	b.n	8001d74 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001b2e:	4b69      	ldr	r3, [pc, #420]	; (8001cd4 <HAL_RCC_OscConfig+0x784>)
 8001b30:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001b34:	f003 0302 	and.w	r3, r3, #2
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d0ef      	beq.n	8001b1c <HAL_RCC_OscConfig+0x5cc>
 8001b3c:	e01b      	b.n	8001b76 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001b3e:	4b65      	ldr	r3, [pc, #404]	; (8001cd4 <HAL_RCC_OscConfig+0x784>)
 8001b40:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001b44:	4a63      	ldr	r2, [pc, #396]	; (8001cd4 <HAL_RCC_OscConfig+0x784>)
 8001b46:	f023 0301 	bic.w	r3, r3, #1
 8001b4a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b4e:	f7ff f979 	bl	8000e44 <HAL_GetTick>
 8001b52:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001b54:	e008      	b.n	8001b68 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001b56:	f7ff f975 	bl	8000e44 <HAL_GetTick>
 8001b5a:	4602      	mov	r2, r0
 8001b5c:	693b      	ldr	r3, [r7, #16]
 8001b5e:	1ad3      	subs	r3, r2, r3
 8001b60:	2b02      	cmp	r3, #2
 8001b62:	d901      	bls.n	8001b68 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001b64:	2303      	movs	r3, #3
 8001b66:	e105      	b.n	8001d74 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001b68:	4b5a      	ldr	r3, [pc, #360]	; (8001cd4 <HAL_RCC_OscConfig+0x784>)
 8001b6a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001b6e:	f003 0302 	and.w	r3, r3, #2
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d1ef      	bne.n	8001b56 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	f000 80f9 	beq.w	8001d72 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b84:	2b02      	cmp	r3, #2
 8001b86:	f040 80cf 	bne.w	8001d28 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001b8a:	4b52      	ldr	r3, [pc, #328]	; (8001cd4 <HAL_RCC_OscConfig+0x784>)
 8001b8c:	68db      	ldr	r3, [r3, #12]
 8001b8e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b90:	697b      	ldr	r3, [r7, #20]
 8001b92:	f003 0203 	and.w	r2, r3, #3
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b9a:	429a      	cmp	r2, r3
 8001b9c:	d12c      	bne.n	8001bf8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001b9e:	697b      	ldr	r3, [r7, #20]
 8001ba0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ba8:	3b01      	subs	r3, #1
 8001baa:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bac:	429a      	cmp	r2, r3
 8001bae:	d123      	bne.n	8001bf8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001bb0:	697b      	ldr	r3, [r7, #20]
 8001bb2:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001bba:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001bbc:	429a      	cmp	r2, r3
 8001bbe:	d11b      	bne.n	8001bf8 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001bc0:	697b      	ldr	r3, [r7, #20]
 8001bc2:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bca:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001bcc:	429a      	cmp	r2, r3
 8001bce:	d113      	bne.n	8001bf8 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001bd0:	697b      	ldr	r3, [r7, #20]
 8001bd2:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bda:	085b      	lsrs	r3, r3, #1
 8001bdc:	3b01      	subs	r3, #1
 8001bde:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001be0:	429a      	cmp	r2, r3
 8001be2:	d109      	bne.n	8001bf8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001be4:	697b      	ldr	r3, [r7, #20]
 8001be6:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bee:	085b      	lsrs	r3, r3, #1
 8001bf0:	3b01      	subs	r3, #1
 8001bf2:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001bf4:	429a      	cmp	r2, r3
 8001bf6:	d071      	beq.n	8001cdc <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001bf8:	69bb      	ldr	r3, [r7, #24]
 8001bfa:	2b0c      	cmp	r3, #12
 8001bfc:	d068      	beq.n	8001cd0 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001bfe:	4b35      	ldr	r3, [pc, #212]	; (8001cd4 <HAL_RCC_OscConfig+0x784>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d105      	bne.n	8001c16 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001c0a:	4b32      	ldr	r3, [pc, #200]	; (8001cd4 <HAL_RCC_OscConfig+0x784>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d001      	beq.n	8001c1a <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8001c16:	2301      	movs	r3, #1
 8001c18:	e0ac      	b.n	8001d74 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001c1a:	4b2e      	ldr	r3, [pc, #184]	; (8001cd4 <HAL_RCC_OscConfig+0x784>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	4a2d      	ldr	r2, [pc, #180]	; (8001cd4 <HAL_RCC_OscConfig+0x784>)
 8001c20:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001c24:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001c26:	f7ff f90d 	bl	8000e44 <HAL_GetTick>
 8001c2a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c2c:	e008      	b.n	8001c40 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c2e:	f7ff f909 	bl	8000e44 <HAL_GetTick>
 8001c32:	4602      	mov	r2, r0
 8001c34:	693b      	ldr	r3, [r7, #16]
 8001c36:	1ad3      	subs	r3, r2, r3
 8001c38:	2b02      	cmp	r3, #2
 8001c3a:	d901      	bls.n	8001c40 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8001c3c:	2303      	movs	r3, #3
 8001c3e:	e099      	b.n	8001d74 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c40:	4b24      	ldr	r3, [pc, #144]	; (8001cd4 <HAL_RCC_OscConfig+0x784>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d1f0      	bne.n	8001c2e <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c4c:	4b21      	ldr	r3, [pc, #132]	; (8001cd4 <HAL_RCC_OscConfig+0x784>)
 8001c4e:	68da      	ldr	r2, [r3, #12]
 8001c50:	4b21      	ldr	r3, [pc, #132]	; (8001cd8 <HAL_RCC_OscConfig+0x788>)
 8001c52:	4013      	ands	r3, r2
 8001c54:	687a      	ldr	r2, [r7, #4]
 8001c56:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001c58:	687a      	ldr	r2, [r7, #4]
 8001c5a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001c5c:	3a01      	subs	r2, #1
 8001c5e:	0112      	lsls	r2, r2, #4
 8001c60:	4311      	orrs	r1, r2
 8001c62:	687a      	ldr	r2, [r7, #4]
 8001c64:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001c66:	0212      	lsls	r2, r2, #8
 8001c68:	4311      	orrs	r1, r2
 8001c6a:	687a      	ldr	r2, [r7, #4]
 8001c6c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001c6e:	0852      	lsrs	r2, r2, #1
 8001c70:	3a01      	subs	r2, #1
 8001c72:	0552      	lsls	r2, r2, #21
 8001c74:	4311      	orrs	r1, r2
 8001c76:	687a      	ldr	r2, [r7, #4]
 8001c78:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001c7a:	0852      	lsrs	r2, r2, #1
 8001c7c:	3a01      	subs	r2, #1
 8001c7e:	0652      	lsls	r2, r2, #25
 8001c80:	4311      	orrs	r1, r2
 8001c82:	687a      	ldr	r2, [r7, #4]
 8001c84:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001c86:	06d2      	lsls	r2, r2, #27
 8001c88:	430a      	orrs	r2, r1
 8001c8a:	4912      	ldr	r1, [pc, #72]	; (8001cd4 <HAL_RCC_OscConfig+0x784>)
 8001c8c:	4313      	orrs	r3, r2
 8001c8e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001c90:	4b10      	ldr	r3, [pc, #64]	; (8001cd4 <HAL_RCC_OscConfig+0x784>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	4a0f      	ldr	r2, [pc, #60]	; (8001cd4 <HAL_RCC_OscConfig+0x784>)
 8001c96:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c9a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001c9c:	4b0d      	ldr	r3, [pc, #52]	; (8001cd4 <HAL_RCC_OscConfig+0x784>)
 8001c9e:	68db      	ldr	r3, [r3, #12]
 8001ca0:	4a0c      	ldr	r2, [pc, #48]	; (8001cd4 <HAL_RCC_OscConfig+0x784>)
 8001ca2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ca6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001ca8:	f7ff f8cc 	bl	8000e44 <HAL_GetTick>
 8001cac:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001cae:	e008      	b.n	8001cc2 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cb0:	f7ff f8c8 	bl	8000e44 <HAL_GetTick>
 8001cb4:	4602      	mov	r2, r0
 8001cb6:	693b      	ldr	r3, [r7, #16]
 8001cb8:	1ad3      	subs	r3, r2, r3
 8001cba:	2b02      	cmp	r3, #2
 8001cbc:	d901      	bls.n	8001cc2 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8001cbe:	2303      	movs	r3, #3
 8001cc0:	e058      	b.n	8001d74 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001cc2:	4b04      	ldr	r3, [pc, #16]	; (8001cd4 <HAL_RCC_OscConfig+0x784>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d0f0      	beq.n	8001cb0 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001cce:	e050      	b.n	8001d72 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001cd0:	2301      	movs	r3, #1
 8001cd2:	e04f      	b.n	8001d74 <HAL_RCC_OscConfig+0x824>
 8001cd4:	40021000 	.word	0x40021000
 8001cd8:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001cdc:	4b27      	ldr	r3, [pc, #156]	; (8001d7c <HAL_RCC_OscConfig+0x82c>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d144      	bne.n	8001d72 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001ce8:	4b24      	ldr	r3, [pc, #144]	; (8001d7c <HAL_RCC_OscConfig+0x82c>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	4a23      	ldr	r2, [pc, #140]	; (8001d7c <HAL_RCC_OscConfig+0x82c>)
 8001cee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001cf2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001cf4:	4b21      	ldr	r3, [pc, #132]	; (8001d7c <HAL_RCC_OscConfig+0x82c>)
 8001cf6:	68db      	ldr	r3, [r3, #12]
 8001cf8:	4a20      	ldr	r2, [pc, #128]	; (8001d7c <HAL_RCC_OscConfig+0x82c>)
 8001cfa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001cfe:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001d00:	f7ff f8a0 	bl	8000e44 <HAL_GetTick>
 8001d04:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d06:	e008      	b.n	8001d1a <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d08:	f7ff f89c 	bl	8000e44 <HAL_GetTick>
 8001d0c:	4602      	mov	r2, r0
 8001d0e:	693b      	ldr	r3, [r7, #16]
 8001d10:	1ad3      	subs	r3, r2, r3
 8001d12:	2b02      	cmp	r3, #2
 8001d14:	d901      	bls.n	8001d1a <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8001d16:	2303      	movs	r3, #3
 8001d18:	e02c      	b.n	8001d74 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d1a:	4b18      	ldr	r3, [pc, #96]	; (8001d7c <HAL_RCC_OscConfig+0x82c>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d0f0      	beq.n	8001d08 <HAL_RCC_OscConfig+0x7b8>
 8001d26:	e024      	b.n	8001d72 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001d28:	69bb      	ldr	r3, [r7, #24]
 8001d2a:	2b0c      	cmp	r3, #12
 8001d2c:	d01f      	beq.n	8001d6e <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d2e:	4b13      	ldr	r3, [pc, #76]	; (8001d7c <HAL_RCC_OscConfig+0x82c>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	4a12      	ldr	r2, [pc, #72]	; (8001d7c <HAL_RCC_OscConfig+0x82c>)
 8001d34:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001d38:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d3a:	f7ff f883 	bl	8000e44 <HAL_GetTick>
 8001d3e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d40:	e008      	b.n	8001d54 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d42:	f7ff f87f 	bl	8000e44 <HAL_GetTick>
 8001d46:	4602      	mov	r2, r0
 8001d48:	693b      	ldr	r3, [r7, #16]
 8001d4a:	1ad3      	subs	r3, r2, r3
 8001d4c:	2b02      	cmp	r3, #2
 8001d4e:	d901      	bls.n	8001d54 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8001d50:	2303      	movs	r3, #3
 8001d52:	e00f      	b.n	8001d74 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d54:	4b09      	ldr	r3, [pc, #36]	; (8001d7c <HAL_RCC_OscConfig+0x82c>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d1f0      	bne.n	8001d42 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001d60:	4b06      	ldr	r3, [pc, #24]	; (8001d7c <HAL_RCC_OscConfig+0x82c>)
 8001d62:	68da      	ldr	r2, [r3, #12]
 8001d64:	4905      	ldr	r1, [pc, #20]	; (8001d7c <HAL_RCC_OscConfig+0x82c>)
 8001d66:	4b06      	ldr	r3, [pc, #24]	; (8001d80 <HAL_RCC_OscConfig+0x830>)
 8001d68:	4013      	ands	r3, r2
 8001d6a:	60cb      	str	r3, [r1, #12]
 8001d6c:	e001      	b.n	8001d72 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001d6e:	2301      	movs	r3, #1
 8001d70:	e000      	b.n	8001d74 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8001d72:	2300      	movs	r3, #0
}
 8001d74:	4618      	mov	r0, r3
 8001d76:	3720      	adds	r7, #32
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	bd80      	pop	{r7, pc}
 8001d7c:	40021000 	.word	0x40021000
 8001d80:	feeefffc 	.word	0xfeeefffc

08001d84 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b086      	sub	sp, #24
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
 8001d8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001d8e:	2300      	movs	r3, #0
 8001d90:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d101      	bne.n	8001d9c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001d98:	2301      	movs	r3, #1
 8001d9a:	e11d      	b.n	8001fd8 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001d9c:	4b90      	ldr	r3, [pc, #576]	; (8001fe0 <HAL_RCC_ClockConfig+0x25c>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f003 030f 	and.w	r3, r3, #15
 8001da4:	683a      	ldr	r2, [r7, #0]
 8001da6:	429a      	cmp	r2, r3
 8001da8:	d910      	bls.n	8001dcc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001daa:	4b8d      	ldr	r3, [pc, #564]	; (8001fe0 <HAL_RCC_ClockConfig+0x25c>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f023 020f 	bic.w	r2, r3, #15
 8001db2:	498b      	ldr	r1, [pc, #556]	; (8001fe0 <HAL_RCC_ClockConfig+0x25c>)
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	4313      	orrs	r3, r2
 8001db8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dba:	4b89      	ldr	r3, [pc, #548]	; (8001fe0 <HAL_RCC_ClockConfig+0x25c>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f003 030f 	and.w	r3, r3, #15
 8001dc2:	683a      	ldr	r2, [r7, #0]
 8001dc4:	429a      	cmp	r2, r3
 8001dc6:	d001      	beq.n	8001dcc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001dc8:	2301      	movs	r3, #1
 8001dca:	e105      	b.n	8001fd8 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f003 0302 	and.w	r3, r3, #2
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d010      	beq.n	8001dfa <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	689a      	ldr	r2, [r3, #8]
 8001ddc:	4b81      	ldr	r3, [pc, #516]	; (8001fe4 <HAL_RCC_ClockConfig+0x260>)
 8001dde:	689b      	ldr	r3, [r3, #8]
 8001de0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001de4:	429a      	cmp	r2, r3
 8001de6:	d908      	bls.n	8001dfa <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001de8:	4b7e      	ldr	r3, [pc, #504]	; (8001fe4 <HAL_RCC_ClockConfig+0x260>)
 8001dea:	689b      	ldr	r3, [r3, #8]
 8001dec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	689b      	ldr	r3, [r3, #8]
 8001df4:	497b      	ldr	r1, [pc, #492]	; (8001fe4 <HAL_RCC_ClockConfig+0x260>)
 8001df6:	4313      	orrs	r3, r2
 8001df8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f003 0301 	and.w	r3, r3, #1
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d079      	beq.n	8001efa <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	685b      	ldr	r3, [r3, #4]
 8001e0a:	2b03      	cmp	r3, #3
 8001e0c:	d11e      	bne.n	8001e4c <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e0e:	4b75      	ldr	r3, [pc, #468]	; (8001fe4 <HAL_RCC_ClockConfig+0x260>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d101      	bne.n	8001e1e <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	e0dc      	b.n	8001fd8 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8001e1e:	f000 fa3b 	bl	8002298 <RCC_GetSysClockFreqFromPLLSource>
 8001e22:	4603      	mov	r3, r0
 8001e24:	4a70      	ldr	r2, [pc, #448]	; (8001fe8 <HAL_RCC_ClockConfig+0x264>)
 8001e26:	4293      	cmp	r3, r2
 8001e28:	d946      	bls.n	8001eb8 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8001e2a:	4b6e      	ldr	r3, [pc, #440]	; (8001fe4 <HAL_RCC_ClockConfig+0x260>)
 8001e2c:	689b      	ldr	r3, [r3, #8]
 8001e2e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d140      	bne.n	8001eb8 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001e36:	4b6b      	ldr	r3, [pc, #428]	; (8001fe4 <HAL_RCC_ClockConfig+0x260>)
 8001e38:	689b      	ldr	r3, [r3, #8]
 8001e3a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001e3e:	4a69      	ldr	r2, [pc, #420]	; (8001fe4 <HAL_RCC_ClockConfig+0x260>)
 8001e40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e44:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001e46:	2380      	movs	r3, #128	; 0x80
 8001e48:	617b      	str	r3, [r7, #20]
 8001e4a:	e035      	b.n	8001eb8 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	2b02      	cmp	r3, #2
 8001e52:	d107      	bne.n	8001e64 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e54:	4b63      	ldr	r3, [pc, #396]	; (8001fe4 <HAL_RCC_ClockConfig+0x260>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d115      	bne.n	8001e8c <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8001e60:	2301      	movs	r3, #1
 8001e62:	e0b9      	b.n	8001fd8 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	685b      	ldr	r3, [r3, #4]
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d107      	bne.n	8001e7c <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001e6c:	4b5d      	ldr	r3, [pc, #372]	; (8001fe4 <HAL_RCC_ClockConfig+0x260>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f003 0302 	and.w	r3, r3, #2
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d109      	bne.n	8001e8c <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8001e78:	2301      	movs	r3, #1
 8001e7a:	e0ad      	b.n	8001fd8 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e7c:	4b59      	ldr	r3, [pc, #356]	; (8001fe4 <HAL_RCC_ClockConfig+0x260>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d101      	bne.n	8001e8c <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8001e88:	2301      	movs	r3, #1
 8001e8a:	e0a5      	b.n	8001fd8 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8001e8c:	f000 f8b4 	bl	8001ff8 <HAL_RCC_GetSysClockFreq>
 8001e90:	4603      	mov	r3, r0
 8001e92:	4a55      	ldr	r2, [pc, #340]	; (8001fe8 <HAL_RCC_ClockConfig+0x264>)
 8001e94:	4293      	cmp	r3, r2
 8001e96:	d90f      	bls.n	8001eb8 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8001e98:	4b52      	ldr	r3, [pc, #328]	; (8001fe4 <HAL_RCC_ClockConfig+0x260>)
 8001e9a:	689b      	ldr	r3, [r3, #8]
 8001e9c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d109      	bne.n	8001eb8 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001ea4:	4b4f      	ldr	r3, [pc, #316]	; (8001fe4 <HAL_RCC_ClockConfig+0x260>)
 8001ea6:	689b      	ldr	r3, [r3, #8]
 8001ea8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001eac:	4a4d      	ldr	r2, [pc, #308]	; (8001fe4 <HAL_RCC_ClockConfig+0x260>)
 8001eae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001eb2:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001eb4:	2380      	movs	r3, #128	; 0x80
 8001eb6:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001eb8:	4b4a      	ldr	r3, [pc, #296]	; (8001fe4 <HAL_RCC_ClockConfig+0x260>)
 8001eba:	689b      	ldr	r3, [r3, #8]
 8001ebc:	f023 0203 	bic.w	r2, r3, #3
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	4947      	ldr	r1, [pc, #284]	; (8001fe4 <HAL_RCC_ClockConfig+0x260>)
 8001ec6:	4313      	orrs	r3, r2
 8001ec8:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001eca:	f7fe ffbb 	bl	8000e44 <HAL_GetTick>
 8001ece:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ed0:	e00a      	b.n	8001ee8 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ed2:	f7fe ffb7 	bl	8000e44 <HAL_GetTick>
 8001ed6:	4602      	mov	r2, r0
 8001ed8:	693b      	ldr	r3, [r7, #16]
 8001eda:	1ad3      	subs	r3, r2, r3
 8001edc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ee0:	4293      	cmp	r3, r2
 8001ee2:	d901      	bls.n	8001ee8 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8001ee4:	2303      	movs	r3, #3
 8001ee6:	e077      	b.n	8001fd8 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ee8:	4b3e      	ldr	r3, [pc, #248]	; (8001fe4 <HAL_RCC_ClockConfig+0x260>)
 8001eea:	689b      	ldr	r3, [r3, #8]
 8001eec:	f003 020c 	and.w	r2, r3, #12
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	009b      	lsls	r3, r3, #2
 8001ef6:	429a      	cmp	r2, r3
 8001ef8:	d1eb      	bne.n	8001ed2 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8001efa:	697b      	ldr	r3, [r7, #20]
 8001efc:	2b80      	cmp	r3, #128	; 0x80
 8001efe:	d105      	bne.n	8001f0c <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001f00:	4b38      	ldr	r3, [pc, #224]	; (8001fe4 <HAL_RCC_ClockConfig+0x260>)
 8001f02:	689b      	ldr	r3, [r3, #8]
 8001f04:	4a37      	ldr	r2, [pc, #220]	; (8001fe4 <HAL_RCC_ClockConfig+0x260>)
 8001f06:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001f0a:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f003 0302 	and.w	r3, r3, #2
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d010      	beq.n	8001f3a <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	689a      	ldr	r2, [r3, #8]
 8001f1c:	4b31      	ldr	r3, [pc, #196]	; (8001fe4 <HAL_RCC_ClockConfig+0x260>)
 8001f1e:	689b      	ldr	r3, [r3, #8]
 8001f20:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001f24:	429a      	cmp	r2, r3
 8001f26:	d208      	bcs.n	8001f3a <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f28:	4b2e      	ldr	r3, [pc, #184]	; (8001fe4 <HAL_RCC_ClockConfig+0x260>)
 8001f2a:	689b      	ldr	r3, [r3, #8]
 8001f2c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	689b      	ldr	r3, [r3, #8]
 8001f34:	492b      	ldr	r1, [pc, #172]	; (8001fe4 <HAL_RCC_ClockConfig+0x260>)
 8001f36:	4313      	orrs	r3, r2
 8001f38:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001f3a:	4b29      	ldr	r3, [pc, #164]	; (8001fe0 <HAL_RCC_ClockConfig+0x25c>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f003 030f 	and.w	r3, r3, #15
 8001f42:	683a      	ldr	r2, [r7, #0]
 8001f44:	429a      	cmp	r2, r3
 8001f46:	d210      	bcs.n	8001f6a <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f48:	4b25      	ldr	r3, [pc, #148]	; (8001fe0 <HAL_RCC_ClockConfig+0x25c>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f023 020f 	bic.w	r2, r3, #15
 8001f50:	4923      	ldr	r1, [pc, #140]	; (8001fe0 <HAL_RCC_ClockConfig+0x25c>)
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	4313      	orrs	r3, r2
 8001f56:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f58:	4b21      	ldr	r3, [pc, #132]	; (8001fe0 <HAL_RCC_ClockConfig+0x25c>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f003 030f 	and.w	r3, r3, #15
 8001f60:	683a      	ldr	r2, [r7, #0]
 8001f62:	429a      	cmp	r2, r3
 8001f64:	d001      	beq.n	8001f6a <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8001f66:	2301      	movs	r3, #1
 8001f68:	e036      	b.n	8001fd8 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f003 0304 	and.w	r3, r3, #4
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d008      	beq.n	8001f88 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f76:	4b1b      	ldr	r3, [pc, #108]	; (8001fe4 <HAL_RCC_ClockConfig+0x260>)
 8001f78:	689b      	ldr	r3, [r3, #8]
 8001f7a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	68db      	ldr	r3, [r3, #12]
 8001f82:	4918      	ldr	r1, [pc, #96]	; (8001fe4 <HAL_RCC_ClockConfig+0x260>)
 8001f84:	4313      	orrs	r3, r2
 8001f86:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f003 0308 	and.w	r3, r3, #8
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d009      	beq.n	8001fa8 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001f94:	4b13      	ldr	r3, [pc, #76]	; (8001fe4 <HAL_RCC_ClockConfig+0x260>)
 8001f96:	689b      	ldr	r3, [r3, #8]
 8001f98:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	691b      	ldr	r3, [r3, #16]
 8001fa0:	00db      	lsls	r3, r3, #3
 8001fa2:	4910      	ldr	r1, [pc, #64]	; (8001fe4 <HAL_RCC_ClockConfig+0x260>)
 8001fa4:	4313      	orrs	r3, r2
 8001fa6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001fa8:	f000 f826 	bl	8001ff8 <HAL_RCC_GetSysClockFreq>
 8001fac:	4602      	mov	r2, r0
 8001fae:	4b0d      	ldr	r3, [pc, #52]	; (8001fe4 <HAL_RCC_ClockConfig+0x260>)
 8001fb0:	689b      	ldr	r3, [r3, #8]
 8001fb2:	091b      	lsrs	r3, r3, #4
 8001fb4:	f003 030f 	and.w	r3, r3, #15
 8001fb8:	490c      	ldr	r1, [pc, #48]	; (8001fec <HAL_RCC_ClockConfig+0x268>)
 8001fba:	5ccb      	ldrb	r3, [r1, r3]
 8001fbc:	f003 031f 	and.w	r3, r3, #31
 8001fc0:	fa22 f303 	lsr.w	r3, r2, r3
 8001fc4:	4a0a      	ldr	r2, [pc, #40]	; (8001ff0 <HAL_RCC_ClockConfig+0x26c>)
 8001fc6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001fc8:	4b0a      	ldr	r3, [pc, #40]	; (8001ff4 <HAL_RCC_ClockConfig+0x270>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	4618      	mov	r0, r3
 8001fce:	f7fe fe0d 	bl	8000bec <HAL_InitTick>
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	73fb      	strb	r3, [r7, #15]

  return status;
 8001fd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fd8:	4618      	mov	r0, r3
 8001fda:	3718      	adds	r7, #24
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	bd80      	pop	{r7, pc}
 8001fe0:	40022000 	.word	0x40022000
 8001fe4:	40021000 	.word	0x40021000
 8001fe8:	04c4b400 	.word	0x04c4b400
 8001fec:	08007144 	.word	0x08007144
 8001ff0:	20000000 	.word	0x20000000
 8001ff4:	20000004 	.word	0x20000004

08001ff8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	b089      	sub	sp, #36	; 0x24
 8001ffc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001ffe:	2300      	movs	r3, #0
 8002000:	61fb      	str	r3, [r7, #28]
 8002002:	2300      	movs	r3, #0
 8002004:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002006:	4b3e      	ldr	r3, [pc, #248]	; (8002100 <HAL_RCC_GetSysClockFreq+0x108>)
 8002008:	689b      	ldr	r3, [r3, #8]
 800200a:	f003 030c 	and.w	r3, r3, #12
 800200e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002010:	4b3b      	ldr	r3, [pc, #236]	; (8002100 <HAL_RCC_GetSysClockFreq+0x108>)
 8002012:	68db      	ldr	r3, [r3, #12]
 8002014:	f003 0303 	and.w	r3, r3, #3
 8002018:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800201a:	693b      	ldr	r3, [r7, #16]
 800201c:	2b00      	cmp	r3, #0
 800201e:	d005      	beq.n	800202c <HAL_RCC_GetSysClockFreq+0x34>
 8002020:	693b      	ldr	r3, [r7, #16]
 8002022:	2b0c      	cmp	r3, #12
 8002024:	d121      	bne.n	800206a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	2b01      	cmp	r3, #1
 800202a:	d11e      	bne.n	800206a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800202c:	4b34      	ldr	r3, [pc, #208]	; (8002100 <HAL_RCC_GetSysClockFreq+0x108>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f003 0308 	and.w	r3, r3, #8
 8002034:	2b00      	cmp	r3, #0
 8002036:	d107      	bne.n	8002048 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002038:	4b31      	ldr	r3, [pc, #196]	; (8002100 <HAL_RCC_GetSysClockFreq+0x108>)
 800203a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800203e:	0a1b      	lsrs	r3, r3, #8
 8002040:	f003 030f 	and.w	r3, r3, #15
 8002044:	61fb      	str	r3, [r7, #28]
 8002046:	e005      	b.n	8002054 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002048:	4b2d      	ldr	r3, [pc, #180]	; (8002100 <HAL_RCC_GetSysClockFreq+0x108>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	091b      	lsrs	r3, r3, #4
 800204e:	f003 030f 	and.w	r3, r3, #15
 8002052:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002054:	4a2b      	ldr	r2, [pc, #172]	; (8002104 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002056:	69fb      	ldr	r3, [r7, #28]
 8002058:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800205c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800205e:	693b      	ldr	r3, [r7, #16]
 8002060:	2b00      	cmp	r3, #0
 8002062:	d10d      	bne.n	8002080 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002064:	69fb      	ldr	r3, [r7, #28]
 8002066:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002068:	e00a      	b.n	8002080 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800206a:	693b      	ldr	r3, [r7, #16]
 800206c:	2b04      	cmp	r3, #4
 800206e:	d102      	bne.n	8002076 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002070:	4b25      	ldr	r3, [pc, #148]	; (8002108 <HAL_RCC_GetSysClockFreq+0x110>)
 8002072:	61bb      	str	r3, [r7, #24]
 8002074:	e004      	b.n	8002080 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002076:	693b      	ldr	r3, [r7, #16]
 8002078:	2b08      	cmp	r3, #8
 800207a:	d101      	bne.n	8002080 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800207c:	4b23      	ldr	r3, [pc, #140]	; (800210c <HAL_RCC_GetSysClockFreq+0x114>)
 800207e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002080:	693b      	ldr	r3, [r7, #16]
 8002082:	2b0c      	cmp	r3, #12
 8002084:	d134      	bne.n	80020f0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002086:	4b1e      	ldr	r3, [pc, #120]	; (8002100 <HAL_RCC_GetSysClockFreq+0x108>)
 8002088:	68db      	ldr	r3, [r3, #12]
 800208a:	f003 0303 	and.w	r3, r3, #3
 800208e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002090:	68bb      	ldr	r3, [r7, #8]
 8002092:	2b02      	cmp	r3, #2
 8002094:	d003      	beq.n	800209e <HAL_RCC_GetSysClockFreq+0xa6>
 8002096:	68bb      	ldr	r3, [r7, #8]
 8002098:	2b03      	cmp	r3, #3
 800209a:	d003      	beq.n	80020a4 <HAL_RCC_GetSysClockFreq+0xac>
 800209c:	e005      	b.n	80020aa <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800209e:	4b1a      	ldr	r3, [pc, #104]	; (8002108 <HAL_RCC_GetSysClockFreq+0x110>)
 80020a0:	617b      	str	r3, [r7, #20]
      break;
 80020a2:	e005      	b.n	80020b0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80020a4:	4b19      	ldr	r3, [pc, #100]	; (800210c <HAL_RCC_GetSysClockFreq+0x114>)
 80020a6:	617b      	str	r3, [r7, #20]
      break;
 80020a8:	e002      	b.n	80020b0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80020aa:	69fb      	ldr	r3, [r7, #28]
 80020ac:	617b      	str	r3, [r7, #20]
      break;
 80020ae:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80020b0:	4b13      	ldr	r3, [pc, #76]	; (8002100 <HAL_RCC_GetSysClockFreq+0x108>)
 80020b2:	68db      	ldr	r3, [r3, #12]
 80020b4:	091b      	lsrs	r3, r3, #4
 80020b6:	f003 030f 	and.w	r3, r3, #15
 80020ba:	3301      	adds	r3, #1
 80020bc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80020be:	4b10      	ldr	r3, [pc, #64]	; (8002100 <HAL_RCC_GetSysClockFreq+0x108>)
 80020c0:	68db      	ldr	r3, [r3, #12]
 80020c2:	0a1b      	lsrs	r3, r3, #8
 80020c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80020c8:	697a      	ldr	r2, [r7, #20]
 80020ca:	fb03 f202 	mul.w	r2, r3, r2
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80020d4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80020d6:	4b0a      	ldr	r3, [pc, #40]	; (8002100 <HAL_RCC_GetSysClockFreq+0x108>)
 80020d8:	68db      	ldr	r3, [r3, #12]
 80020da:	0e5b      	lsrs	r3, r3, #25
 80020dc:	f003 0303 	and.w	r3, r3, #3
 80020e0:	3301      	adds	r3, #1
 80020e2:	005b      	lsls	r3, r3, #1
 80020e4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80020e6:	697a      	ldr	r2, [r7, #20]
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80020ee:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80020f0:	69bb      	ldr	r3, [r7, #24]
}
 80020f2:	4618      	mov	r0, r3
 80020f4:	3724      	adds	r7, #36	; 0x24
 80020f6:	46bd      	mov	sp, r7
 80020f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fc:	4770      	bx	lr
 80020fe:	bf00      	nop
 8002100:	40021000 	.word	0x40021000
 8002104:	0800715c 	.word	0x0800715c
 8002108:	00f42400 	.word	0x00f42400
 800210c:	007a1200 	.word	0x007a1200

08002110 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002110:	b480      	push	{r7}
 8002112:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002114:	4b03      	ldr	r3, [pc, #12]	; (8002124 <HAL_RCC_GetHCLKFreq+0x14>)
 8002116:	681b      	ldr	r3, [r3, #0]
}
 8002118:	4618      	mov	r0, r3
 800211a:	46bd      	mov	sp, r7
 800211c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002120:	4770      	bx	lr
 8002122:	bf00      	nop
 8002124:	20000000 	.word	0x20000000

08002128 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800212c:	f7ff fff0 	bl	8002110 <HAL_RCC_GetHCLKFreq>
 8002130:	4602      	mov	r2, r0
 8002132:	4b06      	ldr	r3, [pc, #24]	; (800214c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002134:	689b      	ldr	r3, [r3, #8]
 8002136:	0a1b      	lsrs	r3, r3, #8
 8002138:	f003 0307 	and.w	r3, r3, #7
 800213c:	4904      	ldr	r1, [pc, #16]	; (8002150 <HAL_RCC_GetPCLK1Freq+0x28>)
 800213e:	5ccb      	ldrb	r3, [r1, r3]
 8002140:	f003 031f 	and.w	r3, r3, #31
 8002144:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002148:	4618      	mov	r0, r3
 800214a:	bd80      	pop	{r7, pc}
 800214c:	40021000 	.word	0x40021000
 8002150:	08007154 	.word	0x08007154

08002154 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002158:	f7ff ffda 	bl	8002110 <HAL_RCC_GetHCLKFreq>
 800215c:	4602      	mov	r2, r0
 800215e:	4b06      	ldr	r3, [pc, #24]	; (8002178 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002160:	689b      	ldr	r3, [r3, #8]
 8002162:	0adb      	lsrs	r3, r3, #11
 8002164:	f003 0307 	and.w	r3, r3, #7
 8002168:	4904      	ldr	r1, [pc, #16]	; (800217c <HAL_RCC_GetPCLK2Freq+0x28>)
 800216a:	5ccb      	ldrb	r3, [r1, r3]
 800216c:	f003 031f 	and.w	r3, r3, #31
 8002170:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002174:	4618      	mov	r0, r3
 8002176:	bd80      	pop	{r7, pc}
 8002178:	40021000 	.word	0x40021000
 800217c:	08007154 	.word	0x08007154

08002180 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002180:	b480      	push	{r7}
 8002182:	b083      	sub	sp, #12
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
 8002188:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	220f      	movs	r2, #15
 800218e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8002190:	4b12      	ldr	r3, [pc, #72]	; (80021dc <HAL_RCC_GetClockConfig+0x5c>)
 8002192:	689b      	ldr	r3, [r3, #8]
 8002194:	f003 0203 	and.w	r2, r3, #3
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 800219c:	4b0f      	ldr	r3, [pc, #60]	; (80021dc <HAL_RCC_GetClockConfig+0x5c>)
 800219e:	689b      	ldr	r3, [r3, #8]
 80021a0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80021a8:	4b0c      	ldr	r3, [pc, #48]	; (80021dc <HAL_RCC_GetClockConfig+0x5c>)
 80021aa:	689b      	ldr	r3, [r3, #8]
 80021ac:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80021b4:	4b09      	ldr	r3, [pc, #36]	; (80021dc <HAL_RCC_GetClockConfig+0x5c>)
 80021b6:	689b      	ldr	r3, [r3, #8]
 80021b8:	08db      	lsrs	r3, r3, #3
 80021ba:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80021c2:	4b07      	ldr	r3, [pc, #28]	; (80021e0 <HAL_RCC_GetClockConfig+0x60>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f003 020f 	and.w	r2, r3, #15
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	601a      	str	r2, [r3, #0]
}
 80021ce:	bf00      	nop
 80021d0:	370c      	adds	r7, #12
 80021d2:	46bd      	mov	sp, r7
 80021d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d8:	4770      	bx	lr
 80021da:	bf00      	nop
 80021dc:	40021000 	.word	0x40021000
 80021e0:	40022000 	.word	0x40022000

080021e4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b086      	sub	sp, #24
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80021ec:	2300      	movs	r3, #0
 80021ee:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80021f0:	4b27      	ldr	r3, [pc, #156]	; (8002290 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80021f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d003      	beq.n	8002204 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80021fc:	f7ff f8d4 	bl	80013a8 <HAL_PWREx_GetVoltageRange>
 8002200:	6178      	str	r0, [r7, #20]
 8002202:	e014      	b.n	800222e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002204:	4b22      	ldr	r3, [pc, #136]	; (8002290 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002206:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002208:	4a21      	ldr	r2, [pc, #132]	; (8002290 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800220a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800220e:	6593      	str	r3, [r2, #88]	; 0x58
 8002210:	4b1f      	ldr	r3, [pc, #124]	; (8002290 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002212:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002214:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002218:	60fb      	str	r3, [r7, #12]
 800221a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800221c:	f7ff f8c4 	bl	80013a8 <HAL_PWREx_GetVoltageRange>
 8002220:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002222:	4b1b      	ldr	r3, [pc, #108]	; (8002290 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002224:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002226:	4a1a      	ldr	r2, [pc, #104]	; (8002290 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002228:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800222c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800222e:	697b      	ldr	r3, [r7, #20]
 8002230:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002234:	d10b      	bne.n	800224e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	2b80      	cmp	r3, #128	; 0x80
 800223a:	d913      	bls.n	8002264 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	2ba0      	cmp	r3, #160	; 0xa0
 8002240:	d902      	bls.n	8002248 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002242:	2302      	movs	r3, #2
 8002244:	613b      	str	r3, [r7, #16]
 8002246:	e00d      	b.n	8002264 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002248:	2301      	movs	r3, #1
 800224a:	613b      	str	r3, [r7, #16]
 800224c:	e00a      	b.n	8002264 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	2b7f      	cmp	r3, #127	; 0x7f
 8002252:	d902      	bls.n	800225a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8002254:	2302      	movs	r3, #2
 8002256:	613b      	str	r3, [r7, #16]
 8002258:	e004      	b.n	8002264 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	2b70      	cmp	r3, #112	; 0x70
 800225e:	d101      	bne.n	8002264 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002260:	2301      	movs	r3, #1
 8002262:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002264:	4b0b      	ldr	r3, [pc, #44]	; (8002294 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f023 020f 	bic.w	r2, r3, #15
 800226c:	4909      	ldr	r1, [pc, #36]	; (8002294 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800226e:	693b      	ldr	r3, [r7, #16]
 8002270:	4313      	orrs	r3, r2
 8002272:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002274:	4b07      	ldr	r3, [pc, #28]	; (8002294 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f003 030f 	and.w	r3, r3, #15
 800227c:	693a      	ldr	r2, [r7, #16]
 800227e:	429a      	cmp	r2, r3
 8002280:	d001      	beq.n	8002286 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8002282:	2301      	movs	r3, #1
 8002284:	e000      	b.n	8002288 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8002286:	2300      	movs	r3, #0
}
 8002288:	4618      	mov	r0, r3
 800228a:	3718      	adds	r7, #24
 800228c:	46bd      	mov	sp, r7
 800228e:	bd80      	pop	{r7, pc}
 8002290:	40021000 	.word	0x40021000
 8002294:	40022000 	.word	0x40022000

08002298 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002298:	b480      	push	{r7}
 800229a:	b087      	sub	sp, #28
 800229c:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800229e:	4b2d      	ldr	r3, [pc, #180]	; (8002354 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80022a0:	68db      	ldr	r3, [r3, #12]
 80022a2:	f003 0303 	and.w	r3, r3, #3
 80022a6:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	2b03      	cmp	r3, #3
 80022ac:	d00b      	beq.n	80022c6 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	2b03      	cmp	r3, #3
 80022b2:	d825      	bhi.n	8002300 <RCC_GetSysClockFreqFromPLLSource+0x68>
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	2b01      	cmp	r3, #1
 80022b8:	d008      	beq.n	80022cc <RCC_GetSysClockFreqFromPLLSource+0x34>
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	2b02      	cmp	r3, #2
 80022be:	d11f      	bne.n	8002300 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 80022c0:	4b25      	ldr	r3, [pc, #148]	; (8002358 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80022c2:	613b      	str	r3, [r7, #16]
    break;
 80022c4:	e01f      	b.n	8002306 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 80022c6:	4b25      	ldr	r3, [pc, #148]	; (800235c <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 80022c8:	613b      	str	r3, [r7, #16]
    break;
 80022ca:	e01c      	b.n	8002306 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80022cc:	4b21      	ldr	r3, [pc, #132]	; (8002354 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f003 0308 	and.w	r3, r3, #8
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d107      	bne.n	80022e8 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80022d8:	4b1e      	ldr	r3, [pc, #120]	; (8002354 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80022da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80022de:	0a1b      	lsrs	r3, r3, #8
 80022e0:	f003 030f 	and.w	r3, r3, #15
 80022e4:	617b      	str	r3, [r7, #20]
 80022e6:	e005      	b.n	80022f4 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80022e8:	4b1a      	ldr	r3, [pc, #104]	; (8002354 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	091b      	lsrs	r3, r3, #4
 80022ee:	f003 030f 	and.w	r3, r3, #15
 80022f2:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 80022f4:	4a1a      	ldr	r2, [pc, #104]	; (8002360 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 80022f6:	697b      	ldr	r3, [r7, #20]
 80022f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022fc:	613b      	str	r3, [r7, #16]
    break;
 80022fe:	e002      	b.n	8002306 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8002300:	2300      	movs	r3, #0
 8002302:	613b      	str	r3, [r7, #16]
    break;
 8002304:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002306:	4b13      	ldr	r3, [pc, #76]	; (8002354 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002308:	68db      	ldr	r3, [r3, #12]
 800230a:	091b      	lsrs	r3, r3, #4
 800230c:	f003 030f 	and.w	r3, r3, #15
 8002310:	3301      	adds	r3, #1
 8002312:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002314:	4b0f      	ldr	r3, [pc, #60]	; (8002354 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002316:	68db      	ldr	r3, [r3, #12]
 8002318:	0a1b      	lsrs	r3, r3, #8
 800231a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800231e:	693a      	ldr	r2, [r7, #16]
 8002320:	fb03 f202 	mul.w	r2, r3, r2
 8002324:	68bb      	ldr	r3, [r7, #8]
 8002326:	fbb2 f3f3 	udiv	r3, r2, r3
 800232a:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800232c:	4b09      	ldr	r3, [pc, #36]	; (8002354 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800232e:	68db      	ldr	r3, [r3, #12]
 8002330:	0e5b      	lsrs	r3, r3, #25
 8002332:	f003 0303 	and.w	r3, r3, #3
 8002336:	3301      	adds	r3, #1
 8002338:	005b      	lsls	r3, r3, #1
 800233a:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 800233c:	693a      	ldr	r2, [r7, #16]
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	fbb2 f3f3 	udiv	r3, r2, r3
 8002344:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8002346:	683b      	ldr	r3, [r7, #0]
}
 8002348:	4618      	mov	r0, r3
 800234a:	371c      	adds	r7, #28
 800234c:	46bd      	mov	sp, r7
 800234e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002352:	4770      	bx	lr
 8002354:	40021000 	.word	0x40021000
 8002358:	00f42400 	.word	0x00f42400
 800235c:	007a1200 	.word	0x007a1200
 8002360:	0800715c 	.word	0x0800715c

08002364 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b086      	sub	sp, #24
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800236c:	2300      	movs	r3, #0
 800236e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002370:	2300      	movs	r3, #0
 8002372:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800237c:	2b00      	cmp	r3, #0
 800237e:	d040      	beq.n	8002402 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002384:	2b80      	cmp	r3, #128	; 0x80
 8002386:	d02a      	beq.n	80023de <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002388:	2b80      	cmp	r3, #128	; 0x80
 800238a:	d825      	bhi.n	80023d8 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800238c:	2b60      	cmp	r3, #96	; 0x60
 800238e:	d026      	beq.n	80023de <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002390:	2b60      	cmp	r3, #96	; 0x60
 8002392:	d821      	bhi.n	80023d8 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8002394:	2b40      	cmp	r3, #64	; 0x40
 8002396:	d006      	beq.n	80023a6 <HAL_RCCEx_PeriphCLKConfig+0x42>
 8002398:	2b40      	cmp	r3, #64	; 0x40
 800239a:	d81d      	bhi.n	80023d8 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800239c:	2b00      	cmp	r3, #0
 800239e:	d009      	beq.n	80023b4 <HAL_RCCEx_PeriphCLKConfig+0x50>
 80023a0:	2b20      	cmp	r3, #32
 80023a2:	d010      	beq.n	80023c6 <HAL_RCCEx_PeriphCLKConfig+0x62>
 80023a4:	e018      	b.n	80023d8 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80023a6:	4b89      	ldr	r3, [pc, #548]	; (80025cc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80023a8:	68db      	ldr	r3, [r3, #12]
 80023aa:	4a88      	ldr	r2, [pc, #544]	; (80025cc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80023ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023b0:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80023b2:	e015      	b.n	80023e0 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	3304      	adds	r3, #4
 80023b8:	2100      	movs	r1, #0
 80023ba:	4618      	mov	r0, r3
 80023bc:	f000 fb02 	bl	80029c4 <RCCEx_PLLSAI1_Config>
 80023c0:	4603      	mov	r3, r0
 80023c2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80023c4:	e00c      	b.n	80023e0 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	3320      	adds	r3, #32
 80023ca:	2100      	movs	r1, #0
 80023cc:	4618      	mov	r0, r3
 80023ce:	f000 fbed 	bl	8002bac <RCCEx_PLLSAI2_Config>
 80023d2:	4603      	mov	r3, r0
 80023d4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80023d6:	e003      	b.n	80023e0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80023d8:	2301      	movs	r3, #1
 80023da:	74fb      	strb	r3, [r7, #19]
      break;
 80023dc:	e000      	b.n	80023e0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 80023de:	bf00      	nop
    }

    if(ret == HAL_OK)
 80023e0:	7cfb      	ldrb	r3, [r7, #19]
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d10b      	bne.n	80023fe <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80023e6:	4b79      	ldr	r3, [pc, #484]	; (80025cc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80023e8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80023ec:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80023f4:	4975      	ldr	r1, [pc, #468]	; (80025cc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80023f6:	4313      	orrs	r3, r2
 80023f8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 80023fc:	e001      	b.n	8002402 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80023fe:	7cfb      	ldrb	r3, [r7, #19]
 8002400:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800240a:	2b00      	cmp	r3, #0
 800240c:	d047      	beq.n	800249e <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002412:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002416:	d030      	beq.n	800247a <HAL_RCCEx_PeriphCLKConfig+0x116>
 8002418:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800241c:	d82a      	bhi.n	8002474 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800241e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002422:	d02a      	beq.n	800247a <HAL_RCCEx_PeriphCLKConfig+0x116>
 8002424:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002428:	d824      	bhi.n	8002474 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800242a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800242e:	d008      	beq.n	8002442 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8002430:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002434:	d81e      	bhi.n	8002474 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8002436:	2b00      	cmp	r3, #0
 8002438:	d00a      	beq.n	8002450 <HAL_RCCEx_PeriphCLKConfig+0xec>
 800243a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800243e:	d010      	beq.n	8002462 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8002440:	e018      	b.n	8002474 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002442:	4b62      	ldr	r3, [pc, #392]	; (80025cc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002444:	68db      	ldr	r3, [r3, #12]
 8002446:	4a61      	ldr	r2, [pc, #388]	; (80025cc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002448:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800244c:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800244e:	e015      	b.n	800247c <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	3304      	adds	r3, #4
 8002454:	2100      	movs	r1, #0
 8002456:	4618      	mov	r0, r3
 8002458:	f000 fab4 	bl	80029c4 <RCCEx_PLLSAI1_Config>
 800245c:	4603      	mov	r3, r0
 800245e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002460:	e00c      	b.n	800247c <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	3320      	adds	r3, #32
 8002466:	2100      	movs	r1, #0
 8002468:	4618      	mov	r0, r3
 800246a:	f000 fb9f 	bl	8002bac <RCCEx_PLLSAI2_Config>
 800246e:	4603      	mov	r3, r0
 8002470:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002472:	e003      	b.n	800247c <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002474:	2301      	movs	r3, #1
 8002476:	74fb      	strb	r3, [r7, #19]
      break;
 8002478:	e000      	b.n	800247c <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 800247a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800247c:	7cfb      	ldrb	r3, [r7, #19]
 800247e:	2b00      	cmp	r3, #0
 8002480:	d10b      	bne.n	800249a <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002482:	4b52      	ldr	r3, [pc, #328]	; (80025cc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002484:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002488:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002490:	494e      	ldr	r1, [pc, #312]	; (80025cc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002492:	4313      	orrs	r3, r2
 8002494:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8002498:	e001      	b.n	800249e <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800249a:	7cfb      	ldrb	r3, [r7, #19]
 800249c:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	f000 809f 	beq.w	80025ea <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 80024ac:	2300      	movs	r3, #0
 80024ae:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80024b0:	4b46      	ldr	r3, [pc, #280]	; (80025cc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80024b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d101      	bne.n	80024c0 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 80024bc:	2301      	movs	r3, #1
 80024be:	e000      	b.n	80024c2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 80024c0:	2300      	movs	r3, #0
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d00d      	beq.n	80024e2 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80024c6:	4b41      	ldr	r3, [pc, #260]	; (80025cc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80024c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024ca:	4a40      	ldr	r2, [pc, #256]	; (80025cc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80024cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024d0:	6593      	str	r3, [r2, #88]	; 0x58
 80024d2:	4b3e      	ldr	r3, [pc, #248]	; (80025cc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80024d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024da:	60bb      	str	r3, [r7, #8]
 80024dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80024de:	2301      	movs	r3, #1
 80024e0:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80024e2:	4b3b      	ldr	r3, [pc, #236]	; (80025d0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	4a3a      	ldr	r2, [pc, #232]	; (80025d0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80024e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024ec:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80024ee:	f7fe fca9 	bl	8000e44 <HAL_GetTick>
 80024f2:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80024f4:	e009      	b.n	800250a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024f6:	f7fe fca5 	bl	8000e44 <HAL_GetTick>
 80024fa:	4602      	mov	r2, r0
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	1ad3      	subs	r3, r2, r3
 8002500:	2b02      	cmp	r3, #2
 8002502:	d902      	bls.n	800250a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8002504:	2303      	movs	r3, #3
 8002506:	74fb      	strb	r3, [r7, #19]
        break;
 8002508:	e005      	b.n	8002516 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800250a:	4b31      	ldr	r3, [pc, #196]	; (80025d0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002512:	2b00      	cmp	r3, #0
 8002514:	d0ef      	beq.n	80024f6 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8002516:	7cfb      	ldrb	r3, [r7, #19]
 8002518:	2b00      	cmp	r3, #0
 800251a:	d15b      	bne.n	80025d4 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800251c:	4b2b      	ldr	r3, [pc, #172]	; (80025cc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800251e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002522:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002526:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002528:	697b      	ldr	r3, [r7, #20]
 800252a:	2b00      	cmp	r3, #0
 800252c:	d01f      	beq.n	800256e <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002534:	697a      	ldr	r2, [r7, #20]
 8002536:	429a      	cmp	r2, r3
 8002538:	d019      	beq.n	800256e <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800253a:	4b24      	ldr	r3, [pc, #144]	; (80025cc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800253c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002540:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002544:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002546:	4b21      	ldr	r3, [pc, #132]	; (80025cc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002548:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800254c:	4a1f      	ldr	r2, [pc, #124]	; (80025cc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800254e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002552:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002556:	4b1d      	ldr	r3, [pc, #116]	; (80025cc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002558:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800255c:	4a1b      	ldr	r2, [pc, #108]	; (80025cc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800255e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002562:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002566:	4a19      	ldr	r2, [pc, #100]	; (80025cc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002568:	697b      	ldr	r3, [r7, #20]
 800256a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800256e:	697b      	ldr	r3, [r7, #20]
 8002570:	f003 0301 	and.w	r3, r3, #1
 8002574:	2b00      	cmp	r3, #0
 8002576:	d016      	beq.n	80025a6 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002578:	f7fe fc64 	bl	8000e44 <HAL_GetTick>
 800257c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800257e:	e00b      	b.n	8002598 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002580:	f7fe fc60 	bl	8000e44 <HAL_GetTick>
 8002584:	4602      	mov	r2, r0
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	1ad3      	subs	r3, r2, r3
 800258a:	f241 3288 	movw	r2, #5000	; 0x1388
 800258e:	4293      	cmp	r3, r2
 8002590:	d902      	bls.n	8002598 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8002592:	2303      	movs	r3, #3
 8002594:	74fb      	strb	r3, [r7, #19]
            break;
 8002596:	e006      	b.n	80025a6 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002598:	4b0c      	ldr	r3, [pc, #48]	; (80025cc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800259a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800259e:	f003 0302 	and.w	r3, r3, #2
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d0ec      	beq.n	8002580 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 80025a6:	7cfb      	ldrb	r3, [r7, #19]
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d10c      	bne.n	80025c6 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80025ac:	4b07      	ldr	r3, [pc, #28]	; (80025cc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80025ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025b2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025bc:	4903      	ldr	r1, [pc, #12]	; (80025cc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80025be:	4313      	orrs	r3, r2
 80025c0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80025c4:	e008      	b.n	80025d8 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80025c6:	7cfb      	ldrb	r3, [r7, #19]
 80025c8:	74bb      	strb	r3, [r7, #18]
 80025ca:	e005      	b.n	80025d8 <HAL_RCCEx_PeriphCLKConfig+0x274>
 80025cc:	40021000 	.word	0x40021000
 80025d0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80025d4:	7cfb      	ldrb	r3, [r7, #19]
 80025d6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80025d8:	7c7b      	ldrb	r3, [r7, #17]
 80025da:	2b01      	cmp	r3, #1
 80025dc:	d105      	bne.n	80025ea <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025de:	4ba0      	ldr	r3, [pc, #640]	; (8002860 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80025e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025e2:	4a9f      	ldr	r2, [pc, #636]	; (8002860 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80025e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80025e8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f003 0301 	and.w	r3, r3, #1
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d00a      	beq.n	800260c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80025f6:	4b9a      	ldr	r3, [pc, #616]	; (8002860 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80025f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025fc:	f023 0203 	bic.w	r2, r3, #3
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002604:	4996      	ldr	r1, [pc, #600]	; (8002860 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002606:	4313      	orrs	r3, r2
 8002608:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f003 0302 	and.w	r3, r3, #2
 8002614:	2b00      	cmp	r3, #0
 8002616:	d00a      	beq.n	800262e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002618:	4b91      	ldr	r3, [pc, #580]	; (8002860 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800261a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800261e:	f023 020c 	bic.w	r2, r3, #12
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002626:	498e      	ldr	r1, [pc, #568]	; (8002860 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002628:	4313      	orrs	r3, r2
 800262a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f003 0304 	and.w	r3, r3, #4
 8002636:	2b00      	cmp	r3, #0
 8002638:	d00a      	beq.n	8002650 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800263a:	4b89      	ldr	r3, [pc, #548]	; (8002860 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800263c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002640:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002648:	4985      	ldr	r1, [pc, #532]	; (8002860 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800264a:	4313      	orrs	r3, r2
 800264c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f003 0308 	and.w	r3, r3, #8
 8002658:	2b00      	cmp	r3, #0
 800265a:	d00a      	beq.n	8002672 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800265c:	4b80      	ldr	r3, [pc, #512]	; (8002860 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800265e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002662:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800266a:	497d      	ldr	r1, [pc, #500]	; (8002860 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800266c:	4313      	orrs	r3, r2
 800266e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f003 0310 	and.w	r3, r3, #16
 800267a:	2b00      	cmp	r3, #0
 800267c:	d00a      	beq.n	8002694 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800267e:	4b78      	ldr	r3, [pc, #480]	; (8002860 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002680:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002684:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800268c:	4974      	ldr	r1, [pc, #464]	; (8002860 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800268e:	4313      	orrs	r3, r2
 8002690:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f003 0320 	and.w	r3, r3, #32
 800269c:	2b00      	cmp	r3, #0
 800269e:	d00a      	beq.n	80026b6 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80026a0:	4b6f      	ldr	r3, [pc, #444]	; (8002860 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80026a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026a6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026ae:	496c      	ldr	r1, [pc, #432]	; (8002860 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80026b0:	4313      	orrs	r3, r2
 80026b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d00a      	beq.n	80026d8 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80026c2:	4b67      	ldr	r3, [pc, #412]	; (8002860 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80026c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026c8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80026d0:	4963      	ldr	r1, [pc, #396]	; (8002860 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80026d2:	4313      	orrs	r3, r2
 80026d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d00a      	beq.n	80026fa <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80026e4:	4b5e      	ldr	r3, [pc, #376]	; (8002860 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80026e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026ea:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80026f2:	495b      	ldr	r1, [pc, #364]	; (8002860 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80026f4:	4313      	orrs	r3, r2
 80026f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002702:	2b00      	cmp	r3, #0
 8002704:	d00a      	beq.n	800271c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002706:	4b56      	ldr	r3, [pc, #344]	; (8002860 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002708:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800270c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002714:	4952      	ldr	r1, [pc, #328]	; (8002860 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002716:	4313      	orrs	r3, r2
 8002718:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002724:	2b00      	cmp	r3, #0
 8002726:	d00a      	beq.n	800273e <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002728:	4b4d      	ldr	r3, [pc, #308]	; (8002860 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800272a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800272e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002736:	494a      	ldr	r1, [pc, #296]	; (8002860 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002738:	4313      	orrs	r3, r2
 800273a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002746:	2b00      	cmp	r3, #0
 8002748:	d00a      	beq.n	8002760 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800274a:	4b45      	ldr	r3, [pc, #276]	; (8002860 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800274c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002750:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002758:	4941      	ldr	r1, [pc, #260]	; (8002860 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800275a:	4313      	orrs	r3, r2
 800275c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002768:	2b00      	cmp	r3, #0
 800276a:	d00a      	beq.n	8002782 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800276c:	4b3c      	ldr	r3, [pc, #240]	; (8002860 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800276e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002772:	f023 0203 	bic.w	r2, r3, #3
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800277a:	4939      	ldr	r1, [pc, #228]	; (8002860 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800277c:	4313      	orrs	r3, r2
 800277e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800278a:	2b00      	cmp	r3, #0
 800278c:	d028      	beq.n	80027e0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800278e:	4b34      	ldr	r3, [pc, #208]	; (8002860 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002790:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002794:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800279c:	4930      	ldr	r1, [pc, #192]	; (8002860 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800279e:	4313      	orrs	r3, r2
 80027a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80027a8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80027ac:	d106      	bne.n	80027bc <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80027ae:	4b2c      	ldr	r3, [pc, #176]	; (8002860 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80027b0:	68db      	ldr	r3, [r3, #12]
 80027b2:	4a2b      	ldr	r2, [pc, #172]	; (8002860 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80027b4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80027b8:	60d3      	str	r3, [r2, #12]
 80027ba:	e011      	b.n	80027e0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80027c0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80027c4:	d10c      	bne.n	80027e0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	3304      	adds	r3, #4
 80027ca:	2101      	movs	r1, #1
 80027cc:	4618      	mov	r0, r3
 80027ce:	f000 f8f9 	bl	80029c4 <RCCEx_PLLSAI1_Config>
 80027d2:	4603      	mov	r3, r0
 80027d4:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80027d6:	7cfb      	ldrb	r3, [r7, #19]
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d001      	beq.n	80027e0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 80027dc:	7cfb      	ldrb	r3, [r7, #19]
 80027de:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d04d      	beq.n	8002888 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80027f0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80027f4:	d108      	bne.n	8002808 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 80027f6:	4b1a      	ldr	r3, [pc, #104]	; (8002860 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80027f8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80027fc:	4a18      	ldr	r2, [pc, #96]	; (8002860 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80027fe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002802:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8002806:	e012      	b.n	800282e <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8002808:	4b15      	ldr	r3, [pc, #84]	; (8002860 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800280a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800280e:	4a14      	ldr	r2, [pc, #80]	; (8002860 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002810:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002814:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8002818:	4b11      	ldr	r3, [pc, #68]	; (8002860 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800281a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800281e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002826:	490e      	ldr	r1, [pc, #56]	; (8002860 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002828:	4313      	orrs	r3, r2
 800282a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002832:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002836:	d106      	bne.n	8002846 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002838:	4b09      	ldr	r3, [pc, #36]	; (8002860 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800283a:	68db      	ldr	r3, [r3, #12]
 800283c:	4a08      	ldr	r2, [pc, #32]	; (8002860 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800283e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002842:	60d3      	str	r3, [r2, #12]
 8002844:	e020      	b.n	8002888 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800284a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800284e:	d109      	bne.n	8002864 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002850:	4b03      	ldr	r3, [pc, #12]	; (8002860 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002852:	68db      	ldr	r3, [r3, #12]
 8002854:	4a02      	ldr	r2, [pc, #8]	; (8002860 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002856:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800285a:	60d3      	str	r3, [r2, #12]
 800285c:	e014      	b.n	8002888 <HAL_RCCEx_PeriphCLKConfig+0x524>
 800285e:	bf00      	nop
 8002860:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002868:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800286c:	d10c      	bne.n	8002888 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	3304      	adds	r3, #4
 8002872:	2101      	movs	r1, #1
 8002874:	4618      	mov	r0, r3
 8002876:	f000 f8a5 	bl	80029c4 <RCCEx_PLLSAI1_Config>
 800287a:	4603      	mov	r3, r0
 800287c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800287e:	7cfb      	ldrb	r3, [r7, #19]
 8002880:	2b00      	cmp	r3, #0
 8002882:	d001      	beq.n	8002888 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8002884:	7cfb      	ldrb	r3, [r7, #19]
 8002886:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002890:	2b00      	cmp	r3, #0
 8002892:	d028      	beq.n	80028e6 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002894:	4b4a      	ldr	r3, [pc, #296]	; (80029c0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002896:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800289a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80028a2:	4947      	ldr	r1, [pc, #284]	; (80029c0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80028a4:	4313      	orrs	r3, r2
 80028a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80028ae:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80028b2:	d106      	bne.n	80028c2 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80028b4:	4b42      	ldr	r3, [pc, #264]	; (80029c0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80028b6:	68db      	ldr	r3, [r3, #12]
 80028b8:	4a41      	ldr	r2, [pc, #260]	; (80029c0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80028ba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80028be:	60d3      	str	r3, [r2, #12]
 80028c0:	e011      	b.n	80028e6 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80028c6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80028ca:	d10c      	bne.n	80028e6 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	3304      	adds	r3, #4
 80028d0:	2101      	movs	r1, #1
 80028d2:	4618      	mov	r0, r3
 80028d4:	f000 f876 	bl	80029c4 <RCCEx_PLLSAI1_Config>
 80028d8:	4603      	mov	r3, r0
 80028da:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80028dc:	7cfb      	ldrb	r3, [r7, #19]
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d001      	beq.n	80028e6 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 80028e2:	7cfb      	ldrb	r3, [r7, #19]
 80028e4:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d01e      	beq.n	8002930 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80028f2:	4b33      	ldr	r3, [pc, #204]	; (80029c0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80028f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028f8:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002902:	492f      	ldr	r1, [pc, #188]	; (80029c0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002904:	4313      	orrs	r3, r2
 8002906:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002910:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002914:	d10c      	bne.n	8002930 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	3304      	adds	r3, #4
 800291a:	2102      	movs	r1, #2
 800291c:	4618      	mov	r0, r3
 800291e:	f000 f851 	bl	80029c4 <RCCEx_PLLSAI1_Config>
 8002922:	4603      	mov	r3, r0
 8002924:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002926:	7cfb      	ldrb	r3, [r7, #19]
 8002928:	2b00      	cmp	r3, #0
 800292a:	d001      	beq.n	8002930 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 800292c:	7cfb      	ldrb	r3, [r7, #19]
 800292e:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002938:	2b00      	cmp	r3, #0
 800293a:	d00b      	beq.n	8002954 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800293c:	4b20      	ldr	r3, [pc, #128]	; (80029c0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800293e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002942:	f023 0204 	bic.w	r2, r3, #4
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800294c:	491c      	ldr	r1, [pc, #112]	; (80029c0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800294e:	4313      	orrs	r3, r2
 8002950:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800295c:	2b00      	cmp	r3, #0
 800295e:	d00b      	beq.n	8002978 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002960:	4b17      	ldr	r3, [pc, #92]	; (80029c0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002962:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002966:	f023 0218 	bic.w	r2, r3, #24
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002970:	4913      	ldr	r1, [pc, #76]	; (80029c0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002972:	4313      	orrs	r3, r2
 8002974:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002980:	2b00      	cmp	r3, #0
 8002982:	d017      	beq.n	80029b4 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8002984:	4b0e      	ldr	r3, [pc, #56]	; (80029c0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002986:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800298a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002994:	490a      	ldr	r1, [pc, #40]	; (80029c0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002996:	4313      	orrs	r3, r2
 8002998:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80029a2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80029a6:	d105      	bne.n	80029b4 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80029a8:	4b05      	ldr	r3, [pc, #20]	; (80029c0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80029aa:	68db      	ldr	r3, [r3, #12]
 80029ac:	4a04      	ldr	r2, [pc, #16]	; (80029c0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80029ae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80029b2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80029b4:	7cbb      	ldrb	r3, [r7, #18]
}
 80029b6:	4618      	mov	r0, r3
 80029b8:	3718      	adds	r7, #24
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bd80      	pop	{r7, pc}
 80029be:	bf00      	nop
 80029c0:	40021000 	.word	0x40021000

080029c4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b084      	sub	sp, #16
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
 80029cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80029ce:	2300      	movs	r3, #0
 80029d0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80029d2:	4b72      	ldr	r3, [pc, #456]	; (8002b9c <RCCEx_PLLSAI1_Config+0x1d8>)
 80029d4:	68db      	ldr	r3, [r3, #12]
 80029d6:	f003 0303 	and.w	r3, r3, #3
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d00e      	beq.n	80029fc <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80029de:	4b6f      	ldr	r3, [pc, #444]	; (8002b9c <RCCEx_PLLSAI1_Config+0x1d8>)
 80029e0:	68db      	ldr	r3, [r3, #12]
 80029e2:	f003 0203 	and.w	r2, r3, #3
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	429a      	cmp	r2, r3
 80029ec:	d103      	bne.n	80029f6 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
       ||
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d142      	bne.n	8002a7c <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 80029f6:	2301      	movs	r3, #1
 80029f8:	73fb      	strb	r3, [r7, #15]
 80029fa:	e03f      	b.n	8002a7c <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	2b03      	cmp	r3, #3
 8002a02:	d018      	beq.n	8002a36 <RCCEx_PLLSAI1_Config+0x72>
 8002a04:	2b03      	cmp	r3, #3
 8002a06:	d825      	bhi.n	8002a54 <RCCEx_PLLSAI1_Config+0x90>
 8002a08:	2b01      	cmp	r3, #1
 8002a0a:	d002      	beq.n	8002a12 <RCCEx_PLLSAI1_Config+0x4e>
 8002a0c:	2b02      	cmp	r3, #2
 8002a0e:	d009      	beq.n	8002a24 <RCCEx_PLLSAI1_Config+0x60>
 8002a10:	e020      	b.n	8002a54 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002a12:	4b62      	ldr	r3, [pc, #392]	; (8002b9c <RCCEx_PLLSAI1_Config+0x1d8>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f003 0302 	and.w	r3, r3, #2
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d11d      	bne.n	8002a5a <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8002a1e:	2301      	movs	r3, #1
 8002a20:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a22:	e01a      	b.n	8002a5a <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002a24:	4b5d      	ldr	r3, [pc, #372]	; (8002b9c <RCCEx_PLLSAI1_Config+0x1d8>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d116      	bne.n	8002a5e <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8002a30:	2301      	movs	r3, #1
 8002a32:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a34:	e013      	b.n	8002a5e <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002a36:	4b59      	ldr	r3, [pc, #356]	; (8002b9c <RCCEx_PLLSAI1_Config+0x1d8>)
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d10f      	bne.n	8002a62 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002a42:	4b56      	ldr	r3, [pc, #344]	; (8002b9c <RCCEx_PLLSAI1_Config+0x1d8>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d109      	bne.n	8002a62 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 8002a4e:	2301      	movs	r3, #1
 8002a50:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002a52:	e006      	b.n	8002a62 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8002a54:	2301      	movs	r3, #1
 8002a56:	73fb      	strb	r3, [r7, #15]
      break;
 8002a58:	e004      	b.n	8002a64 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8002a5a:	bf00      	nop
 8002a5c:	e002      	b.n	8002a64 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8002a5e:	bf00      	nop
 8002a60:	e000      	b.n	8002a64 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8002a62:	bf00      	nop
    }

    if(status == HAL_OK)
 8002a64:	7bfb      	ldrb	r3, [r7, #15]
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d108      	bne.n	8002a7c <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8002a6a:	4b4c      	ldr	r3, [pc, #304]	; (8002b9c <RCCEx_PLLSAI1_Config+0x1d8>)
 8002a6c:	68db      	ldr	r3, [r3, #12]
 8002a6e:	f023 0203 	bic.w	r2, r3, #3
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	4949      	ldr	r1, [pc, #292]	; (8002b9c <RCCEx_PLLSAI1_Config+0x1d8>)
 8002a78:	4313      	orrs	r3, r2
 8002a7a:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8002a7c:	7bfb      	ldrb	r3, [r7, #15]
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	f040 8086 	bne.w	8002b90 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002a84:	4b45      	ldr	r3, [pc, #276]	; (8002b9c <RCCEx_PLLSAI1_Config+0x1d8>)
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	4a44      	ldr	r2, [pc, #272]	; (8002b9c <RCCEx_PLLSAI1_Config+0x1d8>)
 8002a8a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002a8e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a90:	f7fe f9d8 	bl	8000e44 <HAL_GetTick>
 8002a94:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002a96:	e009      	b.n	8002aac <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002a98:	f7fe f9d4 	bl	8000e44 <HAL_GetTick>
 8002a9c:	4602      	mov	r2, r0
 8002a9e:	68bb      	ldr	r3, [r7, #8]
 8002aa0:	1ad3      	subs	r3, r2, r3
 8002aa2:	2b02      	cmp	r3, #2
 8002aa4:	d902      	bls.n	8002aac <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8002aa6:	2303      	movs	r3, #3
 8002aa8:	73fb      	strb	r3, [r7, #15]
        break;
 8002aaa:	e005      	b.n	8002ab8 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002aac:	4b3b      	ldr	r3, [pc, #236]	; (8002b9c <RCCEx_PLLSAI1_Config+0x1d8>)
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d1ef      	bne.n	8002a98 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8002ab8:	7bfb      	ldrb	r3, [r7, #15]
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d168      	bne.n	8002b90 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d113      	bne.n	8002aec <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002ac4:	4b35      	ldr	r3, [pc, #212]	; (8002b9c <RCCEx_PLLSAI1_Config+0x1d8>)
 8002ac6:	691a      	ldr	r2, [r3, #16]
 8002ac8:	4b35      	ldr	r3, [pc, #212]	; (8002ba0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002aca:	4013      	ands	r3, r2
 8002acc:	687a      	ldr	r2, [r7, #4]
 8002ace:	6892      	ldr	r2, [r2, #8]
 8002ad0:	0211      	lsls	r1, r2, #8
 8002ad2:	687a      	ldr	r2, [r7, #4]
 8002ad4:	68d2      	ldr	r2, [r2, #12]
 8002ad6:	06d2      	lsls	r2, r2, #27
 8002ad8:	4311      	orrs	r1, r2
 8002ada:	687a      	ldr	r2, [r7, #4]
 8002adc:	6852      	ldr	r2, [r2, #4]
 8002ade:	3a01      	subs	r2, #1
 8002ae0:	0112      	lsls	r2, r2, #4
 8002ae2:	430a      	orrs	r2, r1
 8002ae4:	492d      	ldr	r1, [pc, #180]	; (8002b9c <RCCEx_PLLSAI1_Config+0x1d8>)
 8002ae6:	4313      	orrs	r3, r2
 8002ae8:	610b      	str	r3, [r1, #16]
 8002aea:	e02d      	b.n	8002b48 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	2b01      	cmp	r3, #1
 8002af0:	d115      	bne.n	8002b1e <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002af2:	4b2a      	ldr	r3, [pc, #168]	; (8002b9c <RCCEx_PLLSAI1_Config+0x1d8>)
 8002af4:	691a      	ldr	r2, [r3, #16]
 8002af6:	4b2b      	ldr	r3, [pc, #172]	; (8002ba4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002af8:	4013      	ands	r3, r2
 8002afa:	687a      	ldr	r2, [r7, #4]
 8002afc:	6892      	ldr	r2, [r2, #8]
 8002afe:	0211      	lsls	r1, r2, #8
 8002b00:	687a      	ldr	r2, [r7, #4]
 8002b02:	6912      	ldr	r2, [r2, #16]
 8002b04:	0852      	lsrs	r2, r2, #1
 8002b06:	3a01      	subs	r2, #1
 8002b08:	0552      	lsls	r2, r2, #21
 8002b0a:	4311      	orrs	r1, r2
 8002b0c:	687a      	ldr	r2, [r7, #4]
 8002b0e:	6852      	ldr	r2, [r2, #4]
 8002b10:	3a01      	subs	r2, #1
 8002b12:	0112      	lsls	r2, r2, #4
 8002b14:	430a      	orrs	r2, r1
 8002b16:	4921      	ldr	r1, [pc, #132]	; (8002b9c <RCCEx_PLLSAI1_Config+0x1d8>)
 8002b18:	4313      	orrs	r3, r2
 8002b1a:	610b      	str	r3, [r1, #16]
 8002b1c:	e014      	b.n	8002b48 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002b1e:	4b1f      	ldr	r3, [pc, #124]	; (8002b9c <RCCEx_PLLSAI1_Config+0x1d8>)
 8002b20:	691a      	ldr	r2, [r3, #16]
 8002b22:	4b21      	ldr	r3, [pc, #132]	; (8002ba8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b24:	4013      	ands	r3, r2
 8002b26:	687a      	ldr	r2, [r7, #4]
 8002b28:	6892      	ldr	r2, [r2, #8]
 8002b2a:	0211      	lsls	r1, r2, #8
 8002b2c:	687a      	ldr	r2, [r7, #4]
 8002b2e:	6952      	ldr	r2, [r2, #20]
 8002b30:	0852      	lsrs	r2, r2, #1
 8002b32:	3a01      	subs	r2, #1
 8002b34:	0652      	lsls	r2, r2, #25
 8002b36:	4311      	orrs	r1, r2
 8002b38:	687a      	ldr	r2, [r7, #4]
 8002b3a:	6852      	ldr	r2, [r2, #4]
 8002b3c:	3a01      	subs	r2, #1
 8002b3e:	0112      	lsls	r2, r2, #4
 8002b40:	430a      	orrs	r2, r1
 8002b42:	4916      	ldr	r1, [pc, #88]	; (8002b9c <RCCEx_PLLSAI1_Config+0x1d8>)
 8002b44:	4313      	orrs	r3, r2
 8002b46:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002b48:	4b14      	ldr	r3, [pc, #80]	; (8002b9c <RCCEx_PLLSAI1_Config+0x1d8>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	4a13      	ldr	r2, [pc, #76]	; (8002b9c <RCCEx_PLLSAI1_Config+0x1d8>)
 8002b4e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002b52:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b54:	f7fe f976 	bl	8000e44 <HAL_GetTick>
 8002b58:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002b5a:	e009      	b.n	8002b70 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002b5c:	f7fe f972 	bl	8000e44 <HAL_GetTick>
 8002b60:	4602      	mov	r2, r0
 8002b62:	68bb      	ldr	r3, [r7, #8]
 8002b64:	1ad3      	subs	r3, r2, r3
 8002b66:	2b02      	cmp	r3, #2
 8002b68:	d902      	bls.n	8002b70 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8002b6a:	2303      	movs	r3, #3
 8002b6c:	73fb      	strb	r3, [r7, #15]
          break;
 8002b6e:	e005      	b.n	8002b7c <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002b70:	4b0a      	ldr	r3, [pc, #40]	; (8002b9c <RCCEx_PLLSAI1_Config+0x1d8>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d0ef      	beq.n	8002b5c <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8002b7c:	7bfb      	ldrb	r3, [r7, #15]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d106      	bne.n	8002b90 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002b82:	4b06      	ldr	r3, [pc, #24]	; (8002b9c <RCCEx_PLLSAI1_Config+0x1d8>)
 8002b84:	691a      	ldr	r2, [r3, #16]
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	699b      	ldr	r3, [r3, #24]
 8002b8a:	4904      	ldr	r1, [pc, #16]	; (8002b9c <RCCEx_PLLSAI1_Config+0x1d8>)
 8002b8c:	4313      	orrs	r3, r2
 8002b8e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002b90:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b92:	4618      	mov	r0, r3
 8002b94:	3710      	adds	r7, #16
 8002b96:	46bd      	mov	sp, r7
 8002b98:	bd80      	pop	{r7, pc}
 8002b9a:	bf00      	nop
 8002b9c:	40021000 	.word	0x40021000
 8002ba0:	07ff800f 	.word	0x07ff800f
 8002ba4:	ff9f800f 	.word	0xff9f800f
 8002ba8:	f9ff800f 	.word	0xf9ff800f

08002bac <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b084      	sub	sp, #16
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
 8002bb4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002bba:	4b72      	ldr	r3, [pc, #456]	; (8002d84 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002bbc:	68db      	ldr	r3, [r3, #12]
 8002bbe:	f003 0303 	and.w	r3, r3, #3
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d00e      	beq.n	8002be4 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002bc6:	4b6f      	ldr	r3, [pc, #444]	; (8002d84 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002bc8:	68db      	ldr	r3, [r3, #12]
 8002bca:	f003 0203 	and.w	r2, r3, #3
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	429a      	cmp	r2, r3
 8002bd4:	d103      	bne.n	8002bde <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
       ||
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d142      	bne.n	8002c64 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8002bde:	2301      	movs	r3, #1
 8002be0:	73fb      	strb	r3, [r7, #15]
 8002be2:	e03f      	b.n	8002c64 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	2b03      	cmp	r3, #3
 8002bea:	d018      	beq.n	8002c1e <RCCEx_PLLSAI2_Config+0x72>
 8002bec:	2b03      	cmp	r3, #3
 8002bee:	d825      	bhi.n	8002c3c <RCCEx_PLLSAI2_Config+0x90>
 8002bf0:	2b01      	cmp	r3, #1
 8002bf2:	d002      	beq.n	8002bfa <RCCEx_PLLSAI2_Config+0x4e>
 8002bf4:	2b02      	cmp	r3, #2
 8002bf6:	d009      	beq.n	8002c0c <RCCEx_PLLSAI2_Config+0x60>
 8002bf8:	e020      	b.n	8002c3c <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002bfa:	4b62      	ldr	r3, [pc, #392]	; (8002d84 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f003 0302 	and.w	r3, r3, #2
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d11d      	bne.n	8002c42 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8002c06:	2301      	movs	r3, #1
 8002c08:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c0a:	e01a      	b.n	8002c42 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002c0c:	4b5d      	ldr	r3, [pc, #372]	; (8002d84 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d116      	bne.n	8002c46 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8002c18:	2301      	movs	r3, #1
 8002c1a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c1c:	e013      	b.n	8002c46 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002c1e:	4b59      	ldr	r3, [pc, #356]	; (8002d84 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d10f      	bne.n	8002c4a <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002c2a:	4b56      	ldr	r3, [pc, #344]	; (8002d84 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d109      	bne.n	8002c4a <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8002c36:	2301      	movs	r3, #1
 8002c38:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002c3a:	e006      	b.n	8002c4a <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8002c3c:	2301      	movs	r3, #1
 8002c3e:	73fb      	strb	r3, [r7, #15]
      break;
 8002c40:	e004      	b.n	8002c4c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8002c42:	bf00      	nop
 8002c44:	e002      	b.n	8002c4c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8002c46:	bf00      	nop
 8002c48:	e000      	b.n	8002c4c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8002c4a:	bf00      	nop
    }

    if(status == HAL_OK)
 8002c4c:	7bfb      	ldrb	r3, [r7, #15]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d108      	bne.n	8002c64 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8002c52:	4b4c      	ldr	r3, [pc, #304]	; (8002d84 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002c54:	68db      	ldr	r3, [r3, #12]
 8002c56:	f023 0203 	bic.w	r2, r3, #3
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	4949      	ldr	r1, [pc, #292]	; (8002d84 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002c60:	4313      	orrs	r3, r2
 8002c62:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8002c64:	7bfb      	ldrb	r3, [r7, #15]
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	f040 8086 	bne.w	8002d78 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002c6c:	4b45      	ldr	r3, [pc, #276]	; (8002d84 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	4a44      	ldr	r2, [pc, #272]	; (8002d84 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002c72:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c76:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c78:	f7fe f8e4 	bl	8000e44 <HAL_GetTick>
 8002c7c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002c7e:	e009      	b.n	8002c94 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002c80:	f7fe f8e0 	bl	8000e44 <HAL_GetTick>
 8002c84:	4602      	mov	r2, r0
 8002c86:	68bb      	ldr	r3, [r7, #8]
 8002c88:	1ad3      	subs	r3, r2, r3
 8002c8a:	2b02      	cmp	r3, #2
 8002c8c:	d902      	bls.n	8002c94 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8002c8e:	2303      	movs	r3, #3
 8002c90:	73fb      	strb	r3, [r7, #15]
        break;
 8002c92:	e005      	b.n	8002ca0 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002c94:	4b3b      	ldr	r3, [pc, #236]	; (8002d84 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d1ef      	bne.n	8002c80 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8002ca0:	7bfb      	ldrb	r3, [r7, #15]
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d168      	bne.n	8002d78 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002ca6:	683b      	ldr	r3, [r7, #0]
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d113      	bne.n	8002cd4 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002cac:	4b35      	ldr	r3, [pc, #212]	; (8002d84 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002cae:	695a      	ldr	r2, [r3, #20]
 8002cb0:	4b35      	ldr	r3, [pc, #212]	; (8002d88 <RCCEx_PLLSAI2_Config+0x1dc>)
 8002cb2:	4013      	ands	r3, r2
 8002cb4:	687a      	ldr	r2, [r7, #4]
 8002cb6:	6892      	ldr	r2, [r2, #8]
 8002cb8:	0211      	lsls	r1, r2, #8
 8002cba:	687a      	ldr	r2, [r7, #4]
 8002cbc:	68d2      	ldr	r2, [r2, #12]
 8002cbe:	06d2      	lsls	r2, r2, #27
 8002cc0:	4311      	orrs	r1, r2
 8002cc2:	687a      	ldr	r2, [r7, #4]
 8002cc4:	6852      	ldr	r2, [r2, #4]
 8002cc6:	3a01      	subs	r2, #1
 8002cc8:	0112      	lsls	r2, r2, #4
 8002cca:	430a      	orrs	r2, r1
 8002ccc:	492d      	ldr	r1, [pc, #180]	; (8002d84 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002cce:	4313      	orrs	r3, r2
 8002cd0:	614b      	str	r3, [r1, #20]
 8002cd2:	e02d      	b.n	8002d30 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	2b01      	cmp	r3, #1
 8002cd8:	d115      	bne.n	8002d06 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002cda:	4b2a      	ldr	r3, [pc, #168]	; (8002d84 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002cdc:	695a      	ldr	r2, [r3, #20]
 8002cde:	4b2b      	ldr	r3, [pc, #172]	; (8002d8c <RCCEx_PLLSAI2_Config+0x1e0>)
 8002ce0:	4013      	ands	r3, r2
 8002ce2:	687a      	ldr	r2, [r7, #4]
 8002ce4:	6892      	ldr	r2, [r2, #8]
 8002ce6:	0211      	lsls	r1, r2, #8
 8002ce8:	687a      	ldr	r2, [r7, #4]
 8002cea:	6912      	ldr	r2, [r2, #16]
 8002cec:	0852      	lsrs	r2, r2, #1
 8002cee:	3a01      	subs	r2, #1
 8002cf0:	0552      	lsls	r2, r2, #21
 8002cf2:	4311      	orrs	r1, r2
 8002cf4:	687a      	ldr	r2, [r7, #4]
 8002cf6:	6852      	ldr	r2, [r2, #4]
 8002cf8:	3a01      	subs	r2, #1
 8002cfa:	0112      	lsls	r2, r2, #4
 8002cfc:	430a      	orrs	r2, r1
 8002cfe:	4921      	ldr	r1, [pc, #132]	; (8002d84 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002d00:	4313      	orrs	r3, r2
 8002d02:	614b      	str	r3, [r1, #20]
 8002d04:	e014      	b.n	8002d30 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002d06:	4b1f      	ldr	r3, [pc, #124]	; (8002d84 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002d08:	695a      	ldr	r2, [r3, #20]
 8002d0a:	4b21      	ldr	r3, [pc, #132]	; (8002d90 <RCCEx_PLLSAI2_Config+0x1e4>)
 8002d0c:	4013      	ands	r3, r2
 8002d0e:	687a      	ldr	r2, [r7, #4]
 8002d10:	6892      	ldr	r2, [r2, #8]
 8002d12:	0211      	lsls	r1, r2, #8
 8002d14:	687a      	ldr	r2, [r7, #4]
 8002d16:	6952      	ldr	r2, [r2, #20]
 8002d18:	0852      	lsrs	r2, r2, #1
 8002d1a:	3a01      	subs	r2, #1
 8002d1c:	0652      	lsls	r2, r2, #25
 8002d1e:	4311      	orrs	r1, r2
 8002d20:	687a      	ldr	r2, [r7, #4]
 8002d22:	6852      	ldr	r2, [r2, #4]
 8002d24:	3a01      	subs	r2, #1
 8002d26:	0112      	lsls	r2, r2, #4
 8002d28:	430a      	orrs	r2, r1
 8002d2a:	4916      	ldr	r1, [pc, #88]	; (8002d84 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002d2c:	4313      	orrs	r3, r2
 8002d2e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002d30:	4b14      	ldr	r3, [pc, #80]	; (8002d84 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	4a13      	ldr	r2, [pc, #76]	; (8002d84 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002d36:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d3a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d3c:	f7fe f882 	bl	8000e44 <HAL_GetTick>
 8002d40:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002d42:	e009      	b.n	8002d58 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002d44:	f7fe f87e 	bl	8000e44 <HAL_GetTick>
 8002d48:	4602      	mov	r2, r0
 8002d4a:	68bb      	ldr	r3, [r7, #8]
 8002d4c:	1ad3      	subs	r3, r2, r3
 8002d4e:	2b02      	cmp	r3, #2
 8002d50:	d902      	bls.n	8002d58 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8002d52:	2303      	movs	r3, #3
 8002d54:	73fb      	strb	r3, [r7, #15]
          break;
 8002d56:	e005      	b.n	8002d64 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002d58:	4b0a      	ldr	r3, [pc, #40]	; (8002d84 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d0ef      	beq.n	8002d44 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8002d64:	7bfb      	ldrb	r3, [r7, #15]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d106      	bne.n	8002d78 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002d6a:	4b06      	ldr	r3, [pc, #24]	; (8002d84 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002d6c:	695a      	ldr	r2, [r3, #20]
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	699b      	ldr	r3, [r3, #24]
 8002d72:	4904      	ldr	r1, [pc, #16]	; (8002d84 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002d74:	4313      	orrs	r3, r2
 8002d76:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002d78:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	3710      	adds	r7, #16
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	bd80      	pop	{r7, pc}
 8002d82:	bf00      	nop
 8002d84:	40021000 	.word	0x40021000
 8002d88:	07ff800f 	.word	0x07ff800f
 8002d8c:	ff9f800f 	.word	0xff9f800f
 8002d90:	f9ff800f 	.word	0xf9ff800f

08002d94 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b082      	sub	sp, #8
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d101      	bne.n	8002da6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002da2:	2301      	movs	r3, #1
 8002da4:	e049      	b.n	8002e3a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002dac:	b2db      	uxtb	r3, r3
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d106      	bne.n	8002dc0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	2200      	movs	r2, #0
 8002db6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002dba:	6878      	ldr	r0, [r7, #4]
 8002dbc:	f000 f841 	bl	8002e42 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2202      	movs	r2, #2
 8002dc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681a      	ldr	r2, [r3, #0]
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	3304      	adds	r3, #4
 8002dd0:	4619      	mov	r1, r3
 8002dd2:	4610      	mov	r0, r2
 8002dd4:	f000 f9da 	bl	800318c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2201      	movs	r2, #1
 8002ddc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2201      	movs	r2, #1
 8002de4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2201      	movs	r2, #1
 8002dec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2201      	movs	r2, #1
 8002df4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2201      	movs	r2, #1
 8002dfc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2201      	movs	r2, #1
 8002e04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2201      	movs	r2, #1
 8002e0c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2201      	movs	r2, #1
 8002e14:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2201      	movs	r2, #1
 8002e1c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2201      	movs	r2, #1
 8002e24:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2201      	movs	r2, #1
 8002e2c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2201      	movs	r2, #1
 8002e34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002e38:	2300      	movs	r3, #0
}
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	3708      	adds	r7, #8
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	bd80      	pop	{r7, pc}

08002e42 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002e42:	b480      	push	{r7}
 8002e44:	b083      	sub	sp, #12
 8002e46:	af00      	add	r7, sp, #0
 8002e48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002e4a:	bf00      	nop
 8002e4c:	370c      	adds	r7, #12
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e54:	4770      	bx	lr
	...

08002e58 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002e58:	b480      	push	{r7}
 8002e5a:	b085      	sub	sp, #20
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e66:	b2db      	uxtb	r3, r3
 8002e68:	2b01      	cmp	r3, #1
 8002e6a:	d001      	beq.n	8002e70 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002e6c:	2301      	movs	r3, #1
 8002e6e:	e04f      	b.n	8002f10 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2202      	movs	r2, #2
 8002e74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	68da      	ldr	r2, [r3, #12]
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f042 0201 	orr.w	r2, r2, #1
 8002e86:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	4a23      	ldr	r2, [pc, #140]	; (8002f1c <HAL_TIM_Base_Start_IT+0xc4>)
 8002e8e:	4293      	cmp	r3, r2
 8002e90:	d01d      	beq.n	8002ece <HAL_TIM_Base_Start_IT+0x76>
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e9a:	d018      	beq.n	8002ece <HAL_TIM_Base_Start_IT+0x76>
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	4a1f      	ldr	r2, [pc, #124]	; (8002f20 <HAL_TIM_Base_Start_IT+0xc8>)
 8002ea2:	4293      	cmp	r3, r2
 8002ea4:	d013      	beq.n	8002ece <HAL_TIM_Base_Start_IT+0x76>
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	4a1e      	ldr	r2, [pc, #120]	; (8002f24 <HAL_TIM_Base_Start_IT+0xcc>)
 8002eac:	4293      	cmp	r3, r2
 8002eae:	d00e      	beq.n	8002ece <HAL_TIM_Base_Start_IT+0x76>
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	4a1c      	ldr	r2, [pc, #112]	; (8002f28 <HAL_TIM_Base_Start_IT+0xd0>)
 8002eb6:	4293      	cmp	r3, r2
 8002eb8:	d009      	beq.n	8002ece <HAL_TIM_Base_Start_IT+0x76>
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	4a1b      	ldr	r2, [pc, #108]	; (8002f2c <HAL_TIM_Base_Start_IT+0xd4>)
 8002ec0:	4293      	cmp	r3, r2
 8002ec2:	d004      	beq.n	8002ece <HAL_TIM_Base_Start_IT+0x76>
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	4a19      	ldr	r2, [pc, #100]	; (8002f30 <HAL_TIM_Base_Start_IT+0xd8>)
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d115      	bne.n	8002efa <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	689a      	ldr	r2, [r3, #8]
 8002ed4:	4b17      	ldr	r3, [pc, #92]	; (8002f34 <HAL_TIM_Base_Start_IT+0xdc>)
 8002ed6:	4013      	ands	r3, r2
 8002ed8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	2b06      	cmp	r3, #6
 8002ede:	d015      	beq.n	8002f0c <HAL_TIM_Base_Start_IT+0xb4>
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ee6:	d011      	beq.n	8002f0c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	681a      	ldr	r2, [r3, #0]
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f042 0201 	orr.w	r2, r2, #1
 8002ef6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ef8:	e008      	b.n	8002f0c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	681a      	ldr	r2, [r3, #0]
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f042 0201 	orr.w	r2, r2, #1
 8002f08:	601a      	str	r2, [r3, #0]
 8002f0a:	e000      	b.n	8002f0e <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f0c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002f0e:	2300      	movs	r3, #0
}
 8002f10:	4618      	mov	r0, r3
 8002f12:	3714      	adds	r7, #20
 8002f14:	46bd      	mov	sp, r7
 8002f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1a:	4770      	bx	lr
 8002f1c:	40012c00 	.word	0x40012c00
 8002f20:	40000400 	.word	0x40000400
 8002f24:	40000800 	.word	0x40000800
 8002f28:	40000c00 	.word	0x40000c00
 8002f2c:	40013400 	.word	0x40013400
 8002f30:	40014000 	.word	0x40014000
 8002f34:	00010007 	.word	0x00010007

08002f38 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b084      	sub	sp, #16
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	68db      	ldr	r3, [r3, #12]
 8002f46:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	691b      	ldr	r3, [r3, #16]
 8002f4e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002f50:	68bb      	ldr	r3, [r7, #8]
 8002f52:	f003 0302 	and.w	r3, r3, #2
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d020      	beq.n	8002f9c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	f003 0302 	and.w	r3, r3, #2
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d01b      	beq.n	8002f9c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f06f 0202 	mvn.w	r2, #2
 8002f6c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	2201      	movs	r2, #1
 8002f72:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	699b      	ldr	r3, [r3, #24]
 8002f7a:	f003 0303 	and.w	r3, r3, #3
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d003      	beq.n	8002f8a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002f82:	6878      	ldr	r0, [r7, #4]
 8002f84:	f000 f8e4 	bl	8003150 <HAL_TIM_IC_CaptureCallback>
 8002f88:	e005      	b.n	8002f96 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f8a:	6878      	ldr	r0, [r7, #4]
 8002f8c:	f000 f8d6 	bl	800313c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f90:	6878      	ldr	r0, [r7, #4]
 8002f92:	f000 f8e7 	bl	8003164 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	2200      	movs	r2, #0
 8002f9a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002f9c:	68bb      	ldr	r3, [r7, #8]
 8002f9e:	f003 0304 	and.w	r3, r3, #4
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d020      	beq.n	8002fe8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	f003 0304 	and.w	r3, r3, #4
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d01b      	beq.n	8002fe8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f06f 0204 	mvn.w	r2, #4
 8002fb8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	2202      	movs	r2, #2
 8002fbe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	699b      	ldr	r3, [r3, #24]
 8002fc6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d003      	beq.n	8002fd6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002fce:	6878      	ldr	r0, [r7, #4]
 8002fd0:	f000 f8be 	bl	8003150 <HAL_TIM_IC_CaptureCallback>
 8002fd4:	e005      	b.n	8002fe2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002fd6:	6878      	ldr	r0, [r7, #4]
 8002fd8:	f000 f8b0 	bl	800313c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fdc:	6878      	ldr	r0, [r7, #4]
 8002fde:	f000 f8c1 	bl	8003164 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002fe8:	68bb      	ldr	r3, [r7, #8]
 8002fea:	f003 0308 	and.w	r3, r3, #8
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d020      	beq.n	8003034 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	f003 0308 	and.w	r3, r3, #8
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d01b      	beq.n	8003034 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f06f 0208 	mvn.w	r2, #8
 8003004:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	2204      	movs	r2, #4
 800300a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	69db      	ldr	r3, [r3, #28]
 8003012:	f003 0303 	and.w	r3, r3, #3
 8003016:	2b00      	cmp	r3, #0
 8003018:	d003      	beq.n	8003022 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800301a:	6878      	ldr	r0, [r7, #4]
 800301c:	f000 f898 	bl	8003150 <HAL_TIM_IC_CaptureCallback>
 8003020:	e005      	b.n	800302e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003022:	6878      	ldr	r0, [r7, #4]
 8003024:	f000 f88a 	bl	800313c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003028:	6878      	ldr	r0, [r7, #4]
 800302a:	f000 f89b 	bl	8003164 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	2200      	movs	r2, #0
 8003032:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003034:	68bb      	ldr	r3, [r7, #8]
 8003036:	f003 0310 	and.w	r3, r3, #16
 800303a:	2b00      	cmp	r3, #0
 800303c:	d020      	beq.n	8003080 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	f003 0310 	and.w	r3, r3, #16
 8003044:	2b00      	cmp	r3, #0
 8003046:	d01b      	beq.n	8003080 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f06f 0210 	mvn.w	r2, #16
 8003050:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	2208      	movs	r2, #8
 8003056:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	69db      	ldr	r3, [r3, #28]
 800305e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003062:	2b00      	cmp	r3, #0
 8003064:	d003      	beq.n	800306e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003066:	6878      	ldr	r0, [r7, #4]
 8003068:	f000 f872 	bl	8003150 <HAL_TIM_IC_CaptureCallback>
 800306c:	e005      	b.n	800307a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800306e:	6878      	ldr	r0, [r7, #4]
 8003070:	f000 f864 	bl	800313c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003074:	6878      	ldr	r0, [r7, #4]
 8003076:	f000 f875 	bl	8003164 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	2200      	movs	r2, #0
 800307e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003080:	68bb      	ldr	r3, [r7, #8]
 8003082:	f003 0301 	and.w	r3, r3, #1
 8003086:	2b00      	cmp	r3, #0
 8003088:	d00c      	beq.n	80030a4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	f003 0301 	and.w	r3, r3, #1
 8003090:	2b00      	cmp	r3, #0
 8003092:	d007      	beq.n	80030a4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f06f 0201 	mvn.w	r2, #1
 800309c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800309e:	6878      	ldr	r0, [r7, #4]
 80030a0:	f7fd fd08 	bl	8000ab4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80030a4:	68bb      	ldr	r3, [r7, #8]
 80030a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d00c      	beq.n	80030c8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d007      	beq.n	80030c8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80030c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80030c2:	6878      	ldr	r0, [r7, #4]
 80030c4:	f000 f906 	bl	80032d4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80030c8:	68bb      	ldr	r3, [r7, #8]
 80030ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d00c      	beq.n	80030ec <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d007      	beq.n	80030ec <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80030e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80030e6:	6878      	ldr	r0, [r7, #4]
 80030e8:	f000 f8fe 	bl	80032e8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80030ec:	68bb      	ldr	r3, [r7, #8]
 80030ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d00c      	beq.n	8003110 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d007      	beq.n	8003110 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003108:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800310a:	6878      	ldr	r0, [r7, #4]
 800310c:	f000 f834 	bl	8003178 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003110:	68bb      	ldr	r3, [r7, #8]
 8003112:	f003 0320 	and.w	r3, r3, #32
 8003116:	2b00      	cmp	r3, #0
 8003118:	d00c      	beq.n	8003134 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	f003 0320 	and.w	r3, r3, #32
 8003120:	2b00      	cmp	r3, #0
 8003122:	d007      	beq.n	8003134 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f06f 0220 	mvn.w	r2, #32
 800312c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800312e:	6878      	ldr	r0, [r7, #4]
 8003130:	f000 f8c6 	bl	80032c0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003134:	bf00      	nop
 8003136:	3710      	adds	r7, #16
 8003138:	46bd      	mov	sp, r7
 800313a:	bd80      	pop	{r7, pc}

0800313c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800313c:	b480      	push	{r7}
 800313e:	b083      	sub	sp, #12
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003144:	bf00      	nop
 8003146:	370c      	adds	r7, #12
 8003148:	46bd      	mov	sp, r7
 800314a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314e:	4770      	bx	lr

08003150 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003150:	b480      	push	{r7}
 8003152:	b083      	sub	sp, #12
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003158:	bf00      	nop
 800315a:	370c      	adds	r7, #12
 800315c:	46bd      	mov	sp, r7
 800315e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003162:	4770      	bx	lr

08003164 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003164:	b480      	push	{r7}
 8003166:	b083      	sub	sp, #12
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800316c:	bf00      	nop
 800316e:	370c      	adds	r7, #12
 8003170:	46bd      	mov	sp, r7
 8003172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003176:	4770      	bx	lr

08003178 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003178:	b480      	push	{r7}
 800317a:	b083      	sub	sp, #12
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003180:	bf00      	nop
 8003182:	370c      	adds	r7, #12
 8003184:	46bd      	mov	sp, r7
 8003186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318a:	4770      	bx	lr

0800318c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800318c:	b480      	push	{r7}
 800318e:	b085      	sub	sp, #20
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
 8003194:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	4a40      	ldr	r2, [pc, #256]	; (80032a0 <TIM_Base_SetConfig+0x114>)
 80031a0:	4293      	cmp	r3, r2
 80031a2:	d013      	beq.n	80031cc <TIM_Base_SetConfig+0x40>
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031aa:	d00f      	beq.n	80031cc <TIM_Base_SetConfig+0x40>
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	4a3d      	ldr	r2, [pc, #244]	; (80032a4 <TIM_Base_SetConfig+0x118>)
 80031b0:	4293      	cmp	r3, r2
 80031b2:	d00b      	beq.n	80031cc <TIM_Base_SetConfig+0x40>
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	4a3c      	ldr	r2, [pc, #240]	; (80032a8 <TIM_Base_SetConfig+0x11c>)
 80031b8:	4293      	cmp	r3, r2
 80031ba:	d007      	beq.n	80031cc <TIM_Base_SetConfig+0x40>
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	4a3b      	ldr	r2, [pc, #236]	; (80032ac <TIM_Base_SetConfig+0x120>)
 80031c0:	4293      	cmp	r3, r2
 80031c2:	d003      	beq.n	80031cc <TIM_Base_SetConfig+0x40>
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	4a3a      	ldr	r2, [pc, #232]	; (80032b0 <TIM_Base_SetConfig+0x124>)
 80031c8:	4293      	cmp	r3, r2
 80031ca:	d108      	bne.n	80031de <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031d2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	685b      	ldr	r3, [r3, #4]
 80031d8:	68fa      	ldr	r2, [r7, #12]
 80031da:	4313      	orrs	r3, r2
 80031dc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	4a2f      	ldr	r2, [pc, #188]	; (80032a0 <TIM_Base_SetConfig+0x114>)
 80031e2:	4293      	cmp	r3, r2
 80031e4:	d01f      	beq.n	8003226 <TIM_Base_SetConfig+0x9a>
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031ec:	d01b      	beq.n	8003226 <TIM_Base_SetConfig+0x9a>
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	4a2c      	ldr	r2, [pc, #176]	; (80032a4 <TIM_Base_SetConfig+0x118>)
 80031f2:	4293      	cmp	r3, r2
 80031f4:	d017      	beq.n	8003226 <TIM_Base_SetConfig+0x9a>
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	4a2b      	ldr	r2, [pc, #172]	; (80032a8 <TIM_Base_SetConfig+0x11c>)
 80031fa:	4293      	cmp	r3, r2
 80031fc:	d013      	beq.n	8003226 <TIM_Base_SetConfig+0x9a>
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	4a2a      	ldr	r2, [pc, #168]	; (80032ac <TIM_Base_SetConfig+0x120>)
 8003202:	4293      	cmp	r3, r2
 8003204:	d00f      	beq.n	8003226 <TIM_Base_SetConfig+0x9a>
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	4a29      	ldr	r2, [pc, #164]	; (80032b0 <TIM_Base_SetConfig+0x124>)
 800320a:	4293      	cmp	r3, r2
 800320c:	d00b      	beq.n	8003226 <TIM_Base_SetConfig+0x9a>
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	4a28      	ldr	r2, [pc, #160]	; (80032b4 <TIM_Base_SetConfig+0x128>)
 8003212:	4293      	cmp	r3, r2
 8003214:	d007      	beq.n	8003226 <TIM_Base_SetConfig+0x9a>
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	4a27      	ldr	r2, [pc, #156]	; (80032b8 <TIM_Base_SetConfig+0x12c>)
 800321a:	4293      	cmp	r3, r2
 800321c:	d003      	beq.n	8003226 <TIM_Base_SetConfig+0x9a>
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	4a26      	ldr	r2, [pc, #152]	; (80032bc <TIM_Base_SetConfig+0x130>)
 8003222:	4293      	cmp	r3, r2
 8003224:	d108      	bne.n	8003238 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800322c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	68db      	ldr	r3, [r3, #12]
 8003232:	68fa      	ldr	r2, [r7, #12]
 8003234:	4313      	orrs	r3, r2
 8003236:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	695b      	ldr	r3, [r3, #20]
 8003242:	4313      	orrs	r3, r2
 8003244:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	68fa      	ldr	r2, [r7, #12]
 800324a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	689a      	ldr	r2, [r3, #8]
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	681a      	ldr	r2, [r3, #0]
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	4a10      	ldr	r2, [pc, #64]	; (80032a0 <TIM_Base_SetConfig+0x114>)
 8003260:	4293      	cmp	r3, r2
 8003262:	d00f      	beq.n	8003284 <TIM_Base_SetConfig+0xf8>
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	4a12      	ldr	r2, [pc, #72]	; (80032b0 <TIM_Base_SetConfig+0x124>)
 8003268:	4293      	cmp	r3, r2
 800326a:	d00b      	beq.n	8003284 <TIM_Base_SetConfig+0xf8>
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	4a11      	ldr	r2, [pc, #68]	; (80032b4 <TIM_Base_SetConfig+0x128>)
 8003270:	4293      	cmp	r3, r2
 8003272:	d007      	beq.n	8003284 <TIM_Base_SetConfig+0xf8>
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	4a10      	ldr	r2, [pc, #64]	; (80032b8 <TIM_Base_SetConfig+0x12c>)
 8003278:	4293      	cmp	r3, r2
 800327a:	d003      	beq.n	8003284 <TIM_Base_SetConfig+0xf8>
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	4a0f      	ldr	r2, [pc, #60]	; (80032bc <TIM_Base_SetConfig+0x130>)
 8003280:	4293      	cmp	r3, r2
 8003282:	d103      	bne.n	800328c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	691a      	ldr	r2, [r3, #16]
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2201      	movs	r2, #1
 8003290:	615a      	str	r2, [r3, #20]
}
 8003292:	bf00      	nop
 8003294:	3714      	adds	r7, #20
 8003296:	46bd      	mov	sp, r7
 8003298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329c:	4770      	bx	lr
 800329e:	bf00      	nop
 80032a0:	40012c00 	.word	0x40012c00
 80032a4:	40000400 	.word	0x40000400
 80032a8:	40000800 	.word	0x40000800
 80032ac:	40000c00 	.word	0x40000c00
 80032b0:	40013400 	.word	0x40013400
 80032b4:	40014000 	.word	0x40014000
 80032b8:	40014400 	.word	0x40014400
 80032bc:	40014800 	.word	0x40014800

080032c0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80032c0:	b480      	push	{r7}
 80032c2:	b083      	sub	sp, #12
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80032c8:	bf00      	nop
 80032ca:	370c      	adds	r7, #12
 80032cc:	46bd      	mov	sp, r7
 80032ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d2:	4770      	bx	lr

080032d4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80032d4:	b480      	push	{r7}
 80032d6:	b083      	sub	sp, #12
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80032dc:	bf00      	nop
 80032de:	370c      	adds	r7, #12
 80032e0:	46bd      	mov	sp, r7
 80032e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e6:	4770      	bx	lr

080032e8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80032e8:	b480      	push	{r7}
 80032ea:	b083      	sub	sp, #12
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80032f0:	bf00      	nop
 80032f2:	370c      	adds	r7, #12
 80032f4:	46bd      	mov	sp, r7
 80032f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fa:	4770      	bx	lr

080032fc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b082      	sub	sp, #8
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2b00      	cmp	r3, #0
 8003308:	d101      	bne.n	800330e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800330a:	2301      	movs	r3, #1
 800330c:	e042      	b.n	8003394 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003314:	2b00      	cmp	r3, #0
 8003316:	d106      	bne.n	8003326 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2200      	movs	r2, #0
 800331c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003320:	6878      	ldr	r0, [r7, #4]
 8003322:	f7fd fc03 	bl	8000b2c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	2224      	movs	r2, #36	; 0x24
 800332a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	681a      	ldr	r2, [r3, #0]
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f022 0201 	bic.w	r2, r2, #1
 800333c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003342:	2b00      	cmp	r3, #0
 8003344:	d002      	beq.n	800334c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8003346:	6878      	ldr	r0, [r7, #4]
 8003348:	f000 fbb4 	bl	8003ab4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800334c:	6878      	ldr	r0, [r7, #4]
 800334e:	f000 f8b5 	bl	80034bc <UART_SetConfig>
 8003352:	4603      	mov	r3, r0
 8003354:	2b01      	cmp	r3, #1
 8003356:	d101      	bne.n	800335c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8003358:	2301      	movs	r3, #1
 800335a:	e01b      	b.n	8003394 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	685a      	ldr	r2, [r3, #4]
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800336a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	689a      	ldr	r2, [r3, #8]
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800337a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	681a      	ldr	r2, [r3, #0]
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f042 0201 	orr.w	r2, r2, #1
 800338a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800338c:	6878      	ldr	r0, [r7, #4]
 800338e:	f000 fc33 	bl	8003bf8 <UART_CheckIdleState>
 8003392:	4603      	mov	r3, r0
}
 8003394:	4618      	mov	r0, r3
 8003396:	3708      	adds	r7, #8
 8003398:	46bd      	mov	sp, r7
 800339a:	bd80      	pop	{r7, pc}

0800339c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800339c:	b580      	push	{r7, lr}
 800339e:	b08a      	sub	sp, #40	; 0x28
 80033a0:	af02      	add	r7, sp, #8
 80033a2:	60f8      	str	r0, [r7, #12]
 80033a4:	60b9      	str	r1, [r7, #8]
 80033a6:	603b      	str	r3, [r7, #0]
 80033a8:	4613      	mov	r3, r2
 80033aa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033b2:	2b20      	cmp	r3, #32
 80033b4:	d17c      	bne.n	80034b0 <HAL_UART_Transmit+0x114>
  {
    if ((pData == NULL) || (Size == 0U))
 80033b6:	68bb      	ldr	r3, [r7, #8]
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d002      	beq.n	80033c2 <HAL_UART_Transmit+0x26>
 80033bc:	88fb      	ldrh	r3, [r7, #6]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d101      	bne.n	80033c6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80033c2:	2301      	movs	r3, #1
 80033c4:	e075      	b.n	80034b2 <HAL_UART_Transmit+0x116>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	2200      	movs	r2, #0
 80033ca:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	2221      	movs	r2, #33	; 0x21
 80033d2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80033d6:	f7fd fd35 	bl	8000e44 <HAL_GetTick>
 80033da:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	88fa      	ldrh	r2, [r7, #6]
 80033e0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	88fa      	ldrh	r2, [r7, #6]
 80033e8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	689b      	ldr	r3, [r3, #8]
 80033f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033f4:	d108      	bne.n	8003408 <HAL_UART_Transmit+0x6c>
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	691b      	ldr	r3, [r3, #16]
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d104      	bne.n	8003408 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80033fe:	2300      	movs	r3, #0
 8003400:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003402:	68bb      	ldr	r3, [r7, #8]
 8003404:	61bb      	str	r3, [r7, #24]
 8003406:	e003      	b.n	8003410 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003408:	68bb      	ldr	r3, [r7, #8]
 800340a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800340c:	2300      	movs	r3, #0
 800340e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003410:	e031      	b.n	8003476 <HAL_UART_Transmit+0xda>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003412:	683b      	ldr	r3, [r7, #0]
 8003414:	9300      	str	r3, [sp, #0]
 8003416:	697b      	ldr	r3, [r7, #20]
 8003418:	2200      	movs	r2, #0
 800341a:	2180      	movs	r1, #128	; 0x80
 800341c:	68f8      	ldr	r0, [r7, #12]
 800341e:	f000 fc95 	bl	8003d4c <UART_WaitOnFlagUntilTimeout>
 8003422:	4603      	mov	r3, r0
 8003424:	2b00      	cmp	r3, #0
 8003426:	d005      	beq.n	8003434 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	2220      	movs	r2, #32
 800342c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8003430:	2303      	movs	r3, #3
 8003432:	e03e      	b.n	80034b2 <HAL_UART_Transmit+0x116>
      }
      if (pdata8bits == NULL)
 8003434:	69fb      	ldr	r3, [r7, #28]
 8003436:	2b00      	cmp	r3, #0
 8003438:	d10b      	bne.n	8003452 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800343a:	69bb      	ldr	r3, [r7, #24]
 800343c:	881a      	ldrh	r2, [r3, #0]
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003446:	b292      	uxth	r2, r2
 8003448:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800344a:	69bb      	ldr	r3, [r7, #24]
 800344c:	3302      	adds	r3, #2
 800344e:	61bb      	str	r3, [r7, #24]
 8003450:	e008      	b.n	8003464 <HAL_UART_Transmit+0xc8>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003452:	69fb      	ldr	r3, [r7, #28]
 8003454:	781a      	ldrb	r2, [r3, #0]
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	b292      	uxth	r2, r2
 800345c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800345e:	69fb      	ldr	r3, [r7, #28]
 8003460:	3301      	adds	r3, #1
 8003462:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800346a:	b29b      	uxth	r3, r3
 800346c:	3b01      	subs	r3, #1
 800346e:	b29a      	uxth	r2, r3
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800347c:	b29b      	uxth	r3, r3
 800347e:	2b00      	cmp	r3, #0
 8003480:	d1c7      	bne.n	8003412 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	9300      	str	r3, [sp, #0]
 8003486:	697b      	ldr	r3, [r7, #20]
 8003488:	2200      	movs	r2, #0
 800348a:	2140      	movs	r1, #64	; 0x40
 800348c:	68f8      	ldr	r0, [r7, #12]
 800348e:	f000 fc5d 	bl	8003d4c <UART_WaitOnFlagUntilTimeout>
 8003492:	4603      	mov	r3, r0
 8003494:	2b00      	cmp	r3, #0
 8003496:	d005      	beq.n	80034a4 <HAL_UART_Transmit+0x108>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	2220      	movs	r2, #32
 800349c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 80034a0:	2303      	movs	r3, #3
 80034a2:	e006      	b.n	80034b2 <HAL_UART_Transmit+0x116>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	2220      	movs	r2, #32
 80034a8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 80034ac:	2300      	movs	r3, #0
 80034ae:	e000      	b.n	80034b2 <HAL_UART_Transmit+0x116>
  }
  else
  {
    return HAL_BUSY;
 80034b0:	2302      	movs	r3, #2
  }
}
 80034b2:	4618      	mov	r0, r3
 80034b4:	3720      	adds	r7, #32
 80034b6:	46bd      	mov	sp, r7
 80034b8:	bd80      	pop	{r7, pc}
	...

080034bc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80034bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80034c0:	b08c      	sub	sp, #48	; 0x30
 80034c2:	af00      	add	r7, sp, #0
 80034c4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80034c6:	2300      	movs	r3, #0
 80034c8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80034cc:	697b      	ldr	r3, [r7, #20]
 80034ce:	689a      	ldr	r2, [r3, #8]
 80034d0:	697b      	ldr	r3, [r7, #20]
 80034d2:	691b      	ldr	r3, [r3, #16]
 80034d4:	431a      	orrs	r2, r3
 80034d6:	697b      	ldr	r3, [r7, #20]
 80034d8:	695b      	ldr	r3, [r3, #20]
 80034da:	431a      	orrs	r2, r3
 80034dc:	697b      	ldr	r3, [r7, #20]
 80034de:	69db      	ldr	r3, [r3, #28]
 80034e0:	4313      	orrs	r3, r2
 80034e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80034e4:	697b      	ldr	r3, [r7, #20]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	681a      	ldr	r2, [r3, #0]
 80034ea:	4baa      	ldr	r3, [pc, #680]	; (8003794 <UART_SetConfig+0x2d8>)
 80034ec:	4013      	ands	r3, r2
 80034ee:	697a      	ldr	r2, [r7, #20]
 80034f0:	6812      	ldr	r2, [r2, #0]
 80034f2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80034f4:	430b      	orrs	r3, r1
 80034f6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80034f8:	697b      	ldr	r3, [r7, #20]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	685b      	ldr	r3, [r3, #4]
 80034fe:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003502:	697b      	ldr	r3, [r7, #20]
 8003504:	68da      	ldr	r2, [r3, #12]
 8003506:	697b      	ldr	r3, [r7, #20]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	430a      	orrs	r2, r1
 800350c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800350e:	697b      	ldr	r3, [r7, #20]
 8003510:	699b      	ldr	r3, [r3, #24]
 8003512:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003514:	697b      	ldr	r3, [r7, #20]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	4a9f      	ldr	r2, [pc, #636]	; (8003798 <UART_SetConfig+0x2dc>)
 800351a:	4293      	cmp	r3, r2
 800351c:	d004      	beq.n	8003528 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800351e:	697b      	ldr	r3, [r7, #20]
 8003520:	6a1b      	ldr	r3, [r3, #32]
 8003522:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003524:	4313      	orrs	r3, r2
 8003526:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003528:	697b      	ldr	r3, [r7, #20]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	689b      	ldr	r3, [r3, #8]
 800352e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8003532:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8003536:	697a      	ldr	r2, [r7, #20]
 8003538:	6812      	ldr	r2, [r2, #0]
 800353a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800353c:	430b      	orrs	r3, r1
 800353e:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003540:	697b      	ldr	r3, [r7, #20]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003546:	f023 010f 	bic.w	r1, r3, #15
 800354a:	697b      	ldr	r3, [r7, #20]
 800354c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800354e:	697b      	ldr	r3, [r7, #20]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	430a      	orrs	r2, r1
 8003554:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003556:	697b      	ldr	r3, [r7, #20]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	4a90      	ldr	r2, [pc, #576]	; (800379c <UART_SetConfig+0x2e0>)
 800355c:	4293      	cmp	r3, r2
 800355e:	d125      	bne.n	80035ac <UART_SetConfig+0xf0>
 8003560:	4b8f      	ldr	r3, [pc, #572]	; (80037a0 <UART_SetConfig+0x2e4>)
 8003562:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003566:	f003 0303 	and.w	r3, r3, #3
 800356a:	2b03      	cmp	r3, #3
 800356c:	d81a      	bhi.n	80035a4 <UART_SetConfig+0xe8>
 800356e:	a201      	add	r2, pc, #4	; (adr r2, 8003574 <UART_SetConfig+0xb8>)
 8003570:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003574:	08003585 	.word	0x08003585
 8003578:	08003595 	.word	0x08003595
 800357c:	0800358d 	.word	0x0800358d
 8003580:	0800359d 	.word	0x0800359d
 8003584:	2301      	movs	r3, #1
 8003586:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800358a:	e116      	b.n	80037ba <UART_SetConfig+0x2fe>
 800358c:	2302      	movs	r3, #2
 800358e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003592:	e112      	b.n	80037ba <UART_SetConfig+0x2fe>
 8003594:	2304      	movs	r3, #4
 8003596:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800359a:	e10e      	b.n	80037ba <UART_SetConfig+0x2fe>
 800359c:	2308      	movs	r3, #8
 800359e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80035a2:	e10a      	b.n	80037ba <UART_SetConfig+0x2fe>
 80035a4:	2310      	movs	r3, #16
 80035a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80035aa:	e106      	b.n	80037ba <UART_SetConfig+0x2fe>
 80035ac:	697b      	ldr	r3, [r7, #20]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	4a7c      	ldr	r2, [pc, #496]	; (80037a4 <UART_SetConfig+0x2e8>)
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d138      	bne.n	8003628 <UART_SetConfig+0x16c>
 80035b6:	4b7a      	ldr	r3, [pc, #488]	; (80037a0 <UART_SetConfig+0x2e4>)
 80035b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035bc:	f003 030c 	and.w	r3, r3, #12
 80035c0:	2b0c      	cmp	r3, #12
 80035c2:	d82d      	bhi.n	8003620 <UART_SetConfig+0x164>
 80035c4:	a201      	add	r2, pc, #4	; (adr r2, 80035cc <UART_SetConfig+0x110>)
 80035c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035ca:	bf00      	nop
 80035cc:	08003601 	.word	0x08003601
 80035d0:	08003621 	.word	0x08003621
 80035d4:	08003621 	.word	0x08003621
 80035d8:	08003621 	.word	0x08003621
 80035dc:	08003611 	.word	0x08003611
 80035e0:	08003621 	.word	0x08003621
 80035e4:	08003621 	.word	0x08003621
 80035e8:	08003621 	.word	0x08003621
 80035ec:	08003609 	.word	0x08003609
 80035f0:	08003621 	.word	0x08003621
 80035f4:	08003621 	.word	0x08003621
 80035f8:	08003621 	.word	0x08003621
 80035fc:	08003619 	.word	0x08003619
 8003600:	2300      	movs	r3, #0
 8003602:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003606:	e0d8      	b.n	80037ba <UART_SetConfig+0x2fe>
 8003608:	2302      	movs	r3, #2
 800360a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800360e:	e0d4      	b.n	80037ba <UART_SetConfig+0x2fe>
 8003610:	2304      	movs	r3, #4
 8003612:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003616:	e0d0      	b.n	80037ba <UART_SetConfig+0x2fe>
 8003618:	2308      	movs	r3, #8
 800361a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800361e:	e0cc      	b.n	80037ba <UART_SetConfig+0x2fe>
 8003620:	2310      	movs	r3, #16
 8003622:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003626:	e0c8      	b.n	80037ba <UART_SetConfig+0x2fe>
 8003628:	697b      	ldr	r3, [r7, #20]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	4a5e      	ldr	r2, [pc, #376]	; (80037a8 <UART_SetConfig+0x2ec>)
 800362e:	4293      	cmp	r3, r2
 8003630:	d125      	bne.n	800367e <UART_SetConfig+0x1c2>
 8003632:	4b5b      	ldr	r3, [pc, #364]	; (80037a0 <UART_SetConfig+0x2e4>)
 8003634:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003638:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800363c:	2b30      	cmp	r3, #48	; 0x30
 800363e:	d016      	beq.n	800366e <UART_SetConfig+0x1b2>
 8003640:	2b30      	cmp	r3, #48	; 0x30
 8003642:	d818      	bhi.n	8003676 <UART_SetConfig+0x1ba>
 8003644:	2b20      	cmp	r3, #32
 8003646:	d00a      	beq.n	800365e <UART_SetConfig+0x1a2>
 8003648:	2b20      	cmp	r3, #32
 800364a:	d814      	bhi.n	8003676 <UART_SetConfig+0x1ba>
 800364c:	2b00      	cmp	r3, #0
 800364e:	d002      	beq.n	8003656 <UART_SetConfig+0x19a>
 8003650:	2b10      	cmp	r3, #16
 8003652:	d008      	beq.n	8003666 <UART_SetConfig+0x1aa>
 8003654:	e00f      	b.n	8003676 <UART_SetConfig+0x1ba>
 8003656:	2300      	movs	r3, #0
 8003658:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800365c:	e0ad      	b.n	80037ba <UART_SetConfig+0x2fe>
 800365e:	2302      	movs	r3, #2
 8003660:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003664:	e0a9      	b.n	80037ba <UART_SetConfig+0x2fe>
 8003666:	2304      	movs	r3, #4
 8003668:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800366c:	e0a5      	b.n	80037ba <UART_SetConfig+0x2fe>
 800366e:	2308      	movs	r3, #8
 8003670:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003674:	e0a1      	b.n	80037ba <UART_SetConfig+0x2fe>
 8003676:	2310      	movs	r3, #16
 8003678:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800367c:	e09d      	b.n	80037ba <UART_SetConfig+0x2fe>
 800367e:	697b      	ldr	r3, [r7, #20]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	4a4a      	ldr	r2, [pc, #296]	; (80037ac <UART_SetConfig+0x2f0>)
 8003684:	4293      	cmp	r3, r2
 8003686:	d125      	bne.n	80036d4 <UART_SetConfig+0x218>
 8003688:	4b45      	ldr	r3, [pc, #276]	; (80037a0 <UART_SetConfig+0x2e4>)
 800368a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800368e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003692:	2bc0      	cmp	r3, #192	; 0xc0
 8003694:	d016      	beq.n	80036c4 <UART_SetConfig+0x208>
 8003696:	2bc0      	cmp	r3, #192	; 0xc0
 8003698:	d818      	bhi.n	80036cc <UART_SetConfig+0x210>
 800369a:	2b80      	cmp	r3, #128	; 0x80
 800369c:	d00a      	beq.n	80036b4 <UART_SetConfig+0x1f8>
 800369e:	2b80      	cmp	r3, #128	; 0x80
 80036a0:	d814      	bhi.n	80036cc <UART_SetConfig+0x210>
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d002      	beq.n	80036ac <UART_SetConfig+0x1f0>
 80036a6:	2b40      	cmp	r3, #64	; 0x40
 80036a8:	d008      	beq.n	80036bc <UART_SetConfig+0x200>
 80036aa:	e00f      	b.n	80036cc <UART_SetConfig+0x210>
 80036ac:	2300      	movs	r3, #0
 80036ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80036b2:	e082      	b.n	80037ba <UART_SetConfig+0x2fe>
 80036b4:	2302      	movs	r3, #2
 80036b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80036ba:	e07e      	b.n	80037ba <UART_SetConfig+0x2fe>
 80036bc:	2304      	movs	r3, #4
 80036be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80036c2:	e07a      	b.n	80037ba <UART_SetConfig+0x2fe>
 80036c4:	2308      	movs	r3, #8
 80036c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80036ca:	e076      	b.n	80037ba <UART_SetConfig+0x2fe>
 80036cc:	2310      	movs	r3, #16
 80036ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80036d2:	e072      	b.n	80037ba <UART_SetConfig+0x2fe>
 80036d4:	697b      	ldr	r3, [r7, #20]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	4a35      	ldr	r2, [pc, #212]	; (80037b0 <UART_SetConfig+0x2f4>)
 80036da:	4293      	cmp	r3, r2
 80036dc:	d12a      	bne.n	8003734 <UART_SetConfig+0x278>
 80036de:	4b30      	ldr	r3, [pc, #192]	; (80037a0 <UART_SetConfig+0x2e4>)
 80036e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036e4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036e8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80036ec:	d01a      	beq.n	8003724 <UART_SetConfig+0x268>
 80036ee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80036f2:	d81b      	bhi.n	800372c <UART_SetConfig+0x270>
 80036f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80036f8:	d00c      	beq.n	8003714 <UART_SetConfig+0x258>
 80036fa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80036fe:	d815      	bhi.n	800372c <UART_SetConfig+0x270>
 8003700:	2b00      	cmp	r3, #0
 8003702:	d003      	beq.n	800370c <UART_SetConfig+0x250>
 8003704:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003708:	d008      	beq.n	800371c <UART_SetConfig+0x260>
 800370a:	e00f      	b.n	800372c <UART_SetConfig+0x270>
 800370c:	2300      	movs	r3, #0
 800370e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003712:	e052      	b.n	80037ba <UART_SetConfig+0x2fe>
 8003714:	2302      	movs	r3, #2
 8003716:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800371a:	e04e      	b.n	80037ba <UART_SetConfig+0x2fe>
 800371c:	2304      	movs	r3, #4
 800371e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003722:	e04a      	b.n	80037ba <UART_SetConfig+0x2fe>
 8003724:	2308      	movs	r3, #8
 8003726:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800372a:	e046      	b.n	80037ba <UART_SetConfig+0x2fe>
 800372c:	2310      	movs	r3, #16
 800372e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003732:	e042      	b.n	80037ba <UART_SetConfig+0x2fe>
 8003734:	697b      	ldr	r3, [r7, #20]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	4a17      	ldr	r2, [pc, #92]	; (8003798 <UART_SetConfig+0x2dc>)
 800373a:	4293      	cmp	r3, r2
 800373c:	d13a      	bne.n	80037b4 <UART_SetConfig+0x2f8>
 800373e:	4b18      	ldr	r3, [pc, #96]	; (80037a0 <UART_SetConfig+0x2e4>)
 8003740:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003744:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003748:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800374c:	d01a      	beq.n	8003784 <UART_SetConfig+0x2c8>
 800374e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003752:	d81b      	bhi.n	800378c <UART_SetConfig+0x2d0>
 8003754:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003758:	d00c      	beq.n	8003774 <UART_SetConfig+0x2b8>
 800375a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800375e:	d815      	bhi.n	800378c <UART_SetConfig+0x2d0>
 8003760:	2b00      	cmp	r3, #0
 8003762:	d003      	beq.n	800376c <UART_SetConfig+0x2b0>
 8003764:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003768:	d008      	beq.n	800377c <UART_SetConfig+0x2c0>
 800376a:	e00f      	b.n	800378c <UART_SetConfig+0x2d0>
 800376c:	2300      	movs	r3, #0
 800376e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003772:	e022      	b.n	80037ba <UART_SetConfig+0x2fe>
 8003774:	2302      	movs	r3, #2
 8003776:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800377a:	e01e      	b.n	80037ba <UART_SetConfig+0x2fe>
 800377c:	2304      	movs	r3, #4
 800377e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003782:	e01a      	b.n	80037ba <UART_SetConfig+0x2fe>
 8003784:	2308      	movs	r3, #8
 8003786:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800378a:	e016      	b.n	80037ba <UART_SetConfig+0x2fe>
 800378c:	2310      	movs	r3, #16
 800378e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003792:	e012      	b.n	80037ba <UART_SetConfig+0x2fe>
 8003794:	cfff69f3 	.word	0xcfff69f3
 8003798:	40008000 	.word	0x40008000
 800379c:	40013800 	.word	0x40013800
 80037a0:	40021000 	.word	0x40021000
 80037a4:	40004400 	.word	0x40004400
 80037a8:	40004800 	.word	0x40004800
 80037ac:	40004c00 	.word	0x40004c00
 80037b0:	40005000 	.word	0x40005000
 80037b4:	2310      	movs	r3, #16
 80037b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80037ba:	697b      	ldr	r3, [r7, #20]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	4aae      	ldr	r2, [pc, #696]	; (8003a78 <UART_SetConfig+0x5bc>)
 80037c0:	4293      	cmp	r3, r2
 80037c2:	f040 8097 	bne.w	80038f4 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80037c6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80037ca:	2b08      	cmp	r3, #8
 80037cc:	d823      	bhi.n	8003816 <UART_SetConfig+0x35a>
 80037ce:	a201      	add	r2, pc, #4	; (adr r2, 80037d4 <UART_SetConfig+0x318>)
 80037d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037d4:	080037f9 	.word	0x080037f9
 80037d8:	08003817 	.word	0x08003817
 80037dc:	08003801 	.word	0x08003801
 80037e0:	08003817 	.word	0x08003817
 80037e4:	08003807 	.word	0x08003807
 80037e8:	08003817 	.word	0x08003817
 80037ec:	08003817 	.word	0x08003817
 80037f0:	08003817 	.word	0x08003817
 80037f4:	0800380f 	.word	0x0800380f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80037f8:	f7fe fc96 	bl	8002128 <HAL_RCC_GetPCLK1Freq>
 80037fc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80037fe:	e010      	b.n	8003822 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003800:	4b9e      	ldr	r3, [pc, #632]	; (8003a7c <UART_SetConfig+0x5c0>)
 8003802:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003804:	e00d      	b.n	8003822 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003806:	f7fe fbf7 	bl	8001ff8 <HAL_RCC_GetSysClockFreq>
 800380a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800380c:	e009      	b.n	8003822 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800380e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003812:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003814:	e005      	b.n	8003822 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8003816:	2300      	movs	r3, #0
 8003818:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800381a:	2301      	movs	r3, #1
 800381c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003820:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003824:	2b00      	cmp	r3, #0
 8003826:	f000 8130 	beq.w	8003a8a <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800382a:	697b      	ldr	r3, [r7, #20]
 800382c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800382e:	4a94      	ldr	r2, [pc, #592]	; (8003a80 <UART_SetConfig+0x5c4>)
 8003830:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003834:	461a      	mov	r2, r3
 8003836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003838:	fbb3 f3f2 	udiv	r3, r3, r2
 800383c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800383e:	697b      	ldr	r3, [r7, #20]
 8003840:	685a      	ldr	r2, [r3, #4]
 8003842:	4613      	mov	r3, r2
 8003844:	005b      	lsls	r3, r3, #1
 8003846:	4413      	add	r3, r2
 8003848:	69ba      	ldr	r2, [r7, #24]
 800384a:	429a      	cmp	r2, r3
 800384c:	d305      	bcc.n	800385a <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800384e:	697b      	ldr	r3, [r7, #20]
 8003850:	685b      	ldr	r3, [r3, #4]
 8003852:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003854:	69ba      	ldr	r2, [r7, #24]
 8003856:	429a      	cmp	r2, r3
 8003858:	d903      	bls.n	8003862 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800385a:	2301      	movs	r3, #1
 800385c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003860:	e113      	b.n	8003a8a <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003864:	2200      	movs	r2, #0
 8003866:	60bb      	str	r3, [r7, #8]
 8003868:	60fa      	str	r2, [r7, #12]
 800386a:	697b      	ldr	r3, [r7, #20]
 800386c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800386e:	4a84      	ldr	r2, [pc, #528]	; (8003a80 <UART_SetConfig+0x5c4>)
 8003870:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003874:	b29b      	uxth	r3, r3
 8003876:	2200      	movs	r2, #0
 8003878:	603b      	str	r3, [r7, #0]
 800387a:	607a      	str	r2, [r7, #4]
 800387c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003880:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003884:	f7fc fd0c 	bl	80002a0 <__aeabi_uldivmod>
 8003888:	4602      	mov	r2, r0
 800388a:	460b      	mov	r3, r1
 800388c:	4610      	mov	r0, r2
 800388e:	4619      	mov	r1, r3
 8003890:	f04f 0200 	mov.w	r2, #0
 8003894:	f04f 0300 	mov.w	r3, #0
 8003898:	020b      	lsls	r3, r1, #8
 800389a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800389e:	0202      	lsls	r2, r0, #8
 80038a0:	6979      	ldr	r1, [r7, #20]
 80038a2:	6849      	ldr	r1, [r1, #4]
 80038a4:	0849      	lsrs	r1, r1, #1
 80038a6:	2000      	movs	r0, #0
 80038a8:	460c      	mov	r4, r1
 80038aa:	4605      	mov	r5, r0
 80038ac:	eb12 0804 	adds.w	r8, r2, r4
 80038b0:	eb43 0905 	adc.w	r9, r3, r5
 80038b4:	697b      	ldr	r3, [r7, #20]
 80038b6:	685b      	ldr	r3, [r3, #4]
 80038b8:	2200      	movs	r2, #0
 80038ba:	469a      	mov	sl, r3
 80038bc:	4693      	mov	fp, r2
 80038be:	4652      	mov	r2, sl
 80038c0:	465b      	mov	r3, fp
 80038c2:	4640      	mov	r0, r8
 80038c4:	4649      	mov	r1, r9
 80038c6:	f7fc fceb 	bl	80002a0 <__aeabi_uldivmod>
 80038ca:	4602      	mov	r2, r0
 80038cc:	460b      	mov	r3, r1
 80038ce:	4613      	mov	r3, r2
 80038d0:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80038d2:	6a3b      	ldr	r3, [r7, #32]
 80038d4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80038d8:	d308      	bcc.n	80038ec <UART_SetConfig+0x430>
 80038da:	6a3b      	ldr	r3, [r7, #32]
 80038dc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80038e0:	d204      	bcs.n	80038ec <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 80038e2:	697b      	ldr	r3, [r7, #20]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	6a3a      	ldr	r2, [r7, #32]
 80038e8:	60da      	str	r2, [r3, #12]
 80038ea:	e0ce      	b.n	8003a8a <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 80038ec:	2301      	movs	r3, #1
 80038ee:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80038f2:	e0ca      	b.n	8003a8a <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80038f4:	697b      	ldr	r3, [r7, #20]
 80038f6:	69db      	ldr	r3, [r3, #28]
 80038f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80038fc:	d166      	bne.n	80039cc <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80038fe:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003902:	2b08      	cmp	r3, #8
 8003904:	d827      	bhi.n	8003956 <UART_SetConfig+0x49a>
 8003906:	a201      	add	r2, pc, #4	; (adr r2, 800390c <UART_SetConfig+0x450>)
 8003908:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800390c:	08003931 	.word	0x08003931
 8003910:	08003939 	.word	0x08003939
 8003914:	08003941 	.word	0x08003941
 8003918:	08003957 	.word	0x08003957
 800391c:	08003947 	.word	0x08003947
 8003920:	08003957 	.word	0x08003957
 8003924:	08003957 	.word	0x08003957
 8003928:	08003957 	.word	0x08003957
 800392c:	0800394f 	.word	0x0800394f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003930:	f7fe fbfa 	bl	8002128 <HAL_RCC_GetPCLK1Freq>
 8003934:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003936:	e014      	b.n	8003962 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003938:	f7fe fc0c 	bl	8002154 <HAL_RCC_GetPCLK2Freq>
 800393c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800393e:	e010      	b.n	8003962 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003940:	4b4e      	ldr	r3, [pc, #312]	; (8003a7c <UART_SetConfig+0x5c0>)
 8003942:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003944:	e00d      	b.n	8003962 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003946:	f7fe fb57 	bl	8001ff8 <HAL_RCC_GetSysClockFreq>
 800394a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800394c:	e009      	b.n	8003962 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800394e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003952:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003954:	e005      	b.n	8003962 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8003956:	2300      	movs	r3, #0
 8003958:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800395a:	2301      	movs	r3, #1
 800395c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003960:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003964:	2b00      	cmp	r3, #0
 8003966:	f000 8090 	beq.w	8003a8a <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800396a:	697b      	ldr	r3, [r7, #20]
 800396c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800396e:	4a44      	ldr	r2, [pc, #272]	; (8003a80 <UART_SetConfig+0x5c4>)
 8003970:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003974:	461a      	mov	r2, r3
 8003976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003978:	fbb3 f3f2 	udiv	r3, r3, r2
 800397c:	005a      	lsls	r2, r3, #1
 800397e:	697b      	ldr	r3, [r7, #20]
 8003980:	685b      	ldr	r3, [r3, #4]
 8003982:	085b      	lsrs	r3, r3, #1
 8003984:	441a      	add	r2, r3
 8003986:	697b      	ldr	r3, [r7, #20]
 8003988:	685b      	ldr	r3, [r3, #4]
 800398a:	fbb2 f3f3 	udiv	r3, r2, r3
 800398e:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003990:	6a3b      	ldr	r3, [r7, #32]
 8003992:	2b0f      	cmp	r3, #15
 8003994:	d916      	bls.n	80039c4 <UART_SetConfig+0x508>
 8003996:	6a3b      	ldr	r3, [r7, #32]
 8003998:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800399c:	d212      	bcs.n	80039c4 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800399e:	6a3b      	ldr	r3, [r7, #32]
 80039a0:	b29b      	uxth	r3, r3
 80039a2:	f023 030f 	bic.w	r3, r3, #15
 80039a6:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80039a8:	6a3b      	ldr	r3, [r7, #32]
 80039aa:	085b      	lsrs	r3, r3, #1
 80039ac:	b29b      	uxth	r3, r3
 80039ae:	f003 0307 	and.w	r3, r3, #7
 80039b2:	b29a      	uxth	r2, r3
 80039b4:	8bfb      	ldrh	r3, [r7, #30]
 80039b6:	4313      	orrs	r3, r2
 80039b8:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80039ba:	697b      	ldr	r3, [r7, #20]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	8bfa      	ldrh	r2, [r7, #30]
 80039c0:	60da      	str	r2, [r3, #12]
 80039c2:	e062      	b.n	8003a8a <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80039c4:	2301      	movs	r3, #1
 80039c6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80039ca:	e05e      	b.n	8003a8a <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80039cc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80039d0:	2b08      	cmp	r3, #8
 80039d2:	d828      	bhi.n	8003a26 <UART_SetConfig+0x56a>
 80039d4:	a201      	add	r2, pc, #4	; (adr r2, 80039dc <UART_SetConfig+0x520>)
 80039d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039da:	bf00      	nop
 80039dc:	08003a01 	.word	0x08003a01
 80039e0:	08003a09 	.word	0x08003a09
 80039e4:	08003a11 	.word	0x08003a11
 80039e8:	08003a27 	.word	0x08003a27
 80039ec:	08003a17 	.word	0x08003a17
 80039f0:	08003a27 	.word	0x08003a27
 80039f4:	08003a27 	.word	0x08003a27
 80039f8:	08003a27 	.word	0x08003a27
 80039fc:	08003a1f 	.word	0x08003a1f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003a00:	f7fe fb92 	bl	8002128 <HAL_RCC_GetPCLK1Freq>
 8003a04:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003a06:	e014      	b.n	8003a32 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003a08:	f7fe fba4 	bl	8002154 <HAL_RCC_GetPCLK2Freq>
 8003a0c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003a0e:	e010      	b.n	8003a32 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003a10:	4b1a      	ldr	r3, [pc, #104]	; (8003a7c <UART_SetConfig+0x5c0>)
 8003a12:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003a14:	e00d      	b.n	8003a32 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003a16:	f7fe faef 	bl	8001ff8 <HAL_RCC_GetSysClockFreq>
 8003a1a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003a1c:	e009      	b.n	8003a32 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003a1e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003a22:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003a24:	e005      	b.n	8003a32 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8003a26:	2300      	movs	r3, #0
 8003a28:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003a30:	bf00      	nop
    }

    if (pclk != 0U)
 8003a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d028      	beq.n	8003a8a <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003a38:	697b      	ldr	r3, [r7, #20]
 8003a3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a3c:	4a10      	ldr	r2, [pc, #64]	; (8003a80 <UART_SetConfig+0x5c4>)
 8003a3e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003a42:	461a      	mov	r2, r3
 8003a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a46:	fbb3 f2f2 	udiv	r2, r3, r2
 8003a4a:	697b      	ldr	r3, [r7, #20]
 8003a4c:	685b      	ldr	r3, [r3, #4]
 8003a4e:	085b      	lsrs	r3, r3, #1
 8003a50:	441a      	add	r2, r3
 8003a52:	697b      	ldr	r3, [r7, #20]
 8003a54:	685b      	ldr	r3, [r3, #4]
 8003a56:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a5a:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003a5c:	6a3b      	ldr	r3, [r7, #32]
 8003a5e:	2b0f      	cmp	r3, #15
 8003a60:	d910      	bls.n	8003a84 <UART_SetConfig+0x5c8>
 8003a62:	6a3b      	ldr	r3, [r7, #32]
 8003a64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a68:	d20c      	bcs.n	8003a84 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003a6a:	6a3b      	ldr	r3, [r7, #32]
 8003a6c:	b29a      	uxth	r2, r3
 8003a6e:	697b      	ldr	r3, [r7, #20]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	60da      	str	r2, [r3, #12]
 8003a74:	e009      	b.n	8003a8a <UART_SetConfig+0x5ce>
 8003a76:	bf00      	nop
 8003a78:	40008000 	.word	0x40008000
 8003a7c:	00f42400 	.word	0x00f42400
 8003a80:	0800718c 	.word	0x0800718c
      }
      else
      {
        ret = HAL_ERROR;
 8003a84:	2301      	movs	r3, #1
 8003a86:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003a8a:	697b      	ldr	r3, [r7, #20]
 8003a8c:	2201      	movs	r2, #1
 8003a8e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8003a92:	697b      	ldr	r3, [r7, #20]
 8003a94:	2201      	movs	r2, #1
 8003a96:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003a9a:	697b      	ldr	r3, [r7, #20]
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8003aa0:	697b      	ldr	r3, [r7, #20]
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8003aa6:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8003aaa:	4618      	mov	r0, r3
 8003aac:	3730      	adds	r7, #48	; 0x30
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08003ab4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003ab4:	b480      	push	{r7}
 8003ab6:	b083      	sub	sp, #12
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ac0:	f003 0308 	and.w	r3, r3, #8
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d00a      	beq.n	8003ade <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	685b      	ldr	r3, [r3, #4]
 8003ace:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	430a      	orrs	r2, r1
 8003adc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ae2:	f003 0301 	and.w	r3, r3, #1
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d00a      	beq.n	8003b00 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	685b      	ldr	r3, [r3, #4]
 8003af0:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	430a      	orrs	r2, r1
 8003afe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b04:	f003 0302 	and.w	r3, r3, #2
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d00a      	beq.n	8003b22 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	685b      	ldr	r3, [r3, #4]
 8003b12:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	430a      	orrs	r2, r1
 8003b20:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b26:	f003 0304 	and.w	r3, r3, #4
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d00a      	beq.n	8003b44 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	685b      	ldr	r3, [r3, #4]
 8003b34:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	430a      	orrs	r2, r1
 8003b42:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b48:	f003 0310 	and.w	r3, r3, #16
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d00a      	beq.n	8003b66 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	689b      	ldr	r3, [r3, #8]
 8003b56:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	430a      	orrs	r2, r1
 8003b64:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b6a:	f003 0320 	and.w	r3, r3, #32
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d00a      	beq.n	8003b88 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	689b      	ldr	r3, [r3, #8]
 8003b78:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	430a      	orrs	r2, r1
 8003b86:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d01a      	beq.n	8003bca <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	685b      	ldr	r3, [r3, #4]
 8003b9a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	430a      	orrs	r2, r1
 8003ba8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003bb2:	d10a      	bne.n	8003bca <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	685b      	ldr	r3, [r3, #4]
 8003bba:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	430a      	orrs	r2, r1
 8003bc8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d00a      	beq.n	8003bec <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	685b      	ldr	r3, [r3, #4]
 8003bdc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	430a      	orrs	r2, r1
 8003bea:	605a      	str	r2, [r3, #4]
  }
}
 8003bec:	bf00      	nop
 8003bee:	370c      	adds	r7, #12
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf6:	4770      	bx	lr

08003bf8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	b098      	sub	sp, #96	; 0x60
 8003bfc:	af02      	add	r7, sp, #8
 8003bfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2200      	movs	r2, #0
 8003c04:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003c08:	f7fd f91c 	bl	8000e44 <HAL_GetTick>
 8003c0c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f003 0308 	and.w	r3, r3, #8
 8003c18:	2b08      	cmp	r3, #8
 8003c1a:	d12f      	bne.n	8003c7c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003c1c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003c20:	9300      	str	r3, [sp, #0]
 8003c22:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c24:	2200      	movs	r2, #0
 8003c26:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003c2a:	6878      	ldr	r0, [r7, #4]
 8003c2c:	f000 f88e 	bl	8003d4c <UART_WaitOnFlagUntilTimeout>
 8003c30:	4603      	mov	r3, r0
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d022      	beq.n	8003c7c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c3e:	e853 3f00 	ldrex	r3, [r3]
 8003c42:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003c44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c46:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003c4a:	653b      	str	r3, [r7, #80]	; 0x50
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	461a      	mov	r2, r3
 8003c52:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c54:	647b      	str	r3, [r7, #68]	; 0x44
 8003c56:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c58:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003c5a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003c5c:	e841 2300 	strex	r3, r2, [r1]
 8003c60:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003c62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d1e6      	bne.n	8003c36 <UART_CheckIdleState+0x3e>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2220      	movs	r2, #32
 8003c6c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2200      	movs	r2, #0
 8003c74:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003c78:	2303      	movs	r3, #3
 8003c7a:	e063      	b.n	8003d44 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f003 0304 	and.w	r3, r3, #4
 8003c86:	2b04      	cmp	r3, #4
 8003c88:	d149      	bne.n	8003d1e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003c8a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003c8e:	9300      	str	r3, [sp, #0]
 8003c90:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c92:	2200      	movs	r2, #0
 8003c94:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003c98:	6878      	ldr	r0, [r7, #4]
 8003c9a:	f000 f857 	bl	8003d4c <UART_WaitOnFlagUntilTimeout>
 8003c9e:	4603      	mov	r3, r0
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d03c      	beq.n	8003d1e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cac:	e853 3f00 	ldrex	r3, [r3]
 8003cb0:	623b      	str	r3, [r7, #32]
   return(result);
 8003cb2:	6a3b      	ldr	r3, [r7, #32]
 8003cb4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003cb8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	461a      	mov	r2, r3
 8003cc0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003cc2:	633b      	str	r3, [r7, #48]	; 0x30
 8003cc4:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cc6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003cc8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003cca:	e841 2300 	strex	r3, r2, [r1]
 8003cce:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003cd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d1e6      	bne.n	8003ca4 <UART_CheckIdleState+0xac>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	3308      	adds	r3, #8
 8003cdc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cde:	693b      	ldr	r3, [r7, #16]
 8003ce0:	e853 3f00 	ldrex	r3, [r3]
 8003ce4:	60fb      	str	r3, [r7, #12]
   return(result);
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	f023 0301 	bic.w	r3, r3, #1
 8003cec:	64bb      	str	r3, [r7, #72]	; 0x48
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	3308      	adds	r3, #8
 8003cf4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003cf6:	61fa      	str	r2, [r7, #28]
 8003cf8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cfa:	69b9      	ldr	r1, [r7, #24]
 8003cfc:	69fa      	ldr	r2, [r7, #28]
 8003cfe:	e841 2300 	strex	r3, r2, [r1]
 8003d02:	617b      	str	r3, [r7, #20]
   return(result);
 8003d04:	697b      	ldr	r3, [r7, #20]
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d1e5      	bne.n	8003cd6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	2220      	movs	r2, #32
 8003d0e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	2200      	movs	r2, #0
 8003d16:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003d1a:	2303      	movs	r3, #3
 8003d1c:	e012      	b.n	8003d44 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	2220      	movs	r2, #32
 8003d22:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	2220      	movs	r2, #32
 8003d2a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	2200      	movs	r2, #0
 8003d32:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2200      	movs	r2, #0
 8003d38:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8003d42:	2300      	movs	r3, #0
}
 8003d44:	4618      	mov	r0, r3
 8003d46:	3758      	adds	r7, #88	; 0x58
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	bd80      	pop	{r7, pc}

08003d4c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	b084      	sub	sp, #16
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	60f8      	str	r0, [r7, #12]
 8003d54:	60b9      	str	r1, [r7, #8]
 8003d56:	603b      	str	r3, [r7, #0]
 8003d58:	4613      	mov	r3, r2
 8003d5a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d5c:	e049      	b.n	8003df2 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d5e:	69bb      	ldr	r3, [r7, #24]
 8003d60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d64:	d045      	beq.n	8003df2 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d66:	f7fd f86d 	bl	8000e44 <HAL_GetTick>
 8003d6a:	4602      	mov	r2, r0
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	1ad3      	subs	r3, r2, r3
 8003d70:	69ba      	ldr	r2, [r7, #24]
 8003d72:	429a      	cmp	r2, r3
 8003d74:	d302      	bcc.n	8003d7c <UART_WaitOnFlagUntilTimeout+0x30>
 8003d76:	69bb      	ldr	r3, [r7, #24]
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d101      	bne.n	8003d80 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003d7c:	2303      	movs	r3, #3
 8003d7e:	e048      	b.n	8003e12 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f003 0304 	and.w	r3, r3, #4
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d031      	beq.n	8003df2 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	69db      	ldr	r3, [r3, #28]
 8003d94:	f003 0308 	and.w	r3, r3, #8
 8003d98:	2b08      	cmp	r3, #8
 8003d9a:	d110      	bne.n	8003dbe <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	2208      	movs	r2, #8
 8003da2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003da4:	68f8      	ldr	r0, [r7, #12]
 8003da6:	f000 f838 	bl	8003e1a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	2208      	movs	r2, #8
 8003dae:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	2200      	movs	r2, #0
 8003db6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8003dba:	2301      	movs	r3, #1
 8003dbc:	e029      	b.n	8003e12 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	69db      	ldr	r3, [r3, #28]
 8003dc4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003dc8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003dcc:	d111      	bne.n	8003df2 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003dd6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003dd8:	68f8      	ldr	r0, [r7, #12]
 8003dda:	f000 f81e 	bl	8003e1a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	2220      	movs	r2, #32
 8003de2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	2200      	movs	r2, #0
 8003dea:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8003dee:	2303      	movs	r3, #3
 8003df0:	e00f      	b.n	8003e12 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	69da      	ldr	r2, [r3, #28]
 8003df8:	68bb      	ldr	r3, [r7, #8]
 8003dfa:	4013      	ands	r3, r2
 8003dfc:	68ba      	ldr	r2, [r7, #8]
 8003dfe:	429a      	cmp	r2, r3
 8003e00:	bf0c      	ite	eq
 8003e02:	2301      	moveq	r3, #1
 8003e04:	2300      	movne	r3, #0
 8003e06:	b2db      	uxtb	r3, r3
 8003e08:	461a      	mov	r2, r3
 8003e0a:	79fb      	ldrb	r3, [r7, #7]
 8003e0c:	429a      	cmp	r2, r3
 8003e0e:	d0a6      	beq.n	8003d5e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003e10:	2300      	movs	r3, #0
}
 8003e12:	4618      	mov	r0, r3
 8003e14:	3710      	adds	r7, #16
 8003e16:	46bd      	mov	sp, r7
 8003e18:	bd80      	pop	{r7, pc}

08003e1a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003e1a:	b480      	push	{r7}
 8003e1c:	b095      	sub	sp, #84	; 0x54
 8003e1e:	af00      	add	r7, sp, #0
 8003e20:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e2a:	e853 3f00 	ldrex	r3, [r3]
 8003e2e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003e30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e32:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003e36:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	461a      	mov	r2, r3
 8003e3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e40:	643b      	str	r3, [r7, #64]	; 0x40
 8003e42:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e44:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003e46:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003e48:	e841 2300 	strex	r3, r2, [r1]
 8003e4c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003e4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d1e6      	bne.n	8003e22 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	3308      	adds	r3, #8
 8003e5a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e5c:	6a3b      	ldr	r3, [r7, #32]
 8003e5e:	e853 3f00 	ldrex	r3, [r3]
 8003e62:	61fb      	str	r3, [r7, #28]
   return(result);
 8003e64:	69fb      	ldr	r3, [r7, #28]
 8003e66:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e6a:	f023 0301 	bic.w	r3, r3, #1
 8003e6e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	3308      	adds	r3, #8
 8003e76:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003e78:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003e7a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e7c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003e7e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003e80:	e841 2300 	strex	r3, r2, [r1]
 8003e84:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d1e3      	bne.n	8003e54 <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003e90:	2b01      	cmp	r3, #1
 8003e92:	d118      	bne.n	8003ec6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	e853 3f00 	ldrex	r3, [r3]
 8003ea0:	60bb      	str	r3, [r7, #8]
   return(result);
 8003ea2:	68bb      	ldr	r3, [r7, #8]
 8003ea4:	f023 0310 	bic.w	r3, r3, #16
 8003ea8:	647b      	str	r3, [r7, #68]	; 0x44
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	461a      	mov	r2, r3
 8003eb0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003eb2:	61bb      	str	r3, [r7, #24]
 8003eb4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003eb6:	6979      	ldr	r1, [r7, #20]
 8003eb8:	69ba      	ldr	r2, [r7, #24]
 8003eba:	e841 2300 	strex	r3, r2, [r1]
 8003ebe:	613b      	str	r3, [r7, #16]
   return(result);
 8003ec0:	693b      	ldr	r3, [r7, #16]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d1e6      	bne.n	8003e94 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	2220      	movs	r2, #32
 8003eca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	675a      	str	r2, [r3, #116]	; 0x74
}
 8003eda:	bf00      	nop
 8003edc:	3754      	adds	r7, #84	; 0x54
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee4:	4770      	bx	lr

08003ee6 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8003ee6:	b480      	push	{r7}
 8003ee8:	b085      	sub	sp, #20
 8003eea:	af00      	add	r7, sp, #0
 8003eec:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8003ef4:	2b01      	cmp	r3, #1
 8003ef6:	d101      	bne.n	8003efc <HAL_UARTEx_DisableFifoMode+0x16>
 8003ef8:	2302      	movs	r3, #2
 8003efa:	e027      	b.n	8003f4c <HAL_UARTEx_DisableFifoMode+0x66>
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2201      	movs	r2, #1
 8003f00:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2224      	movs	r2, #36	; 0x24
 8003f08:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	681a      	ldr	r2, [r3, #0]
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f022 0201 	bic.w	r2, r2, #1
 8003f22:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8003f2a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2200      	movs	r2, #0
 8003f30:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	68fa      	ldr	r2, [r7, #12]
 8003f38:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	2220      	movs	r2, #32
 8003f3e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	2200      	movs	r2, #0
 8003f46:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8003f4a:	2300      	movs	r3, #0
}
 8003f4c:	4618      	mov	r0, r3
 8003f4e:	3714      	adds	r7, #20
 8003f50:	46bd      	mov	sp, r7
 8003f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f56:	4770      	bx	lr

08003f58 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	b084      	sub	sp, #16
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
 8003f60:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8003f68:	2b01      	cmp	r3, #1
 8003f6a:	d101      	bne.n	8003f70 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8003f6c:	2302      	movs	r3, #2
 8003f6e:	e02d      	b.n	8003fcc <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2201      	movs	r2, #1
 8003f74:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2224      	movs	r2, #36	; 0x24
 8003f7c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	681a      	ldr	r2, [r3, #0]
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f022 0201 	bic.w	r2, r2, #1
 8003f96:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	689b      	ldr	r3, [r3, #8]
 8003f9e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	683a      	ldr	r2, [r7, #0]
 8003fa8:	430a      	orrs	r2, r1
 8003faa:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003fac:	6878      	ldr	r0, [r7, #4]
 8003fae:	f000 f84f 	bl	8004050 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	68fa      	ldr	r2, [r7, #12]
 8003fb8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	2220      	movs	r2, #32
 8003fbe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8003fca:	2300      	movs	r3, #0
}
 8003fcc:	4618      	mov	r0, r3
 8003fce:	3710      	adds	r7, #16
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	bd80      	pop	{r7, pc}

08003fd4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	b084      	sub	sp, #16
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
 8003fdc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8003fe4:	2b01      	cmp	r3, #1
 8003fe6:	d101      	bne.n	8003fec <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8003fe8:	2302      	movs	r3, #2
 8003fea:	e02d      	b.n	8004048 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2201      	movs	r2, #1
 8003ff0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2224      	movs	r2, #36	; 0x24
 8003ff8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	681a      	ldr	r2, [r3, #0]
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f022 0201 	bic.w	r2, r2, #1
 8004012:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	689b      	ldr	r3, [r3, #8]
 800401a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	683a      	ldr	r2, [r7, #0]
 8004024:	430a      	orrs	r2, r1
 8004026:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004028:	6878      	ldr	r0, [r7, #4]
 800402a:	f000 f811 	bl	8004050 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	68fa      	ldr	r2, [r7, #12]
 8004034:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	2220      	movs	r2, #32
 800403a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	2200      	movs	r2, #0
 8004042:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8004046:	2300      	movs	r3, #0
}
 8004048:	4618      	mov	r0, r3
 800404a:	3710      	adds	r7, #16
 800404c:	46bd      	mov	sp, r7
 800404e:	bd80      	pop	{r7, pc}

08004050 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004050:	b480      	push	{r7}
 8004052:	b085      	sub	sp, #20
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800405c:	2b00      	cmp	r3, #0
 800405e:	d108      	bne.n	8004072 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2201      	movs	r2, #1
 8004064:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2201      	movs	r2, #1
 800406c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004070:	e031      	b.n	80040d6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004072:	2308      	movs	r3, #8
 8004074:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004076:	2308      	movs	r3, #8
 8004078:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	689b      	ldr	r3, [r3, #8]
 8004080:	0e5b      	lsrs	r3, r3, #25
 8004082:	b2db      	uxtb	r3, r3
 8004084:	f003 0307 	and.w	r3, r3, #7
 8004088:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	689b      	ldr	r3, [r3, #8]
 8004090:	0f5b      	lsrs	r3, r3, #29
 8004092:	b2db      	uxtb	r3, r3
 8004094:	f003 0307 	and.w	r3, r3, #7
 8004098:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800409a:	7bbb      	ldrb	r3, [r7, #14]
 800409c:	7b3a      	ldrb	r2, [r7, #12]
 800409e:	4911      	ldr	r1, [pc, #68]	; (80040e4 <UARTEx_SetNbDataToProcess+0x94>)
 80040a0:	5c8a      	ldrb	r2, [r1, r2]
 80040a2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80040a6:	7b3a      	ldrb	r2, [r7, #12]
 80040a8:	490f      	ldr	r1, [pc, #60]	; (80040e8 <UARTEx_SetNbDataToProcess+0x98>)
 80040aa:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80040ac:	fb93 f3f2 	sdiv	r3, r3, r2
 80040b0:	b29a      	uxth	r2, r3
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80040b8:	7bfb      	ldrb	r3, [r7, #15]
 80040ba:	7b7a      	ldrb	r2, [r7, #13]
 80040bc:	4909      	ldr	r1, [pc, #36]	; (80040e4 <UARTEx_SetNbDataToProcess+0x94>)
 80040be:	5c8a      	ldrb	r2, [r1, r2]
 80040c0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80040c4:	7b7a      	ldrb	r2, [r7, #13]
 80040c6:	4908      	ldr	r1, [pc, #32]	; (80040e8 <UARTEx_SetNbDataToProcess+0x98>)
 80040c8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80040ca:	fb93 f3f2 	sdiv	r3, r3, r2
 80040ce:	b29a      	uxth	r2, r3
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80040d6:	bf00      	nop
 80040d8:	3714      	adds	r7, #20
 80040da:	46bd      	mov	sp, r7
 80040dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e0:	4770      	bx	lr
 80040e2:	bf00      	nop
 80040e4:	080071a4 	.word	0x080071a4
 80040e8:	080071ac 	.word	0x080071ac

080040ec <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80040ec:	b480      	push	{r7}
 80040ee:	b083      	sub	sp, #12
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	f103 0208 	add.w	r2, r3, #8
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	f04f 32ff 	mov.w	r2, #4294967295
 8004104:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	f103 0208 	add.w	r2, r3, #8
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	f103 0208 	add.w	r2, r3, #8
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	2200      	movs	r2, #0
 800411e:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004120:	bf00      	nop
 8004122:	370c      	adds	r7, #12
 8004124:	46bd      	mov	sp, r7
 8004126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412a:	4770      	bx	lr

0800412c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800412c:	b480      	push	{r7}
 800412e:	b083      	sub	sp, #12
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2200      	movs	r2, #0
 8004138:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800413a:	bf00      	nop
 800413c:	370c      	adds	r7, #12
 800413e:	46bd      	mov	sp, r7
 8004140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004144:	4770      	bx	lr

08004146 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8004146:	b480      	push	{r7}
 8004148:	b085      	sub	sp, #20
 800414a:	af00      	add	r7, sp, #0
 800414c:	6078      	str	r0, [r7, #4]
 800414e:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004150:	683b      	ldr	r3, [r7, #0]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8004156:	68bb      	ldr	r3, [r7, #8]
 8004158:	f1b3 3fff 	cmp.w	r3, #4294967295
 800415c:	d103      	bne.n	8004166 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	691b      	ldr	r3, [r3, #16]
 8004162:	60fb      	str	r3, [r7, #12]
 8004164:	e00c      	b.n	8004180 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	3308      	adds	r3, #8
 800416a:	60fb      	str	r3, [r7, #12]
 800416c:	e002      	b.n	8004174 <vListInsert+0x2e>
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	685b      	ldr	r3, [r3, #4]
 8004172:	60fb      	str	r3, [r7, #12]
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	685b      	ldr	r3, [r3, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	68ba      	ldr	r2, [r7, #8]
 800417c:	429a      	cmp	r2, r3
 800417e:	d2f6      	bcs.n	800416e <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	685a      	ldr	r2, [r3, #4]
 8004184:	683b      	ldr	r3, [r7, #0]
 8004186:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	685b      	ldr	r3, [r3, #4]
 800418c:	683a      	ldr	r2, [r7, #0]
 800418e:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	68fa      	ldr	r2, [r7, #12]
 8004194:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	683a      	ldr	r2, [r7, #0]
 800419a:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 800419c:	683b      	ldr	r3, [r7, #0]
 800419e:	687a      	ldr	r2, [r7, #4]
 80041a0:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	1c5a      	adds	r2, r3, #1
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	601a      	str	r2, [r3, #0]
}
 80041ac:	bf00      	nop
 80041ae:	3714      	adds	r7, #20
 80041b0:	46bd      	mov	sp, r7
 80041b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b6:	4770      	bx	lr

080041b8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80041b8:	b480      	push	{r7}
 80041ba:	b085      	sub	sp, #20
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	691b      	ldr	r3, [r3, #16]
 80041c4:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	685b      	ldr	r3, [r3, #4]
 80041ca:	687a      	ldr	r2, [r7, #4]
 80041cc:	6892      	ldr	r2, [r2, #8]
 80041ce:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	689b      	ldr	r3, [r3, #8]
 80041d4:	687a      	ldr	r2, [r7, #4]
 80041d6:	6852      	ldr	r2, [r2, #4]
 80041d8:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	685b      	ldr	r3, [r3, #4]
 80041de:	687a      	ldr	r2, [r7, #4]
 80041e0:	429a      	cmp	r2, r3
 80041e2:	d103      	bne.n	80041ec <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	689a      	ldr	r2, [r3, #8]
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2200      	movs	r2, #0
 80041f0:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	1e5a      	subs	r2, r3, #1
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	681b      	ldr	r3, [r3, #0]
}
 8004200:	4618      	mov	r0, r3
 8004202:	3714      	adds	r7, #20
 8004204:	46bd      	mov	sp, r7
 8004206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420a:	4770      	bx	lr

0800420c <xQueueGenericReset>:
    }
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 800420c:	b580      	push	{r7, lr}
 800420e:	b086      	sub	sp, #24
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
 8004214:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 8004216:	2301      	movs	r3, #1
 8004218:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 800421e:	693b      	ldr	r3, [r7, #16]
 8004220:	2b00      	cmp	r3, #0
 8004222:	d10a      	bne.n	800423a <xQueueGenericReset+0x2e>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8004224:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004228:	f383 8811 	msr	BASEPRI, r3
 800422c:	f3bf 8f6f 	isb	sy
 8004230:	f3bf 8f4f 	dsb	sy
 8004234:	60fb      	str	r3, [r7, #12]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8004236:	bf00      	nop
 8004238:	e7fe      	b.n	8004238 <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 800423a:	693b      	ldr	r3, [r7, #16]
 800423c:	2b00      	cmp	r3, #0
 800423e:	d05d      	beq.n	80042fc <xQueueGenericReset+0xf0>
        ( pxQueue->uxLength >= 1U ) &&
 8004240:	693b      	ldr	r3, [r7, #16]
 8004242:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
 8004244:	2b00      	cmp	r3, #0
 8004246:	d059      	beq.n	80042fc <xQueueGenericReset+0xf0>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 8004248:	693b      	ldr	r3, [r7, #16]
 800424a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800424c:	693b      	ldr	r3, [r7, #16]
 800424e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004250:	2100      	movs	r1, #0
 8004252:	fba3 2302 	umull	r2, r3, r3, r2
 8004256:	2b00      	cmp	r3, #0
 8004258:	d000      	beq.n	800425c <xQueueGenericReset+0x50>
 800425a:	2101      	movs	r1, #1
 800425c:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 800425e:	2b00      	cmp	r3, #0
 8004260:	d14c      	bne.n	80042fc <xQueueGenericReset+0xf0>
    {
        taskENTER_CRITICAL();
 8004262:	f001 ffc9 	bl	80061f8 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004266:	693b      	ldr	r3, [r7, #16]
 8004268:	681a      	ldr	r2, [r3, #0]
 800426a:	693b      	ldr	r3, [r7, #16]
 800426c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800426e:	6939      	ldr	r1, [r7, #16]
 8004270:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004272:	fb01 f303 	mul.w	r3, r1, r3
 8004276:	441a      	add	r2, r3
 8004278:	693b      	ldr	r3, [r7, #16]
 800427a:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800427c:	693b      	ldr	r3, [r7, #16]
 800427e:	2200      	movs	r2, #0
 8004280:	639a      	str	r2, [r3, #56]	; 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8004282:	693b      	ldr	r3, [r7, #16]
 8004284:	681a      	ldr	r2, [r3, #0]
 8004286:	693b      	ldr	r3, [r7, #16]
 8004288:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800428a:	693b      	ldr	r3, [r7, #16]
 800428c:	681a      	ldr	r2, [r3, #0]
 800428e:	693b      	ldr	r3, [r7, #16]
 8004290:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004292:	3b01      	subs	r3, #1
 8004294:	6939      	ldr	r1, [r7, #16]
 8004296:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004298:	fb01 f303 	mul.w	r3, r1, r3
 800429c:	441a      	add	r2, r3
 800429e:	693b      	ldr	r3, [r7, #16]
 80042a0:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 80042a2:	693b      	ldr	r3, [r7, #16]
 80042a4:	22ff      	movs	r2, #255	; 0xff
 80042a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 80042aa:	693b      	ldr	r3, [r7, #16]
 80042ac:	22ff      	movs	r2, #255	; 0xff
 80042ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

            if( xNewQueue == pdFALSE )
 80042b2:	683b      	ldr	r3, [r7, #0]
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d114      	bne.n	80042e2 <xQueueGenericReset+0xd6>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80042b8:	693b      	ldr	r3, [r7, #16]
 80042ba:	691b      	ldr	r3, [r3, #16]
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d01a      	beq.n	80042f6 <xQueueGenericReset+0xea>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80042c0:	693b      	ldr	r3, [r7, #16]
 80042c2:	3310      	adds	r3, #16
 80042c4:	4618      	mov	r0, r3
 80042c6:	f001 f89b 	bl	8005400 <xTaskRemoveFromEventList>
 80042ca:	4603      	mov	r3, r0
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d012      	beq.n	80042f6 <xQueueGenericReset+0xea>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80042d0:	4b15      	ldr	r3, [pc, #84]	; (8004328 <xQueueGenericReset+0x11c>)
 80042d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80042d6:	601a      	str	r2, [r3, #0]
 80042d8:	f3bf 8f4f 	dsb	sy
 80042dc:	f3bf 8f6f 	isb	sy
 80042e0:	e009      	b.n	80042f6 <xQueueGenericReset+0xea>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80042e2:	693b      	ldr	r3, [r7, #16]
 80042e4:	3310      	adds	r3, #16
 80042e6:	4618      	mov	r0, r3
 80042e8:	f7ff ff00 	bl	80040ec <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80042ec:	693b      	ldr	r3, [r7, #16]
 80042ee:	3324      	adds	r3, #36	; 0x24
 80042f0:	4618      	mov	r0, r3
 80042f2:	f7ff fefb 	bl	80040ec <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 80042f6:	f001 ffaf 	bl	8006258 <vPortExitCritical>
 80042fa:	e001      	b.n	8004300 <xQueueGenericReset+0xf4>
    }
    else
    {
        xReturn = pdFAIL;
 80042fc:	2300      	movs	r3, #0
 80042fe:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 8004300:	697b      	ldr	r3, [r7, #20]
 8004302:	2b00      	cmp	r3, #0
 8004304:	d10a      	bne.n	800431c <xQueueGenericReset+0x110>
        __asm volatile
 8004306:	f04f 0350 	mov.w	r3, #80	; 0x50
 800430a:	f383 8811 	msr	BASEPRI, r3
 800430e:	f3bf 8f6f 	isb	sy
 8004312:	f3bf 8f4f 	dsb	sy
 8004316:	60bb      	str	r3, [r7, #8]
    }
 8004318:	bf00      	nop
 800431a:	e7fe      	b.n	800431a <xQueueGenericReset+0x10e>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 800431c:	697b      	ldr	r3, [r7, #20]
}
 800431e:	4618      	mov	r0, r3
 8004320:	3718      	adds	r7, #24
 8004322:	46bd      	mov	sp, r7
 8004324:	bd80      	pop	{r7, pc}
 8004326:	bf00      	nop
 8004328:	e000ed04 	.word	0xe000ed04

0800432c <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 800432c:	b580      	push	{r7, lr}
 800432e:	b08a      	sub	sp, #40	; 0x28
 8004330:	af02      	add	r7, sp, #8
 8004332:	60f8      	str	r0, [r7, #12]
 8004334:	60b9      	str	r1, [r7, #8]
 8004336:	4613      	mov	r3, r2
 8004338:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 800433a:	2300      	movs	r3, #0
 800433c:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	2b00      	cmp	r3, #0
 8004342:	d02e      	beq.n	80043a2 <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8004344:	2100      	movs	r1, #0
 8004346:	68ba      	ldr	r2, [r7, #8]
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	fba3 2302 	umull	r2, r3, r3, r2
 800434e:	2b00      	cmp	r3, #0
 8004350:	d000      	beq.n	8004354 <xQueueGenericCreate+0x28>
 8004352:	2101      	movs	r1, #1
 8004354:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8004356:	2b00      	cmp	r3, #0
 8004358:	d123      	bne.n	80043a2 <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	68ba      	ldr	r2, [r7, #8]
 800435e:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8004362:	f113 0f49 	cmn.w	r3, #73	; 0x49
 8004366:	d81c      	bhi.n	80043a2 <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	68ba      	ldr	r2, [r7, #8]
 800436c:	fb02 f303 	mul.w	r3, r2, r3
 8004370:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004372:	69bb      	ldr	r3, [r7, #24]
 8004374:	3348      	adds	r3, #72	; 0x48
 8004376:	4618      	mov	r0, r3
 8004378:	f002 f816 	bl	80063a8 <pvPortMalloc>
 800437c:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 800437e:	69fb      	ldr	r3, [r7, #28]
 8004380:	2b00      	cmp	r3, #0
 8004382:	d01c      	beq.n	80043be <xQueueGenericCreate+0x92>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8004384:	69fb      	ldr	r3, [r7, #28]
 8004386:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004388:	697b      	ldr	r3, [r7, #20]
 800438a:	3348      	adds	r3, #72	; 0x48
 800438c:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800438e:	79fa      	ldrb	r2, [r7, #7]
 8004390:	69fb      	ldr	r3, [r7, #28]
 8004392:	9300      	str	r3, [sp, #0]
 8004394:	4613      	mov	r3, r2
 8004396:	697a      	ldr	r2, [r7, #20]
 8004398:	68b9      	ldr	r1, [r7, #8]
 800439a:	68f8      	ldr	r0, [r7, #12]
 800439c:	f000 f814 	bl	80043c8 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 80043a0:	e00d      	b.n	80043be <xQueueGenericCreate+0x92>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 80043a2:	69fb      	ldr	r3, [r7, #28]
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d10a      	bne.n	80043be <xQueueGenericCreate+0x92>
        __asm volatile
 80043a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043ac:	f383 8811 	msr	BASEPRI, r3
 80043b0:	f3bf 8f6f 	isb	sy
 80043b4:	f3bf 8f4f 	dsb	sy
 80043b8:	613b      	str	r3, [r7, #16]
    }
 80043ba:	bf00      	nop
 80043bc:	e7fe      	b.n	80043bc <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 80043be:	69fb      	ldr	r3, [r7, #28]
    }
 80043c0:	4618      	mov	r0, r3
 80043c2:	3720      	adds	r7, #32
 80043c4:	46bd      	mov	sp, r7
 80043c6:	bd80      	pop	{r7, pc}

080043c8 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 80043c8:	b580      	push	{r7, lr}
 80043ca:	b084      	sub	sp, #16
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	60f8      	str	r0, [r7, #12]
 80043d0:	60b9      	str	r1, [r7, #8]
 80043d2:	607a      	str	r2, [r7, #4]
 80043d4:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 80043d6:	68bb      	ldr	r3, [r7, #8]
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d103      	bne.n	80043e4 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80043dc:	69bb      	ldr	r3, [r7, #24]
 80043de:	69ba      	ldr	r2, [r7, #24]
 80043e0:	601a      	str	r2, [r3, #0]
 80043e2:	e002      	b.n	80043ea <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80043e4:	69bb      	ldr	r3, [r7, #24]
 80043e6:	687a      	ldr	r2, [r7, #4]
 80043e8:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 80043ea:	69bb      	ldr	r3, [r7, #24]
 80043ec:	68fa      	ldr	r2, [r7, #12]
 80043ee:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 80043f0:	69bb      	ldr	r3, [r7, #24]
 80043f2:	68ba      	ldr	r2, [r7, #8]
 80043f4:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80043f6:	2101      	movs	r1, #1
 80043f8:	69b8      	ldr	r0, [r7, #24]
 80043fa:	f7ff ff07 	bl	800420c <xQueueGenericReset>
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 80043fe:	bf00      	nop
 8004400:	3710      	adds	r7, #16
 8004402:	46bd      	mov	sp, r7
 8004404:	bd80      	pop	{r7, pc}
	...

08004408 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8004408:	b580      	push	{r7, lr}
 800440a:	b08e      	sub	sp, #56	; 0x38
 800440c:	af00      	add	r7, sp, #0
 800440e:	60f8      	str	r0, [r7, #12]
 8004410:	60b9      	str	r1, [r7, #8]
 8004412:	607a      	str	r2, [r7, #4]
 8004414:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004416:	2300      	movs	r3, #0
 8004418:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 800441e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004420:	2b00      	cmp	r3, #0
 8004422:	d10a      	bne.n	800443a <xQueueGenericSend+0x32>
        __asm volatile
 8004424:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004428:	f383 8811 	msr	BASEPRI, r3
 800442c:	f3bf 8f6f 	isb	sy
 8004430:	f3bf 8f4f 	dsb	sy
 8004434:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8004436:	bf00      	nop
 8004438:	e7fe      	b.n	8004438 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800443a:	68bb      	ldr	r3, [r7, #8]
 800443c:	2b00      	cmp	r3, #0
 800443e:	d103      	bne.n	8004448 <xQueueGenericSend+0x40>
 8004440:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004442:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004444:	2b00      	cmp	r3, #0
 8004446:	d101      	bne.n	800444c <xQueueGenericSend+0x44>
 8004448:	2301      	movs	r3, #1
 800444a:	e000      	b.n	800444e <xQueueGenericSend+0x46>
 800444c:	2300      	movs	r3, #0
 800444e:	2b00      	cmp	r3, #0
 8004450:	d10a      	bne.n	8004468 <xQueueGenericSend+0x60>
        __asm volatile
 8004452:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004456:	f383 8811 	msr	BASEPRI, r3
 800445a:	f3bf 8f6f 	isb	sy
 800445e:	f3bf 8f4f 	dsb	sy
 8004462:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8004464:	bf00      	nop
 8004466:	e7fe      	b.n	8004466 <xQueueGenericSend+0x5e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004468:	683b      	ldr	r3, [r7, #0]
 800446a:	2b02      	cmp	r3, #2
 800446c:	d103      	bne.n	8004476 <xQueueGenericSend+0x6e>
 800446e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004470:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004472:	2b01      	cmp	r3, #1
 8004474:	d101      	bne.n	800447a <xQueueGenericSend+0x72>
 8004476:	2301      	movs	r3, #1
 8004478:	e000      	b.n	800447c <xQueueGenericSend+0x74>
 800447a:	2300      	movs	r3, #0
 800447c:	2b00      	cmp	r3, #0
 800447e:	d10a      	bne.n	8004496 <xQueueGenericSend+0x8e>
        __asm volatile
 8004480:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004484:	f383 8811 	msr	BASEPRI, r3
 8004488:	f3bf 8f6f 	isb	sy
 800448c:	f3bf 8f4f 	dsb	sy
 8004490:	623b      	str	r3, [r7, #32]
    }
 8004492:	bf00      	nop
 8004494:	e7fe      	b.n	8004494 <xQueueGenericSend+0x8c>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004496:	f001 f9c3 	bl	8005820 <xTaskGetSchedulerState>
 800449a:	4603      	mov	r3, r0
 800449c:	2b00      	cmp	r3, #0
 800449e:	d102      	bne.n	80044a6 <xQueueGenericSend+0x9e>
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d101      	bne.n	80044aa <xQueueGenericSend+0xa2>
 80044a6:	2301      	movs	r3, #1
 80044a8:	e000      	b.n	80044ac <xQueueGenericSend+0xa4>
 80044aa:	2300      	movs	r3, #0
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d10a      	bne.n	80044c6 <xQueueGenericSend+0xbe>
        __asm volatile
 80044b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044b4:	f383 8811 	msr	BASEPRI, r3
 80044b8:	f3bf 8f6f 	isb	sy
 80044bc:	f3bf 8f4f 	dsb	sy
 80044c0:	61fb      	str	r3, [r7, #28]
    }
 80044c2:	bf00      	nop
 80044c4:	e7fe      	b.n	80044c4 <xQueueGenericSend+0xbc>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80044c6:	f001 fe97 	bl	80061f8 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80044ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80044ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044d2:	429a      	cmp	r2, r3
 80044d4:	d302      	bcc.n	80044dc <xQueueGenericSend+0xd4>
 80044d6:	683b      	ldr	r3, [r7, #0]
 80044d8:	2b02      	cmp	r3, #2
 80044da:	d129      	bne.n	8004530 <xQueueGenericSend+0x128>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80044dc:	683a      	ldr	r2, [r7, #0]
 80044de:	68b9      	ldr	r1, [r7, #8]
 80044e0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80044e2:	f000 f96f 	bl	80047c4 <prvCopyDataToQueue>
 80044e6:	62f8      	str	r0, [r7, #44]	; 0x2c

                    /* If there was a task waiting for data to arrive on the
                     * queue then unblock it now. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80044e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d010      	beq.n	8004512 <xQueueGenericSend+0x10a>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80044f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044f2:	3324      	adds	r3, #36	; 0x24
 80044f4:	4618      	mov	r0, r3
 80044f6:	f000 ff83 	bl	8005400 <xTaskRemoveFromEventList>
 80044fa:	4603      	mov	r3, r0
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d013      	beq.n	8004528 <xQueueGenericSend+0x120>
                        {
                            /* The unblocked task has a priority higher than
                             * our own so yield immediately.  Yes it is ok to do
                             * this from within the critical section - the kernel
                             * takes care of that. */
                            queueYIELD_IF_USING_PREEMPTION();
 8004500:	4b3f      	ldr	r3, [pc, #252]	; (8004600 <xQueueGenericSend+0x1f8>)
 8004502:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004506:	601a      	str	r2, [r3, #0]
 8004508:	f3bf 8f4f 	dsb	sy
 800450c:	f3bf 8f6f 	isb	sy
 8004510:	e00a      	b.n	8004528 <xQueueGenericSend+0x120>
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                    else if( xYieldRequired != pdFALSE )
 8004512:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004514:	2b00      	cmp	r3, #0
 8004516:	d007      	beq.n	8004528 <xQueueGenericSend+0x120>
                    {
                        /* This path is a special case that will only get
                         * executed if the task was holding multiple mutexes and
                         * the mutexes were given back in an order that is
                         * different to that in which they were taken. */
                        queueYIELD_IF_USING_PREEMPTION();
 8004518:	4b39      	ldr	r3, [pc, #228]	; (8004600 <xQueueGenericSend+0x1f8>)
 800451a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800451e:	601a      	str	r2, [r3, #0]
 8004520:	f3bf 8f4f 	dsb	sy
 8004524:	f3bf 8f6f 	isb	sy
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8004528:	f001 fe96 	bl	8006258 <vPortExitCritical>
                return pdPASS;
 800452c:	2301      	movs	r3, #1
 800452e:	e063      	b.n	80045f8 <xQueueGenericSend+0x1f0>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2b00      	cmp	r3, #0
 8004534:	d103      	bne.n	800453e <xQueueGenericSend+0x136>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8004536:	f001 fe8f 	bl	8006258 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 800453a:	2300      	movs	r3, #0
 800453c:	e05c      	b.n	80045f8 <xQueueGenericSend+0x1f0>
                }
                else if( xEntryTimeSet == pdFALSE )
 800453e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004540:	2b00      	cmp	r3, #0
 8004542:	d106      	bne.n	8004552 <xQueueGenericSend+0x14a>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8004544:	f107 0314 	add.w	r3, r7, #20
 8004548:	4618      	mov	r0, r3
 800454a:	f001 f82f 	bl	80055ac <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800454e:	2301      	movs	r3, #1
 8004550:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8004552:	f001 fe81 	bl	8006258 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8004556:	f000 fc5d 	bl	8004e14 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800455a:	f001 fe4d 	bl	80061f8 <vPortEnterCritical>
 800455e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004560:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004564:	b25b      	sxtb	r3, r3
 8004566:	f1b3 3fff 	cmp.w	r3, #4294967295
 800456a:	d103      	bne.n	8004574 <xQueueGenericSend+0x16c>
 800456c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800456e:	2200      	movs	r2, #0
 8004570:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004574:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004576:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800457a:	b25b      	sxtb	r3, r3
 800457c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004580:	d103      	bne.n	800458a <xQueueGenericSend+0x182>
 8004582:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004584:	2200      	movs	r2, #0
 8004586:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800458a:	f001 fe65 	bl	8006258 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800458e:	1d3a      	adds	r2, r7, #4
 8004590:	f107 0314 	add.w	r3, r7, #20
 8004594:	4611      	mov	r1, r2
 8004596:	4618      	mov	r0, r3
 8004598:	f001 f81e 	bl	80055d8 <xTaskCheckForTimeOut>
 800459c:	4603      	mov	r3, r0
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d124      	bne.n	80045ec <xQueueGenericSend+0x1e4>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80045a2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80045a4:	f000 fa06 	bl	80049b4 <prvIsQueueFull>
 80045a8:	4603      	mov	r3, r0
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d018      	beq.n	80045e0 <xQueueGenericSend+0x1d8>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80045ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045b0:	3310      	adds	r3, #16
 80045b2:	687a      	ldr	r2, [r7, #4]
 80045b4:	4611      	mov	r1, r2
 80045b6:	4618      	mov	r0, r3
 80045b8:	f000 feb8 	bl	800532c <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list. It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready list instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 80045bc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80045be:	f000 f991 	bl	80048e4 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in the ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 80045c2:	f000 fc35 	bl	8004e30 <xTaskResumeAll>
 80045c6:	4603      	mov	r3, r0
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	f47f af7c 	bne.w	80044c6 <xQueueGenericSend+0xbe>
                {
                    portYIELD_WITHIN_API();
 80045ce:	4b0c      	ldr	r3, [pc, #48]	; (8004600 <xQueueGenericSend+0x1f8>)
 80045d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80045d4:	601a      	str	r2, [r3, #0]
 80045d6:	f3bf 8f4f 	dsb	sy
 80045da:	f3bf 8f6f 	isb	sy
 80045de:	e772      	b.n	80044c6 <xQueueGenericSend+0xbe>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 80045e0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80045e2:	f000 f97f 	bl	80048e4 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80045e6:	f000 fc23 	bl	8004e30 <xTaskResumeAll>
 80045ea:	e76c      	b.n	80044c6 <xQueueGenericSend+0xbe>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 80045ec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80045ee:	f000 f979 	bl	80048e4 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80045f2:	f000 fc1d 	bl	8004e30 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 80045f6:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 80045f8:	4618      	mov	r0, r3
 80045fa:	3738      	adds	r7, #56	; 0x38
 80045fc:	46bd      	mov	sp, r7
 80045fe:	bd80      	pop	{r7, pc}
 8004600:	e000ed04 	.word	0xe000ed04

08004604 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8004604:	b580      	push	{r7, lr}
 8004606:	b08c      	sub	sp, #48	; 0x30
 8004608:	af00      	add	r7, sp, #0
 800460a:	60f8      	str	r0, [r7, #12]
 800460c:	60b9      	str	r1, [r7, #8]
 800460e:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8004610:	2300      	movs	r3, #0
 8004612:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8004618:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800461a:	2b00      	cmp	r3, #0
 800461c:	d10a      	bne.n	8004634 <xQueueReceive+0x30>
        __asm volatile
 800461e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004622:	f383 8811 	msr	BASEPRI, r3
 8004626:	f3bf 8f6f 	isb	sy
 800462a:	f3bf 8f4f 	dsb	sy
 800462e:	623b      	str	r3, [r7, #32]
    }
 8004630:	bf00      	nop
 8004632:	e7fe      	b.n	8004632 <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004634:	68bb      	ldr	r3, [r7, #8]
 8004636:	2b00      	cmp	r3, #0
 8004638:	d103      	bne.n	8004642 <xQueueReceive+0x3e>
 800463a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800463c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800463e:	2b00      	cmp	r3, #0
 8004640:	d101      	bne.n	8004646 <xQueueReceive+0x42>
 8004642:	2301      	movs	r3, #1
 8004644:	e000      	b.n	8004648 <xQueueReceive+0x44>
 8004646:	2300      	movs	r3, #0
 8004648:	2b00      	cmp	r3, #0
 800464a:	d10a      	bne.n	8004662 <xQueueReceive+0x5e>
        __asm volatile
 800464c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004650:	f383 8811 	msr	BASEPRI, r3
 8004654:	f3bf 8f6f 	isb	sy
 8004658:	f3bf 8f4f 	dsb	sy
 800465c:	61fb      	str	r3, [r7, #28]
    }
 800465e:	bf00      	nop
 8004660:	e7fe      	b.n	8004660 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004662:	f001 f8dd 	bl	8005820 <xTaskGetSchedulerState>
 8004666:	4603      	mov	r3, r0
 8004668:	2b00      	cmp	r3, #0
 800466a:	d102      	bne.n	8004672 <xQueueReceive+0x6e>
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2b00      	cmp	r3, #0
 8004670:	d101      	bne.n	8004676 <xQueueReceive+0x72>
 8004672:	2301      	movs	r3, #1
 8004674:	e000      	b.n	8004678 <xQueueReceive+0x74>
 8004676:	2300      	movs	r3, #0
 8004678:	2b00      	cmp	r3, #0
 800467a:	d10a      	bne.n	8004692 <xQueueReceive+0x8e>
        __asm volatile
 800467c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004680:	f383 8811 	msr	BASEPRI, r3
 8004684:	f3bf 8f6f 	isb	sy
 8004688:	f3bf 8f4f 	dsb	sy
 800468c:	61bb      	str	r3, [r7, #24]
    }
 800468e:	bf00      	nop
 8004690:	e7fe      	b.n	8004690 <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8004692:	f001 fdb1 	bl	80061f8 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004696:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004698:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800469a:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800469c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d01f      	beq.n	80046e2 <xQueueReceive+0xde>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 80046a2:	68b9      	ldr	r1, [r7, #8]
 80046a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80046a6:	f000 f8f7 	bl	8004898 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80046aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046ac:	1e5a      	subs	r2, r3, #1
 80046ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046b0:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80046b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046b4:	691b      	ldr	r3, [r3, #16]
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d00f      	beq.n	80046da <xQueueReceive+0xd6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80046ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046bc:	3310      	adds	r3, #16
 80046be:	4618      	mov	r0, r3
 80046c0:	f000 fe9e 	bl	8005400 <xTaskRemoveFromEventList>
 80046c4:	4603      	mov	r3, r0
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d007      	beq.n	80046da <xQueueReceive+0xd6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80046ca:	4b3d      	ldr	r3, [pc, #244]	; (80047c0 <xQueueReceive+0x1bc>)
 80046cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80046d0:	601a      	str	r2, [r3, #0]
 80046d2:	f3bf 8f4f 	dsb	sy
 80046d6:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 80046da:	f001 fdbd 	bl	8006258 <vPortExitCritical>
                return pdPASS;
 80046de:	2301      	movs	r3, #1
 80046e0:	e069      	b.n	80047b6 <xQueueReceive+0x1b2>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d103      	bne.n	80046f0 <xQueueReceive+0xec>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80046e8:	f001 fdb6 	bl	8006258 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 80046ec:	2300      	movs	r3, #0
 80046ee:	e062      	b.n	80047b6 <xQueueReceive+0x1b2>
                }
                else if( xEntryTimeSet == pdFALSE )
 80046f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d106      	bne.n	8004704 <xQueueReceive+0x100>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80046f6:	f107 0310 	add.w	r3, r7, #16
 80046fa:	4618      	mov	r0, r3
 80046fc:	f000 ff56 	bl	80055ac <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8004700:	2301      	movs	r3, #1
 8004702:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8004704:	f001 fda8 	bl	8006258 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8004708:	f000 fb84 	bl	8004e14 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800470c:	f001 fd74 	bl	80061f8 <vPortEnterCritical>
 8004710:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004712:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004716:	b25b      	sxtb	r3, r3
 8004718:	f1b3 3fff 	cmp.w	r3, #4294967295
 800471c:	d103      	bne.n	8004726 <xQueueReceive+0x122>
 800471e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004720:	2200      	movs	r2, #0
 8004722:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004726:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004728:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800472c:	b25b      	sxtb	r3, r3
 800472e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004732:	d103      	bne.n	800473c <xQueueReceive+0x138>
 8004734:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004736:	2200      	movs	r2, #0
 8004738:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800473c:	f001 fd8c 	bl	8006258 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004740:	1d3a      	adds	r2, r7, #4
 8004742:	f107 0310 	add.w	r3, r7, #16
 8004746:	4611      	mov	r1, r2
 8004748:	4618      	mov	r0, r3
 800474a:	f000 ff45 	bl	80055d8 <xTaskCheckForTimeOut>
 800474e:	4603      	mov	r3, r0
 8004750:	2b00      	cmp	r3, #0
 8004752:	d123      	bne.n	800479c <xQueueReceive+0x198>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004754:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004756:	f000 f917 	bl	8004988 <prvIsQueueEmpty>
 800475a:	4603      	mov	r3, r0
 800475c:	2b00      	cmp	r3, #0
 800475e:	d017      	beq.n	8004790 <xQueueReceive+0x18c>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004760:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004762:	3324      	adds	r3, #36	; 0x24
 8004764:	687a      	ldr	r2, [r7, #4]
 8004766:	4611      	mov	r1, r2
 8004768:	4618      	mov	r0, r3
 800476a:	f000 fddf 	bl	800532c <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 800476e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004770:	f000 f8b8 	bl	80048e4 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8004774:	f000 fb5c 	bl	8004e30 <xTaskResumeAll>
 8004778:	4603      	mov	r3, r0
 800477a:	2b00      	cmp	r3, #0
 800477c:	d189      	bne.n	8004692 <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 800477e:	4b10      	ldr	r3, [pc, #64]	; (80047c0 <xQueueReceive+0x1bc>)
 8004780:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004784:	601a      	str	r2, [r3, #0]
 8004786:	f3bf 8f4f 	dsb	sy
 800478a:	f3bf 8f6f 	isb	sy
 800478e:	e780      	b.n	8004692 <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8004790:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004792:	f000 f8a7 	bl	80048e4 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8004796:	f000 fb4b 	bl	8004e30 <xTaskResumeAll>
 800479a:	e77a      	b.n	8004692 <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 800479c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800479e:	f000 f8a1 	bl	80048e4 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80047a2:	f000 fb45 	bl	8004e30 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80047a6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80047a8:	f000 f8ee 	bl	8004988 <prvIsQueueEmpty>
 80047ac:	4603      	mov	r3, r0
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	f43f af6f 	beq.w	8004692 <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 80047b4:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 80047b6:	4618      	mov	r0, r3
 80047b8:	3730      	adds	r7, #48	; 0x30
 80047ba:	46bd      	mov	sp, r7
 80047bc:	bd80      	pop	{r7, pc}
 80047be:	bf00      	nop
 80047c0:	e000ed04 	.word	0xe000ed04

080047c4 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 80047c4:	b580      	push	{r7, lr}
 80047c6:	b086      	sub	sp, #24
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	60f8      	str	r0, [r7, #12]
 80047cc:	60b9      	str	r1, [r7, #8]
 80047ce:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 80047d0:	2300      	movs	r3, #0
 80047d2:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047d8:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d10d      	bne.n	80047fe <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
        {
            if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d14d      	bne.n	8004886 <prvCopyDataToQueue+0xc2>
            {
                /* The mutex is no longer being held. */
                xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	689b      	ldr	r3, [r3, #8]
 80047ee:	4618      	mov	r0, r3
 80047f0:	f001 f834 	bl	800585c <xTaskPriorityDisinherit>
 80047f4:	6178      	str	r0, [r7, #20]
                pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	2200      	movs	r2, #0
 80047fa:	609a      	str	r2, [r3, #8]
 80047fc:	e043      	b.n	8004886 <prvCopyDataToQueue+0xc2>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	2b00      	cmp	r3, #0
 8004802:	d119      	bne.n	8004838 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	6858      	ldr	r0, [r3, #4]
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800480c:	461a      	mov	r2, r3
 800480e:	68b9      	ldr	r1, [r7, #8]
 8004810:	f001 ffea 	bl	80067e8 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	685a      	ldr	r2, [r3, #4]
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800481c:	441a      	add	r2, r3
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	685a      	ldr	r2, [r3, #4]
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	689b      	ldr	r3, [r3, #8]
 800482a:	429a      	cmp	r2, r3
 800482c:	d32b      	bcc.n	8004886 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	681a      	ldr	r2, [r3, #0]
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	605a      	str	r2, [r3, #4]
 8004836:	e026      	b.n	8004886 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	68d8      	ldr	r0, [r3, #12]
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004840:	461a      	mov	r2, r3
 8004842:	68b9      	ldr	r1, [r7, #8]
 8004844:	f001 ffd0 	bl	80067e8 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	68da      	ldr	r2, [r3, #12]
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004850:	425b      	negs	r3, r3
 8004852:	441a      	add	r2, r3
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	68da      	ldr	r2, [r3, #12]
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	429a      	cmp	r2, r3
 8004862:	d207      	bcs.n	8004874 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	689a      	ldr	r2, [r3, #8]
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800486c:	425b      	negs	r3, r3
 800486e:	441a      	add	r2, r3
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2b02      	cmp	r3, #2
 8004878:	d105      	bne.n	8004886 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800487a:	693b      	ldr	r3, [r7, #16]
 800487c:	2b00      	cmp	r3, #0
 800487e:	d002      	beq.n	8004886 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8004880:	693b      	ldr	r3, [r7, #16]
 8004882:	3b01      	subs	r3, #1
 8004884:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004886:	693b      	ldr	r3, [r7, #16]
 8004888:	1c5a      	adds	r2, r3, #1
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 800488e:	697b      	ldr	r3, [r7, #20]
}
 8004890:	4618      	mov	r0, r3
 8004892:	3718      	adds	r7, #24
 8004894:	46bd      	mov	sp, r7
 8004896:	bd80      	pop	{r7, pc}

08004898 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8004898:	b580      	push	{r7, lr}
 800489a:	b082      	sub	sp, #8
 800489c:	af00      	add	r7, sp, #0
 800489e:	6078      	str	r0, [r7, #4]
 80048a0:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d018      	beq.n	80048dc <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	68da      	ldr	r2, [r3, #12]
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048b2:	441a      	add	r2, r3
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	68da      	ldr	r2, [r3, #12]
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	689b      	ldr	r3, [r3, #8]
 80048c0:	429a      	cmp	r2, r3
 80048c2:	d303      	bcc.n	80048cc <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681a      	ldr	r2, [r3, #0]
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	68d9      	ldr	r1, [r3, #12]
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048d4:	461a      	mov	r2, r3
 80048d6:	6838      	ldr	r0, [r7, #0]
 80048d8:	f001 ff86 	bl	80067e8 <memcpy>
    }
}
 80048dc:	bf00      	nop
 80048de:	3708      	adds	r7, #8
 80048e0:	46bd      	mov	sp, r7
 80048e2:	bd80      	pop	{r7, pc}

080048e4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80048e4:	b580      	push	{r7, lr}
 80048e6:	b084      	sub	sp, #16
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 80048ec:	f001 fc84 	bl	80061f8 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80048f6:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80048f8:	e011      	b.n	800491e <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d012      	beq.n	8004928 <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	3324      	adds	r3, #36	; 0x24
 8004906:	4618      	mov	r0, r3
 8004908:	f000 fd7a 	bl	8005400 <xTaskRemoveFromEventList>
 800490c:	4603      	mov	r3, r0
 800490e:	2b00      	cmp	r3, #0
 8004910:	d001      	beq.n	8004916 <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 8004912:	f000 fec7 	bl	80056a4 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8004916:	7bfb      	ldrb	r3, [r7, #15]
 8004918:	3b01      	subs	r3, #1
 800491a:	b2db      	uxtb	r3, r3
 800491c:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800491e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004922:	2b00      	cmp	r3, #0
 8004924:	dce9      	bgt.n	80048fa <prvUnlockQueue+0x16>
 8004926:	e000      	b.n	800492a <prvUnlockQueue+0x46>
                    break;
 8004928:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	22ff      	movs	r2, #255	; 0xff
 800492e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8004932:	f001 fc91 	bl	8006258 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8004936:	f001 fc5f 	bl	80061f8 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004940:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8004942:	e011      	b.n	8004968 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	691b      	ldr	r3, [r3, #16]
 8004948:	2b00      	cmp	r3, #0
 800494a:	d012      	beq.n	8004972 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	3310      	adds	r3, #16
 8004950:	4618      	mov	r0, r3
 8004952:	f000 fd55 	bl	8005400 <xTaskRemoveFromEventList>
 8004956:	4603      	mov	r3, r0
 8004958:	2b00      	cmp	r3, #0
 800495a:	d001      	beq.n	8004960 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 800495c:	f000 fea2 	bl	80056a4 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8004960:	7bbb      	ldrb	r3, [r7, #14]
 8004962:	3b01      	subs	r3, #1
 8004964:	b2db      	uxtb	r3, r3
 8004966:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8004968:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800496c:	2b00      	cmp	r3, #0
 800496e:	dce9      	bgt.n	8004944 <prvUnlockQueue+0x60>
 8004970:	e000      	b.n	8004974 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8004972:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	22ff      	movs	r2, #255	; 0xff
 8004978:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 800497c:	f001 fc6c 	bl	8006258 <vPortExitCritical>
}
 8004980:	bf00      	nop
 8004982:	3710      	adds	r7, #16
 8004984:	46bd      	mov	sp, r7
 8004986:	bd80      	pop	{r7, pc}

08004988 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8004988:	b580      	push	{r7, lr}
 800498a:	b084      	sub	sp, #16
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8004990:	f001 fc32 	bl	80061f8 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004998:	2b00      	cmp	r3, #0
 800499a:	d102      	bne.n	80049a2 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 800499c:	2301      	movs	r3, #1
 800499e:	60fb      	str	r3, [r7, #12]
 80049a0:	e001      	b.n	80049a6 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 80049a2:	2300      	movs	r3, #0
 80049a4:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80049a6:	f001 fc57 	bl	8006258 <vPortExitCritical>

    return xReturn;
 80049aa:	68fb      	ldr	r3, [r7, #12]
}
 80049ac:	4618      	mov	r0, r3
 80049ae:	3710      	adds	r7, #16
 80049b0:	46bd      	mov	sp, r7
 80049b2:	bd80      	pop	{r7, pc}

080049b4 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 80049b4:	b580      	push	{r7, lr}
 80049b6:	b084      	sub	sp, #16
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80049bc:	f001 fc1c 	bl	80061f8 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049c8:	429a      	cmp	r2, r3
 80049ca:	d102      	bne.n	80049d2 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 80049cc:	2301      	movs	r3, #1
 80049ce:	60fb      	str	r3, [r7, #12]
 80049d0:	e001      	b.n	80049d6 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 80049d2:	2300      	movs	r3, #0
 80049d4:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80049d6:	f001 fc3f 	bl	8006258 <vPortExitCritical>

    return xReturn;
 80049da:	68fb      	ldr	r3, [r7, #12]
}
 80049dc:	4618      	mov	r0, r3
 80049de:	3710      	adds	r7, #16
 80049e0:	46bd      	mov	sp, r7
 80049e2:	bd80      	pop	{r7, pc}

080049e4 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 80049e4:	b580      	push	{r7, lr}
 80049e6:	b086      	sub	sp, #24
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	60f8      	str	r0, [r7, #12]
 80049ec:	60b9      	str	r1, [r7, #8]
 80049ee:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 80049f4:	f001 fc00 	bl	80061f8 <vPortEnterCritical>
 80049f8:	697b      	ldr	r3, [r7, #20]
 80049fa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80049fe:	b25b      	sxtb	r3, r3
 8004a00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a04:	d103      	bne.n	8004a0e <vQueueWaitForMessageRestricted+0x2a>
 8004a06:	697b      	ldr	r3, [r7, #20]
 8004a08:	2200      	movs	r2, #0
 8004a0a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004a0e:	697b      	ldr	r3, [r7, #20]
 8004a10:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004a14:	b25b      	sxtb	r3, r3
 8004a16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a1a:	d103      	bne.n	8004a24 <vQueueWaitForMessageRestricted+0x40>
 8004a1c:	697b      	ldr	r3, [r7, #20]
 8004a1e:	2200      	movs	r2, #0
 8004a20:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004a24:	f001 fc18 	bl	8006258 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004a28:	697b      	ldr	r3, [r7, #20]
 8004a2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d106      	bne.n	8004a3e <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004a30:	697b      	ldr	r3, [r7, #20]
 8004a32:	3324      	adds	r3, #36	; 0x24
 8004a34:	687a      	ldr	r2, [r7, #4]
 8004a36:	68b9      	ldr	r1, [r7, #8]
 8004a38:	4618      	mov	r0, r3
 8004a3a:	f000 fc9b 	bl	8005374 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8004a3e:	6978      	ldr	r0, [r7, #20]
 8004a40:	f7ff ff50 	bl	80048e4 <prvUnlockQueue>
    }
 8004a44:	bf00      	nop
 8004a46:	3718      	adds	r7, #24
 8004a48:	46bd      	mov	sp, r7
 8004a4a:	bd80      	pop	{r7, pc}

08004a4c <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8004a4c:	b580      	push	{r7, lr}
 8004a4e:	b08c      	sub	sp, #48	; 0x30
 8004a50:	af04      	add	r7, sp, #16
 8004a52:	60f8      	str	r0, [r7, #12]
 8004a54:	60b9      	str	r1, [r7, #8]
 8004a56:	603b      	str	r3, [r7, #0]
 8004a58:	4613      	mov	r3, r2
 8004a5a:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004a5c:	88fb      	ldrh	r3, [r7, #6]
 8004a5e:	009b      	lsls	r3, r3, #2
 8004a60:	4618      	mov	r0, r3
 8004a62:	f001 fca1 	bl	80063a8 <pvPortMalloc>
 8004a66:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 8004a68:	697b      	ldr	r3, [r7, #20]
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d013      	beq.n	8004a96 <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004a6e:	2050      	movs	r0, #80	; 0x50
 8004a70:	f001 fc9a 	bl	80063a8 <pvPortMalloc>
 8004a74:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 8004a76:	69fb      	ldr	r3, [r7, #28]
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d008      	beq.n	8004a8e <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8004a7c:	2250      	movs	r2, #80	; 0x50
 8004a7e:	2100      	movs	r1, #0
 8004a80:	69f8      	ldr	r0, [r7, #28]
 8004a82:	f001 fe7d 	bl	8006780 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 8004a86:	69fb      	ldr	r3, [r7, #28]
 8004a88:	697a      	ldr	r2, [r7, #20]
 8004a8a:	631a      	str	r2, [r3, #48]	; 0x30
 8004a8c:	e005      	b.n	8004a9a <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 8004a8e:	6978      	ldr	r0, [r7, #20]
 8004a90:	f001 fd44 	bl	800651c <vPortFree>
 8004a94:	e001      	b.n	8004a9a <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 8004a96:	2300      	movs	r3, #0
 8004a98:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8004a9a:	69fb      	ldr	r3, [r7, #28]
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d013      	beq.n	8004ac8 <xTaskCreate+0x7c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004aa0:	88fa      	ldrh	r2, [r7, #6]
 8004aa2:	2300      	movs	r3, #0
 8004aa4:	9303      	str	r3, [sp, #12]
 8004aa6:	69fb      	ldr	r3, [r7, #28]
 8004aa8:	9302      	str	r3, [sp, #8]
 8004aaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004aac:	9301      	str	r3, [sp, #4]
 8004aae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ab0:	9300      	str	r3, [sp, #0]
 8004ab2:	683b      	ldr	r3, [r7, #0]
 8004ab4:	68b9      	ldr	r1, [r7, #8]
 8004ab6:	68f8      	ldr	r0, [r7, #12]
 8004ab8:	f000 f80e 	bl	8004ad8 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8004abc:	69f8      	ldr	r0, [r7, #28]
 8004abe:	f000 f891 	bl	8004be4 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8004ac2:	2301      	movs	r3, #1
 8004ac4:	61bb      	str	r3, [r7, #24]
 8004ac6:	e002      	b.n	8004ace <xTaskCreate+0x82>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004ac8:	f04f 33ff 	mov.w	r3, #4294967295
 8004acc:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8004ace:	69bb      	ldr	r3, [r7, #24]
    }
 8004ad0:	4618      	mov	r0, r3
 8004ad2:	3720      	adds	r7, #32
 8004ad4:	46bd      	mov	sp, r7
 8004ad6:	bd80      	pop	{r7, pc}

08004ad8 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8004ad8:	b580      	push	{r7, lr}
 8004ada:	b088      	sub	sp, #32
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	60f8      	str	r0, [r7, #12]
 8004ae0:	60b9      	str	r1, [r7, #8]
 8004ae2:	607a      	str	r2, [r7, #4]
 8004ae4:	603b      	str	r3, [r7, #0]
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004ae6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ae8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004af0:	3b01      	subs	r3, #1
 8004af2:	009b      	lsls	r3, r3, #2
 8004af4:	4413      	add	r3, r2
 8004af6:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004af8:	69bb      	ldr	r3, [r7, #24]
 8004afa:	f023 0307 	bic.w	r3, r3, #7
 8004afe:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004b00:	69bb      	ldr	r3, [r7, #24]
 8004b02:	f003 0307 	and.w	r3, r3, #7
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d00a      	beq.n	8004b20 <prvInitialiseNewTask+0x48>
        __asm volatile
 8004b0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b0e:	f383 8811 	msr	BASEPRI, r3
 8004b12:	f3bf 8f6f 	isb	sy
 8004b16:	f3bf 8f4f 	dsb	sy
 8004b1a:	617b      	str	r3, [r7, #20]
    }
 8004b1c:	bf00      	nop
 8004b1e:	e7fe      	b.n	8004b1e <prvInitialiseNewTask+0x46>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8004b20:	68bb      	ldr	r3, [r7, #8]
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d01e      	beq.n	8004b64 <prvInitialiseNewTask+0x8c>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004b26:	2300      	movs	r3, #0
 8004b28:	61fb      	str	r3, [r7, #28]
 8004b2a:	e012      	b.n	8004b52 <prvInitialiseNewTask+0x7a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004b2c:	68ba      	ldr	r2, [r7, #8]
 8004b2e:	69fb      	ldr	r3, [r7, #28]
 8004b30:	4413      	add	r3, r2
 8004b32:	7819      	ldrb	r1, [r3, #0]
 8004b34:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004b36:	69fb      	ldr	r3, [r7, #28]
 8004b38:	4413      	add	r3, r2
 8004b3a:	3334      	adds	r3, #52	; 0x34
 8004b3c:	460a      	mov	r2, r1
 8004b3e:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8004b40:	68ba      	ldr	r2, [r7, #8]
 8004b42:	69fb      	ldr	r3, [r7, #28]
 8004b44:	4413      	add	r3, r2
 8004b46:	781b      	ldrb	r3, [r3, #0]
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d006      	beq.n	8004b5a <prvInitialiseNewTask+0x82>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004b4c:	69fb      	ldr	r3, [r7, #28]
 8004b4e:	3301      	adds	r3, #1
 8004b50:	61fb      	str	r3, [r7, #28]
 8004b52:	69fb      	ldr	r3, [r7, #28]
 8004b54:	2b09      	cmp	r3, #9
 8004b56:	d9e9      	bls.n	8004b2c <prvInitialiseNewTask+0x54>
 8004b58:	e000      	b.n	8004b5c <prvInitialiseNewTask+0x84>
            {
                break;
 8004b5a:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004b5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b5e:	2200      	movs	r2, #0
 8004b60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8004b64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b66:	2b04      	cmp	r3, #4
 8004b68:	d90a      	bls.n	8004b80 <prvInitialiseNewTask+0xa8>
        __asm volatile
 8004b6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b6e:	f383 8811 	msr	BASEPRI, r3
 8004b72:	f3bf 8f6f 	isb	sy
 8004b76:	f3bf 8f4f 	dsb	sy
 8004b7a:	613b      	str	r3, [r7, #16]
    }
 8004b7c:	bf00      	nop
 8004b7e:	e7fe      	b.n	8004b7e <prvInitialiseNewTask+0xa6>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004b80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b82:	2b04      	cmp	r3, #4
 8004b84:	d901      	bls.n	8004b8a <prvInitialiseNewTask+0xb2>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004b86:	2304      	movs	r3, #4
 8004b88:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8004b8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b8c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004b8e:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8004b90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b92:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004b94:	641a      	str	r2, [r3, #64]	; 0x40
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004b96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b98:	3304      	adds	r3, #4
 8004b9a:	4618      	mov	r0, r3
 8004b9c:	f7ff fac6 	bl	800412c <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004ba0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ba2:	3318      	adds	r3, #24
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	f7ff fac1 	bl	800412c <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004baa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004bae:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004bb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bb2:	f1c3 0205 	rsb	r2, r3, #5
 8004bb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bb8:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004bba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bbc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004bbe:	625a      	str	r2, [r3, #36]	; 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004bc0:	683a      	ldr	r2, [r7, #0]
 8004bc2:	68f9      	ldr	r1, [r7, #12]
 8004bc4:	69b8      	ldr	r0, [r7, #24]
 8004bc6:	f001 f9e5 	bl	8005f94 <pxPortInitialiseStack>
 8004bca:	4602      	mov	r2, r0
 8004bcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bce:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8004bd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d002      	beq.n	8004bdc <prvInitialiseNewTask+0x104>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004bd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bd8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004bda:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8004bdc:	bf00      	nop
 8004bde:	3720      	adds	r7, #32
 8004be0:	46bd      	mov	sp, r7
 8004be2:	bd80      	pop	{r7, pc}

08004be4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8004be4:	b580      	push	{r7, lr}
 8004be6:	b084      	sub	sp, #16
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8004bec:	f001 fb04 	bl	80061f8 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8004bf0:	4b3e      	ldr	r3, [pc, #248]	; (8004cec <prvAddNewTaskToReadyList+0x108>)
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	3301      	adds	r3, #1
 8004bf6:	4a3d      	ldr	r2, [pc, #244]	; (8004cec <prvAddNewTaskToReadyList+0x108>)
 8004bf8:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8004bfa:	4b3d      	ldr	r3, [pc, #244]	; (8004cf0 <prvAddNewTaskToReadyList+0x10c>)
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d109      	bne.n	8004c16 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8004c02:	4a3b      	ldr	r2, [pc, #236]	; (8004cf0 <prvAddNewTaskToReadyList+0x10c>)
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004c08:	4b38      	ldr	r3, [pc, #224]	; (8004cec <prvAddNewTaskToReadyList+0x108>)
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	2b01      	cmp	r3, #1
 8004c0e:	d110      	bne.n	8004c32 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8004c10:	f000 fd6c 	bl	80056ec <prvInitialiseTaskLists>
 8004c14:	e00d      	b.n	8004c32 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8004c16:	4b37      	ldr	r3, [pc, #220]	; (8004cf4 <prvAddNewTaskToReadyList+0x110>)
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d109      	bne.n	8004c32 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004c1e:	4b34      	ldr	r3, [pc, #208]	; (8004cf0 <prvAddNewTaskToReadyList+0x10c>)
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c28:	429a      	cmp	r2, r3
 8004c2a:	d802      	bhi.n	8004c32 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8004c2c:	4a30      	ldr	r2, [pc, #192]	; (8004cf0 <prvAddNewTaskToReadyList+0x10c>)
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8004c32:	4b31      	ldr	r3, [pc, #196]	; (8004cf8 <prvAddNewTaskToReadyList+0x114>)
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	3301      	adds	r3, #1
 8004c38:	4a2f      	ldr	r2, [pc, #188]	; (8004cf8 <prvAddNewTaskToReadyList+0x114>)
 8004c3a:	6013      	str	r3, [r2, #0]
            pxNewTCB->uxTCBNumber = uxTaskNumber;
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c40:	2201      	movs	r2, #1
 8004c42:	409a      	lsls	r2, r3
 8004c44:	4b2d      	ldr	r3, [pc, #180]	; (8004cfc <prvAddNewTaskToReadyList+0x118>)
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	4313      	orrs	r3, r2
 8004c4a:	4a2c      	ldr	r2, [pc, #176]	; (8004cfc <prvAddNewTaskToReadyList+0x118>)
 8004c4c:	6013      	str	r3, [r2, #0]
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c52:	492b      	ldr	r1, [pc, #172]	; (8004d00 <prvAddNewTaskToReadyList+0x11c>)
 8004c54:	4613      	mov	r3, r2
 8004c56:	009b      	lsls	r3, r3, #2
 8004c58:	4413      	add	r3, r2
 8004c5a:	009b      	lsls	r3, r3, #2
 8004c5c:	440b      	add	r3, r1
 8004c5e:	3304      	adds	r3, #4
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	60fb      	str	r3, [r7, #12]
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	68fa      	ldr	r2, [r7, #12]
 8004c68:	609a      	str	r2, [r3, #8]
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	689a      	ldr	r2, [r3, #8]
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	60da      	str	r2, [r3, #12]
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	689b      	ldr	r3, [r3, #8]
 8004c76:	687a      	ldr	r2, [r7, #4]
 8004c78:	3204      	adds	r2, #4
 8004c7a:	605a      	str	r2, [r3, #4]
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	1d1a      	adds	r2, r3, #4
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	609a      	str	r2, [r3, #8]
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c88:	4613      	mov	r3, r2
 8004c8a:	009b      	lsls	r3, r3, #2
 8004c8c:	4413      	add	r3, r2
 8004c8e:	009b      	lsls	r3, r3, #2
 8004c90:	4a1b      	ldr	r2, [pc, #108]	; (8004d00 <prvAddNewTaskToReadyList+0x11c>)
 8004c92:	441a      	add	r2, r3
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	615a      	str	r2, [r3, #20]
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c9c:	4918      	ldr	r1, [pc, #96]	; (8004d00 <prvAddNewTaskToReadyList+0x11c>)
 8004c9e:	4613      	mov	r3, r2
 8004ca0:	009b      	lsls	r3, r3, #2
 8004ca2:	4413      	add	r3, r2
 8004ca4:	009b      	lsls	r3, r3, #2
 8004ca6:	440b      	add	r3, r1
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	1c59      	adds	r1, r3, #1
 8004cac:	4814      	ldr	r0, [pc, #80]	; (8004d00 <prvAddNewTaskToReadyList+0x11c>)
 8004cae:	4613      	mov	r3, r2
 8004cb0:	009b      	lsls	r3, r3, #2
 8004cb2:	4413      	add	r3, r2
 8004cb4:	009b      	lsls	r3, r3, #2
 8004cb6:	4403      	add	r3, r0
 8004cb8:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8004cba:	f001 facd 	bl	8006258 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8004cbe:	4b0d      	ldr	r3, [pc, #52]	; (8004cf4 <prvAddNewTaskToReadyList+0x110>)
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d00e      	beq.n	8004ce4 <prvAddNewTaskToReadyList+0x100>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004cc6:	4b0a      	ldr	r3, [pc, #40]	; (8004cf0 <prvAddNewTaskToReadyList+0x10c>)
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cd0:	429a      	cmp	r2, r3
 8004cd2:	d207      	bcs.n	8004ce4 <prvAddNewTaskToReadyList+0x100>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8004cd4:	4b0b      	ldr	r3, [pc, #44]	; (8004d04 <prvAddNewTaskToReadyList+0x120>)
 8004cd6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004cda:	601a      	str	r2, [r3, #0]
 8004cdc:	f3bf 8f4f 	dsb	sy
 8004ce0:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8004ce4:	bf00      	nop
 8004ce6:	3710      	adds	r7, #16
 8004ce8:	46bd      	mov	sp, r7
 8004cea:	bd80      	pop	{r7, pc}
 8004cec:	20000258 	.word	0x20000258
 8004cf0:	20000180 	.word	0x20000180
 8004cf4:	20000264 	.word	0x20000264
 8004cf8:	20000274 	.word	0x20000274
 8004cfc:	20000260 	.word	0x20000260
 8004d00:	20000184 	.word	0x20000184
 8004d04:	e000ed04 	.word	0xe000ed04

08004d08 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8004d08:	b580      	push	{r7, lr}
 8004d0a:	b084      	sub	sp, #16
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8004d10:	2300      	movs	r3, #0
 8004d12:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d017      	beq.n	8004d4a <vTaskDelay+0x42>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 8004d1a:	4b13      	ldr	r3, [pc, #76]	; (8004d68 <vTaskDelay+0x60>)
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d00a      	beq.n	8004d38 <vTaskDelay+0x30>
        __asm volatile
 8004d22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d26:	f383 8811 	msr	BASEPRI, r3
 8004d2a:	f3bf 8f6f 	isb	sy
 8004d2e:	f3bf 8f4f 	dsb	sy
 8004d32:	60bb      	str	r3, [r7, #8]
    }
 8004d34:	bf00      	nop
 8004d36:	e7fe      	b.n	8004d36 <vTaskDelay+0x2e>
            vTaskSuspendAll();
 8004d38:	f000 f86c 	bl	8004e14 <vTaskSuspendAll>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004d3c:	2100      	movs	r1, #0
 8004d3e:	6878      	ldr	r0, [r7, #4]
 8004d40:	f000 fe30 	bl	80059a4 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8004d44:	f000 f874 	bl	8004e30 <xTaskResumeAll>
 8004d48:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d107      	bne.n	8004d60 <vTaskDelay+0x58>
        {
            portYIELD_WITHIN_API();
 8004d50:	4b06      	ldr	r3, [pc, #24]	; (8004d6c <vTaskDelay+0x64>)
 8004d52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d56:	601a      	str	r2, [r3, #0]
 8004d58:	f3bf 8f4f 	dsb	sy
 8004d5c:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8004d60:	bf00      	nop
 8004d62:	3710      	adds	r7, #16
 8004d64:	46bd      	mov	sp, r7
 8004d66:	bd80      	pop	{r7, pc}
 8004d68:	20000280 	.word	0x20000280
 8004d6c:	e000ed04 	.word	0xe000ed04

08004d70 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004d70:	b580      	push	{r7, lr}
 8004d72:	b086      	sub	sp, #24
 8004d74:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 8004d76:	4b20      	ldr	r3, [pc, #128]	; (8004df8 <vTaskStartScheduler+0x88>)
 8004d78:	9301      	str	r3, [sp, #4]
 8004d7a:	2300      	movs	r3, #0
 8004d7c:	9300      	str	r3, [sp, #0]
 8004d7e:	2300      	movs	r3, #0
 8004d80:	2264      	movs	r2, #100	; 0x64
 8004d82:	491e      	ldr	r1, [pc, #120]	; (8004dfc <vTaskStartScheduler+0x8c>)
 8004d84:	481e      	ldr	r0, [pc, #120]	; (8004e00 <vTaskStartScheduler+0x90>)
 8004d86:	f7ff fe61 	bl	8004a4c <xTaskCreate>
 8004d8a:	60f8      	str	r0, [r7, #12]
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	2b01      	cmp	r3, #1
 8004d90:	d102      	bne.n	8004d98 <vTaskStartScheduler+0x28>
        {
            xReturn = xTimerCreateTimerTask();
 8004d92:	f000 fe87 	bl	8005aa4 <xTimerCreateTimerTask>
 8004d96:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	2b01      	cmp	r3, #1
 8004d9c:	d116      	bne.n	8004dcc <vTaskStartScheduler+0x5c>
        __asm volatile
 8004d9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004da2:	f383 8811 	msr	BASEPRI, r3
 8004da6:	f3bf 8f6f 	isb	sy
 8004daa:	f3bf 8f4f 	dsb	sy
 8004dae:	60bb      	str	r3, [r7, #8]
    }
 8004db0:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 8004db2:	4b14      	ldr	r3, [pc, #80]	; (8004e04 <vTaskStartScheduler+0x94>)
 8004db4:	f04f 32ff 	mov.w	r2, #4294967295
 8004db8:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8004dba:	4b13      	ldr	r3, [pc, #76]	; (8004e08 <vTaskStartScheduler+0x98>)
 8004dbc:	2201      	movs	r2, #1
 8004dbe:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004dc0:	4b12      	ldr	r3, [pc, #72]	; (8004e0c <vTaskStartScheduler+0x9c>)
 8004dc2:	2200      	movs	r2, #0
 8004dc4:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 8004dc6:	f001 f975 	bl	80060b4 <xPortStartScheduler>
 8004dca:	e00e      	b.n	8004dea <vTaskStartScheduler+0x7a>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dd2:	d10a      	bne.n	8004dea <vTaskStartScheduler+0x7a>
        __asm volatile
 8004dd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dd8:	f383 8811 	msr	BASEPRI, r3
 8004ddc:	f3bf 8f6f 	isb	sy
 8004de0:	f3bf 8f4f 	dsb	sy
 8004de4:	607b      	str	r3, [r7, #4]
    }
 8004de6:	bf00      	nop
 8004de8:	e7fe      	b.n	8004de8 <vTaskStartScheduler+0x78>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8004dea:	4b09      	ldr	r3, [pc, #36]	; (8004e10 <vTaskStartScheduler+0xa0>)
 8004dec:	681b      	ldr	r3, [r3, #0]
}
 8004dee:	bf00      	nop
 8004df0:	3710      	adds	r7, #16
 8004df2:	46bd      	mov	sp, r7
 8004df4:	bd80      	pop	{r7, pc}
 8004df6:	bf00      	nop
 8004df8:	2000027c 	.word	0x2000027c
 8004dfc:	08007134 	.word	0x08007134
 8004e00:	080056bd 	.word	0x080056bd
 8004e04:	20000278 	.word	0x20000278
 8004e08:	20000264 	.word	0x20000264
 8004e0c:	2000025c 	.word	0x2000025c
 8004e10:	2000000c 	.word	0x2000000c

08004e14 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004e14:	b480      	push	{r7}
 8004e16:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8004e18:	4b04      	ldr	r3, [pc, #16]	; (8004e2c <vTaskSuspendAll+0x18>)
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	3301      	adds	r3, #1
 8004e1e:	4a03      	ldr	r2, [pc, #12]	; (8004e2c <vTaskSuspendAll+0x18>)
 8004e20:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8004e22:	bf00      	nop
 8004e24:	46bd      	mov	sp, r7
 8004e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2a:	4770      	bx	lr
 8004e2c:	20000280 	.word	0x20000280

08004e30 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004e30:	b580      	push	{r7, lr}
 8004e32:	b088      	sub	sp, #32
 8004e34:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8004e36:	2300      	movs	r3, #0
 8004e38:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 8004e3a:	2300      	movs	r3, #0
 8004e3c:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8004e3e:	4b71      	ldr	r3, [pc, #452]	; (8005004 <xTaskResumeAll+0x1d4>)
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d10a      	bne.n	8004e5c <xTaskResumeAll+0x2c>
        __asm volatile
 8004e46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e4a:	f383 8811 	msr	BASEPRI, r3
 8004e4e:	f3bf 8f6f 	isb	sy
 8004e52:	f3bf 8f4f 	dsb	sy
 8004e56:	607b      	str	r3, [r7, #4]
    }
 8004e58:	bf00      	nop
 8004e5a:	e7fe      	b.n	8004e5a <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8004e5c:	f001 f9cc 	bl	80061f8 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8004e60:	4b68      	ldr	r3, [pc, #416]	; (8005004 <xTaskResumeAll+0x1d4>)
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	3b01      	subs	r3, #1
 8004e66:	4a67      	ldr	r2, [pc, #412]	; (8005004 <xTaskResumeAll+0x1d4>)
 8004e68:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004e6a:	4b66      	ldr	r3, [pc, #408]	; (8005004 <xTaskResumeAll+0x1d4>)
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	f040 80c0 	bne.w	8004ff4 <xTaskResumeAll+0x1c4>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004e74:	4b64      	ldr	r3, [pc, #400]	; (8005008 <xTaskResumeAll+0x1d8>)
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	f000 80bb 	beq.w	8004ff4 <xTaskResumeAll+0x1c4>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004e7e:	e08a      	b.n	8004f96 <xTaskResumeAll+0x166>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004e80:	4b62      	ldr	r3, [pc, #392]	; (800500c <xTaskResumeAll+0x1dc>)
 8004e82:	68db      	ldr	r3, [r3, #12]
 8004e84:	68db      	ldr	r3, [r3, #12]
 8004e86:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8004e88:	69fb      	ldr	r3, [r7, #28]
 8004e8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e8c:	613b      	str	r3, [r7, #16]
 8004e8e:	69fb      	ldr	r3, [r7, #28]
 8004e90:	69db      	ldr	r3, [r3, #28]
 8004e92:	69fa      	ldr	r2, [r7, #28]
 8004e94:	6a12      	ldr	r2, [r2, #32]
 8004e96:	609a      	str	r2, [r3, #8]
 8004e98:	69fb      	ldr	r3, [r7, #28]
 8004e9a:	6a1b      	ldr	r3, [r3, #32]
 8004e9c:	69fa      	ldr	r2, [r7, #28]
 8004e9e:	69d2      	ldr	r2, [r2, #28]
 8004ea0:	605a      	str	r2, [r3, #4]
 8004ea2:	693b      	ldr	r3, [r7, #16]
 8004ea4:	685a      	ldr	r2, [r3, #4]
 8004ea6:	69fb      	ldr	r3, [r7, #28]
 8004ea8:	3318      	adds	r3, #24
 8004eaa:	429a      	cmp	r2, r3
 8004eac:	d103      	bne.n	8004eb6 <xTaskResumeAll+0x86>
 8004eae:	69fb      	ldr	r3, [r7, #28]
 8004eb0:	6a1a      	ldr	r2, [r3, #32]
 8004eb2:	693b      	ldr	r3, [r7, #16]
 8004eb4:	605a      	str	r2, [r3, #4]
 8004eb6:	69fb      	ldr	r3, [r7, #28]
 8004eb8:	2200      	movs	r2, #0
 8004eba:	629a      	str	r2, [r3, #40]	; 0x28
 8004ebc:	693b      	ldr	r3, [r7, #16]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	1e5a      	subs	r2, r3, #1
 8004ec2:	693b      	ldr	r3, [r7, #16]
 8004ec4:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8004ec6:	69fb      	ldr	r3, [r7, #28]
 8004ec8:	695b      	ldr	r3, [r3, #20]
 8004eca:	60fb      	str	r3, [r7, #12]
 8004ecc:	69fb      	ldr	r3, [r7, #28]
 8004ece:	689b      	ldr	r3, [r3, #8]
 8004ed0:	69fa      	ldr	r2, [r7, #28]
 8004ed2:	68d2      	ldr	r2, [r2, #12]
 8004ed4:	609a      	str	r2, [r3, #8]
 8004ed6:	69fb      	ldr	r3, [r7, #28]
 8004ed8:	68db      	ldr	r3, [r3, #12]
 8004eda:	69fa      	ldr	r2, [r7, #28]
 8004edc:	6892      	ldr	r2, [r2, #8]
 8004ede:	605a      	str	r2, [r3, #4]
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	685a      	ldr	r2, [r3, #4]
 8004ee4:	69fb      	ldr	r3, [r7, #28]
 8004ee6:	3304      	adds	r3, #4
 8004ee8:	429a      	cmp	r2, r3
 8004eea:	d103      	bne.n	8004ef4 <xTaskResumeAll+0xc4>
 8004eec:	69fb      	ldr	r3, [r7, #28]
 8004eee:	68da      	ldr	r2, [r3, #12]
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	605a      	str	r2, [r3, #4]
 8004ef4:	69fb      	ldr	r3, [r7, #28]
 8004ef6:	2200      	movs	r2, #0
 8004ef8:	615a      	str	r2, [r3, #20]
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	1e5a      	subs	r2, r3, #1
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8004f04:	69fb      	ldr	r3, [r7, #28]
 8004f06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f08:	2201      	movs	r2, #1
 8004f0a:	409a      	lsls	r2, r3
 8004f0c:	4b40      	ldr	r3, [pc, #256]	; (8005010 <xTaskResumeAll+0x1e0>)
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	4313      	orrs	r3, r2
 8004f12:	4a3f      	ldr	r2, [pc, #252]	; (8005010 <xTaskResumeAll+0x1e0>)
 8004f14:	6013      	str	r3, [r2, #0]
 8004f16:	69fb      	ldr	r3, [r7, #28]
 8004f18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f1a:	493e      	ldr	r1, [pc, #248]	; (8005014 <xTaskResumeAll+0x1e4>)
 8004f1c:	4613      	mov	r3, r2
 8004f1e:	009b      	lsls	r3, r3, #2
 8004f20:	4413      	add	r3, r2
 8004f22:	009b      	lsls	r3, r3, #2
 8004f24:	440b      	add	r3, r1
 8004f26:	3304      	adds	r3, #4
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	60bb      	str	r3, [r7, #8]
 8004f2c:	69fb      	ldr	r3, [r7, #28]
 8004f2e:	68ba      	ldr	r2, [r7, #8]
 8004f30:	609a      	str	r2, [r3, #8]
 8004f32:	68bb      	ldr	r3, [r7, #8]
 8004f34:	689a      	ldr	r2, [r3, #8]
 8004f36:	69fb      	ldr	r3, [r7, #28]
 8004f38:	60da      	str	r2, [r3, #12]
 8004f3a:	68bb      	ldr	r3, [r7, #8]
 8004f3c:	689b      	ldr	r3, [r3, #8]
 8004f3e:	69fa      	ldr	r2, [r7, #28]
 8004f40:	3204      	adds	r2, #4
 8004f42:	605a      	str	r2, [r3, #4]
 8004f44:	69fb      	ldr	r3, [r7, #28]
 8004f46:	1d1a      	adds	r2, r3, #4
 8004f48:	68bb      	ldr	r3, [r7, #8]
 8004f4a:	609a      	str	r2, [r3, #8]
 8004f4c:	69fb      	ldr	r3, [r7, #28]
 8004f4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f50:	4613      	mov	r3, r2
 8004f52:	009b      	lsls	r3, r3, #2
 8004f54:	4413      	add	r3, r2
 8004f56:	009b      	lsls	r3, r3, #2
 8004f58:	4a2e      	ldr	r2, [pc, #184]	; (8005014 <xTaskResumeAll+0x1e4>)
 8004f5a:	441a      	add	r2, r3
 8004f5c:	69fb      	ldr	r3, [r7, #28]
 8004f5e:	615a      	str	r2, [r3, #20]
 8004f60:	69fb      	ldr	r3, [r7, #28]
 8004f62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f64:	492b      	ldr	r1, [pc, #172]	; (8005014 <xTaskResumeAll+0x1e4>)
 8004f66:	4613      	mov	r3, r2
 8004f68:	009b      	lsls	r3, r3, #2
 8004f6a:	4413      	add	r3, r2
 8004f6c:	009b      	lsls	r3, r3, #2
 8004f6e:	440b      	add	r3, r1
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	1c59      	adds	r1, r3, #1
 8004f74:	4827      	ldr	r0, [pc, #156]	; (8005014 <xTaskResumeAll+0x1e4>)
 8004f76:	4613      	mov	r3, r2
 8004f78:	009b      	lsls	r3, r3, #2
 8004f7a:	4413      	add	r3, r2
 8004f7c:	009b      	lsls	r3, r3, #2
 8004f7e:	4403      	add	r3, r0
 8004f80:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004f82:	69fb      	ldr	r3, [r7, #28]
 8004f84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f86:	4b24      	ldr	r3, [pc, #144]	; (8005018 <xTaskResumeAll+0x1e8>)
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f8c:	429a      	cmp	r2, r3
 8004f8e:	d302      	bcc.n	8004f96 <xTaskResumeAll+0x166>
                    {
                        xYieldPending = pdTRUE;
 8004f90:	4b22      	ldr	r3, [pc, #136]	; (800501c <xTaskResumeAll+0x1ec>)
 8004f92:	2201      	movs	r2, #1
 8004f94:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004f96:	4b1d      	ldr	r3, [pc, #116]	; (800500c <xTaskResumeAll+0x1dc>)
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	f47f af70 	bne.w	8004e80 <xTaskResumeAll+0x50>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8004fa0:	69fb      	ldr	r3, [r7, #28]
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d001      	beq.n	8004faa <xTaskResumeAll+0x17a>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8004fa6:	f000 fc1f 	bl	80057e8 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004faa:	4b1d      	ldr	r3, [pc, #116]	; (8005020 <xTaskResumeAll+0x1f0>)
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8004fb0:	697b      	ldr	r3, [r7, #20]
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d010      	beq.n	8004fd8 <xTaskResumeAll+0x1a8>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8004fb6:	f000 f847 	bl	8005048 <xTaskIncrementTick>
 8004fba:	4603      	mov	r3, r0
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d002      	beq.n	8004fc6 <xTaskResumeAll+0x196>
                            {
                                xYieldPending = pdTRUE;
 8004fc0:	4b16      	ldr	r3, [pc, #88]	; (800501c <xTaskResumeAll+0x1ec>)
 8004fc2:	2201      	movs	r2, #1
 8004fc4:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8004fc6:	697b      	ldr	r3, [r7, #20]
 8004fc8:	3b01      	subs	r3, #1
 8004fca:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8004fcc:	697b      	ldr	r3, [r7, #20]
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d1f1      	bne.n	8004fb6 <xTaskResumeAll+0x186>

                        xPendedTicks = 0;
 8004fd2:	4b13      	ldr	r3, [pc, #76]	; (8005020 <xTaskResumeAll+0x1f0>)
 8004fd4:	2200      	movs	r2, #0
 8004fd6:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8004fd8:	4b10      	ldr	r3, [pc, #64]	; (800501c <xTaskResumeAll+0x1ec>)
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d009      	beq.n	8004ff4 <xTaskResumeAll+0x1c4>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 8004fe0:	2301      	movs	r3, #1
 8004fe2:	61bb      	str	r3, [r7, #24]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8004fe4:	4b0f      	ldr	r3, [pc, #60]	; (8005024 <xTaskResumeAll+0x1f4>)
 8004fe6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004fea:	601a      	str	r2, [r3, #0]
 8004fec:	f3bf 8f4f 	dsb	sy
 8004ff0:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8004ff4:	f001 f930 	bl	8006258 <vPortExitCritical>

    return xAlreadyYielded;
 8004ff8:	69bb      	ldr	r3, [r7, #24]
}
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	3720      	adds	r7, #32
 8004ffe:	46bd      	mov	sp, r7
 8005000:	bd80      	pop	{r7, pc}
 8005002:	bf00      	nop
 8005004:	20000280 	.word	0x20000280
 8005008:	20000258 	.word	0x20000258
 800500c:	20000218 	.word	0x20000218
 8005010:	20000260 	.word	0x20000260
 8005014:	20000184 	.word	0x20000184
 8005018:	20000180 	.word	0x20000180
 800501c:	2000026c 	.word	0x2000026c
 8005020:	20000268 	.word	0x20000268
 8005024:	e000ed04 	.word	0xe000ed04

08005028 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005028:	b480      	push	{r7}
 800502a:	b083      	sub	sp, #12
 800502c:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 800502e:	4b05      	ldr	r3, [pc, #20]	; (8005044 <xTaskGetTickCount+0x1c>)
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8005034:	687b      	ldr	r3, [r7, #4]
}
 8005036:	4618      	mov	r0, r3
 8005038:	370c      	adds	r7, #12
 800503a:	46bd      	mov	sp, r7
 800503c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005040:	4770      	bx	lr
 8005042:	bf00      	nop
 8005044:	2000025c 	.word	0x2000025c

08005048 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005048:	b580      	push	{r7, lr}
 800504a:	b08a      	sub	sp, #40	; 0x28
 800504c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 800504e:	2300      	movs	r3, #0
 8005050:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005052:	4b7d      	ldr	r3, [pc, #500]	; (8005248 <xTaskIncrementTick+0x200>)
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	2b00      	cmp	r3, #0
 8005058:	f040 80ec 	bne.w	8005234 <xTaskIncrementTick+0x1ec>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800505c:	4b7b      	ldr	r3, [pc, #492]	; (800524c <xTaskIncrementTick+0x204>)
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	3301      	adds	r3, #1
 8005062:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8005064:	4a79      	ldr	r2, [pc, #484]	; (800524c <xTaskIncrementTick+0x204>)
 8005066:	6a3b      	ldr	r3, [r7, #32]
 8005068:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800506a:	6a3b      	ldr	r3, [r7, #32]
 800506c:	2b00      	cmp	r3, #0
 800506e:	d120      	bne.n	80050b2 <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8005070:	4b77      	ldr	r3, [pc, #476]	; (8005250 <xTaskIncrementTick+0x208>)
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	2b00      	cmp	r3, #0
 8005078:	d00a      	beq.n	8005090 <xTaskIncrementTick+0x48>
        __asm volatile
 800507a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800507e:	f383 8811 	msr	BASEPRI, r3
 8005082:	f3bf 8f6f 	isb	sy
 8005086:	f3bf 8f4f 	dsb	sy
 800508a:	607b      	str	r3, [r7, #4]
    }
 800508c:	bf00      	nop
 800508e:	e7fe      	b.n	800508e <xTaskIncrementTick+0x46>
 8005090:	4b6f      	ldr	r3, [pc, #444]	; (8005250 <xTaskIncrementTick+0x208>)
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	61fb      	str	r3, [r7, #28]
 8005096:	4b6f      	ldr	r3, [pc, #444]	; (8005254 <xTaskIncrementTick+0x20c>)
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	4a6d      	ldr	r2, [pc, #436]	; (8005250 <xTaskIncrementTick+0x208>)
 800509c:	6013      	str	r3, [r2, #0]
 800509e:	4a6d      	ldr	r2, [pc, #436]	; (8005254 <xTaskIncrementTick+0x20c>)
 80050a0:	69fb      	ldr	r3, [r7, #28]
 80050a2:	6013      	str	r3, [r2, #0]
 80050a4:	4b6c      	ldr	r3, [pc, #432]	; (8005258 <xTaskIncrementTick+0x210>)
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	3301      	adds	r3, #1
 80050aa:	4a6b      	ldr	r2, [pc, #428]	; (8005258 <xTaskIncrementTick+0x210>)
 80050ac:	6013      	str	r3, [r2, #0]
 80050ae:	f000 fb9b 	bl	80057e8 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 80050b2:	4b6a      	ldr	r3, [pc, #424]	; (800525c <xTaskIncrementTick+0x214>)
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	6a3a      	ldr	r2, [r7, #32]
 80050b8:	429a      	cmp	r2, r3
 80050ba:	f0c0 80a6 	bcc.w	800520a <xTaskIncrementTick+0x1c2>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80050be:	4b64      	ldr	r3, [pc, #400]	; (8005250 <xTaskIncrementTick+0x208>)
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d104      	bne.n	80050d2 <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80050c8:	4b64      	ldr	r3, [pc, #400]	; (800525c <xTaskIncrementTick+0x214>)
 80050ca:	f04f 32ff 	mov.w	r2, #4294967295
 80050ce:	601a      	str	r2, [r3, #0]
                    break;
 80050d0:	e09b      	b.n	800520a <xTaskIncrementTick+0x1c2>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80050d2:	4b5f      	ldr	r3, [pc, #380]	; (8005250 <xTaskIncrementTick+0x208>)
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	68db      	ldr	r3, [r3, #12]
 80050d8:	68db      	ldr	r3, [r3, #12]
 80050da:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80050dc:	69bb      	ldr	r3, [r7, #24]
 80050de:	685b      	ldr	r3, [r3, #4]
 80050e0:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 80050e2:	6a3a      	ldr	r2, [r7, #32]
 80050e4:	697b      	ldr	r3, [r7, #20]
 80050e6:	429a      	cmp	r2, r3
 80050e8:	d203      	bcs.n	80050f2 <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 80050ea:	4a5c      	ldr	r2, [pc, #368]	; (800525c <xTaskIncrementTick+0x214>)
 80050ec:	697b      	ldr	r3, [r7, #20]
 80050ee:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 80050f0:	e08b      	b.n	800520a <xTaskIncrementTick+0x1c2>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80050f2:	69bb      	ldr	r3, [r7, #24]
 80050f4:	695b      	ldr	r3, [r3, #20]
 80050f6:	613b      	str	r3, [r7, #16]
 80050f8:	69bb      	ldr	r3, [r7, #24]
 80050fa:	689b      	ldr	r3, [r3, #8]
 80050fc:	69ba      	ldr	r2, [r7, #24]
 80050fe:	68d2      	ldr	r2, [r2, #12]
 8005100:	609a      	str	r2, [r3, #8]
 8005102:	69bb      	ldr	r3, [r7, #24]
 8005104:	68db      	ldr	r3, [r3, #12]
 8005106:	69ba      	ldr	r2, [r7, #24]
 8005108:	6892      	ldr	r2, [r2, #8]
 800510a:	605a      	str	r2, [r3, #4]
 800510c:	693b      	ldr	r3, [r7, #16]
 800510e:	685a      	ldr	r2, [r3, #4]
 8005110:	69bb      	ldr	r3, [r7, #24]
 8005112:	3304      	adds	r3, #4
 8005114:	429a      	cmp	r2, r3
 8005116:	d103      	bne.n	8005120 <xTaskIncrementTick+0xd8>
 8005118:	69bb      	ldr	r3, [r7, #24]
 800511a:	68da      	ldr	r2, [r3, #12]
 800511c:	693b      	ldr	r3, [r7, #16]
 800511e:	605a      	str	r2, [r3, #4]
 8005120:	69bb      	ldr	r3, [r7, #24]
 8005122:	2200      	movs	r2, #0
 8005124:	615a      	str	r2, [r3, #20]
 8005126:	693b      	ldr	r3, [r7, #16]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	1e5a      	subs	r2, r3, #1
 800512c:	693b      	ldr	r3, [r7, #16]
 800512e:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005130:	69bb      	ldr	r3, [r7, #24]
 8005132:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005134:	2b00      	cmp	r3, #0
 8005136:	d01e      	beq.n	8005176 <xTaskIncrementTick+0x12e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8005138:	69bb      	ldr	r3, [r7, #24]
 800513a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800513c:	60fb      	str	r3, [r7, #12]
 800513e:	69bb      	ldr	r3, [r7, #24]
 8005140:	69db      	ldr	r3, [r3, #28]
 8005142:	69ba      	ldr	r2, [r7, #24]
 8005144:	6a12      	ldr	r2, [r2, #32]
 8005146:	609a      	str	r2, [r3, #8]
 8005148:	69bb      	ldr	r3, [r7, #24]
 800514a:	6a1b      	ldr	r3, [r3, #32]
 800514c:	69ba      	ldr	r2, [r7, #24]
 800514e:	69d2      	ldr	r2, [r2, #28]
 8005150:	605a      	str	r2, [r3, #4]
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	685a      	ldr	r2, [r3, #4]
 8005156:	69bb      	ldr	r3, [r7, #24]
 8005158:	3318      	adds	r3, #24
 800515a:	429a      	cmp	r2, r3
 800515c:	d103      	bne.n	8005166 <xTaskIncrementTick+0x11e>
 800515e:	69bb      	ldr	r3, [r7, #24]
 8005160:	6a1a      	ldr	r2, [r3, #32]
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	605a      	str	r2, [r3, #4]
 8005166:	69bb      	ldr	r3, [r7, #24]
 8005168:	2200      	movs	r2, #0
 800516a:	629a      	str	r2, [r3, #40]	; 0x28
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	1e5a      	subs	r2, r3, #1
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8005176:	69bb      	ldr	r3, [r7, #24]
 8005178:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800517a:	2201      	movs	r2, #1
 800517c:	409a      	lsls	r2, r3
 800517e:	4b38      	ldr	r3, [pc, #224]	; (8005260 <xTaskIncrementTick+0x218>)
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	4313      	orrs	r3, r2
 8005184:	4a36      	ldr	r2, [pc, #216]	; (8005260 <xTaskIncrementTick+0x218>)
 8005186:	6013      	str	r3, [r2, #0]
 8005188:	69bb      	ldr	r3, [r7, #24]
 800518a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800518c:	4935      	ldr	r1, [pc, #212]	; (8005264 <xTaskIncrementTick+0x21c>)
 800518e:	4613      	mov	r3, r2
 8005190:	009b      	lsls	r3, r3, #2
 8005192:	4413      	add	r3, r2
 8005194:	009b      	lsls	r3, r3, #2
 8005196:	440b      	add	r3, r1
 8005198:	3304      	adds	r3, #4
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	60bb      	str	r3, [r7, #8]
 800519e:	69bb      	ldr	r3, [r7, #24]
 80051a0:	68ba      	ldr	r2, [r7, #8]
 80051a2:	609a      	str	r2, [r3, #8]
 80051a4:	68bb      	ldr	r3, [r7, #8]
 80051a6:	689a      	ldr	r2, [r3, #8]
 80051a8:	69bb      	ldr	r3, [r7, #24]
 80051aa:	60da      	str	r2, [r3, #12]
 80051ac:	68bb      	ldr	r3, [r7, #8]
 80051ae:	689b      	ldr	r3, [r3, #8]
 80051b0:	69ba      	ldr	r2, [r7, #24]
 80051b2:	3204      	adds	r2, #4
 80051b4:	605a      	str	r2, [r3, #4]
 80051b6:	69bb      	ldr	r3, [r7, #24]
 80051b8:	1d1a      	adds	r2, r3, #4
 80051ba:	68bb      	ldr	r3, [r7, #8]
 80051bc:	609a      	str	r2, [r3, #8]
 80051be:	69bb      	ldr	r3, [r7, #24]
 80051c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051c2:	4613      	mov	r3, r2
 80051c4:	009b      	lsls	r3, r3, #2
 80051c6:	4413      	add	r3, r2
 80051c8:	009b      	lsls	r3, r3, #2
 80051ca:	4a26      	ldr	r2, [pc, #152]	; (8005264 <xTaskIncrementTick+0x21c>)
 80051cc:	441a      	add	r2, r3
 80051ce:	69bb      	ldr	r3, [r7, #24]
 80051d0:	615a      	str	r2, [r3, #20]
 80051d2:	69bb      	ldr	r3, [r7, #24]
 80051d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051d6:	4923      	ldr	r1, [pc, #140]	; (8005264 <xTaskIncrementTick+0x21c>)
 80051d8:	4613      	mov	r3, r2
 80051da:	009b      	lsls	r3, r3, #2
 80051dc:	4413      	add	r3, r2
 80051de:	009b      	lsls	r3, r3, #2
 80051e0:	440b      	add	r3, r1
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	1c59      	adds	r1, r3, #1
 80051e6:	481f      	ldr	r0, [pc, #124]	; (8005264 <xTaskIncrementTick+0x21c>)
 80051e8:	4613      	mov	r3, r2
 80051ea:	009b      	lsls	r3, r3, #2
 80051ec:	4413      	add	r3, r2
 80051ee:	009b      	lsls	r3, r3, #2
 80051f0:	4403      	add	r3, r0
 80051f2:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80051f4:	69bb      	ldr	r3, [r7, #24]
 80051f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051f8:	4b1b      	ldr	r3, [pc, #108]	; (8005268 <xTaskIncrementTick+0x220>)
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051fe:	429a      	cmp	r2, r3
 8005200:	f67f af5d 	bls.w	80050be <xTaskIncrementTick+0x76>
                        {
                            xSwitchRequired = pdTRUE;
 8005204:	2301      	movs	r3, #1
 8005206:	627b      	str	r3, [r7, #36]	; 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005208:	e759      	b.n	80050be <xTaskIncrementTick+0x76>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800520a:	4b17      	ldr	r3, [pc, #92]	; (8005268 <xTaskIncrementTick+0x220>)
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005210:	4914      	ldr	r1, [pc, #80]	; (8005264 <xTaskIncrementTick+0x21c>)
 8005212:	4613      	mov	r3, r2
 8005214:	009b      	lsls	r3, r3, #2
 8005216:	4413      	add	r3, r2
 8005218:	009b      	lsls	r3, r3, #2
 800521a:	440b      	add	r3, r1
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	2b01      	cmp	r3, #1
 8005220:	d901      	bls.n	8005226 <xTaskIncrementTick+0x1de>
            {
                xSwitchRequired = pdTRUE;
 8005222:	2301      	movs	r3, #1
 8005224:	627b      	str	r3, [r7, #36]	; 0x24
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 8005226:	4b11      	ldr	r3, [pc, #68]	; (800526c <xTaskIncrementTick+0x224>)
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	2b00      	cmp	r3, #0
 800522c:	d007      	beq.n	800523e <xTaskIncrementTick+0x1f6>
            {
                xSwitchRequired = pdTRUE;
 800522e:	2301      	movs	r3, #1
 8005230:	627b      	str	r3, [r7, #36]	; 0x24
 8005232:	e004      	b.n	800523e <xTaskIncrementTick+0x1f6>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8005234:	4b0e      	ldr	r3, [pc, #56]	; (8005270 <xTaskIncrementTick+0x228>)
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	3301      	adds	r3, #1
 800523a:	4a0d      	ldr	r2, [pc, #52]	; (8005270 <xTaskIncrementTick+0x228>)
 800523c:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 800523e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005240:	4618      	mov	r0, r3
 8005242:	3728      	adds	r7, #40	; 0x28
 8005244:	46bd      	mov	sp, r7
 8005246:	bd80      	pop	{r7, pc}
 8005248:	20000280 	.word	0x20000280
 800524c:	2000025c 	.word	0x2000025c
 8005250:	20000210 	.word	0x20000210
 8005254:	20000214 	.word	0x20000214
 8005258:	20000270 	.word	0x20000270
 800525c:	20000278 	.word	0x20000278
 8005260:	20000260 	.word	0x20000260
 8005264:	20000184 	.word	0x20000184
 8005268:	20000180 	.word	0x20000180
 800526c:	2000026c 	.word	0x2000026c
 8005270:	20000268 	.word	0x20000268

08005274 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005274:	b480      	push	{r7}
 8005276:	b087      	sub	sp, #28
 8005278:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800527a:	4b27      	ldr	r3, [pc, #156]	; (8005318 <vTaskSwitchContext+0xa4>)
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	2b00      	cmp	r3, #0
 8005280:	d003      	beq.n	800528a <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8005282:	4b26      	ldr	r3, [pc, #152]	; (800531c <vTaskSwitchContext+0xa8>)
 8005284:	2201      	movs	r2, #1
 8005286:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 8005288:	e03f      	b.n	800530a <vTaskSwitchContext+0x96>
        xYieldPending = pdFALSE;
 800528a:	4b24      	ldr	r3, [pc, #144]	; (800531c <vTaskSwitchContext+0xa8>)
 800528c:	2200      	movs	r2, #0
 800528e:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005290:	4b23      	ldr	r3, [pc, #140]	; (8005320 <vTaskSwitchContext+0xac>)
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	fab3 f383 	clz	r3, r3
 800529c:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 800529e:	7afb      	ldrb	r3, [r7, #11]
 80052a0:	f1c3 031f 	rsb	r3, r3, #31
 80052a4:	617b      	str	r3, [r7, #20]
 80052a6:	491f      	ldr	r1, [pc, #124]	; (8005324 <vTaskSwitchContext+0xb0>)
 80052a8:	697a      	ldr	r2, [r7, #20]
 80052aa:	4613      	mov	r3, r2
 80052ac:	009b      	lsls	r3, r3, #2
 80052ae:	4413      	add	r3, r2
 80052b0:	009b      	lsls	r3, r3, #2
 80052b2:	440b      	add	r3, r1
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d10a      	bne.n	80052d0 <vTaskSwitchContext+0x5c>
        __asm volatile
 80052ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052be:	f383 8811 	msr	BASEPRI, r3
 80052c2:	f3bf 8f6f 	isb	sy
 80052c6:	f3bf 8f4f 	dsb	sy
 80052ca:	607b      	str	r3, [r7, #4]
    }
 80052cc:	bf00      	nop
 80052ce:	e7fe      	b.n	80052ce <vTaskSwitchContext+0x5a>
 80052d0:	697a      	ldr	r2, [r7, #20]
 80052d2:	4613      	mov	r3, r2
 80052d4:	009b      	lsls	r3, r3, #2
 80052d6:	4413      	add	r3, r2
 80052d8:	009b      	lsls	r3, r3, #2
 80052da:	4a12      	ldr	r2, [pc, #72]	; (8005324 <vTaskSwitchContext+0xb0>)
 80052dc:	4413      	add	r3, r2
 80052de:	613b      	str	r3, [r7, #16]
 80052e0:	693b      	ldr	r3, [r7, #16]
 80052e2:	685b      	ldr	r3, [r3, #4]
 80052e4:	685a      	ldr	r2, [r3, #4]
 80052e6:	693b      	ldr	r3, [r7, #16]
 80052e8:	605a      	str	r2, [r3, #4]
 80052ea:	693b      	ldr	r3, [r7, #16]
 80052ec:	685a      	ldr	r2, [r3, #4]
 80052ee:	693b      	ldr	r3, [r7, #16]
 80052f0:	3308      	adds	r3, #8
 80052f2:	429a      	cmp	r2, r3
 80052f4:	d104      	bne.n	8005300 <vTaskSwitchContext+0x8c>
 80052f6:	693b      	ldr	r3, [r7, #16]
 80052f8:	685b      	ldr	r3, [r3, #4]
 80052fa:	685a      	ldr	r2, [r3, #4]
 80052fc:	693b      	ldr	r3, [r7, #16]
 80052fe:	605a      	str	r2, [r3, #4]
 8005300:	693b      	ldr	r3, [r7, #16]
 8005302:	685b      	ldr	r3, [r3, #4]
 8005304:	68db      	ldr	r3, [r3, #12]
 8005306:	4a08      	ldr	r2, [pc, #32]	; (8005328 <vTaskSwitchContext+0xb4>)
 8005308:	6013      	str	r3, [r2, #0]
}
 800530a:	bf00      	nop
 800530c:	371c      	adds	r7, #28
 800530e:	46bd      	mov	sp, r7
 8005310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005314:	4770      	bx	lr
 8005316:	bf00      	nop
 8005318:	20000280 	.word	0x20000280
 800531c:	2000026c 	.word	0x2000026c
 8005320:	20000260 	.word	0x20000260
 8005324:	20000184 	.word	0x20000184
 8005328:	20000180 	.word	0x20000180

0800532c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 800532c:	b580      	push	{r7, lr}
 800532e:	b084      	sub	sp, #16
 8005330:	af00      	add	r7, sp, #0
 8005332:	6078      	str	r0, [r7, #4]
 8005334:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	2b00      	cmp	r3, #0
 800533a:	d10a      	bne.n	8005352 <vTaskPlaceOnEventList+0x26>
        __asm volatile
 800533c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005340:	f383 8811 	msr	BASEPRI, r3
 8005344:	f3bf 8f6f 	isb	sy
 8005348:	f3bf 8f4f 	dsb	sy
 800534c:	60fb      	str	r3, [r7, #12]
    }
 800534e:	bf00      	nop
 8005350:	e7fe      	b.n	8005350 <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005352:	4b07      	ldr	r3, [pc, #28]	; (8005370 <vTaskPlaceOnEventList+0x44>)
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	3318      	adds	r3, #24
 8005358:	4619      	mov	r1, r3
 800535a:	6878      	ldr	r0, [r7, #4]
 800535c:	f7fe fef3 	bl	8004146 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005360:	2101      	movs	r1, #1
 8005362:	6838      	ldr	r0, [r7, #0]
 8005364:	f000 fb1e 	bl	80059a4 <prvAddCurrentTaskToDelayedList>
}
 8005368:	bf00      	nop
 800536a:	3710      	adds	r7, #16
 800536c:	46bd      	mov	sp, r7
 800536e:	bd80      	pop	{r7, pc}
 8005370:	20000180 	.word	0x20000180

08005374 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8005374:	b580      	push	{r7, lr}
 8005376:	b086      	sub	sp, #24
 8005378:	af00      	add	r7, sp, #0
 800537a:	60f8      	str	r0, [r7, #12]
 800537c:	60b9      	str	r1, [r7, #8]
 800537e:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	2b00      	cmp	r3, #0
 8005384:	d10a      	bne.n	800539c <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 8005386:	f04f 0350 	mov.w	r3, #80	; 0x50
 800538a:	f383 8811 	msr	BASEPRI, r3
 800538e:	f3bf 8f6f 	isb	sy
 8005392:	f3bf 8f4f 	dsb	sy
 8005396:	613b      	str	r3, [r7, #16]
    }
 8005398:	bf00      	nop
 800539a:	e7fe      	b.n	800539a <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	685b      	ldr	r3, [r3, #4]
 80053a0:	617b      	str	r3, [r7, #20]
 80053a2:	4b16      	ldr	r3, [pc, #88]	; (80053fc <vTaskPlaceOnEventListRestricted+0x88>)
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	697a      	ldr	r2, [r7, #20]
 80053a8:	61da      	str	r2, [r3, #28]
 80053aa:	4b14      	ldr	r3, [pc, #80]	; (80053fc <vTaskPlaceOnEventListRestricted+0x88>)
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	697a      	ldr	r2, [r7, #20]
 80053b0:	6892      	ldr	r2, [r2, #8]
 80053b2:	621a      	str	r2, [r3, #32]
 80053b4:	4b11      	ldr	r3, [pc, #68]	; (80053fc <vTaskPlaceOnEventListRestricted+0x88>)
 80053b6:	681a      	ldr	r2, [r3, #0]
 80053b8:	697b      	ldr	r3, [r7, #20]
 80053ba:	689b      	ldr	r3, [r3, #8]
 80053bc:	3218      	adds	r2, #24
 80053be:	605a      	str	r2, [r3, #4]
 80053c0:	4b0e      	ldr	r3, [pc, #56]	; (80053fc <vTaskPlaceOnEventListRestricted+0x88>)
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f103 0218 	add.w	r2, r3, #24
 80053c8:	697b      	ldr	r3, [r7, #20]
 80053ca:	609a      	str	r2, [r3, #8]
 80053cc:	4b0b      	ldr	r3, [pc, #44]	; (80053fc <vTaskPlaceOnEventListRestricted+0x88>)
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	68fa      	ldr	r2, [r7, #12]
 80053d2:	629a      	str	r2, [r3, #40]	; 0x28
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	1c5a      	adds	r2, r3, #1
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d002      	beq.n	80053ea <vTaskPlaceOnEventListRestricted+0x76>
        {
            xTicksToWait = portMAX_DELAY;
 80053e4:	f04f 33ff 	mov.w	r3, #4294967295
 80053e8:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80053ea:	6879      	ldr	r1, [r7, #4]
 80053ec:	68b8      	ldr	r0, [r7, #8]
 80053ee:	f000 fad9 	bl	80059a4 <prvAddCurrentTaskToDelayedList>
    }
 80053f2:	bf00      	nop
 80053f4:	3718      	adds	r7, #24
 80053f6:	46bd      	mov	sp, r7
 80053f8:	bd80      	pop	{r7, pc}
 80053fa:	bf00      	nop
 80053fc:	20000180 	.word	0x20000180

08005400 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005400:	b480      	push	{r7}
 8005402:	b08b      	sub	sp, #44	; 0x2c
 8005404:	af00      	add	r7, sp, #0
 8005406:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	68db      	ldr	r3, [r3, #12]
 800540c:	68db      	ldr	r3, [r3, #12]
 800540e:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 8005410:	6a3b      	ldr	r3, [r7, #32]
 8005412:	2b00      	cmp	r3, #0
 8005414:	d10a      	bne.n	800542c <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 8005416:	f04f 0350 	mov.w	r3, #80	; 0x50
 800541a:	f383 8811 	msr	BASEPRI, r3
 800541e:	f3bf 8f6f 	isb	sy
 8005422:	f3bf 8f4f 	dsb	sy
 8005426:	60fb      	str	r3, [r7, #12]
    }
 8005428:	bf00      	nop
 800542a:	e7fe      	b.n	800542a <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 800542c:	6a3b      	ldr	r3, [r7, #32]
 800542e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005430:	61fb      	str	r3, [r7, #28]
 8005432:	6a3b      	ldr	r3, [r7, #32]
 8005434:	69db      	ldr	r3, [r3, #28]
 8005436:	6a3a      	ldr	r2, [r7, #32]
 8005438:	6a12      	ldr	r2, [r2, #32]
 800543a:	609a      	str	r2, [r3, #8]
 800543c:	6a3b      	ldr	r3, [r7, #32]
 800543e:	6a1b      	ldr	r3, [r3, #32]
 8005440:	6a3a      	ldr	r2, [r7, #32]
 8005442:	69d2      	ldr	r2, [r2, #28]
 8005444:	605a      	str	r2, [r3, #4]
 8005446:	69fb      	ldr	r3, [r7, #28]
 8005448:	685a      	ldr	r2, [r3, #4]
 800544a:	6a3b      	ldr	r3, [r7, #32]
 800544c:	3318      	adds	r3, #24
 800544e:	429a      	cmp	r2, r3
 8005450:	d103      	bne.n	800545a <xTaskRemoveFromEventList+0x5a>
 8005452:	6a3b      	ldr	r3, [r7, #32]
 8005454:	6a1a      	ldr	r2, [r3, #32]
 8005456:	69fb      	ldr	r3, [r7, #28]
 8005458:	605a      	str	r2, [r3, #4]
 800545a:	6a3b      	ldr	r3, [r7, #32]
 800545c:	2200      	movs	r2, #0
 800545e:	629a      	str	r2, [r3, #40]	; 0x28
 8005460:	69fb      	ldr	r3, [r7, #28]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	1e5a      	subs	r2, r3, #1
 8005466:	69fb      	ldr	r3, [r7, #28]
 8005468:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800546a:	4b4a      	ldr	r3, [pc, #296]	; (8005594 <xTaskRemoveFromEventList+0x194>)
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	2b00      	cmp	r3, #0
 8005470:	d15e      	bne.n	8005530 <xTaskRemoveFromEventList+0x130>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8005472:	6a3b      	ldr	r3, [r7, #32]
 8005474:	695b      	ldr	r3, [r3, #20]
 8005476:	617b      	str	r3, [r7, #20]
 8005478:	6a3b      	ldr	r3, [r7, #32]
 800547a:	689b      	ldr	r3, [r3, #8]
 800547c:	6a3a      	ldr	r2, [r7, #32]
 800547e:	68d2      	ldr	r2, [r2, #12]
 8005480:	609a      	str	r2, [r3, #8]
 8005482:	6a3b      	ldr	r3, [r7, #32]
 8005484:	68db      	ldr	r3, [r3, #12]
 8005486:	6a3a      	ldr	r2, [r7, #32]
 8005488:	6892      	ldr	r2, [r2, #8]
 800548a:	605a      	str	r2, [r3, #4]
 800548c:	697b      	ldr	r3, [r7, #20]
 800548e:	685a      	ldr	r2, [r3, #4]
 8005490:	6a3b      	ldr	r3, [r7, #32]
 8005492:	3304      	adds	r3, #4
 8005494:	429a      	cmp	r2, r3
 8005496:	d103      	bne.n	80054a0 <xTaskRemoveFromEventList+0xa0>
 8005498:	6a3b      	ldr	r3, [r7, #32]
 800549a:	68da      	ldr	r2, [r3, #12]
 800549c:	697b      	ldr	r3, [r7, #20]
 800549e:	605a      	str	r2, [r3, #4]
 80054a0:	6a3b      	ldr	r3, [r7, #32]
 80054a2:	2200      	movs	r2, #0
 80054a4:	615a      	str	r2, [r3, #20]
 80054a6:	697b      	ldr	r3, [r7, #20]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	1e5a      	subs	r2, r3, #1
 80054ac:	697b      	ldr	r3, [r7, #20]
 80054ae:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 80054b0:	6a3b      	ldr	r3, [r7, #32]
 80054b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054b4:	2201      	movs	r2, #1
 80054b6:	409a      	lsls	r2, r3
 80054b8:	4b37      	ldr	r3, [pc, #220]	; (8005598 <xTaskRemoveFromEventList+0x198>)
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	4313      	orrs	r3, r2
 80054be:	4a36      	ldr	r2, [pc, #216]	; (8005598 <xTaskRemoveFromEventList+0x198>)
 80054c0:	6013      	str	r3, [r2, #0]
 80054c2:	6a3b      	ldr	r3, [r7, #32]
 80054c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054c6:	4935      	ldr	r1, [pc, #212]	; (800559c <xTaskRemoveFromEventList+0x19c>)
 80054c8:	4613      	mov	r3, r2
 80054ca:	009b      	lsls	r3, r3, #2
 80054cc:	4413      	add	r3, r2
 80054ce:	009b      	lsls	r3, r3, #2
 80054d0:	440b      	add	r3, r1
 80054d2:	3304      	adds	r3, #4
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	613b      	str	r3, [r7, #16]
 80054d8:	6a3b      	ldr	r3, [r7, #32]
 80054da:	693a      	ldr	r2, [r7, #16]
 80054dc:	609a      	str	r2, [r3, #8]
 80054de:	693b      	ldr	r3, [r7, #16]
 80054e0:	689a      	ldr	r2, [r3, #8]
 80054e2:	6a3b      	ldr	r3, [r7, #32]
 80054e4:	60da      	str	r2, [r3, #12]
 80054e6:	693b      	ldr	r3, [r7, #16]
 80054e8:	689b      	ldr	r3, [r3, #8]
 80054ea:	6a3a      	ldr	r2, [r7, #32]
 80054ec:	3204      	adds	r2, #4
 80054ee:	605a      	str	r2, [r3, #4]
 80054f0:	6a3b      	ldr	r3, [r7, #32]
 80054f2:	1d1a      	adds	r2, r3, #4
 80054f4:	693b      	ldr	r3, [r7, #16]
 80054f6:	609a      	str	r2, [r3, #8]
 80054f8:	6a3b      	ldr	r3, [r7, #32]
 80054fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054fc:	4613      	mov	r3, r2
 80054fe:	009b      	lsls	r3, r3, #2
 8005500:	4413      	add	r3, r2
 8005502:	009b      	lsls	r3, r3, #2
 8005504:	4a25      	ldr	r2, [pc, #148]	; (800559c <xTaskRemoveFromEventList+0x19c>)
 8005506:	441a      	add	r2, r3
 8005508:	6a3b      	ldr	r3, [r7, #32]
 800550a:	615a      	str	r2, [r3, #20]
 800550c:	6a3b      	ldr	r3, [r7, #32]
 800550e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005510:	4922      	ldr	r1, [pc, #136]	; (800559c <xTaskRemoveFromEventList+0x19c>)
 8005512:	4613      	mov	r3, r2
 8005514:	009b      	lsls	r3, r3, #2
 8005516:	4413      	add	r3, r2
 8005518:	009b      	lsls	r3, r3, #2
 800551a:	440b      	add	r3, r1
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	1c59      	adds	r1, r3, #1
 8005520:	481e      	ldr	r0, [pc, #120]	; (800559c <xTaskRemoveFromEventList+0x19c>)
 8005522:	4613      	mov	r3, r2
 8005524:	009b      	lsls	r3, r3, #2
 8005526:	4413      	add	r3, r2
 8005528:	009b      	lsls	r3, r3, #2
 800552a:	4403      	add	r3, r0
 800552c:	6019      	str	r1, [r3, #0]
 800552e:	e01b      	b.n	8005568 <xTaskRemoveFromEventList+0x168>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005530:	4b1b      	ldr	r3, [pc, #108]	; (80055a0 <xTaskRemoveFromEventList+0x1a0>)
 8005532:	685b      	ldr	r3, [r3, #4]
 8005534:	61bb      	str	r3, [r7, #24]
 8005536:	6a3b      	ldr	r3, [r7, #32]
 8005538:	69ba      	ldr	r2, [r7, #24]
 800553a:	61da      	str	r2, [r3, #28]
 800553c:	69bb      	ldr	r3, [r7, #24]
 800553e:	689a      	ldr	r2, [r3, #8]
 8005540:	6a3b      	ldr	r3, [r7, #32]
 8005542:	621a      	str	r2, [r3, #32]
 8005544:	69bb      	ldr	r3, [r7, #24]
 8005546:	689b      	ldr	r3, [r3, #8]
 8005548:	6a3a      	ldr	r2, [r7, #32]
 800554a:	3218      	adds	r2, #24
 800554c:	605a      	str	r2, [r3, #4]
 800554e:	6a3b      	ldr	r3, [r7, #32]
 8005550:	f103 0218 	add.w	r2, r3, #24
 8005554:	69bb      	ldr	r3, [r7, #24]
 8005556:	609a      	str	r2, [r3, #8]
 8005558:	6a3b      	ldr	r3, [r7, #32]
 800555a:	4a11      	ldr	r2, [pc, #68]	; (80055a0 <xTaskRemoveFromEventList+0x1a0>)
 800555c:	629a      	str	r2, [r3, #40]	; 0x28
 800555e:	4b10      	ldr	r3, [pc, #64]	; (80055a0 <xTaskRemoveFromEventList+0x1a0>)
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	3301      	adds	r3, #1
 8005564:	4a0e      	ldr	r2, [pc, #56]	; (80055a0 <xTaskRemoveFromEventList+0x1a0>)
 8005566:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005568:	6a3b      	ldr	r3, [r7, #32]
 800556a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800556c:	4b0d      	ldr	r3, [pc, #52]	; (80055a4 <xTaskRemoveFromEventList+0x1a4>)
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005572:	429a      	cmp	r2, r3
 8005574:	d905      	bls.n	8005582 <xTaskRemoveFromEventList+0x182>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8005576:	2301      	movs	r3, #1
 8005578:	627b      	str	r3, [r7, #36]	; 0x24

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 800557a:	4b0b      	ldr	r3, [pc, #44]	; (80055a8 <xTaskRemoveFromEventList+0x1a8>)
 800557c:	2201      	movs	r2, #1
 800557e:	601a      	str	r2, [r3, #0]
 8005580:	e001      	b.n	8005586 <xTaskRemoveFromEventList+0x186>
    }
    else
    {
        xReturn = pdFALSE;
 8005582:	2300      	movs	r3, #0
 8005584:	627b      	str	r3, [r7, #36]	; 0x24
    }

    return xReturn;
 8005586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005588:	4618      	mov	r0, r3
 800558a:	372c      	adds	r7, #44	; 0x2c
 800558c:	46bd      	mov	sp, r7
 800558e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005592:	4770      	bx	lr
 8005594:	20000280 	.word	0x20000280
 8005598:	20000260 	.word	0x20000260
 800559c:	20000184 	.word	0x20000184
 80055a0:	20000218 	.word	0x20000218
 80055a4:	20000180 	.word	0x20000180
 80055a8:	2000026c 	.word	0x2000026c

080055ac <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80055ac:	b480      	push	{r7}
 80055ae:	b083      	sub	sp, #12
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 80055b4:	4b06      	ldr	r3, [pc, #24]	; (80055d0 <vTaskInternalSetTimeOutState+0x24>)
 80055b6:	681a      	ldr	r2, [r3, #0]
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 80055bc:	4b05      	ldr	r3, [pc, #20]	; (80055d4 <vTaskInternalSetTimeOutState+0x28>)
 80055be:	681a      	ldr	r2, [r3, #0]
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	605a      	str	r2, [r3, #4]
}
 80055c4:	bf00      	nop
 80055c6:	370c      	adds	r7, #12
 80055c8:	46bd      	mov	sp, r7
 80055ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ce:	4770      	bx	lr
 80055d0:	20000270 	.word	0x20000270
 80055d4:	2000025c 	.word	0x2000025c

080055d8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 80055d8:	b580      	push	{r7, lr}
 80055da:	b088      	sub	sp, #32
 80055dc:	af00      	add	r7, sp, #0
 80055de:	6078      	str	r0, [r7, #4]
 80055e0:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d10a      	bne.n	80055fe <xTaskCheckForTimeOut+0x26>
        __asm volatile
 80055e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055ec:	f383 8811 	msr	BASEPRI, r3
 80055f0:	f3bf 8f6f 	isb	sy
 80055f4:	f3bf 8f4f 	dsb	sy
 80055f8:	613b      	str	r3, [r7, #16]
    }
 80055fa:	bf00      	nop
 80055fc:	e7fe      	b.n	80055fc <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 80055fe:	683b      	ldr	r3, [r7, #0]
 8005600:	2b00      	cmp	r3, #0
 8005602:	d10a      	bne.n	800561a <xTaskCheckForTimeOut+0x42>
        __asm volatile
 8005604:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005608:	f383 8811 	msr	BASEPRI, r3
 800560c:	f3bf 8f6f 	isb	sy
 8005610:	f3bf 8f4f 	dsb	sy
 8005614:	60fb      	str	r3, [r7, #12]
    }
 8005616:	bf00      	nop
 8005618:	e7fe      	b.n	8005618 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 800561a:	f000 fded 	bl	80061f8 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 800561e:	4b1f      	ldr	r3, [pc, #124]	; (800569c <xTaskCheckForTimeOut+0xc4>)
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	685b      	ldr	r3, [r3, #4]
 8005628:	69ba      	ldr	r2, [r7, #24]
 800562a:	1ad3      	subs	r3, r2, r3
 800562c:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 800562e:	683b      	ldr	r3, [r7, #0]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005636:	d102      	bne.n	800563e <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8005638:	2300      	movs	r3, #0
 800563a:	61fb      	str	r3, [r7, #28]
 800563c:	e026      	b.n	800568c <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681a      	ldr	r2, [r3, #0]
 8005642:	4b17      	ldr	r3, [pc, #92]	; (80056a0 <xTaskCheckForTimeOut+0xc8>)
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	429a      	cmp	r2, r3
 8005648:	d00a      	beq.n	8005660 <xTaskCheckForTimeOut+0x88>
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	685b      	ldr	r3, [r3, #4]
 800564e:	69ba      	ldr	r2, [r7, #24]
 8005650:	429a      	cmp	r2, r3
 8005652:	d305      	bcc.n	8005660 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8005654:	2301      	movs	r3, #1
 8005656:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8005658:	683b      	ldr	r3, [r7, #0]
 800565a:	2200      	movs	r2, #0
 800565c:	601a      	str	r2, [r3, #0]
 800565e:	e015      	b.n	800568c <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005660:	683b      	ldr	r3, [r7, #0]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	697a      	ldr	r2, [r7, #20]
 8005666:	429a      	cmp	r2, r3
 8005668:	d20b      	bcs.n	8005682 <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 800566a:	683b      	ldr	r3, [r7, #0]
 800566c:	681a      	ldr	r2, [r3, #0]
 800566e:	697b      	ldr	r3, [r7, #20]
 8005670:	1ad2      	subs	r2, r2, r3
 8005672:	683b      	ldr	r3, [r7, #0]
 8005674:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8005676:	6878      	ldr	r0, [r7, #4]
 8005678:	f7ff ff98 	bl	80055ac <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 800567c:	2300      	movs	r3, #0
 800567e:	61fb      	str	r3, [r7, #28]
 8005680:	e004      	b.n	800568c <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8005682:	683b      	ldr	r3, [r7, #0]
 8005684:	2200      	movs	r2, #0
 8005686:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8005688:	2301      	movs	r3, #1
 800568a:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 800568c:	f000 fde4 	bl	8006258 <vPortExitCritical>

    return xReturn;
 8005690:	69fb      	ldr	r3, [r7, #28]
}
 8005692:	4618      	mov	r0, r3
 8005694:	3720      	adds	r7, #32
 8005696:	46bd      	mov	sp, r7
 8005698:	bd80      	pop	{r7, pc}
 800569a:	bf00      	nop
 800569c:	2000025c 	.word	0x2000025c
 80056a0:	20000270 	.word	0x20000270

080056a4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80056a4:	b480      	push	{r7}
 80056a6:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 80056a8:	4b03      	ldr	r3, [pc, #12]	; (80056b8 <vTaskMissedYield+0x14>)
 80056aa:	2201      	movs	r2, #1
 80056ac:	601a      	str	r2, [r3, #0]
}
 80056ae:	bf00      	nop
 80056b0:	46bd      	mov	sp, r7
 80056b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b6:	4770      	bx	lr
 80056b8:	2000026c 	.word	0x2000026c

080056bc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80056bc:	b580      	push	{r7, lr}
 80056be:	b082      	sub	sp, #8
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 80056c4:	f000 f852 	bl	800576c <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80056c8:	4b06      	ldr	r3, [pc, #24]	; (80056e4 <prvIdleTask+0x28>)
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	2b01      	cmp	r3, #1
 80056ce:	d9f9      	bls.n	80056c4 <prvIdleTask+0x8>
            {
                taskYIELD();
 80056d0:	4b05      	ldr	r3, [pc, #20]	; (80056e8 <prvIdleTask+0x2c>)
 80056d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80056d6:	601a      	str	r2, [r3, #0]
 80056d8:	f3bf 8f4f 	dsb	sy
 80056dc:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 80056e0:	e7f0      	b.n	80056c4 <prvIdleTask+0x8>
 80056e2:	bf00      	nop
 80056e4:	20000184 	.word	0x20000184
 80056e8:	e000ed04 	.word	0xe000ed04

080056ec <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80056ec:	b580      	push	{r7, lr}
 80056ee:	b082      	sub	sp, #8
 80056f0:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80056f2:	2300      	movs	r3, #0
 80056f4:	607b      	str	r3, [r7, #4]
 80056f6:	e00c      	b.n	8005712 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80056f8:	687a      	ldr	r2, [r7, #4]
 80056fa:	4613      	mov	r3, r2
 80056fc:	009b      	lsls	r3, r3, #2
 80056fe:	4413      	add	r3, r2
 8005700:	009b      	lsls	r3, r3, #2
 8005702:	4a12      	ldr	r2, [pc, #72]	; (800574c <prvInitialiseTaskLists+0x60>)
 8005704:	4413      	add	r3, r2
 8005706:	4618      	mov	r0, r3
 8005708:	f7fe fcf0 	bl	80040ec <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	3301      	adds	r3, #1
 8005710:	607b      	str	r3, [r7, #4]
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	2b04      	cmp	r3, #4
 8005716:	d9ef      	bls.n	80056f8 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8005718:	480d      	ldr	r0, [pc, #52]	; (8005750 <prvInitialiseTaskLists+0x64>)
 800571a:	f7fe fce7 	bl	80040ec <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 800571e:	480d      	ldr	r0, [pc, #52]	; (8005754 <prvInitialiseTaskLists+0x68>)
 8005720:	f7fe fce4 	bl	80040ec <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8005724:	480c      	ldr	r0, [pc, #48]	; (8005758 <prvInitialiseTaskLists+0x6c>)
 8005726:	f7fe fce1 	bl	80040ec <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 800572a:	480c      	ldr	r0, [pc, #48]	; (800575c <prvInitialiseTaskLists+0x70>)
 800572c:	f7fe fcde 	bl	80040ec <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 8005730:	480b      	ldr	r0, [pc, #44]	; (8005760 <prvInitialiseTaskLists+0x74>)
 8005732:	f7fe fcdb 	bl	80040ec <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8005736:	4b0b      	ldr	r3, [pc, #44]	; (8005764 <prvInitialiseTaskLists+0x78>)
 8005738:	4a05      	ldr	r2, [pc, #20]	; (8005750 <prvInitialiseTaskLists+0x64>)
 800573a:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800573c:	4b0a      	ldr	r3, [pc, #40]	; (8005768 <prvInitialiseTaskLists+0x7c>)
 800573e:	4a05      	ldr	r2, [pc, #20]	; (8005754 <prvInitialiseTaskLists+0x68>)
 8005740:	601a      	str	r2, [r3, #0]
}
 8005742:	bf00      	nop
 8005744:	3708      	adds	r7, #8
 8005746:	46bd      	mov	sp, r7
 8005748:	bd80      	pop	{r7, pc}
 800574a:	bf00      	nop
 800574c:	20000184 	.word	0x20000184
 8005750:	200001e8 	.word	0x200001e8
 8005754:	200001fc 	.word	0x200001fc
 8005758:	20000218 	.word	0x20000218
 800575c:	2000022c 	.word	0x2000022c
 8005760:	20000244 	.word	0x20000244
 8005764:	20000210 	.word	0x20000210
 8005768:	20000214 	.word	0x20000214

0800576c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800576c:	b580      	push	{r7, lr}
 800576e:	b082      	sub	sp, #8
 8005770:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005772:	e019      	b.n	80057a8 <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 8005774:	f000 fd40 	bl	80061f8 <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005778:	4b10      	ldr	r3, [pc, #64]	; (80057bc <prvCheckTasksWaitingTermination+0x50>)
 800577a:	68db      	ldr	r3, [r3, #12]
 800577c:	68db      	ldr	r3, [r3, #12]
 800577e:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	3304      	adds	r3, #4
 8005784:	4618      	mov	r0, r3
 8005786:	f7fe fd17 	bl	80041b8 <uxListRemove>
                --uxCurrentNumberOfTasks;
 800578a:	4b0d      	ldr	r3, [pc, #52]	; (80057c0 <prvCheckTasksWaitingTermination+0x54>)
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	3b01      	subs	r3, #1
 8005790:	4a0b      	ldr	r2, [pc, #44]	; (80057c0 <prvCheckTasksWaitingTermination+0x54>)
 8005792:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 8005794:	4b0b      	ldr	r3, [pc, #44]	; (80057c4 <prvCheckTasksWaitingTermination+0x58>)
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	3b01      	subs	r3, #1
 800579a:	4a0a      	ldr	r2, [pc, #40]	; (80057c4 <prvCheckTasksWaitingTermination+0x58>)
 800579c:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 800579e:	f000 fd5b 	bl	8006258 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 80057a2:	6878      	ldr	r0, [r7, #4]
 80057a4:	f000 f810 	bl	80057c8 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80057a8:	4b06      	ldr	r3, [pc, #24]	; (80057c4 <prvCheckTasksWaitingTermination+0x58>)
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d1e1      	bne.n	8005774 <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 80057b0:	bf00      	nop
 80057b2:	bf00      	nop
 80057b4:	3708      	adds	r7, #8
 80057b6:	46bd      	mov	sp, r7
 80057b8:	bd80      	pop	{r7, pc}
 80057ba:	bf00      	nop
 80057bc:	2000022c 	.word	0x2000022c
 80057c0:	20000258 	.word	0x20000258
 80057c4:	20000240 	.word	0x20000240

080057c8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 80057c8:	b580      	push	{r7, lr}
 80057ca:	b082      	sub	sp, #8
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057d4:	4618      	mov	r0, r3
 80057d6:	f000 fea1 	bl	800651c <vPortFree>
            vPortFree( pxTCB );
 80057da:	6878      	ldr	r0, [r7, #4]
 80057dc:	f000 fe9e 	bl	800651c <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 80057e0:	bf00      	nop
 80057e2:	3708      	adds	r7, #8
 80057e4:	46bd      	mov	sp, r7
 80057e6:	bd80      	pop	{r7, pc}

080057e8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80057e8:	b480      	push	{r7}
 80057ea:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80057ec:	4b0a      	ldr	r3, [pc, #40]	; (8005818 <prvResetNextTaskUnblockTime+0x30>)
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d104      	bne.n	8005800 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 80057f6:	4b09      	ldr	r3, [pc, #36]	; (800581c <prvResetNextTaskUnblockTime+0x34>)
 80057f8:	f04f 32ff 	mov.w	r2, #4294967295
 80057fc:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 80057fe:	e005      	b.n	800580c <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005800:	4b05      	ldr	r3, [pc, #20]	; (8005818 <prvResetNextTaskUnblockTime+0x30>)
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	68db      	ldr	r3, [r3, #12]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	4a04      	ldr	r2, [pc, #16]	; (800581c <prvResetNextTaskUnblockTime+0x34>)
 800580a:	6013      	str	r3, [r2, #0]
}
 800580c:	bf00      	nop
 800580e:	46bd      	mov	sp, r7
 8005810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005814:	4770      	bx	lr
 8005816:	bf00      	nop
 8005818:	20000210 	.word	0x20000210
 800581c:	20000278 	.word	0x20000278

08005820 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8005820:	b480      	push	{r7}
 8005822:	b083      	sub	sp, #12
 8005824:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8005826:	4b0b      	ldr	r3, [pc, #44]	; (8005854 <xTaskGetSchedulerState+0x34>)
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	2b00      	cmp	r3, #0
 800582c:	d102      	bne.n	8005834 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 800582e:	2301      	movs	r3, #1
 8005830:	607b      	str	r3, [r7, #4]
 8005832:	e008      	b.n	8005846 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005834:	4b08      	ldr	r3, [pc, #32]	; (8005858 <xTaskGetSchedulerState+0x38>)
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	2b00      	cmp	r3, #0
 800583a:	d102      	bne.n	8005842 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 800583c:	2302      	movs	r3, #2
 800583e:	607b      	str	r3, [r7, #4]
 8005840:	e001      	b.n	8005846 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8005842:	2300      	movs	r3, #0
 8005844:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8005846:	687b      	ldr	r3, [r7, #4]
    }
 8005848:	4618      	mov	r0, r3
 800584a:	370c      	adds	r7, #12
 800584c:	46bd      	mov	sp, r7
 800584e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005852:	4770      	bx	lr
 8005854:	20000264 	.word	0x20000264
 8005858:	20000280 	.word	0x20000280

0800585c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 800585c:	b580      	push	{r7, lr}
 800585e:	b088      	sub	sp, #32
 8005860:	af00      	add	r7, sp, #0
 8005862:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	61bb      	str	r3, [r7, #24]
        BaseType_t xReturn = pdFALSE;
 8005868:	2300      	movs	r3, #0
 800586a:	61fb      	str	r3, [r7, #28]

        if( pxMutexHolder != NULL )
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	2b00      	cmp	r3, #0
 8005870:	f000 808c 	beq.w	800598c <xTaskPriorityDisinherit+0x130>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8005874:	4b48      	ldr	r3, [pc, #288]	; (8005998 <xTaskPriorityDisinherit+0x13c>)
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	69ba      	ldr	r2, [r7, #24]
 800587a:	429a      	cmp	r2, r3
 800587c:	d00a      	beq.n	8005894 <xTaskPriorityDisinherit+0x38>
        __asm volatile
 800587e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005882:	f383 8811 	msr	BASEPRI, r3
 8005886:	f3bf 8f6f 	isb	sy
 800588a:	f3bf 8f4f 	dsb	sy
 800588e:	613b      	str	r3, [r7, #16]
    }
 8005890:	bf00      	nop
 8005892:	e7fe      	b.n	8005892 <xTaskPriorityDisinherit+0x36>
            configASSERT( pxTCB->uxMutexesHeld );
 8005894:	69bb      	ldr	r3, [r7, #24]
 8005896:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005898:	2b00      	cmp	r3, #0
 800589a:	d10a      	bne.n	80058b2 <xTaskPriorityDisinherit+0x56>
        __asm volatile
 800589c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058a0:	f383 8811 	msr	BASEPRI, r3
 80058a4:	f3bf 8f6f 	isb	sy
 80058a8:	f3bf 8f4f 	dsb	sy
 80058ac:	60fb      	str	r3, [r7, #12]
    }
 80058ae:	bf00      	nop
 80058b0:	e7fe      	b.n	80058b0 <xTaskPriorityDisinherit+0x54>
            ( pxTCB->uxMutexesHeld )--;
 80058b2:	69bb      	ldr	r3, [r7, #24]
 80058b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058b6:	1e5a      	subs	r2, r3, #1
 80058b8:	69bb      	ldr	r3, [r7, #24]
 80058ba:	645a      	str	r2, [r3, #68]	; 0x44

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80058bc:	69bb      	ldr	r3, [r7, #24]
 80058be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058c0:	69bb      	ldr	r3, [r7, #24]
 80058c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058c4:	429a      	cmp	r2, r3
 80058c6:	d061      	beq.n	800598c <xTaskPriorityDisinherit+0x130>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80058c8:	69bb      	ldr	r3, [r7, #24]
 80058ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d15d      	bne.n	800598c <xTaskPriorityDisinherit+0x130>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80058d0:	69bb      	ldr	r3, [r7, #24]
 80058d2:	3304      	adds	r3, #4
 80058d4:	4618      	mov	r0, r3
 80058d6:	f7fe fc6f 	bl	80041b8 <uxListRemove>
 80058da:	4603      	mov	r3, r0
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d10a      	bne.n	80058f6 <xTaskPriorityDisinherit+0x9a>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 80058e0:	69bb      	ldr	r3, [r7, #24]
 80058e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058e4:	2201      	movs	r2, #1
 80058e6:	fa02 f303 	lsl.w	r3, r2, r3
 80058ea:	43da      	mvns	r2, r3
 80058ec:	4b2b      	ldr	r3, [pc, #172]	; (800599c <xTaskPriorityDisinherit+0x140>)
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	4013      	ands	r3, r2
 80058f2:	4a2a      	ldr	r2, [pc, #168]	; (800599c <xTaskPriorityDisinherit+0x140>)
 80058f4:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 80058f6:	69bb      	ldr	r3, [r7, #24]
 80058f8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80058fa:	69bb      	ldr	r3, [r7, #24]
 80058fc:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80058fe:	69bb      	ldr	r3, [r7, #24]
 8005900:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005902:	f1c3 0205 	rsb	r2, r3, #5
 8005906:	69bb      	ldr	r3, [r7, #24]
 8005908:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
 800590a:	69bb      	ldr	r3, [r7, #24]
 800590c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800590e:	2201      	movs	r2, #1
 8005910:	409a      	lsls	r2, r3
 8005912:	4b22      	ldr	r3, [pc, #136]	; (800599c <xTaskPriorityDisinherit+0x140>)
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	4313      	orrs	r3, r2
 8005918:	4a20      	ldr	r2, [pc, #128]	; (800599c <xTaskPriorityDisinherit+0x140>)
 800591a:	6013      	str	r3, [r2, #0]
 800591c:	69bb      	ldr	r3, [r7, #24]
 800591e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005920:	491f      	ldr	r1, [pc, #124]	; (80059a0 <xTaskPriorityDisinherit+0x144>)
 8005922:	4613      	mov	r3, r2
 8005924:	009b      	lsls	r3, r3, #2
 8005926:	4413      	add	r3, r2
 8005928:	009b      	lsls	r3, r3, #2
 800592a:	440b      	add	r3, r1
 800592c:	3304      	adds	r3, #4
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	617b      	str	r3, [r7, #20]
 8005932:	69bb      	ldr	r3, [r7, #24]
 8005934:	697a      	ldr	r2, [r7, #20]
 8005936:	609a      	str	r2, [r3, #8]
 8005938:	697b      	ldr	r3, [r7, #20]
 800593a:	689a      	ldr	r2, [r3, #8]
 800593c:	69bb      	ldr	r3, [r7, #24]
 800593e:	60da      	str	r2, [r3, #12]
 8005940:	697b      	ldr	r3, [r7, #20]
 8005942:	689b      	ldr	r3, [r3, #8]
 8005944:	69ba      	ldr	r2, [r7, #24]
 8005946:	3204      	adds	r2, #4
 8005948:	605a      	str	r2, [r3, #4]
 800594a:	69bb      	ldr	r3, [r7, #24]
 800594c:	1d1a      	adds	r2, r3, #4
 800594e:	697b      	ldr	r3, [r7, #20]
 8005950:	609a      	str	r2, [r3, #8]
 8005952:	69bb      	ldr	r3, [r7, #24]
 8005954:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005956:	4613      	mov	r3, r2
 8005958:	009b      	lsls	r3, r3, #2
 800595a:	4413      	add	r3, r2
 800595c:	009b      	lsls	r3, r3, #2
 800595e:	4a10      	ldr	r2, [pc, #64]	; (80059a0 <xTaskPriorityDisinherit+0x144>)
 8005960:	441a      	add	r2, r3
 8005962:	69bb      	ldr	r3, [r7, #24]
 8005964:	615a      	str	r2, [r3, #20]
 8005966:	69bb      	ldr	r3, [r7, #24]
 8005968:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800596a:	490d      	ldr	r1, [pc, #52]	; (80059a0 <xTaskPriorityDisinherit+0x144>)
 800596c:	4613      	mov	r3, r2
 800596e:	009b      	lsls	r3, r3, #2
 8005970:	4413      	add	r3, r2
 8005972:	009b      	lsls	r3, r3, #2
 8005974:	440b      	add	r3, r1
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	1c59      	adds	r1, r3, #1
 800597a:	4809      	ldr	r0, [pc, #36]	; (80059a0 <xTaskPriorityDisinherit+0x144>)
 800597c:	4613      	mov	r3, r2
 800597e:	009b      	lsls	r3, r3, #2
 8005980:	4413      	add	r3, r2
 8005982:	009b      	lsls	r3, r3, #2
 8005984:	4403      	add	r3, r0
 8005986:	6019      	str	r1, [r3, #0]
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8005988:	2301      	movs	r3, #1
 800598a:	61fb      	str	r3, [r7, #28]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 800598c:	69fb      	ldr	r3, [r7, #28]
    }
 800598e:	4618      	mov	r0, r3
 8005990:	3720      	adds	r7, #32
 8005992:	46bd      	mov	sp, r7
 8005994:	bd80      	pop	{r7, pc}
 8005996:	bf00      	nop
 8005998:	20000180 	.word	0x20000180
 800599c:	20000260 	.word	0x20000260
 80059a0:	20000184 	.word	0x20000184

080059a4 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 80059a4:	b580      	push	{r7, lr}
 80059a6:	b086      	sub	sp, #24
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	6078      	str	r0, [r7, #4]
 80059ac:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 80059ae:	4b36      	ldr	r3, [pc, #216]	; (8005a88 <prvAddCurrentTaskToDelayedList+0xe4>)
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80059b4:	4b35      	ldr	r3, [pc, #212]	; (8005a8c <prvAddCurrentTaskToDelayedList+0xe8>)
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	3304      	adds	r3, #4
 80059ba:	4618      	mov	r0, r3
 80059bc:	f7fe fbfc 	bl	80041b8 <uxListRemove>
 80059c0:	4603      	mov	r3, r0
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d10b      	bne.n	80059de <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80059c6:	4b31      	ldr	r3, [pc, #196]	; (8005a8c <prvAddCurrentTaskToDelayedList+0xe8>)
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059cc:	2201      	movs	r2, #1
 80059ce:	fa02 f303 	lsl.w	r3, r2, r3
 80059d2:	43da      	mvns	r2, r3
 80059d4:	4b2e      	ldr	r3, [pc, #184]	; (8005a90 <prvAddCurrentTaskToDelayedList+0xec>)
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	4013      	ands	r3, r2
 80059da:	4a2d      	ldr	r2, [pc, #180]	; (8005a90 <prvAddCurrentTaskToDelayedList+0xec>)
 80059dc:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059e4:	d124      	bne.n	8005a30 <prvAddCurrentTaskToDelayedList+0x8c>
 80059e6:	683b      	ldr	r3, [r7, #0]
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d021      	beq.n	8005a30 <prvAddCurrentTaskToDelayedList+0x8c>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80059ec:	4b29      	ldr	r3, [pc, #164]	; (8005a94 <prvAddCurrentTaskToDelayedList+0xf0>)
 80059ee:	685b      	ldr	r3, [r3, #4]
 80059f0:	613b      	str	r3, [r7, #16]
 80059f2:	4b26      	ldr	r3, [pc, #152]	; (8005a8c <prvAddCurrentTaskToDelayedList+0xe8>)
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	693a      	ldr	r2, [r7, #16]
 80059f8:	609a      	str	r2, [r3, #8]
 80059fa:	4b24      	ldr	r3, [pc, #144]	; (8005a8c <prvAddCurrentTaskToDelayedList+0xe8>)
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	693a      	ldr	r2, [r7, #16]
 8005a00:	6892      	ldr	r2, [r2, #8]
 8005a02:	60da      	str	r2, [r3, #12]
 8005a04:	4b21      	ldr	r3, [pc, #132]	; (8005a8c <prvAddCurrentTaskToDelayedList+0xe8>)
 8005a06:	681a      	ldr	r2, [r3, #0]
 8005a08:	693b      	ldr	r3, [r7, #16]
 8005a0a:	689b      	ldr	r3, [r3, #8]
 8005a0c:	3204      	adds	r2, #4
 8005a0e:	605a      	str	r2, [r3, #4]
 8005a10:	4b1e      	ldr	r3, [pc, #120]	; (8005a8c <prvAddCurrentTaskToDelayedList+0xe8>)
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	1d1a      	adds	r2, r3, #4
 8005a16:	693b      	ldr	r3, [r7, #16]
 8005a18:	609a      	str	r2, [r3, #8]
 8005a1a:	4b1c      	ldr	r3, [pc, #112]	; (8005a8c <prvAddCurrentTaskToDelayedList+0xe8>)
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	4a1d      	ldr	r2, [pc, #116]	; (8005a94 <prvAddCurrentTaskToDelayedList+0xf0>)
 8005a20:	615a      	str	r2, [r3, #20]
 8005a22:	4b1c      	ldr	r3, [pc, #112]	; (8005a94 <prvAddCurrentTaskToDelayedList+0xf0>)
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	3301      	adds	r3, #1
 8005a28:	4a1a      	ldr	r2, [pc, #104]	; (8005a94 <prvAddCurrentTaskToDelayedList+0xf0>)
 8005a2a:	6013      	str	r3, [r2, #0]
 8005a2c:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 8005a2e:	e026      	b.n	8005a7e <prvAddCurrentTaskToDelayedList+0xda>
            xTimeToWake = xConstTickCount + xTicksToWait;
 8005a30:	697a      	ldr	r2, [r7, #20]
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	4413      	add	r3, r2
 8005a36:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005a38:	4b14      	ldr	r3, [pc, #80]	; (8005a8c <prvAddCurrentTaskToDelayedList+0xe8>)
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	68fa      	ldr	r2, [r7, #12]
 8005a3e:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 8005a40:	68fa      	ldr	r2, [r7, #12]
 8005a42:	697b      	ldr	r3, [r7, #20]
 8005a44:	429a      	cmp	r2, r3
 8005a46:	d209      	bcs.n	8005a5c <prvAddCurrentTaskToDelayedList+0xb8>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005a48:	4b13      	ldr	r3, [pc, #76]	; (8005a98 <prvAddCurrentTaskToDelayedList+0xf4>)
 8005a4a:	681a      	ldr	r2, [r3, #0]
 8005a4c:	4b0f      	ldr	r3, [pc, #60]	; (8005a8c <prvAddCurrentTaskToDelayedList+0xe8>)
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	3304      	adds	r3, #4
 8005a52:	4619      	mov	r1, r3
 8005a54:	4610      	mov	r0, r2
 8005a56:	f7fe fb76 	bl	8004146 <vListInsert>
}
 8005a5a:	e010      	b.n	8005a7e <prvAddCurrentTaskToDelayedList+0xda>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005a5c:	4b0f      	ldr	r3, [pc, #60]	; (8005a9c <prvAddCurrentTaskToDelayedList+0xf8>)
 8005a5e:	681a      	ldr	r2, [r3, #0]
 8005a60:	4b0a      	ldr	r3, [pc, #40]	; (8005a8c <prvAddCurrentTaskToDelayedList+0xe8>)
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	3304      	adds	r3, #4
 8005a66:	4619      	mov	r1, r3
 8005a68:	4610      	mov	r0, r2
 8005a6a:	f7fe fb6c 	bl	8004146 <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 8005a6e:	4b0c      	ldr	r3, [pc, #48]	; (8005aa0 <prvAddCurrentTaskToDelayedList+0xfc>)
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	68fa      	ldr	r2, [r7, #12]
 8005a74:	429a      	cmp	r2, r3
 8005a76:	d202      	bcs.n	8005a7e <prvAddCurrentTaskToDelayedList+0xda>
                    xNextTaskUnblockTime = xTimeToWake;
 8005a78:	4a09      	ldr	r2, [pc, #36]	; (8005aa0 <prvAddCurrentTaskToDelayedList+0xfc>)
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	6013      	str	r3, [r2, #0]
}
 8005a7e:	bf00      	nop
 8005a80:	3718      	adds	r7, #24
 8005a82:	46bd      	mov	sp, r7
 8005a84:	bd80      	pop	{r7, pc}
 8005a86:	bf00      	nop
 8005a88:	2000025c 	.word	0x2000025c
 8005a8c:	20000180 	.word	0x20000180
 8005a90:	20000260 	.word	0x20000260
 8005a94:	20000244 	.word	0x20000244
 8005a98:	20000214 	.word	0x20000214
 8005a9c:	20000210 	.word	0x20000210
 8005aa0:	20000278 	.word	0x20000278

08005aa4 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8005aa4:	b580      	push	{r7, lr}
 8005aa6:	b084      	sub	sp, #16
 8005aa8:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8005aaa:	2300      	movs	r3, #0
 8005aac:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8005aae:	f000 fa47 	bl	8005f40 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8005ab2:	4b11      	ldr	r3, [pc, #68]	; (8005af8 <xTimerCreateTimerTask+0x54>)
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d00a      	beq.n	8005ad0 <xTimerCreateTimerTask+0x2c>
                    xReturn = pdPASS;
                }
            }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
            {
                xReturn = xTaskCreate( prvTimerTask,
 8005aba:	4b10      	ldr	r3, [pc, #64]	; (8005afc <xTimerCreateTimerTask+0x58>)
 8005abc:	9301      	str	r3, [sp, #4]
 8005abe:	2303      	movs	r3, #3
 8005ac0:	9300      	str	r3, [sp, #0]
 8005ac2:	2300      	movs	r3, #0
 8005ac4:	2264      	movs	r2, #100	; 0x64
 8005ac6:	490e      	ldr	r1, [pc, #56]	; (8005b00 <xTimerCreateTimerTask+0x5c>)
 8005ac8:	480e      	ldr	r0, [pc, #56]	; (8005b04 <xTimerCreateTimerTask+0x60>)
 8005aca:	f7fe ffbf 	bl	8004a4c <xTaskCreate>
 8005ace:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d10a      	bne.n	8005aec <xTimerCreateTimerTask+0x48>
        __asm volatile
 8005ad6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ada:	f383 8811 	msr	BASEPRI, r3
 8005ade:	f3bf 8f6f 	isb	sy
 8005ae2:	f3bf 8f4f 	dsb	sy
 8005ae6:	603b      	str	r3, [r7, #0]
    }
 8005ae8:	bf00      	nop
 8005aea:	e7fe      	b.n	8005aea <xTimerCreateTimerTask+0x46>
        return xReturn;
 8005aec:	687b      	ldr	r3, [r7, #4]
    }
 8005aee:	4618      	mov	r0, r3
 8005af0:	3708      	adds	r7, #8
 8005af2:	46bd      	mov	sp, r7
 8005af4:	bd80      	pop	{r7, pc}
 8005af6:	bf00      	nop
 8005af8:	200002b4 	.word	0x200002b4
 8005afc:	200002b8 	.word	0x200002b8
 8005b00:	0800713c 	.word	0x0800713c
 8005b04:	08005bad 	.word	0x08005bad

08005b08 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 8005b08:	b580      	push	{r7, lr}
 8005b0a:	b084      	sub	sp, #16
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	60f8      	str	r0, [r7, #12]
 8005b10:	60b9      	str	r1, [r7, #8]
 8005b12:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8005b14:	e008      	b.n	8005b28 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	699b      	ldr	r3, [r3, #24]
 8005b1a:	68ba      	ldr	r2, [r7, #8]
 8005b1c:	4413      	add	r3, r2
 8005b1e:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	6a1b      	ldr	r3, [r3, #32]
 8005b24:	68f8      	ldr	r0, [r7, #12]
 8005b26:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	699a      	ldr	r2, [r3, #24]
 8005b2c:	68bb      	ldr	r3, [r7, #8]
 8005b2e:	18d1      	adds	r1, r2, r3
 8005b30:	68bb      	ldr	r3, [r7, #8]
 8005b32:	687a      	ldr	r2, [r7, #4]
 8005b34:	68f8      	ldr	r0, [r7, #12]
 8005b36:	f000 f8dd 	bl	8005cf4 <prvInsertTimerInActiveList>
 8005b3a:	4603      	mov	r3, r0
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d1ea      	bne.n	8005b16 <prvReloadTimer+0xe>
        }
    }
 8005b40:	bf00      	nop
 8005b42:	bf00      	nop
 8005b44:	3710      	adds	r7, #16
 8005b46:	46bd      	mov	sp, r7
 8005b48:	bd80      	pop	{r7, pc}
	...

08005b4c <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8005b4c:	b580      	push	{r7, lr}
 8005b4e:	b084      	sub	sp, #16
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	6078      	str	r0, [r7, #4]
 8005b54:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005b56:	4b14      	ldr	r3, [pc, #80]	; (8005ba8 <prvProcessExpiredTimer+0x5c>)
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	68db      	ldr	r3, [r3, #12]
 8005b5c:	68db      	ldr	r3, [r3, #12]
 8005b5e:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	3304      	adds	r3, #4
 8005b64:	4618      	mov	r0, r3
 8005b66:	f7fe fb27 	bl	80041b8 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005b70:	f003 0304 	and.w	r3, r3, #4
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d005      	beq.n	8005b84 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 8005b78:	683a      	ldr	r2, [r7, #0]
 8005b7a:	6879      	ldr	r1, [r7, #4]
 8005b7c:	68f8      	ldr	r0, [r7, #12]
 8005b7e:	f7ff ffc3 	bl	8005b08 <prvReloadTimer>
 8005b82:	e008      	b.n	8005b96 <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005b8a:	f023 0301 	bic.w	r3, r3, #1
 8005b8e:	b2da      	uxtb	r2, r3
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	6a1b      	ldr	r3, [r3, #32]
 8005b9a:	68f8      	ldr	r0, [r7, #12]
 8005b9c:	4798      	blx	r3
    }
 8005b9e:	bf00      	nop
 8005ba0:	3710      	adds	r7, #16
 8005ba2:	46bd      	mov	sp, r7
 8005ba4:	bd80      	pop	{r7, pc}
 8005ba6:	bf00      	nop
 8005ba8:	200002ac 	.word	0x200002ac

08005bac <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8005bac:	b580      	push	{r7, lr}
 8005bae:	b084      	sub	sp, #16
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005bb4:	f107 0308 	add.w	r3, r7, #8
 8005bb8:	4618      	mov	r0, r3
 8005bba:	f000 f857 	bl	8005c6c <prvGetNextExpireTime>
 8005bbe:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005bc0:	68bb      	ldr	r3, [r7, #8]
 8005bc2:	4619      	mov	r1, r3
 8005bc4:	68f8      	ldr	r0, [r7, #12]
 8005bc6:	f000 f803 	bl	8005bd0 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8005bca:	f000 f8d5 	bl	8005d78 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005bce:	e7f1      	b.n	8005bb4 <prvTimerTask+0x8>

08005bd0 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8005bd0:	b580      	push	{r7, lr}
 8005bd2:	b084      	sub	sp, #16
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	6078      	str	r0, [r7, #4]
 8005bd8:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8005bda:	f7ff f91b 	bl	8004e14 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005bde:	f107 0308 	add.w	r3, r7, #8
 8005be2:	4618      	mov	r0, r3
 8005be4:	f000 f866 	bl	8005cb4 <prvSampleTimeNow>
 8005be8:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8005bea:	68bb      	ldr	r3, [r7, #8]
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d130      	bne.n	8005c52 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005bf0:	683b      	ldr	r3, [r7, #0]
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d10a      	bne.n	8005c0c <prvProcessTimerOrBlockTask+0x3c>
 8005bf6:	687a      	ldr	r2, [r7, #4]
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	429a      	cmp	r2, r3
 8005bfc:	d806      	bhi.n	8005c0c <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8005bfe:	f7ff f917 	bl	8004e30 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005c02:	68f9      	ldr	r1, [r7, #12]
 8005c04:	6878      	ldr	r0, [r7, #4]
 8005c06:	f7ff ffa1 	bl	8005b4c <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8005c0a:	e024      	b.n	8005c56 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8005c0c:	683b      	ldr	r3, [r7, #0]
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d008      	beq.n	8005c24 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005c12:	4b13      	ldr	r3, [pc, #76]	; (8005c60 <prvProcessTimerOrBlockTask+0x90>)
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d101      	bne.n	8005c20 <prvProcessTimerOrBlockTask+0x50>
 8005c1c:	2301      	movs	r3, #1
 8005c1e:	e000      	b.n	8005c22 <prvProcessTimerOrBlockTask+0x52>
 8005c20:	2300      	movs	r3, #0
 8005c22:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005c24:	4b0f      	ldr	r3, [pc, #60]	; (8005c64 <prvProcessTimerOrBlockTask+0x94>)
 8005c26:	6818      	ldr	r0, [r3, #0]
 8005c28:	687a      	ldr	r2, [r7, #4]
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	1ad3      	subs	r3, r2, r3
 8005c2e:	683a      	ldr	r2, [r7, #0]
 8005c30:	4619      	mov	r1, r3
 8005c32:	f7fe fed7 	bl	80049e4 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8005c36:	f7ff f8fb 	bl	8004e30 <xTaskResumeAll>
 8005c3a:	4603      	mov	r3, r0
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d10a      	bne.n	8005c56 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8005c40:	4b09      	ldr	r3, [pc, #36]	; (8005c68 <prvProcessTimerOrBlockTask+0x98>)
 8005c42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c46:	601a      	str	r2, [r3, #0]
 8005c48:	f3bf 8f4f 	dsb	sy
 8005c4c:	f3bf 8f6f 	isb	sy
    }
 8005c50:	e001      	b.n	8005c56 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8005c52:	f7ff f8ed 	bl	8004e30 <xTaskResumeAll>
    }
 8005c56:	bf00      	nop
 8005c58:	3710      	adds	r7, #16
 8005c5a:	46bd      	mov	sp, r7
 8005c5c:	bd80      	pop	{r7, pc}
 8005c5e:	bf00      	nop
 8005c60:	200002b0 	.word	0x200002b0
 8005c64:	200002b4 	.word	0x200002b4
 8005c68:	e000ed04 	.word	0xe000ed04

08005c6c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8005c6c:	b480      	push	{r7}
 8005c6e:	b085      	sub	sp, #20
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005c74:	4b0e      	ldr	r3, [pc, #56]	; (8005cb0 <prvGetNextExpireTime+0x44>)
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d101      	bne.n	8005c82 <prvGetNextExpireTime+0x16>
 8005c7e:	2201      	movs	r2, #1
 8005c80:	e000      	b.n	8005c84 <prvGetNextExpireTime+0x18>
 8005c82:	2200      	movs	r2, #0
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d105      	bne.n	8005c9c <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005c90:	4b07      	ldr	r3, [pc, #28]	; (8005cb0 <prvGetNextExpireTime+0x44>)
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	68db      	ldr	r3, [r3, #12]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	60fb      	str	r3, [r7, #12]
 8005c9a:	e001      	b.n	8005ca0 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8005c9c:	2300      	movs	r3, #0
 8005c9e:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8005ca0:	68fb      	ldr	r3, [r7, #12]
    }
 8005ca2:	4618      	mov	r0, r3
 8005ca4:	3714      	adds	r7, #20
 8005ca6:	46bd      	mov	sp, r7
 8005ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cac:	4770      	bx	lr
 8005cae:	bf00      	nop
 8005cb0:	200002ac 	.word	0x200002ac

08005cb4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8005cb4:	b580      	push	{r7, lr}
 8005cb6:	b084      	sub	sp, #16
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8005cbc:	f7ff f9b4 	bl	8005028 <xTaskGetTickCount>
 8005cc0:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8005cc2:	4b0b      	ldr	r3, [pc, #44]	; (8005cf0 <prvSampleTimeNow+0x3c>)
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	68fa      	ldr	r2, [r7, #12]
 8005cc8:	429a      	cmp	r2, r3
 8005cca:	d205      	bcs.n	8005cd8 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8005ccc:	f000 f912 	bl	8005ef4 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	2201      	movs	r2, #1
 8005cd4:	601a      	str	r2, [r3, #0]
 8005cd6:	e002      	b.n	8005cde <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	2200      	movs	r2, #0
 8005cdc:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8005cde:	4a04      	ldr	r2, [pc, #16]	; (8005cf0 <prvSampleTimeNow+0x3c>)
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8005ce4:	68fb      	ldr	r3, [r7, #12]
    }
 8005ce6:	4618      	mov	r0, r3
 8005ce8:	3710      	adds	r7, #16
 8005cea:	46bd      	mov	sp, r7
 8005cec:	bd80      	pop	{r7, pc}
 8005cee:	bf00      	nop
 8005cf0:	200002bc 	.word	0x200002bc

08005cf4 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8005cf4:	b580      	push	{r7, lr}
 8005cf6:	b086      	sub	sp, #24
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	60f8      	str	r0, [r7, #12]
 8005cfc:	60b9      	str	r1, [r7, #8]
 8005cfe:	607a      	str	r2, [r7, #4]
 8005d00:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8005d02:	2300      	movs	r3, #0
 8005d04:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	68ba      	ldr	r2, [r7, #8]
 8005d0a:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	68fa      	ldr	r2, [r7, #12]
 8005d10:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8005d12:	68ba      	ldr	r2, [r7, #8]
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	429a      	cmp	r2, r3
 8005d18:	d812      	bhi.n	8005d40 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005d1a:	687a      	ldr	r2, [r7, #4]
 8005d1c:	683b      	ldr	r3, [r7, #0]
 8005d1e:	1ad2      	subs	r2, r2, r3
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	699b      	ldr	r3, [r3, #24]
 8005d24:	429a      	cmp	r2, r3
 8005d26:	d302      	bcc.n	8005d2e <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8005d28:	2301      	movs	r3, #1
 8005d2a:	617b      	str	r3, [r7, #20]
 8005d2c:	e01b      	b.n	8005d66 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005d2e:	4b10      	ldr	r3, [pc, #64]	; (8005d70 <prvInsertTimerInActiveList+0x7c>)
 8005d30:	681a      	ldr	r2, [r3, #0]
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	3304      	adds	r3, #4
 8005d36:	4619      	mov	r1, r3
 8005d38:	4610      	mov	r0, r2
 8005d3a:	f7fe fa04 	bl	8004146 <vListInsert>
 8005d3e:	e012      	b.n	8005d66 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005d40:	687a      	ldr	r2, [r7, #4]
 8005d42:	683b      	ldr	r3, [r7, #0]
 8005d44:	429a      	cmp	r2, r3
 8005d46:	d206      	bcs.n	8005d56 <prvInsertTimerInActiveList+0x62>
 8005d48:	68ba      	ldr	r2, [r7, #8]
 8005d4a:	683b      	ldr	r3, [r7, #0]
 8005d4c:	429a      	cmp	r2, r3
 8005d4e:	d302      	bcc.n	8005d56 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8005d50:	2301      	movs	r3, #1
 8005d52:	617b      	str	r3, [r7, #20]
 8005d54:	e007      	b.n	8005d66 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005d56:	4b07      	ldr	r3, [pc, #28]	; (8005d74 <prvInsertTimerInActiveList+0x80>)
 8005d58:	681a      	ldr	r2, [r3, #0]
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	3304      	adds	r3, #4
 8005d5e:	4619      	mov	r1, r3
 8005d60:	4610      	mov	r0, r2
 8005d62:	f7fe f9f0 	bl	8004146 <vListInsert>
            }
        }

        return xProcessTimerNow;
 8005d66:	697b      	ldr	r3, [r7, #20]
    }
 8005d68:	4618      	mov	r0, r3
 8005d6a:	3718      	adds	r7, #24
 8005d6c:	46bd      	mov	sp, r7
 8005d6e:	bd80      	pop	{r7, pc}
 8005d70:	200002b0 	.word	0x200002b0
 8005d74:	200002ac 	.word	0x200002ac

08005d78 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8005d78:	b580      	push	{r7, lr}
 8005d7a:	b088      	sub	sp, #32
 8005d7c:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005d7e:	e0a6      	b.n	8005ece <prvProcessReceivedCommands+0x156>
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005d80:	68bb      	ldr	r3, [r7, #8]
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	f2c0 80a3 	blt.w	8005ece <prvProcessReceivedCommands+0x156>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005d88:	693b      	ldr	r3, [r7, #16]
 8005d8a:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005d8c:	69fb      	ldr	r3, [r7, #28]
 8005d8e:	695b      	ldr	r3, [r3, #20]
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d004      	beq.n	8005d9e <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005d94:	69fb      	ldr	r3, [r7, #28]
 8005d96:	3304      	adds	r3, #4
 8005d98:	4618      	mov	r0, r3
 8005d9a:	f7fe fa0d 	bl	80041b8 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005d9e:	1d3b      	adds	r3, r7, #4
 8005da0:	4618      	mov	r0, r3
 8005da2:	f7ff ff87 	bl	8005cb4 <prvSampleTimeNow>
 8005da6:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 8005da8:	68bb      	ldr	r3, [r7, #8]
 8005daa:	3b01      	subs	r3, #1
 8005dac:	2b08      	cmp	r3, #8
 8005dae:	f200 808d 	bhi.w	8005ecc <prvProcessReceivedCommands+0x154>
 8005db2:	a201      	add	r2, pc, #4	; (adr r2, 8005db8 <prvProcessReceivedCommands+0x40>)
 8005db4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005db8:	08005ddd 	.word	0x08005ddd
 8005dbc:	08005ddd 	.word	0x08005ddd
 8005dc0:	08005e45 	.word	0x08005e45
 8005dc4:	08005e59 	.word	0x08005e59
 8005dc8:	08005ea3 	.word	0x08005ea3
 8005dcc:	08005ddd 	.word	0x08005ddd
 8005dd0:	08005ddd 	.word	0x08005ddd
 8005dd4:	08005e45 	.word	0x08005e45
 8005dd8:	08005e59 	.word	0x08005e59
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005ddc:	69fb      	ldr	r3, [r7, #28]
 8005dde:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005de2:	f043 0301 	orr.w	r3, r3, #1
 8005de6:	b2da      	uxtb	r2, r3
 8005de8:	69fb      	ldr	r3, [r7, #28]
 8005dea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005dee:	68fa      	ldr	r2, [r7, #12]
 8005df0:	69fb      	ldr	r3, [r7, #28]
 8005df2:	699b      	ldr	r3, [r3, #24]
 8005df4:	18d1      	adds	r1, r2, r3
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	69ba      	ldr	r2, [r7, #24]
 8005dfa:	69f8      	ldr	r0, [r7, #28]
 8005dfc:	f7ff ff7a 	bl	8005cf4 <prvInsertTimerInActiveList>
 8005e00:	4603      	mov	r3, r0
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d063      	beq.n	8005ece <prvProcessReceivedCommands+0x156>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005e06:	69fb      	ldr	r3, [r7, #28]
 8005e08:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005e0c:	f003 0304 	and.w	r3, r3, #4
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d009      	beq.n	8005e28 <prvProcessReceivedCommands+0xb0>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 8005e14:	68fa      	ldr	r2, [r7, #12]
 8005e16:	69fb      	ldr	r3, [r7, #28]
 8005e18:	699b      	ldr	r3, [r3, #24]
 8005e1a:	4413      	add	r3, r2
 8005e1c:	69ba      	ldr	r2, [r7, #24]
 8005e1e:	4619      	mov	r1, r3
 8005e20:	69f8      	ldr	r0, [r7, #28]
 8005e22:	f7ff fe71 	bl	8005b08 <prvReloadTimer>
 8005e26:	e008      	b.n	8005e3a <prvProcessReceivedCommands+0xc2>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8005e28:	69fb      	ldr	r3, [r7, #28]
 8005e2a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005e2e:	f023 0301 	bic.w	r3, r3, #1
 8005e32:	b2da      	uxtb	r2, r3
 8005e34:	69fb      	ldr	r3, [r7, #28]
 8005e36:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005e3a:	69fb      	ldr	r3, [r7, #28]
 8005e3c:	6a1b      	ldr	r3, [r3, #32]
 8005e3e:	69f8      	ldr	r0, [r7, #28]
 8005e40:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 8005e42:	e044      	b.n	8005ece <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8005e44:	69fb      	ldr	r3, [r7, #28]
 8005e46:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005e4a:	f023 0301 	bic.w	r3, r3, #1
 8005e4e:	b2da      	uxtb	r2, r3
 8005e50:	69fb      	ldr	r3, [r7, #28]
 8005e52:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
                        break;
 8005e56:	e03a      	b.n	8005ece <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005e58:	69fb      	ldr	r3, [r7, #28]
 8005e5a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005e5e:	f043 0301 	orr.w	r3, r3, #1
 8005e62:	b2da      	uxtb	r2, r3
 8005e64:	69fb      	ldr	r3, [r7, #28]
 8005e66:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005e6a:	68fa      	ldr	r2, [r7, #12]
 8005e6c:	69fb      	ldr	r3, [r7, #28]
 8005e6e:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005e70:	69fb      	ldr	r3, [r7, #28]
 8005e72:	699b      	ldr	r3, [r3, #24]
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d10a      	bne.n	8005e8e <prvProcessReceivedCommands+0x116>
        __asm volatile
 8005e78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e7c:	f383 8811 	msr	BASEPRI, r3
 8005e80:	f3bf 8f6f 	isb	sy
 8005e84:	f3bf 8f4f 	dsb	sy
 8005e88:	617b      	str	r3, [r7, #20]
    }
 8005e8a:	bf00      	nop
 8005e8c:	e7fe      	b.n	8005e8c <prvProcessReceivedCommands+0x114>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005e8e:	69fb      	ldr	r3, [r7, #28]
 8005e90:	699a      	ldr	r2, [r3, #24]
 8005e92:	69bb      	ldr	r3, [r7, #24]
 8005e94:	18d1      	adds	r1, r2, r3
 8005e96:	69bb      	ldr	r3, [r7, #24]
 8005e98:	69ba      	ldr	r2, [r7, #24]
 8005e9a:	69f8      	ldr	r0, [r7, #28]
 8005e9c:	f7ff ff2a 	bl	8005cf4 <prvInsertTimerInActiveList>
                        break;
 8005ea0:	e015      	b.n	8005ece <prvProcessReceivedCommands+0x156>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8005ea2:	69fb      	ldr	r3, [r7, #28]
 8005ea4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005ea8:	f003 0302 	and.w	r3, r3, #2
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d103      	bne.n	8005eb8 <prvProcessReceivedCommands+0x140>
                            {
                                vPortFree( pxTimer );
 8005eb0:	69f8      	ldr	r0, [r7, #28]
 8005eb2:	f000 fb33 	bl	800651c <vPortFree>
 8005eb6:	e00a      	b.n	8005ece <prvProcessReceivedCommands+0x156>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8005eb8:	69fb      	ldr	r3, [r7, #28]
 8005eba:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005ebe:	f023 0301 	bic.w	r3, r3, #1
 8005ec2:	b2da      	uxtb	r2, r3
 8005ec4:	69fb      	ldr	r3, [r7, #28]
 8005ec6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8005eca:	e000      	b.n	8005ece <prvProcessReceivedCommands+0x156>

                    default:
                        /* Don't expect to get here. */
                        break;
 8005ecc:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005ece:	4b08      	ldr	r3, [pc, #32]	; (8005ef0 <prvProcessReceivedCommands+0x178>)
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	f107 0108 	add.w	r1, r7, #8
 8005ed6:	2200      	movs	r2, #0
 8005ed8:	4618      	mov	r0, r3
 8005eda:	f7fe fb93 	bl	8004604 <xQueueReceive>
 8005ede:	4603      	mov	r3, r0
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	f47f af4d 	bne.w	8005d80 <prvProcessReceivedCommands+0x8>
                }
            }
        }
    }
 8005ee6:	bf00      	nop
 8005ee8:	bf00      	nop
 8005eea:	3720      	adds	r7, #32
 8005eec:	46bd      	mov	sp, r7
 8005eee:	bd80      	pop	{r7, pc}
 8005ef0:	200002b4 	.word	0x200002b4

08005ef4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8005ef4:	b580      	push	{r7, lr}
 8005ef6:	b082      	sub	sp, #8
 8005ef8:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005efa:	e009      	b.n	8005f10 <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005efc:	4b0e      	ldr	r3, [pc, #56]	; (8005f38 <prvSwitchTimerLists+0x44>)
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	68db      	ldr	r3, [r3, #12]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 8005f06:	f04f 31ff 	mov.w	r1, #4294967295
 8005f0a:	6838      	ldr	r0, [r7, #0]
 8005f0c:	f7ff fe1e 	bl	8005b4c <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005f10:	4b09      	ldr	r3, [pc, #36]	; (8005f38 <prvSwitchTimerLists+0x44>)
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d1f0      	bne.n	8005efc <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 8005f1a:	4b07      	ldr	r3, [pc, #28]	; (8005f38 <prvSwitchTimerLists+0x44>)
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 8005f20:	4b06      	ldr	r3, [pc, #24]	; (8005f3c <prvSwitchTimerLists+0x48>)
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	4a04      	ldr	r2, [pc, #16]	; (8005f38 <prvSwitchTimerLists+0x44>)
 8005f26:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8005f28:	4a04      	ldr	r2, [pc, #16]	; (8005f3c <prvSwitchTimerLists+0x48>)
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	6013      	str	r3, [r2, #0]
    }
 8005f2e:	bf00      	nop
 8005f30:	3708      	adds	r7, #8
 8005f32:	46bd      	mov	sp, r7
 8005f34:	bd80      	pop	{r7, pc}
 8005f36:	bf00      	nop
 8005f38:	200002ac 	.word	0x200002ac
 8005f3c:	200002b0 	.word	0x200002b0

08005f40 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8005f40:	b580      	push	{r7, lr}
 8005f42:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8005f44:	f000 f958 	bl	80061f8 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8005f48:	4b0d      	ldr	r3, [pc, #52]	; (8005f80 <prvCheckForValidListAndQueue+0x40>)
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d113      	bne.n	8005f78 <prvCheckForValidListAndQueue+0x38>
            {
                vListInitialise( &xActiveTimerList1 );
 8005f50:	480c      	ldr	r0, [pc, #48]	; (8005f84 <prvCheckForValidListAndQueue+0x44>)
 8005f52:	f7fe f8cb 	bl	80040ec <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8005f56:	480c      	ldr	r0, [pc, #48]	; (8005f88 <prvCheckForValidListAndQueue+0x48>)
 8005f58:	f7fe f8c8 	bl	80040ec <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8005f5c:	4b0b      	ldr	r3, [pc, #44]	; (8005f8c <prvCheckForValidListAndQueue+0x4c>)
 8005f5e:	4a09      	ldr	r2, [pc, #36]	; (8005f84 <prvCheckForValidListAndQueue+0x44>)
 8005f60:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8005f62:	4b0b      	ldr	r3, [pc, #44]	; (8005f90 <prvCheckForValidListAndQueue+0x50>)
 8005f64:	4a08      	ldr	r2, [pc, #32]	; (8005f88 <prvCheckForValidListAndQueue+0x48>)
 8005f66:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8005f68:	2200      	movs	r2, #0
 8005f6a:	210c      	movs	r1, #12
 8005f6c:	2005      	movs	r0, #5
 8005f6e:	f7fe f9dd 	bl	800432c <xQueueGenericCreate>
 8005f72:	4603      	mov	r3, r0
 8005f74:	4a02      	ldr	r2, [pc, #8]	; (8005f80 <prvCheckForValidListAndQueue+0x40>)
 8005f76:	6013      	str	r3, [r2, #0]
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8005f78:	f000 f96e 	bl	8006258 <vPortExitCritical>
    }
 8005f7c:	bf00      	nop
 8005f7e:	bd80      	pop	{r7, pc}
 8005f80:	200002b4 	.word	0x200002b4
 8005f84:	20000284 	.word	0x20000284
 8005f88:	20000298 	.word	0x20000298
 8005f8c:	200002ac 	.word	0x200002ac
 8005f90:	200002b0 	.word	0x200002b0

08005f94 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8005f94:	b480      	push	{r7}
 8005f96:	b085      	sub	sp, #20
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	60f8      	str	r0, [r7, #12]
 8005f9c:	60b9      	str	r1, [r7, #8]
 8005f9e:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	3b04      	subs	r3, #4
 8005fa4:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005fac:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	3b04      	subs	r3, #4
 8005fb2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8005fb4:	68bb      	ldr	r3, [r7, #8]
 8005fb6:	f023 0201 	bic.w	r2, r3, #1
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	3b04      	subs	r3, #4
 8005fc2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8005fc4:	4a0c      	ldr	r2, [pc, #48]	; (8005ff8 <pxPortInitialiseStack+0x64>)
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	3b14      	subs	r3, #20
 8005fce:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8005fd0:	687a      	ldr	r2, [r7, #4]
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	3b04      	subs	r3, #4
 8005fda:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	f06f 0202 	mvn.w	r2, #2
 8005fe2:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	3b20      	subs	r3, #32
 8005fe8:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8005fea:	68fb      	ldr	r3, [r7, #12]
}
 8005fec:	4618      	mov	r0, r3
 8005fee:	3714      	adds	r7, #20
 8005ff0:	46bd      	mov	sp, r7
 8005ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff6:	4770      	bx	lr
 8005ff8:	08005ffd 	.word	0x08005ffd

08005ffc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005ffc:	b480      	push	{r7}
 8005ffe:	b085      	sub	sp, #20
 8006000:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8006002:	2300      	movs	r3, #0
 8006004:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8006006:	4b12      	ldr	r3, [pc, #72]	; (8006050 <prvTaskExitError+0x54>)
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800600e:	d00a      	beq.n	8006026 <prvTaskExitError+0x2a>
        __asm volatile
 8006010:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006014:	f383 8811 	msr	BASEPRI, r3
 8006018:	f3bf 8f6f 	isb	sy
 800601c:	f3bf 8f4f 	dsb	sy
 8006020:	60fb      	str	r3, [r7, #12]
    }
 8006022:	bf00      	nop
 8006024:	e7fe      	b.n	8006024 <prvTaskExitError+0x28>
        __asm volatile
 8006026:	f04f 0350 	mov.w	r3, #80	; 0x50
 800602a:	f383 8811 	msr	BASEPRI, r3
 800602e:	f3bf 8f6f 	isb	sy
 8006032:	f3bf 8f4f 	dsb	sy
 8006036:	60bb      	str	r3, [r7, #8]
    }
 8006038:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 800603a:	bf00      	nop
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	2b00      	cmp	r3, #0
 8006040:	d0fc      	beq.n	800603c <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8006042:	bf00      	nop
 8006044:	bf00      	nop
 8006046:	3714      	adds	r7, #20
 8006048:	46bd      	mov	sp, r7
 800604a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800604e:	4770      	bx	lr
 8006050:	20000010 	.word	0x20000010
	...

08006060 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8006060:	4b07      	ldr	r3, [pc, #28]	; (8006080 <pxCurrentTCBConst2>)
 8006062:	6819      	ldr	r1, [r3, #0]
 8006064:	6808      	ldr	r0, [r1, #0]
 8006066:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800606a:	f380 8809 	msr	PSP, r0
 800606e:	f3bf 8f6f 	isb	sy
 8006072:	f04f 0000 	mov.w	r0, #0
 8006076:	f380 8811 	msr	BASEPRI, r0
 800607a:	4770      	bx	lr
 800607c:	f3af 8000 	nop.w

08006080 <pxCurrentTCBConst2>:
 8006080:	20000180 	.word	0x20000180
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8006084:	bf00      	nop
 8006086:	bf00      	nop

08006088 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8006088:	4808      	ldr	r0, [pc, #32]	; (80060ac <prvPortStartFirstTask+0x24>)
 800608a:	6800      	ldr	r0, [r0, #0]
 800608c:	6800      	ldr	r0, [r0, #0]
 800608e:	f380 8808 	msr	MSP, r0
 8006092:	f04f 0000 	mov.w	r0, #0
 8006096:	f380 8814 	msr	CONTROL, r0
 800609a:	b662      	cpsie	i
 800609c:	b661      	cpsie	f
 800609e:	f3bf 8f4f 	dsb	sy
 80060a2:	f3bf 8f6f 	isb	sy
 80060a6:	df00      	svc	0
 80060a8:	bf00      	nop
 80060aa:	0000      	.short	0x0000
 80060ac:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 80060b0:	bf00      	nop
 80060b2:	bf00      	nop

080060b4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80060b4:	b580      	push	{r7, lr}
 80060b6:	b086      	sub	sp, #24
 80060b8:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80060ba:	4b46      	ldr	r3, [pc, #280]	; (80061d4 <xPortStartScheduler+0x120>)
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	4a46      	ldr	r2, [pc, #280]	; (80061d8 <xPortStartScheduler+0x124>)
 80060c0:	4293      	cmp	r3, r2
 80060c2:	d10a      	bne.n	80060da <xPortStartScheduler+0x26>
        __asm volatile
 80060c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060c8:	f383 8811 	msr	BASEPRI, r3
 80060cc:	f3bf 8f6f 	isb	sy
 80060d0:	f3bf 8f4f 	dsb	sy
 80060d4:	613b      	str	r3, [r7, #16]
    }
 80060d6:	bf00      	nop
 80060d8:	e7fe      	b.n	80060d8 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80060da:	4b3e      	ldr	r3, [pc, #248]	; (80061d4 <xPortStartScheduler+0x120>)
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	4a3f      	ldr	r2, [pc, #252]	; (80061dc <xPortStartScheduler+0x128>)
 80060e0:	4293      	cmp	r3, r2
 80060e2:	d10a      	bne.n	80060fa <xPortStartScheduler+0x46>
        __asm volatile
 80060e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060e8:	f383 8811 	msr	BASEPRI, r3
 80060ec:	f3bf 8f6f 	isb	sy
 80060f0:	f3bf 8f4f 	dsb	sy
 80060f4:	60fb      	str	r3, [r7, #12]
    }
 80060f6:	bf00      	nop
 80060f8:	e7fe      	b.n	80060f8 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint32_t ulOriginalPriority;
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80060fa:	4b39      	ldr	r3, [pc, #228]	; (80061e0 <xPortStartScheduler+0x12c>)
 80060fc:	617b      	str	r3, [r7, #20]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ulOriginalPriority = *pucFirstUserPriorityRegister;
 80060fe:	697b      	ldr	r3, [r7, #20]
 8006100:	781b      	ldrb	r3, [r3, #0]
 8006102:	b2db      	uxtb	r3, r3
 8006104:	607b      	str	r3, [r7, #4]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006106:	697b      	ldr	r3, [r7, #20]
 8006108:	22ff      	movs	r2, #255	; 0xff
 800610a:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800610c:	697b      	ldr	r3, [r7, #20]
 800610e:	781b      	ldrb	r3, [r3, #0]
 8006110:	b2db      	uxtb	r3, r3
 8006112:	70fb      	strb	r3, [r7, #3]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006114:	78fb      	ldrb	r3, [r7, #3]
 8006116:	b2db      	uxtb	r3, r3
 8006118:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800611c:	b2da      	uxtb	r2, r3
 800611e:	4b31      	ldr	r3, [pc, #196]	; (80061e4 <xPortStartScheduler+0x130>)
 8006120:	701a      	strb	r2, [r3, #0]

        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */
        ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006122:	4b31      	ldr	r3, [pc, #196]	; (80061e8 <xPortStartScheduler+0x134>)
 8006124:	2207      	movs	r2, #7
 8006126:	601a      	str	r2, [r3, #0]

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006128:	e009      	b.n	800613e <xPortStartScheduler+0x8a>
        {
            ulMaxPRIGROUPValue--;
 800612a:	4b2f      	ldr	r3, [pc, #188]	; (80061e8 <xPortStartScheduler+0x134>)
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	3b01      	subs	r3, #1
 8006130:	4a2d      	ldr	r2, [pc, #180]	; (80061e8 <xPortStartScheduler+0x134>)
 8006132:	6013      	str	r3, [r2, #0]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006134:	78fb      	ldrb	r3, [r7, #3]
 8006136:	b2db      	uxtb	r3, r3
 8006138:	005b      	lsls	r3, r3, #1
 800613a:	b2db      	uxtb	r3, r3
 800613c:	70fb      	strb	r3, [r7, #3]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800613e:	78fb      	ldrb	r3, [r7, #3]
 8006140:	b2db      	uxtb	r3, r3
 8006142:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006146:	2b80      	cmp	r3, #128	; 0x80
 8006148:	d0ef      	beq.n	800612a <xPortStartScheduler+0x76>
        #ifdef configPRIO_BITS
        {
            /* Check the FreeRTOS configuration that defines the number of
             * priority bits matches the number of priority bits actually queried
             * from the hardware. */
            configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800614a:	4b27      	ldr	r3, [pc, #156]	; (80061e8 <xPortStartScheduler+0x134>)
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	f1c3 0307 	rsb	r3, r3, #7
 8006152:	2b04      	cmp	r3, #4
 8006154:	d00a      	beq.n	800616c <xPortStartScheduler+0xb8>
        __asm volatile
 8006156:	f04f 0350 	mov.w	r3, #80	; 0x50
 800615a:	f383 8811 	msr	BASEPRI, r3
 800615e:	f3bf 8f6f 	isb	sy
 8006162:	f3bf 8f4f 	dsb	sy
 8006166:	60bb      	str	r3, [r7, #8]
    }
 8006168:	bf00      	nop
 800616a:	e7fe      	b.n	800616a <xPortStartScheduler+0xb6>
        }
        #endif

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800616c:	4b1e      	ldr	r3, [pc, #120]	; (80061e8 <xPortStartScheduler+0x134>)
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	021b      	lsls	r3, r3, #8
 8006172:	4a1d      	ldr	r2, [pc, #116]	; (80061e8 <xPortStartScheduler+0x134>)
 8006174:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006176:	4b1c      	ldr	r3, [pc, #112]	; (80061e8 <xPortStartScheduler+0x134>)
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800617e:	4a1a      	ldr	r2, [pc, #104]	; (80061e8 <xPortStartScheduler+0x134>)
 8006180:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ulOriginalPriority;
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	b2da      	uxtb	r2, r3
 8006186:	697b      	ldr	r3, [r7, #20]
 8006188:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 800618a:	4b18      	ldr	r3, [pc, #96]	; (80061ec <xPortStartScheduler+0x138>)
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	4a17      	ldr	r2, [pc, #92]	; (80061ec <xPortStartScheduler+0x138>)
 8006190:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006194:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8006196:	4b15      	ldr	r3, [pc, #84]	; (80061ec <xPortStartScheduler+0x138>)
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	4a14      	ldr	r2, [pc, #80]	; (80061ec <xPortStartScheduler+0x138>)
 800619c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80061a0:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 80061a2:	f000 f8db 	bl	800635c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 80061a6:	4b12      	ldr	r3, [pc, #72]	; (80061f0 <xPortStartScheduler+0x13c>)
 80061a8:	2200      	movs	r2, #0
 80061aa:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 80061ac:	f000 f8f0 	bl	8006390 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80061b0:	4b10      	ldr	r3, [pc, #64]	; (80061f4 <xPortStartScheduler+0x140>)
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	4a0f      	ldr	r2, [pc, #60]	; (80061f4 <xPortStartScheduler+0x140>)
 80061b6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80061ba:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 80061bc:	f7ff ff64 	bl	8006088 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 80061c0:	f7ff f858 	bl	8005274 <vTaskSwitchContext>
    prvTaskExitError();
 80061c4:	f7ff ff1a 	bl	8005ffc <prvTaskExitError>

    /* Should not get here! */
    return 0;
 80061c8:	2300      	movs	r3, #0
}
 80061ca:	4618      	mov	r0, r3
 80061cc:	3718      	adds	r7, #24
 80061ce:	46bd      	mov	sp, r7
 80061d0:	bd80      	pop	{r7, pc}
 80061d2:	bf00      	nop
 80061d4:	e000ed00 	.word	0xe000ed00
 80061d8:	410fc271 	.word	0x410fc271
 80061dc:	410fc270 	.word	0x410fc270
 80061e0:	e000e400 	.word	0xe000e400
 80061e4:	200002c0 	.word	0x200002c0
 80061e8:	200002c4 	.word	0x200002c4
 80061ec:	e000ed20 	.word	0xe000ed20
 80061f0:	20000010 	.word	0x20000010
 80061f4:	e000ef34 	.word	0xe000ef34

080061f8 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80061f8:	b480      	push	{r7}
 80061fa:	b083      	sub	sp, #12
 80061fc:	af00      	add	r7, sp, #0
        __asm volatile
 80061fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006202:	f383 8811 	msr	BASEPRI, r3
 8006206:	f3bf 8f6f 	isb	sy
 800620a:	f3bf 8f4f 	dsb	sy
 800620e:	607b      	str	r3, [r7, #4]
    }
 8006210:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8006212:	4b0f      	ldr	r3, [pc, #60]	; (8006250 <vPortEnterCritical+0x58>)
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	3301      	adds	r3, #1
 8006218:	4a0d      	ldr	r2, [pc, #52]	; (8006250 <vPortEnterCritical+0x58>)
 800621a:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 800621c:	4b0c      	ldr	r3, [pc, #48]	; (8006250 <vPortEnterCritical+0x58>)
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	2b01      	cmp	r3, #1
 8006222:	d10f      	bne.n	8006244 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006224:	4b0b      	ldr	r3, [pc, #44]	; (8006254 <vPortEnterCritical+0x5c>)
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	b2db      	uxtb	r3, r3
 800622a:	2b00      	cmp	r3, #0
 800622c:	d00a      	beq.n	8006244 <vPortEnterCritical+0x4c>
        __asm volatile
 800622e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006232:	f383 8811 	msr	BASEPRI, r3
 8006236:	f3bf 8f6f 	isb	sy
 800623a:	f3bf 8f4f 	dsb	sy
 800623e:	603b      	str	r3, [r7, #0]
    }
 8006240:	bf00      	nop
 8006242:	e7fe      	b.n	8006242 <vPortEnterCritical+0x4a>
    }
}
 8006244:	bf00      	nop
 8006246:	370c      	adds	r7, #12
 8006248:	46bd      	mov	sp, r7
 800624a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800624e:	4770      	bx	lr
 8006250:	20000010 	.word	0x20000010
 8006254:	e000ed04 	.word	0xe000ed04

08006258 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006258:	b480      	push	{r7}
 800625a:	b083      	sub	sp, #12
 800625c:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 800625e:	4b12      	ldr	r3, [pc, #72]	; (80062a8 <vPortExitCritical+0x50>)
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	2b00      	cmp	r3, #0
 8006264:	d10a      	bne.n	800627c <vPortExitCritical+0x24>
        __asm volatile
 8006266:	f04f 0350 	mov.w	r3, #80	; 0x50
 800626a:	f383 8811 	msr	BASEPRI, r3
 800626e:	f3bf 8f6f 	isb	sy
 8006272:	f3bf 8f4f 	dsb	sy
 8006276:	607b      	str	r3, [r7, #4]
    }
 8006278:	bf00      	nop
 800627a:	e7fe      	b.n	800627a <vPortExitCritical+0x22>
    uxCriticalNesting--;
 800627c:	4b0a      	ldr	r3, [pc, #40]	; (80062a8 <vPortExitCritical+0x50>)
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	3b01      	subs	r3, #1
 8006282:	4a09      	ldr	r2, [pc, #36]	; (80062a8 <vPortExitCritical+0x50>)
 8006284:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8006286:	4b08      	ldr	r3, [pc, #32]	; (80062a8 <vPortExitCritical+0x50>)
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	2b00      	cmp	r3, #0
 800628c:	d105      	bne.n	800629a <vPortExitCritical+0x42>
 800628e:	2300      	movs	r3, #0
 8006290:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8006292:	683b      	ldr	r3, [r7, #0]
 8006294:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8006298:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 800629a:	bf00      	nop
 800629c:	370c      	adds	r7, #12
 800629e:	46bd      	mov	sp, r7
 80062a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a4:	4770      	bx	lr
 80062a6:	bf00      	nop
 80062a8:	20000010 	.word	0x20000010
 80062ac:	00000000 	.word	0x00000000

080062b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 80062b0:	f3ef 8009 	mrs	r0, PSP
 80062b4:	f3bf 8f6f 	isb	sy
 80062b8:	4b15      	ldr	r3, [pc, #84]	; (8006310 <pxCurrentTCBConst>)
 80062ba:	681a      	ldr	r2, [r3, #0]
 80062bc:	f01e 0f10 	tst.w	lr, #16
 80062c0:	bf08      	it	eq
 80062c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80062c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062ca:	6010      	str	r0, [r2, #0]
 80062cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80062d0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80062d4:	f380 8811 	msr	BASEPRI, r0
 80062d8:	f3bf 8f4f 	dsb	sy
 80062dc:	f3bf 8f6f 	isb	sy
 80062e0:	f7fe ffc8 	bl	8005274 <vTaskSwitchContext>
 80062e4:	f04f 0000 	mov.w	r0, #0
 80062e8:	f380 8811 	msr	BASEPRI, r0
 80062ec:	bc09      	pop	{r0, r3}
 80062ee:	6819      	ldr	r1, [r3, #0]
 80062f0:	6808      	ldr	r0, [r1, #0]
 80062f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062f6:	f01e 0f10 	tst.w	lr, #16
 80062fa:	bf08      	it	eq
 80062fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006300:	f380 8809 	msr	PSP, r0
 8006304:	f3bf 8f6f 	isb	sy
 8006308:	4770      	bx	lr
 800630a:	bf00      	nop
 800630c:	f3af 8000 	nop.w

08006310 <pxCurrentTCBConst>:
 8006310:	20000180 	.word	0x20000180
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8006314:	bf00      	nop
 8006316:	bf00      	nop

08006318 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006318:	b580      	push	{r7, lr}
 800631a:	b082      	sub	sp, #8
 800631c:	af00      	add	r7, sp, #0
        __asm volatile
 800631e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006322:	f383 8811 	msr	BASEPRI, r3
 8006326:	f3bf 8f6f 	isb	sy
 800632a:	f3bf 8f4f 	dsb	sy
 800632e:	607b      	str	r3, [r7, #4]
    }
 8006330:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8006332:	f7fe fe89 	bl	8005048 <xTaskIncrementTick>
 8006336:	4603      	mov	r3, r0
 8006338:	2b00      	cmp	r3, #0
 800633a:	d003      	beq.n	8006344 <SysTick_Handler+0x2c>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800633c:	4b06      	ldr	r3, [pc, #24]	; (8006358 <SysTick_Handler+0x40>)
 800633e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006342:	601a      	str	r2, [r3, #0]
 8006344:	2300      	movs	r3, #0
 8006346:	603b      	str	r3, [r7, #0]
        __asm volatile
 8006348:	683b      	ldr	r3, [r7, #0]
 800634a:	f383 8811 	msr	BASEPRI, r3
    }
 800634e:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 8006350:	bf00      	nop
 8006352:	3708      	adds	r7, #8
 8006354:	46bd      	mov	sp, r7
 8006356:	bd80      	pop	{r7, pc}
 8006358:	e000ed04 	.word	0xe000ed04

0800635c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800635c:	b480      	push	{r7}
 800635e:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006360:	4b08      	ldr	r3, [pc, #32]	; (8006384 <vPortSetupTimerInterrupt+0x28>)
 8006362:	2200      	movs	r2, #0
 8006364:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006366:	4b08      	ldr	r3, [pc, #32]	; (8006388 <vPortSetupTimerInterrupt+0x2c>)
 8006368:	2200      	movs	r2, #0
 800636a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800636c:	4b07      	ldr	r3, [pc, #28]	; (800638c <vPortSetupTimerInterrupt+0x30>)
 800636e:	f643 627f 	movw	r2, #15999	; 0x3e7f
 8006372:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006374:	4b03      	ldr	r3, [pc, #12]	; (8006384 <vPortSetupTimerInterrupt+0x28>)
 8006376:	2207      	movs	r2, #7
 8006378:	601a      	str	r2, [r3, #0]
}
 800637a:	bf00      	nop
 800637c:	46bd      	mov	sp, r7
 800637e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006382:	4770      	bx	lr
 8006384:	e000e010 	.word	0xe000e010
 8006388:	e000e018 	.word	0xe000e018
 800638c:	e000e014 	.word	0xe000e014

08006390 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8006390:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80063a0 <vPortEnableVFP+0x10>
 8006394:	6801      	ldr	r1, [r0, #0]
 8006396:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800639a:	6001      	str	r1, [r0, #0]
 800639c:	4770      	bx	lr
 800639e:	0000      	.short	0x0000
 80063a0:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 80063a4:	bf00      	nop
 80063a6:	bf00      	nop

080063a8 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 80063a8:	b580      	push	{r7, lr}
 80063aa:	b08a      	sub	sp, #40	; 0x28
 80063ac:	af00      	add	r7, sp, #0
 80063ae:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 80063b0:	2300      	movs	r3, #0
 80063b2:	61fb      	str	r3, [r7, #28]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 80063b4:	f7fe fd2e 	bl	8004e14 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 80063b8:	4b53      	ldr	r3, [pc, #332]	; (8006508 <pvPortMalloc+0x160>)
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d101      	bne.n	80063c4 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 80063c0:	f000 f908 	bl	80065d4 <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d012      	beq.n	80063f0 <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 80063ca:	2208      	movs	r2, #8
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	f003 0307 	and.w	r3, r3, #7
 80063d2:	1ad3      	subs	r3, r2, r3
 80063d4:	3308      	adds	r3, #8
 80063d6:	61bb      	str	r3, [r7, #24]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 80063d8:	69bb      	ldr	r3, [r7, #24]
 80063da:	43db      	mvns	r3, r3
 80063dc:	687a      	ldr	r2, [r7, #4]
 80063de:	429a      	cmp	r2, r3
 80063e0:	d804      	bhi.n	80063ec <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 80063e2:	687a      	ldr	r2, [r7, #4]
 80063e4:	69bb      	ldr	r3, [r7, #24]
 80063e6:	4413      	add	r3, r2
 80063e8:	607b      	str	r3, [r7, #4]
 80063ea:	e001      	b.n	80063f0 <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 80063ec:	2300      	movs	r3, #0
 80063ee:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	db70      	blt.n	80064d8 <pvPortMalloc+0x130>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d06d      	beq.n	80064d8 <pvPortMalloc+0x130>
 80063fc:	4b43      	ldr	r3, [pc, #268]	; (800650c <pvPortMalloc+0x164>)
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	687a      	ldr	r2, [r7, #4]
 8006402:	429a      	cmp	r2, r3
 8006404:	d868      	bhi.n	80064d8 <pvPortMalloc+0x130>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8006406:	4b42      	ldr	r3, [pc, #264]	; (8006510 <pvPortMalloc+0x168>)
 8006408:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 800640a:	4b41      	ldr	r3, [pc, #260]	; (8006510 <pvPortMalloc+0x168>)
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006410:	e004      	b.n	800641c <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 8006412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006414:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8006416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800641c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800641e:	685b      	ldr	r3, [r3, #4]
 8006420:	687a      	ldr	r2, [r7, #4]
 8006422:	429a      	cmp	r2, r3
 8006424:	d903      	bls.n	800642e <pvPortMalloc+0x86>
 8006426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	2b00      	cmp	r3, #0
 800642c:	d1f1      	bne.n	8006412 <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 800642e:	4b36      	ldr	r3, [pc, #216]	; (8006508 <pvPortMalloc+0x160>)
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006434:	429a      	cmp	r2, r3
 8006436:	d04f      	beq.n	80064d8 <pvPortMalloc+0x130>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006438:	6a3b      	ldr	r3, [r7, #32]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	2208      	movs	r2, #8
 800643e:	4413      	add	r3, r2
 8006440:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006444:	681a      	ldr	r2, [r3, #0]
 8006446:	6a3b      	ldr	r3, [r7, #32]
 8006448:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800644a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800644c:	685a      	ldr	r2, [r3, #4]
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	1ad2      	subs	r2, r2, r3
 8006452:	2308      	movs	r3, #8
 8006454:	005b      	lsls	r3, r3, #1
 8006456:	429a      	cmp	r2, r3
 8006458:	d91f      	bls.n	800649a <pvPortMalloc+0xf2>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800645a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	4413      	add	r3, r2
 8006460:	617b      	str	r3, [r7, #20]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006462:	697b      	ldr	r3, [r7, #20]
 8006464:	f003 0307 	and.w	r3, r3, #7
 8006468:	2b00      	cmp	r3, #0
 800646a:	d00a      	beq.n	8006482 <pvPortMalloc+0xda>
        __asm volatile
 800646c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006470:	f383 8811 	msr	BASEPRI, r3
 8006474:	f3bf 8f6f 	isb	sy
 8006478:	f3bf 8f4f 	dsb	sy
 800647c:	613b      	str	r3, [r7, #16]
    }
 800647e:	bf00      	nop
 8006480:	e7fe      	b.n	8006480 <pvPortMalloc+0xd8>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006484:	685a      	ldr	r2, [r3, #4]
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	1ad2      	subs	r2, r2, r3
 800648a:	697b      	ldr	r3, [r7, #20]
 800648c:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 800648e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006490:	687a      	ldr	r2, [r7, #4]
 8006492:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006494:	6978      	ldr	r0, [r7, #20]
 8006496:	f000 f8f9 	bl	800668c <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 800649a:	4b1c      	ldr	r3, [pc, #112]	; (800650c <pvPortMalloc+0x164>)
 800649c:	681a      	ldr	r2, [r3, #0]
 800649e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064a0:	685b      	ldr	r3, [r3, #4]
 80064a2:	1ad3      	subs	r3, r2, r3
 80064a4:	4a19      	ldr	r2, [pc, #100]	; (800650c <pvPortMalloc+0x164>)
 80064a6:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80064a8:	4b18      	ldr	r3, [pc, #96]	; (800650c <pvPortMalloc+0x164>)
 80064aa:	681a      	ldr	r2, [r3, #0]
 80064ac:	4b19      	ldr	r3, [pc, #100]	; (8006514 <pvPortMalloc+0x16c>)
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	429a      	cmp	r2, r3
 80064b2:	d203      	bcs.n	80064bc <pvPortMalloc+0x114>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80064b4:	4b15      	ldr	r3, [pc, #84]	; (800650c <pvPortMalloc+0x164>)
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	4a16      	ldr	r2, [pc, #88]	; (8006514 <pvPortMalloc+0x16c>)
 80064ba:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 80064bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064be:	685b      	ldr	r3, [r3, #4]
 80064c0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80064c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064c6:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 80064c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064ca:	2200      	movs	r2, #0
 80064cc:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 80064ce:	4b12      	ldr	r3, [pc, #72]	; (8006518 <pvPortMalloc+0x170>)
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	3301      	adds	r3, #1
 80064d4:	4a10      	ldr	r2, [pc, #64]	; (8006518 <pvPortMalloc+0x170>)
 80064d6:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 80064d8:	f7fe fcaa 	bl	8004e30 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80064dc:	69fb      	ldr	r3, [r7, #28]
 80064de:	f003 0307 	and.w	r3, r3, #7
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d00a      	beq.n	80064fc <pvPortMalloc+0x154>
        __asm volatile
 80064e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064ea:	f383 8811 	msr	BASEPRI, r3
 80064ee:	f3bf 8f6f 	isb	sy
 80064f2:	f3bf 8f4f 	dsb	sy
 80064f6:	60fb      	str	r3, [r7, #12]
    }
 80064f8:	bf00      	nop
 80064fa:	e7fe      	b.n	80064fa <pvPortMalloc+0x152>
    return pvReturn;
 80064fc:	69fb      	ldr	r3, [r7, #28]
}
 80064fe:	4618      	mov	r0, r3
 8006500:	3728      	adds	r7, #40	; 0x28
 8006502:	46bd      	mov	sp, r7
 8006504:	bd80      	pop	{r7, pc}
 8006506:	bf00      	nop
 8006508:	20007ad0 	.word	0x20007ad0
 800650c:	20007ad4 	.word	0x20007ad4
 8006510:	20007ac8 	.word	0x20007ac8
 8006514:	20007ad8 	.word	0x20007ad8
 8006518:	20007adc 	.word	0x20007adc

0800651c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 800651c:	b580      	push	{r7, lr}
 800651e:	b086      	sub	sp, #24
 8006520:	af00      	add	r7, sp, #0
 8006522:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	2b00      	cmp	r3, #0
 800652c:	d049      	beq.n	80065c2 <vPortFree+0xa6>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 800652e:	2308      	movs	r3, #8
 8006530:	425b      	negs	r3, r3
 8006532:	697a      	ldr	r2, [r7, #20]
 8006534:	4413      	add	r3, r2
 8006536:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8006538:	697b      	ldr	r3, [r7, #20]
 800653a:	613b      	str	r3, [r7, #16]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 800653c:	693b      	ldr	r3, [r7, #16]
 800653e:	685b      	ldr	r3, [r3, #4]
 8006540:	2b00      	cmp	r3, #0
 8006542:	db0a      	blt.n	800655a <vPortFree+0x3e>
        __asm volatile
 8006544:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006548:	f383 8811 	msr	BASEPRI, r3
 800654c:	f3bf 8f6f 	isb	sy
 8006550:	f3bf 8f4f 	dsb	sy
 8006554:	60fb      	str	r3, [r7, #12]
    }
 8006556:	bf00      	nop
 8006558:	e7fe      	b.n	8006558 <vPortFree+0x3c>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 800655a:	693b      	ldr	r3, [r7, #16]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	2b00      	cmp	r3, #0
 8006560:	d00a      	beq.n	8006578 <vPortFree+0x5c>
        __asm volatile
 8006562:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006566:	f383 8811 	msr	BASEPRI, r3
 800656a:	f3bf 8f6f 	isb	sy
 800656e:	f3bf 8f4f 	dsb	sy
 8006572:	60bb      	str	r3, [r7, #8]
    }
 8006574:	bf00      	nop
 8006576:	e7fe      	b.n	8006576 <vPortFree+0x5a>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 8006578:	693b      	ldr	r3, [r7, #16]
 800657a:	685b      	ldr	r3, [r3, #4]
 800657c:	0fdb      	lsrs	r3, r3, #31
 800657e:	f003 0301 	and.w	r3, r3, #1
 8006582:	b2db      	uxtb	r3, r3
 8006584:	2b00      	cmp	r3, #0
 8006586:	d01c      	beq.n	80065c2 <vPortFree+0xa6>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8006588:	693b      	ldr	r3, [r7, #16]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	2b00      	cmp	r3, #0
 800658e:	d118      	bne.n	80065c2 <vPortFree+0xa6>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 8006590:	693b      	ldr	r3, [r7, #16]
 8006592:	685b      	ldr	r3, [r3, #4]
 8006594:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006598:	693b      	ldr	r3, [r7, #16]
 800659a:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 800659c:	f7fe fc3a 	bl	8004e14 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 80065a0:	693b      	ldr	r3, [r7, #16]
 80065a2:	685a      	ldr	r2, [r3, #4]
 80065a4:	4b09      	ldr	r3, [pc, #36]	; (80065cc <vPortFree+0xb0>)
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	4413      	add	r3, r2
 80065aa:	4a08      	ldr	r2, [pc, #32]	; (80065cc <vPortFree+0xb0>)
 80065ac:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80065ae:	6938      	ldr	r0, [r7, #16]
 80065b0:	f000 f86c 	bl	800668c <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 80065b4:	4b06      	ldr	r3, [pc, #24]	; (80065d0 <vPortFree+0xb4>)
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	3301      	adds	r3, #1
 80065ba:	4a05      	ldr	r2, [pc, #20]	; (80065d0 <vPortFree+0xb4>)
 80065bc:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 80065be:	f7fe fc37 	bl	8004e30 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 80065c2:	bf00      	nop
 80065c4:	3718      	adds	r7, #24
 80065c6:	46bd      	mov	sp, r7
 80065c8:	bd80      	pop	{r7, pc}
 80065ca:	bf00      	nop
 80065cc:	20007ad4 	.word	0x20007ad4
 80065d0:	20007ae0 	.word	0x20007ae0

080065d4 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 80065d4:	b480      	push	{r7}
 80065d6:	b085      	sub	sp, #20
 80065d8:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80065da:	f44f 43f0 	mov.w	r3, #30720	; 0x7800
 80065de:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 80065e0:	4b25      	ldr	r3, [pc, #148]	; (8006678 <prvHeapInit+0xa4>)
 80065e2:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	f003 0307 	and.w	r3, r3, #7
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d00c      	beq.n	8006608 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	3307      	adds	r3, #7
 80065f2:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	f023 0307 	bic.w	r3, r3, #7
 80065fa:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 80065fc:	68ba      	ldr	r2, [r7, #8]
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	1ad3      	subs	r3, r2, r3
 8006602:	4a1d      	ldr	r2, [pc, #116]	; (8006678 <prvHeapInit+0xa4>)
 8006604:	4413      	add	r3, r2
 8006606:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800660c:	4a1b      	ldr	r2, [pc, #108]	; (800667c <prvHeapInit+0xa8>)
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8006612:	4b1a      	ldr	r3, [pc, #104]	; (800667c <prvHeapInit+0xa8>)
 8006614:	2200      	movs	r2, #0
 8006616:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	68ba      	ldr	r2, [r7, #8]
 800661c:	4413      	add	r3, r2
 800661e:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8006620:	2208      	movs	r2, #8
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	1a9b      	subs	r3, r3, r2
 8006626:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	f023 0307 	bic.w	r3, r3, #7
 800662e:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	4a13      	ldr	r2, [pc, #76]	; (8006680 <prvHeapInit+0xac>)
 8006634:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8006636:	4b12      	ldr	r3, [pc, #72]	; (8006680 <prvHeapInit+0xac>)
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	2200      	movs	r2, #0
 800663c:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 800663e:	4b10      	ldr	r3, [pc, #64]	; (8006680 <prvHeapInit+0xac>)
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	2200      	movs	r2, #0
 8006644:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 800664a:	683b      	ldr	r3, [r7, #0]
 800664c:	68fa      	ldr	r2, [r7, #12]
 800664e:	1ad2      	subs	r2, r2, r3
 8006650:	683b      	ldr	r3, [r7, #0]
 8006652:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006654:	4b0a      	ldr	r3, [pc, #40]	; (8006680 <prvHeapInit+0xac>)
 8006656:	681a      	ldr	r2, [r3, #0]
 8006658:	683b      	ldr	r3, [r7, #0]
 800665a:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800665c:	683b      	ldr	r3, [r7, #0]
 800665e:	685b      	ldr	r3, [r3, #4]
 8006660:	4a08      	ldr	r2, [pc, #32]	; (8006684 <prvHeapInit+0xb0>)
 8006662:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006664:	683b      	ldr	r3, [r7, #0]
 8006666:	685b      	ldr	r3, [r3, #4]
 8006668:	4a07      	ldr	r2, [pc, #28]	; (8006688 <prvHeapInit+0xb4>)
 800666a:	6013      	str	r3, [r2, #0]
}
 800666c:	bf00      	nop
 800666e:	3714      	adds	r7, #20
 8006670:	46bd      	mov	sp, r7
 8006672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006676:	4770      	bx	lr
 8006678:	200002c8 	.word	0x200002c8
 800667c:	20007ac8 	.word	0x20007ac8
 8006680:	20007ad0 	.word	0x20007ad0
 8006684:	20007ad8 	.word	0x20007ad8
 8006688:	20007ad4 	.word	0x20007ad4

0800668c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 800668c:	b480      	push	{r7}
 800668e:	b085      	sub	sp, #20
 8006690:	af00      	add	r7, sp, #0
 8006692:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006694:	4b28      	ldr	r3, [pc, #160]	; (8006738 <prvInsertBlockIntoFreeList+0xac>)
 8006696:	60fb      	str	r3, [r7, #12]
 8006698:	e002      	b.n	80066a0 <prvInsertBlockIntoFreeList+0x14>
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	60fb      	str	r3, [r7, #12]
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	687a      	ldr	r2, [r7, #4]
 80066a6:	429a      	cmp	r2, r3
 80066a8:	d8f7      	bhi.n	800669a <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	685b      	ldr	r3, [r3, #4]
 80066b2:	68ba      	ldr	r2, [r7, #8]
 80066b4:	4413      	add	r3, r2
 80066b6:	687a      	ldr	r2, [r7, #4]
 80066b8:	429a      	cmp	r2, r3
 80066ba:	d108      	bne.n	80066ce <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	685a      	ldr	r2, [r3, #4]
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	685b      	ldr	r3, [r3, #4]
 80066c4:	441a      	add	r2, r3
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	685b      	ldr	r3, [r3, #4]
 80066d6:	68ba      	ldr	r2, [r7, #8]
 80066d8:	441a      	add	r2, r3
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	429a      	cmp	r2, r3
 80066e0:	d118      	bne.n	8006714 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	681a      	ldr	r2, [r3, #0]
 80066e6:	4b15      	ldr	r3, [pc, #84]	; (800673c <prvInsertBlockIntoFreeList+0xb0>)
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	429a      	cmp	r2, r3
 80066ec:	d00d      	beq.n	800670a <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	685a      	ldr	r2, [r3, #4]
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	685b      	ldr	r3, [r3, #4]
 80066f8:	441a      	add	r2, r3
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	681a      	ldr	r2, [r3, #0]
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	601a      	str	r2, [r3, #0]
 8006708:	e008      	b.n	800671c <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800670a:	4b0c      	ldr	r3, [pc, #48]	; (800673c <prvInsertBlockIntoFreeList+0xb0>)
 800670c:	681a      	ldr	r2, [r3, #0]
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	601a      	str	r2, [r3, #0]
 8006712:	e003      	b.n	800671c <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	681a      	ldr	r2, [r3, #0]
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 800671c:	68fa      	ldr	r2, [r7, #12]
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	429a      	cmp	r2, r3
 8006722:	d002      	beq.n	800672a <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	687a      	ldr	r2, [r7, #4]
 8006728:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800672a:	bf00      	nop
 800672c:	3714      	adds	r7, #20
 800672e:	46bd      	mov	sp, r7
 8006730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006734:	4770      	bx	lr
 8006736:	bf00      	nop
 8006738:	20007ac8 	.word	0x20007ac8
 800673c:	20007ad0 	.word	0x20007ad0

08006740 <siprintf>:
 8006740:	b40e      	push	{r1, r2, r3}
 8006742:	b500      	push	{lr}
 8006744:	b09c      	sub	sp, #112	; 0x70
 8006746:	ab1d      	add	r3, sp, #116	; 0x74
 8006748:	9002      	str	r0, [sp, #8]
 800674a:	9006      	str	r0, [sp, #24]
 800674c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006750:	4809      	ldr	r0, [pc, #36]	; (8006778 <siprintf+0x38>)
 8006752:	9107      	str	r1, [sp, #28]
 8006754:	9104      	str	r1, [sp, #16]
 8006756:	4909      	ldr	r1, [pc, #36]	; (800677c <siprintf+0x3c>)
 8006758:	f853 2b04 	ldr.w	r2, [r3], #4
 800675c:	9105      	str	r1, [sp, #20]
 800675e:	6800      	ldr	r0, [r0, #0]
 8006760:	9301      	str	r3, [sp, #4]
 8006762:	a902      	add	r1, sp, #8
 8006764:	f000 f9a0 	bl	8006aa8 <_svfiprintf_r>
 8006768:	9b02      	ldr	r3, [sp, #8]
 800676a:	2200      	movs	r2, #0
 800676c:	701a      	strb	r2, [r3, #0]
 800676e:	b01c      	add	sp, #112	; 0x70
 8006770:	f85d eb04 	ldr.w	lr, [sp], #4
 8006774:	b003      	add	sp, #12
 8006776:	4770      	bx	lr
 8006778:	20000060 	.word	0x20000060
 800677c:	ffff0208 	.word	0xffff0208

08006780 <memset>:
 8006780:	4402      	add	r2, r0
 8006782:	4603      	mov	r3, r0
 8006784:	4293      	cmp	r3, r2
 8006786:	d100      	bne.n	800678a <memset+0xa>
 8006788:	4770      	bx	lr
 800678a:	f803 1b01 	strb.w	r1, [r3], #1
 800678e:	e7f9      	b.n	8006784 <memset+0x4>

08006790 <__errno>:
 8006790:	4b01      	ldr	r3, [pc, #4]	; (8006798 <__errno+0x8>)
 8006792:	6818      	ldr	r0, [r3, #0]
 8006794:	4770      	bx	lr
 8006796:	bf00      	nop
 8006798:	20000060 	.word	0x20000060

0800679c <__libc_init_array>:
 800679c:	b570      	push	{r4, r5, r6, lr}
 800679e:	4d0d      	ldr	r5, [pc, #52]	; (80067d4 <__libc_init_array+0x38>)
 80067a0:	4c0d      	ldr	r4, [pc, #52]	; (80067d8 <__libc_init_array+0x3c>)
 80067a2:	1b64      	subs	r4, r4, r5
 80067a4:	10a4      	asrs	r4, r4, #2
 80067a6:	2600      	movs	r6, #0
 80067a8:	42a6      	cmp	r6, r4
 80067aa:	d109      	bne.n	80067c0 <__libc_init_array+0x24>
 80067ac:	4d0b      	ldr	r5, [pc, #44]	; (80067dc <__libc_init_array+0x40>)
 80067ae:	4c0c      	ldr	r4, [pc, #48]	; (80067e0 <__libc_init_array+0x44>)
 80067b0:	f000 fc6a 	bl	8007088 <_init>
 80067b4:	1b64      	subs	r4, r4, r5
 80067b6:	10a4      	asrs	r4, r4, #2
 80067b8:	2600      	movs	r6, #0
 80067ba:	42a6      	cmp	r6, r4
 80067bc:	d105      	bne.n	80067ca <__libc_init_array+0x2e>
 80067be:	bd70      	pop	{r4, r5, r6, pc}
 80067c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80067c4:	4798      	blx	r3
 80067c6:	3601      	adds	r6, #1
 80067c8:	e7ee      	b.n	80067a8 <__libc_init_array+0xc>
 80067ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80067ce:	4798      	blx	r3
 80067d0:	3601      	adds	r6, #1
 80067d2:	e7f2      	b.n	80067ba <__libc_init_array+0x1e>
 80067d4:	080071f0 	.word	0x080071f0
 80067d8:	080071f0 	.word	0x080071f0
 80067dc:	080071f0 	.word	0x080071f0
 80067e0:	080071f4 	.word	0x080071f4

080067e4 <__retarget_lock_acquire_recursive>:
 80067e4:	4770      	bx	lr

080067e6 <__retarget_lock_release_recursive>:
 80067e6:	4770      	bx	lr

080067e8 <memcpy>:
 80067e8:	440a      	add	r2, r1
 80067ea:	4291      	cmp	r1, r2
 80067ec:	f100 33ff 	add.w	r3, r0, #4294967295
 80067f0:	d100      	bne.n	80067f4 <memcpy+0xc>
 80067f2:	4770      	bx	lr
 80067f4:	b510      	push	{r4, lr}
 80067f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80067fa:	f803 4f01 	strb.w	r4, [r3, #1]!
 80067fe:	4291      	cmp	r1, r2
 8006800:	d1f9      	bne.n	80067f6 <memcpy+0xe>
 8006802:	bd10      	pop	{r4, pc}

08006804 <_free_r>:
 8006804:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006806:	2900      	cmp	r1, #0
 8006808:	d044      	beq.n	8006894 <_free_r+0x90>
 800680a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800680e:	9001      	str	r0, [sp, #4]
 8006810:	2b00      	cmp	r3, #0
 8006812:	f1a1 0404 	sub.w	r4, r1, #4
 8006816:	bfb8      	it	lt
 8006818:	18e4      	addlt	r4, r4, r3
 800681a:	f000 f8df 	bl	80069dc <__malloc_lock>
 800681e:	4a1e      	ldr	r2, [pc, #120]	; (8006898 <_free_r+0x94>)
 8006820:	9801      	ldr	r0, [sp, #4]
 8006822:	6813      	ldr	r3, [r2, #0]
 8006824:	b933      	cbnz	r3, 8006834 <_free_r+0x30>
 8006826:	6063      	str	r3, [r4, #4]
 8006828:	6014      	str	r4, [r2, #0]
 800682a:	b003      	add	sp, #12
 800682c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006830:	f000 b8da 	b.w	80069e8 <__malloc_unlock>
 8006834:	42a3      	cmp	r3, r4
 8006836:	d908      	bls.n	800684a <_free_r+0x46>
 8006838:	6825      	ldr	r5, [r4, #0]
 800683a:	1961      	adds	r1, r4, r5
 800683c:	428b      	cmp	r3, r1
 800683e:	bf01      	itttt	eq
 8006840:	6819      	ldreq	r1, [r3, #0]
 8006842:	685b      	ldreq	r3, [r3, #4]
 8006844:	1949      	addeq	r1, r1, r5
 8006846:	6021      	streq	r1, [r4, #0]
 8006848:	e7ed      	b.n	8006826 <_free_r+0x22>
 800684a:	461a      	mov	r2, r3
 800684c:	685b      	ldr	r3, [r3, #4]
 800684e:	b10b      	cbz	r3, 8006854 <_free_r+0x50>
 8006850:	42a3      	cmp	r3, r4
 8006852:	d9fa      	bls.n	800684a <_free_r+0x46>
 8006854:	6811      	ldr	r1, [r2, #0]
 8006856:	1855      	adds	r5, r2, r1
 8006858:	42a5      	cmp	r5, r4
 800685a:	d10b      	bne.n	8006874 <_free_r+0x70>
 800685c:	6824      	ldr	r4, [r4, #0]
 800685e:	4421      	add	r1, r4
 8006860:	1854      	adds	r4, r2, r1
 8006862:	42a3      	cmp	r3, r4
 8006864:	6011      	str	r1, [r2, #0]
 8006866:	d1e0      	bne.n	800682a <_free_r+0x26>
 8006868:	681c      	ldr	r4, [r3, #0]
 800686a:	685b      	ldr	r3, [r3, #4]
 800686c:	6053      	str	r3, [r2, #4]
 800686e:	440c      	add	r4, r1
 8006870:	6014      	str	r4, [r2, #0]
 8006872:	e7da      	b.n	800682a <_free_r+0x26>
 8006874:	d902      	bls.n	800687c <_free_r+0x78>
 8006876:	230c      	movs	r3, #12
 8006878:	6003      	str	r3, [r0, #0]
 800687a:	e7d6      	b.n	800682a <_free_r+0x26>
 800687c:	6825      	ldr	r5, [r4, #0]
 800687e:	1961      	adds	r1, r4, r5
 8006880:	428b      	cmp	r3, r1
 8006882:	bf04      	itt	eq
 8006884:	6819      	ldreq	r1, [r3, #0]
 8006886:	685b      	ldreq	r3, [r3, #4]
 8006888:	6063      	str	r3, [r4, #4]
 800688a:	bf04      	itt	eq
 800688c:	1949      	addeq	r1, r1, r5
 800688e:	6021      	streq	r1, [r4, #0]
 8006890:	6054      	str	r4, [r2, #4]
 8006892:	e7ca      	b.n	800682a <_free_r+0x26>
 8006894:	b003      	add	sp, #12
 8006896:	bd30      	pop	{r4, r5, pc}
 8006898:	20007c24 	.word	0x20007c24

0800689c <sbrk_aligned>:
 800689c:	b570      	push	{r4, r5, r6, lr}
 800689e:	4e0e      	ldr	r6, [pc, #56]	; (80068d8 <sbrk_aligned+0x3c>)
 80068a0:	460c      	mov	r4, r1
 80068a2:	6831      	ldr	r1, [r6, #0]
 80068a4:	4605      	mov	r5, r0
 80068a6:	b911      	cbnz	r1, 80068ae <sbrk_aligned+0x12>
 80068a8:	f000 fba6 	bl	8006ff8 <_sbrk_r>
 80068ac:	6030      	str	r0, [r6, #0]
 80068ae:	4621      	mov	r1, r4
 80068b0:	4628      	mov	r0, r5
 80068b2:	f000 fba1 	bl	8006ff8 <_sbrk_r>
 80068b6:	1c43      	adds	r3, r0, #1
 80068b8:	d00a      	beq.n	80068d0 <sbrk_aligned+0x34>
 80068ba:	1cc4      	adds	r4, r0, #3
 80068bc:	f024 0403 	bic.w	r4, r4, #3
 80068c0:	42a0      	cmp	r0, r4
 80068c2:	d007      	beq.n	80068d4 <sbrk_aligned+0x38>
 80068c4:	1a21      	subs	r1, r4, r0
 80068c6:	4628      	mov	r0, r5
 80068c8:	f000 fb96 	bl	8006ff8 <_sbrk_r>
 80068cc:	3001      	adds	r0, #1
 80068ce:	d101      	bne.n	80068d4 <sbrk_aligned+0x38>
 80068d0:	f04f 34ff 	mov.w	r4, #4294967295
 80068d4:	4620      	mov	r0, r4
 80068d6:	bd70      	pop	{r4, r5, r6, pc}
 80068d8:	20007c28 	.word	0x20007c28

080068dc <_malloc_r>:
 80068dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80068e0:	1ccd      	adds	r5, r1, #3
 80068e2:	f025 0503 	bic.w	r5, r5, #3
 80068e6:	3508      	adds	r5, #8
 80068e8:	2d0c      	cmp	r5, #12
 80068ea:	bf38      	it	cc
 80068ec:	250c      	movcc	r5, #12
 80068ee:	2d00      	cmp	r5, #0
 80068f0:	4607      	mov	r7, r0
 80068f2:	db01      	blt.n	80068f8 <_malloc_r+0x1c>
 80068f4:	42a9      	cmp	r1, r5
 80068f6:	d905      	bls.n	8006904 <_malloc_r+0x28>
 80068f8:	230c      	movs	r3, #12
 80068fa:	603b      	str	r3, [r7, #0]
 80068fc:	2600      	movs	r6, #0
 80068fe:	4630      	mov	r0, r6
 8006900:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006904:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80069d8 <_malloc_r+0xfc>
 8006908:	f000 f868 	bl	80069dc <__malloc_lock>
 800690c:	f8d8 3000 	ldr.w	r3, [r8]
 8006910:	461c      	mov	r4, r3
 8006912:	bb5c      	cbnz	r4, 800696c <_malloc_r+0x90>
 8006914:	4629      	mov	r1, r5
 8006916:	4638      	mov	r0, r7
 8006918:	f7ff ffc0 	bl	800689c <sbrk_aligned>
 800691c:	1c43      	adds	r3, r0, #1
 800691e:	4604      	mov	r4, r0
 8006920:	d155      	bne.n	80069ce <_malloc_r+0xf2>
 8006922:	f8d8 4000 	ldr.w	r4, [r8]
 8006926:	4626      	mov	r6, r4
 8006928:	2e00      	cmp	r6, #0
 800692a:	d145      	bne.n	80069b8 <_malloc_r+0xdc>
 800692c:	2c00      	cmp	r4, #0
 800692e:	d048      	beq.n	80069c2 <_malloc_r+0xe6>
 8006930:	6823      	ldr	r3, [r4, #0]
 8006932:	4631      	mov	r1, r6
 8006934:	4638      	mov	r0, r7
 8006936:	eb04 0903 	add.w	r9, r4, r3
 800693a:	f000 fb5d 	bl	8006ff8 <_sbrk_r>
 800693e:	4581      	cmp	r9, r0
 8006940:	d13f      	bne.n	80069c2 <_malloc_r+0xe6>
 8006942:	6821      	ldr	r1, [r4, #0]
 8006944:	1a6d      	subs	r5, r5, r1
 8006946:	4629      	mov	r1, r5
 8006948:	4638      	mov	r0, r7
 800694a:	f7ff ffa7 	bl	800689c <sbrk_aligned>
 800694e:	3001      	adds	r0, #1
 8006950:	d037      	beq.n	80069c2 <_malloc_r+0xe6>
 8006952:	6823      	ldr	r3, [r4, #0]
 8006954:	442b      	add	r3, r5
 8006956:	6023      	str	r3, [r4, #0]
 8006958:	f8d8 3000 	ldr.w	r3, [r8]
 800695c:	2b00      	cmp	r3, #0
 800695e:	d038      	beq.n	80069d2 <_malloc_r+0xf6>
 8006960:	685a      	ldr	r2, [r3, #4]
 8006962:	42a2      	cmp	r2, r4
 8006964:	d12b      	bne.n	80069be <_malloc_r+0xe2>
 8006966:	2200      	movs	r2, #0
 8006968:	605a      	str	r2, [r3, #4]
 800696a:	e00f      	b.n	800698c <_malloc_r+0xb0>
 800696c:	6822      	ldr	r2, [r4, #0]
 800696e:	1b52      	subs	r2, r2, r5
 8006970:	d41f      	bmi.n	80069b2 <_malloc_r+0xd6>
 8006972:	2a0b      	cmp	r2, #11
 8006974:	d917      	bls.n	80069a6 <_malloc_r+0xca>
 8006976:	1961      	adds	r1, r4, r5
 8006978:	42a3      	cmp	r3, r4
 800697a:	6025      	str	r5, [r4, #0]
 800697c:	bf18      	it	ne
 800697e:	6059      	strne	r1, [r3, #4]
 8006980:	6863      	ldr	r3, [r4, #4]
 8006982:	bf08      	it	eq
 8006984:	f8c8 1000 	streq.w	r1, [r8]
 8006988:	5162      	str	r2, [r4, r5]
 800698a:	604b      	str	r3, [r1, #4]
 800698c:	4638      	mov	r0, r7
 800698e:	f104 060b 	add.w	r6, r4, #11
 8006992:	f000 f829 	bl	80069e8 <__malloc_unlock>
 8006996:	f026 0607 	bic.w	r6, r6, #7
 800699a:	1d23      	adds	r3, r4, #4
 800699c:	1af2      	subs	r2, r6, r3
 800699e:	d0ae      	beq.n	80068fe <_malloc_r+0x22>
 80069a0:	1b9b      	subs	r3, r3, r6
 80069a2:	50a3      	str	r3, [r4, r2]
 80069a4:	e7ab      	b.n	80068fe <_malloc_r+0x22>
 80069a6:	42a3      	cmp	r3, r4
 80069a8:	6862      	ldr	r2, [r4, #4]
 80069aa:	d1dd      	bne.n	8006968 <_malloc_r+0x8c>
 80069ac:	f8c8 2000 	str.w	r2, [r8]
 80069b0:	e7ec      	b.n	800698c <_malloc_r+0xb0>
 80069b2:	4623      	mov	r3, r4
 80069b4:	6864      	ldr	r4, [r4, #4]
 80069b6:	e7ac      	b.n	8006912 <_malloc_r+0x36>
 80069b8:	4634      	mov	r4, r6
 80069ba:	6876      	ldr	r6, [r6, #4]
 80069bc:	e7b4      	b.n	8006928 <_malloc_r+0x4c>
 80069be:	4613      	mov	r3, r2
 80069c0:	e7cc      	b.n	800695c <_malloc_r+0x80>
 80069c2:	230c      	movs	r3, #12
 80069c4:	603b      	str	r3, [r7, #0]
 80069c6:	4638      	mov	r0, r7
 80069c8:	f000 f80e 	bl	80069e8 <__malloc_unlock>
 80069cc:	e797      	b.n	80068fe <_malloc_r+0x22>
 80069ce:	6025      	str	r5, [r4, #0]
 80069d0:	e7dc      	b.n	800698c <_malloc_r+0xb0>
 80069d2:	605b      	str	r3, [r3, #4]
 80069d4:	deff      	udf	#255	; 0xff
 80069d6:	bf00      	nop
 80069d8:	20007c24 	.word	0x20007c24

080069dc <__malloc_lock>:
 80069dc:	4801      	ldr	r0, [pc, #4]	; (80069e4 <__malloc_lock+0x8>)
 80069de:	f7ff bf01 	b.w	80067e4 <__retarget_lock_acquire_recursive>
 80069e2:	bf00      	nop
 80069e4:	20007c20 	.word	0x20007c20

080069e8 <__malloc_unlock>:
 80069e8:	4801      	ldr	r0, [pc, #4]	; (80069f0 <__malloc_unlock+0x8>)
 80069ea:	f7ff befc 	b.w	80067e6 <__retarget_lock_release_recursive>
 80069ee:	bf00      	nop
 80069f0:	20007c20 	.word	0x20007c20

080069f4 <__ssputs_r>:
 80069f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80069f8:	688e      	ldr	r6, [r1, #8]
 80069fa:	461f      	mov	r7, r3
 80069fc:	42be      	cmp	r6, r7
 80069fe:	680b      	ldr	r3, [r1, #0]
 8006a00:	4682      	mov	sl, r0
 8006a02:	460c      	mov	r4, r1
 8006a04:	4690      	mov	r8, r2
 8006a06:	d82c      	bhi.n	8006a62 <__ssputs_r+0x6e>
 8006a08:	898a      	ldrh	r2, [r1, #12]
 8006a0a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006a0e:	d026      	beq.n	8006a5e <__ssputs_r+0x6a>
 8006a10:	6965      	ldr	r5, [r4, #20]
 8006a12:	6909      	ldr	r1, [r1, #16]
 8006a14:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006a18:	eba3 0901 	sub.w	r9, r3, r1
 8006a1c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006a20:	1c7b      	adds	r3, r7, #1
 8006a22:	444b      	add	r3, r9
 8006a24:	106d      	asrs	r5, r5, #1
 8006a26:	429d      	cmp	r5, r3
 8006a28:	bf38      	it	cc
 8006a2a:	461d      	movcc	r5, r3
 8006a2c:	0553      	lsls	r3, r2, #21
 8006a2e:	d527      	bpl.n	8006a80 <__ssputs_r+0x8c>
 8006a30:	4629      	mov	r1, r5
 8006a32:	f7ff ff53 	bl	80068dc <_malloc_r>
 8006a36:	4606      	mov	r6, r0
 8006a38:	b360      	cbz	r0, 8006a94 <__ssputs_r+0xa0>
 8006a3a:	6921      	ldr	r1, [r4, #16]
 8006a3c:	464a      	mov	r2, r9
 8006a3e:	f7ff fed3 	bl	80067e8 <memcpy>
 8006a42:	89a3      	ldrh	r3, [r4, #12]
 8006a44:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006a48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a4c:	81a3      	strh	r3, [r4, #12]
 8006a4e:	6126      	str	r6, [r4, #16]
 8006a50:	6165      	str	r5, [r4, #20]
 8006a52:	444e      	add	r6, r9
 8006a54:	eba5 0509 	sub.w	r5, r5, r9
 8006a58:	6026      	str	r6, [r4, #0]
 8006a5a:	60a5      	str	r5, [r4, #8]
 8006a5c:	463e      	mov	r6, r7
 8006a5e:	42be      	cmp	r6, r7
 8006a60:	d900      	bls.n	8006a64 <__ssputs_r+0x70>
 8006a62:	463e      	mov	r6, r7
 8006a64:	6820      	ldr	r0, [r4, #0]
 8006a66:	4632      	mov	r2, r6
 8006a68:	4641      	mov	r1, r8
 8006a6a:	f000 faab 	bl	8006fc4 <memmove>
 8006a6e:	68a3      	ldr	r3, [r4, #8]
 8006a70:	1b9b      	subs	r3, r3, r6
 8006a72:	60a3      	str	r3, [r4, #8]
 8006a74:	6823      	ldr	r3, [r4, #0]
 8006a76:	4433      	add	r3, r6
 8006a78:	6023      	str	r3, [r4, #0]
 8006a7a:	2000      	movs	r0, #0
 8006a7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a80:	462a      	mov	r2, r5
 8006a82:	f000 fac9 	bl	8007018 <_realloc_r>
 8006a86:	4606      	mov	r6, r0
 8006a88:	2800      	cmp	r0, #0
 8006a8a:	d1e0      	bne.n	8006a4e <__ssputs_r+0x5a>
 8006a8c:	6921      	ldr	r1, [r4, #16]
 8006a8e:	4650      	mov	r0, sl
 8006a90:	f7ff feb8 	bl	8006804 <_free_r>
 8006a94:	230c      	movs	r3, #12
 8006a96:	f8ca 3000 	str.w	r3, [sl]
 8006a9a:	89a3      	ldrh	r3, [r4, #12]
 8006a9c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006aa0:	81a3      	strh	r3, [r4, #12]
 8006aa2:	f04f 30ff 	mov.w	r0, #4294967295
 8006aa6:	e7e9      	b.n	8006a7c <__ssputs_r+0x88>

08006aa8 <_svfiprintf_r>:
 8006aa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006aac:	4698      	mov	r8, r3
 8006aae:	898b      	ldrh	r3, [r1, #12]
 8006ab0:	061b      	lsls	r3, r3, #24
 8006ab2:	b09d      	sub	sp, #116	; 0x74
 8006ab4:	4607      	mov	r7, r0
 8006ab6:	460d      	mov	r5, r1
 8006ab8:	4614      	mov	r4, r2
 8006aba:	d50e      	bpl.n	8006ada <_svfiprintf_r+0x32>
 8006abc:	690b      	ldr	r3, [r1, #16]
 8006abe:	b963      	cbnz	r3, 8006ada <_svfiprintf_r+0x32>
 8006ac0:	2140      	movs	r1, #64	; 0x40
 8006ac2:	f7ff ff0b 	bl	80068dc <_malloc_r>
 8006ac6:	6028      	str	r0, [r5, #0]
 8006ac8:	6128      	str	r0, [r5, #16]
 8006aca:	b920      	cbnz	r0, 8006ad6 <_svfiprintf_r+0x2e>
 8006acc:	230c      	movs	r3, #12
 8006ace:	603b      	str	r3, [r7, #0]
 8006ad0:	f04f 30ff 	mov.w	r0, #4294967295
 8006ad4:	e0d0      	b.n	8006c78 <_svfiprintf_r+0x1d0>
 8006ad6:	2340      	movs	r3, #64	; 0x40
 8006ad8:	616b      	str	r3, [r5, #20]
 8006ada:	2300      	movs	r3, #0
 8006adc:	9309      	str	r3, [sp, #36]	; 0x24
 8006ade:	2320      	movs	r3, #32
 8006ae0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006ae4:	f8cd 800c 	str.w	r8, [sp, #12]
 8006ae8:	2330      	movs	r3, #48	; 0x30
 8006aea:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8006c90 <_svfiprintf_r+0x1e8>
 8006aee:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006af2:	f04f 0901 	mov.w	r9, #1
 8006af6:	4623      	mov	r3, r4
 8006af8:	469a      	mov	sl, r3
 8006afa:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006afe:	b10a      	cbz	r2, 8006b04 <_svfiprintf_r+0x5c>
 8006b00:	2a25      	cmp	r2, #37	; 0x25
 8006b02:	d1f9      	bne.n	8006af8 <_svfiprintf_r+0x50>
 8006b04:	ebba 0b04 	subs.w	fp, sl, r4
 8006b08:	d00b      	beq.n	8006b22 <_svfiprintf_r+0x7a>
 8006b0a:	465b      	mov	r3, fp
 8006b0c:	4622      	mov	r2, r4
 8006b0e:	4629      	mov	r1, r5
 8006b10:	4638      	mov	r0, r7
 8006b12:	f7ff ff6f 	bl	80069f4 <__ssputs_r>
 8006b16:	3001      	adds	r0, #1
 8006b18:	f000 80a9 	beq.w	8006c6e <_svfiprintf_r+0x1c6>
 8006b1c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006b1e:	445a      	add	r2, fp
 8006b20:	9209      	str	r2, [sp, #36]	; 0x24
 8006b22:	f89a 3000 	ldrb.w	r3, [sl]
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	f000 80a1 	beq.w	8006c6e <_svfiprintf_r+0x1c6>
 8006b2c:	2300      	movs	r3, #0
 8006b2e:	f04f 32ff 	mov.w	r2, #4294967295
 8006b32:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006b36:	f10a 0a01 	add.w	sl, sl, #1
 8006b3a:	9304      	str	r3, [sp, #16]
 8006b3c:	9307      	str	r3, [sp, #28]
 8006b3e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006b42:	931a      	str	r3, [sp, #104]	; 0x68
 8006b44:	4654      	mov	r4, sl
 8006b46:	2205      	movs	r2, #5
 8006b48:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006b4c:	4850      	ldr	r0, [pc, #320]	; (8006c90 <_svfiprintf_r+0x1e8>)
 8006b4e:	f7f9 fb57 	bl	8000200 <memchr>
 8006b52:	9a04      	ldr	r2, [sp, #16]
 8006b54:	b9d8      	cbnz	r0, 8006b8e <_svfiprintf_r+0xe6>
 8006b56:	06d0      	lsls	r0, r2, #27
 8006b58:	bf44      	itt	mi
 8006b5a:	2320      	movmi	r3, #32
 8006b5c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006b60:	0711      	lsls	r1, r2, #28
 8006b62:	bf44      	itt	mi
 8006b64:	232b      	movmi	r3, #43	; 0x2b
 8006b66:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006b6a:	f89a 3000 	ldrb.w	r3, [sl]
 8006b6e:	2b2a      	cmp	r3, #42	; 0x2a
 8006b70:	d015      	beq.n	8006b9e <_svfiprintf_r+0xf6>
 8006b72:	9a07      	ldr	r2, [sp, #28]
 8006b74:	4654      	mov	r4, sl
 8006b76:	2000      	movs	r0, #0
 8006b78:	f04f 0c0a 	mov.w	ip, #10
 8006b7c:	4621      	mov	r1, r4
 8006b7e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006b82:	3b30      	subs	r3, #48	; 0x30
 8006b84:	2b09      	cmp	r3, #9
 8006b86:	d94d      	bls.n	8006c24 <_svfiprintf_r+0x17c>
 8006b88:	b1b0      	cbz	r0, 8006bb8 <_svfiprintf_r+0x110>
 8006b8a:	9207      	str	r2, [sp, #28]
 8006b8c:	e014      	b.n	8006bb8 <_svfiprintf_r+0x110>
 8006b8e:	eba0 0308 	sub.w	r3, r0, r8
 8006b92:	fa09 f303 	lsl.w	r3, r9, r3
 8006b96:	4313      	orrs	r3, r2
 8006b98:	9304      	str	r3, [sp, #16]
 8006b9a:	46a2      	mov	sl, r4
 8006b9c:	e7d2      	b.n	8006b44 <_svfiprintf_r+0x9c>
 8006b9e:	9b03      	ldr	r3, [sp, #12]
 8006ba0:	1d19      	adds	r1, r3, #4
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	9103      	str	r1, [sp, #12]
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	bfbb      	ittet	lt
 8006baa:	425b      	neglt	r3, r3
 8006bac:	f042 0202 	orrlt.w	r2, r2, #2
 8006bb0:	9307      	strge	r3, [sp, #28]
 8006bb2:	9307      	strlt	r3, [sp, #28]
 8006bb4:	bfb8      	it	lt
 8006bb6:	9204      	strlt	r2, [sp, #16]
 8006bb8:	7823      	ldrb	r3, [r4, #0]
 8006bba:	2b2e      	cmp	r3, #46	; 0x2e
 8006bbc:	d10c      	bne.n	8006bd8 <_svfiprintf_r+0x130>
 8006bbe:	7863      	ldrb	r3, [r4, #1]
 8006bc0:	2b2a      	cmp	r3, #42	; 0x2a
 8006bc2:	d134      	bne.n	8006c2e <_svfiprintf_r+0x186>
 8006bc4:	9b03      	ldr	r3, [sp, #12]
 8006bc6:	1d1a      	adds	r2, r3, #4
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	9203      	str	r2, [sp, #12]
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	bfb8      	it	lt
 8006bd0:	f04f 33ff 	movlt.w	r3, #4294967295
 8006bd4:	3402      	adds	r4, #2
 8006bd6:	9305      	str	r3, [sp, #20]
 8006bd8:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8006ca0 <_svfiprintf_r+0x1f8>
 8006bdc:	7821      	ldrb	r1, [r4, #0]
 8006bde:	2203      	movs	r2, #3
 8006be0:	4650      	mov	r0, sl
 8006be2:	f7f9 fb0d 	bl	8000200 <memchr>
 8006be6:	b138      	cbz	r0, 8006bf8 <_svfiprintf_r+0x150>
 8006be8:	9b04      	ldr	r3, [sp, #16]
 8006bea:	eba0 000a 	sub.w	r0, r0, sl
 8006bee:	2240      	movs	r2, #64	; 0x40
 8006bf0:	4082      	lsls	r2, r0
 8006bf2:	4313      	orrs	r3, r2
 8006bf4:	3401      	adds	r4, #1
 8006bf6:	9304      	str	r3, [sp, #16]
 8006bf8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006bfc:	4825      	ldr	r0, [pc, #148]	; (8006c94 <_svfiprintf_r+0x1ec>)
 8006bfe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006c02:	2206      	movs	r2, #6
 8006c04:	f7f9 fafc 	bl	8000200 <memchr>
 8006c08:	2800      	cmp	r0, #0
 8006c0a:	d038      	beq.n	8006c7e <_svfiprintf_r+0x1d6>
 8006c0c:	4b22      	ldr	r3, [pc, #136]	; (8006c98 <_svfiprintf_r+0x1f0>)
 8006c0e:	bb1b      	cbnz	r3, 8006c58 <_svfiprintf_r+0x1b0>
 8006c10:	9b03      	ldr	r3, [sp, #12]
 8006c12:	3307      	adds	r3, #7
 8006c14:	f023 0307 	bic.w	r3, r3, #7
 8006c18:	3308      	adds	r3, #8
 8006c1a:	9303      	str	r3, [sp, #12]
 8006c1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c1e:	4433      	add	r3, r6
 8006c20:	9309      	str	r3, [sp, #36]	; 0x24
 8006c22:	e768      	b.n	8006af6 <_svfiprintf_r+0x4e>
 8006c24:	fb0c 3202 	mla	r2, ip, r2, r3
 8006c28:	460c      	mov	r4, r1
 8006c2a:	2001      	movs	r0, #1
 8006c2c:	e7a6      	b.n	8006b7c <_svfiprintf_r+0xd4>
 8006c2e:	2300      	movs	r3, #0
 8006c30:	3401      	adds	r4, #1
 8006c32:	9305      	str	r3, [sp, #20]
 8006c34:	4619      	mov	r1, r3
 8006c36:	f04f 0c0a 	mov.w	ip, #10
 8006c3a:	4620      	mov	r0, r4
 8006c3c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006c40:	3a30      	subs	r2, #48	; 0x30
 8006c42:	2a09      	cmp	r2, #9
 8006c44:	d903      	bls.n	8006c4e <_svfiprintf_r+0x1a6>
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d0c6      	beq.n	8006bd8 <_svfiprintf_r+0x130>
 8006c4a:	9105      	str	r1, [sp, #20]
 8006c4c:	e7c4      	b.n	8006bd8 <_svfiprintf_r+0x130>
 8006c4e:	fb0c 2101 	mla	r1, ip, r1, r2
 8006c52:	4604      	mov	r4, r0
 8006c54:	2301      	movs	r3, #1
 8006c56:	e7f0      	b.n	8006c3a <_svfiprintf_r+0x192>
 8006c58:	ab03      	add	r3, sp, #12
 8006c5a:	9300      	str	r3, [sp, #0]
 8006c5c:	462a      	mov	r2, r5
 8006c5e:	4b0f      	ldr	r3, [pc, #60]	; (8006c9c <_svfiprintf_r+0x1f4>)
 8006c60:	a904      	add	r1, sp, #16
 8006c62:	4638      	mov	r0, r7
 8006c64:	f3af 8000 	nop.w
 8006c68:	1c42      	adds	r2, r0, #1
 8006c6a:	4606      	mov	r6, r0
 8006c6c:	d1d6      	bne.n	8006c1c <_svfiprintf_r+0x174>
 8006c6e:	89ab      	ldrh	r3, [r5, #12]
 8006c70:	065b      	lsls	r3, r3, #25
 8006c72:	f53f af2d 	bmi.w	8006ad0 <_svfiprintf_r+0x28>
 8006c76:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006c78:	b01d      	add	sp, #116	; 0x74
 8006c7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c7e:	ab03      	add	r3, sp, #12
 8006c80:	9300      	str	r3, [sp, #0]
 8006c82:	462a      	mov	r2, r5
 8006c84:	4b05      	ldr	r3, [pc, #20]	; (8006c9c <_svfiprintf_r+0x1f4>)
 8006c86:	a904      	add	r1, sp, #16
 8006c88:	4638      	mov	r0, r7
 8006c8a:	f000 f879 	bl	8006d80 <_printf_i>
 8006c8e:	e7eb      	b.n	8006c68 <_svfiprintf_r+0x1c0>
 8006c90:	080071b4 	.word	0x080071b4
 8006c94:	080071be 	.word	0x080071be
 8006c98:	00000000 	.word	0x00000000
 8006c9c:	080069f5 	.word	0x080069f5
 8006ca0:	080071ba 	.word	0x080071ba

08006ca4 <_printf_common>:
 8006ca4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006ca8:	4616      	mov	r6, r2
 8006caa:	4699      	mov	r9, r3
 8006cac:	688a      	ldr	r2, [r1, #8]
 8006cae:	690b      	ldr	r3, [r1, #16]
 8006cb0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006cb4:	4293      	cmp	r3, r2
 8006cb6:	bfb8      	it	lt
 8006cb8:	4613      	movlt	r3, r2
 8006cba:	6033      	str	r3, [r6, #0]
 8006cbc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006cc0:	4607      	mov	r7, r0
 8006cc2:	460c      	mov	r4, r1
 8006cc4:	b10a      	cbz	r2, 8006cca <_printf_common+0x26>
 8006cc6:	3301      	adds	r3, #1
 8006cc8:	6033      	str	r3, [r6, #0]
 8006cca:	6823      	ldr	r3, [r4, #0]
 8006ccc:	0699      	lsls	r1, r3, #26
 8006cce:	bf42      	ittt	mi
 8006cd0:	6833      	ldrmi	r3, [r6, #0]
 8006cd2:	3302      	addmi	r3, #2
 8006cd4:	6033      	strmi	r3, [r6, #0]
 8006cd6:	6825      	ldr	r5, [r4, #0]
 8006cd8:	f015 0506 	ands.w	r5, r5, #6
 8006cdc:	d106      	bne.n	8006cec <_printf_common+0x48>
 8006cde:	f104 0a19 	add.w	sl, r4, #25
 8006ce2:	68e3      	ldr	r3, [r4, #12]
 8006ce4:	6832      	ldr	r2, [r6, #0]
 8006ce6:	1a9b      	subs	r3, r3, r2
 8006ce8:	42ab      	cmp	r3, r5
 8006cea:	dc26      	bgt.n	8006d3a <_printf_common+0x96>
 8006cec:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006cf0:	1e13      	subs	r3, r2, #0
 8006cf2:	6822      	ldr	r2, [r4, #0]
 8006cf4:	bf18      	it	ne
 8006cf6:	2301      	movne	r3, #1
 8006cf8:	0692      	lsls	r2, r2, #26
 8006cfa:	d42b      	bmi.n	8006d54 <_printf_common+0xb0>
 8006cfc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006d00:	4649      	mov	r1, r9
 8006d02:	4638      	mov	r0, r7
 8006d04:	47c0      	blx	r8
 8006d06:	3001      	adds	r0, #1
 8006d08:	d01e      	beq.n	8006d48 <_printf_common+0xa4>
 8006d0a:	6823      	ldr	r3, [r4, #0]
 8006d0c:	6922      	ldr	r2, [r4, #16]
 8006d0e:	f003 0306 	and.w	r3, r3, #6
 8006d12:	2b04      	cmp	r3, #4
 8006d14:	bf02      	ittt	eq
 8006d16:	68e5      	ldreq	r5, [r4, #12]
 8006d18:	6833      	ldreq	r3, [r6, #0]
 8006d1a:	1aed      	subeq	r5, r5, r3
 8006d1c:	68a3      	ldr	r3, [r4, #8]
 8006d1e:	bf0c      	ite	eq
 8006d20:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006d24:	2500      	movne	r5, #0
 8006d26:	4293      	cmp	r3, r2
 8006d28:	bfc4      	itt	gt
 8006d2a:	1a9b      	subgt	r3, r3, r2
 8006d2c:	18ed      	addgt	r5, r5, r3
 8006d2e:	2600      	movs	r6, #0
 8006d30:	341a      	adds	r4, #26
 8006d32:	42b5      	cmp	r5, r6
 8006d34:	d11a      	bne.n	8006d6c <_printf_common+0xc8>
 8006d36:	2000      	movs	r0, #0
 8006d38:	e008      	b.n	8006d4c <_printf_common+0xa8>
 8006d3a:	2301      	movs	r3, #1
 8006d3c:	4652      	mov	r2, sl
 8006d3e:	4649      	mov	r1, r9
 8006d40:	4638      	mov	r0, r7
 8006d42:	47c0      	blx	r8
 8006d44:	3001      	adds	r0, #1
 8006d46:	d103      	bne.n	8006d50 <_printf_common+0xac>
 8006d48:	f04f 30ff 	mov.w	r0, #4294967295
 8006d4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d50:	3501      	adds	r5, #1
 8006d52:	e7c6      	b.n	8006ce2 <_printf_common+0x3e>
 8006d54:	18e1      	adds	r1, r4, r3
 8006d56:	1c5a      	adds	r2, r3, #1
 8006d58:	2030      	movs	r0, #48	; 0x30
 8006d5a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006d5e:	4422      	add	r2, r4
 8006d60:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006d64:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006d68:	3302      	adds	r3, #2
 8006d6a:	e7c7      	b.n	8006cfc <_printf_common+0x58>
 8006d6c:	2301      	movs	r3, #1
 8006d6e:	4622      	mov	r2, r4
 8006d70:	4649      	mov	r1, r9
 8006d72:	4638      	mov	r0, r7
 8006d74:	47c0      	blx	r8
 8006d76:	3001      	adds	r0, #1
 8006d78:	d0e6      	beq.n	8006d48 <_printf_common+0xa4>
 8006d7a:	3601      	adds	r6, #1
 8006d7c:	e7d9      	b.n	8006d32 <_printf_common+0x8e>
	...

08006d80 <_printf_i>:
 8006d80:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006d84:	7e0f      	ldrb	r7, [r1, #24]
 8006d86:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006d88:	2f78      	cmp	r7, #120	; 0x78
 8006d8a:	4691      	mov	r9, r2
 8006d8c:	4680      	mov	r8, r0
 8006d8e:	460c      	mov	r4, r1
 8006d90:	469a      	mov	sl, r3
 8006d92:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006d96:	d807      	bhi.n	8006da8 <_printf_i+0x28>
 8006d98:	2f62      	cmp	r7, #98	; 0x62
 8006d9a:	d80a      	bhi.n	8006db2 <_printf_i+0x32>
 8006d9c:	2f00      	cmp	r7, #0
 8006d9e:	f000 80d4 	beq.w	8006f4a <_printf_i+0x1ca>
 8006da2:	2f58      	cmp	r7, #88	; 0x58
 8006da4:	f000 80c0 	beq.w	8006f28 <_printf_i+0x1a8>
 8006da8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006dac:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006db0:	e03a      	b.n	8006e28 <_printf_i+0xa8>
 8006db2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006db6:	2b15      	cmp	r3, #21
 8006db8:	d8f6      	bhi.n	8006da8 <_printf_i+0x28>
 8006dba:	a101      	add	r1, pc, #4	; (adr r1, 8006dc0 <_printf_i+0x40>)
 8006dbc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006dc0:	08006e19 	.word	0x08006e19
 8006dc4:	08006e2d 	.word	0x08006e2d
 8006dc8:	08006da9 	.word	0x08006da9
 8006dcc:	08006da9 	.word	0x08006da9
 8006dd0:	08006da9 	.word	0x08006da9
 8006dd4:	08006da9 	.word	0x08006da9
 8006dd8:	08006e2d 	.word	0x08006e2d
 8006ddc:	08006da9 	.word	0x08006da9
 8006de0:	08006da9 	.word	0x08006da9
 8006de4:	08006da9 	.word	0x08006da9
 8006de8:	08006da9 	.word	0x08006da9
 8006dec:	08006f31 	.word	0x08006f31
 8006df0:	08006e59 	.word	0x08006e59
 8006df4:	08006eeb 	.word	0x08006eeb
 8006df8:	08006da9 	.word	0x08006da9
 8006dfc:	08006da9 	.word	0x08006da9
 8006e00:	08006f53 	.word	0x08006f53
 8006e04:	08006da9 	.word	0x08006da9
 8006e08:	08006e59 	.word	0x08006e59
 8006e0c:	08006da9 	.word	0x08006da9
 8006e10:	08006da9 	.word	0x08006da9
 8006e14:	08006ef3 	.word	0x08006ef3
 8006e18:	682b      	ldr	r3, [r5, #0]
 8006e1a:	1d1a      	adds	r2, r3, #4
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	602a      	str	r2, [r5, #0]
 8006e20:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006e24:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006e28:	2301      	movs	r3, #1
 8006e2a:	e09f      	b.n	8006f6c <_printf_i+0x1ec>
 8006e2c:	6820      	ldr	r0, [r4, #0]
 8006e2e:	682b      	ldr	r3, [r5, #0]
 8006e30:	0607      	lsls	r7, r0, #24
 8006e32:	f103 0104 	add.w	r1, r3, #4
 8006e36:	6029      	str	r1, [r5, #0]
 8006e38:	d501      	bpl.n	8006e3e <_printf_i+0xbe>
 8006e3a:	681e      	ldr	r6, [r3, #0]
 8006e3c:	e003      	b.n	8006e46 <_printf_i+0xc6>
 8006e3e:	0646      	lsls	r6, r0, #25
 8006e40:	d5fb      	bpl.n	8006e3a <_printf_i+0xba>
 8006e42:	f9b3 6000 	ldrsh.w	r6, [r3]
 8006e46:	2e00      	cmp	r6, #0
 8006e48:	da03      	bge.n	8006e52 <_printf_i+0xd2>
 8006e4a:	232d      	movs	r3, #45	; 0x2d
 8006e4c:	4276      	negs	r6, r6
 8006e4e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006e52:	485a      	ldr	r0, [pc, #360]	; (8006fbc <_printf_i+0x23c>)
 8006e54:	230a      	movs	r3, #10
 8006e56:	e012      	b.n	8006e7e <_printf_i+0xfe>
 8006e58:	682b      	ldr	r3, [r5, #0]
 8006e5a:	6820      	ldr	r0, [r4, #0]
 8006e5c:	1d19      	adds	r1, r3, #4
 8006e5e:	6029      	str	r1, [r5, #0]
 8006e60:	0605      	lsls	r5, r0, #24
 8006e62:	d501      	bpl.n	8006e68 <_printf_i+0xe8>
 8006e64:	681e      	ldr	r6, [r3, #0]
 8006e66:	e002      	b.n	8006e6e <_printf_i+0xee>
 8006e68:	0641      	lsls	r1, r0, #25
 8006e6a:	d5fb      	bpl.n	8006e64 <_printf_i+0xe4>
 8006e6c:	881e      	ldrh	r6, [r3, #0]
 8006e6e:	4853      	ldr	r0, [pc, #332]	; (8006fbc <_printf_i+0x23c>)
 8006e70:	2f6f      	cmp	r7, #111	; 0x6f
 8006e72:	bf0c      	ite	eq
 8006e74:	2308      	moveq	r3, #8
 8006e76:	230a      	movne	r3, #10
 8006e78:	2100      	movs	r1, #0
 8006e7a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006e7e:	6865      	ldr	r5, [r4, #4]
 8006e80:	60a5      	str	r5, [r4, #8]
 8006e82:	2d00      	cmp	r5, #0
 8006e84:	bfa2      	ittt	ge
 8006e86:	6821      	ldrge	r1, [r4, #0]
 8006e88:	f021 0104 	bicge.w	r1, r1, #4
 8006e8c:	6021      	strge	r1, [r4, #0]
 8006e8e:	b90e      	cbnz	r6, 8006e94 <_printf_i+0x114>
 8006e90:	2d00      	cmp	r5, #0
 8006e92:	d04b      	beq.n	8006f2c <_printf_i+0x1ac>
 8006e94:	4615      	mov	r5, r2
 8006e96:	fbb6 f1f3 	udiv	r1, r6, r3
 8006e9a:	fb03 6711 	mls	r7, r3, r1, r6
 8006e9e:	5dc7      	ldrb	r7, [r0, r7]
 8006ea0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006ea4:	4637      	mov	r7, r6
 8006ea6:	42bb      	cmp	r3, r7
 8006ea8:	460e      	mov	r6, r1
 8006eaa:	d9f4      	bls.n	8006e96 <_printf_i+0x116>
 8006eac:	2b08      	cmp	r3, #8
 8006eae:	d10b      	bne.n	8006ec8 <_printf_i+0x148>
 8006eb0:	6823      	ldr	r3, [r4, #0]
 8006eb2:	07de      	lsls	r6, r3, #31
 8006eb4:	d508      	bpl.n	8006ec8 <_printf_i+0x148>
 8006eb6:	6923      	ldr	r3, [r4, #16]
 8006eb8:	6861      	ldr	r1, [r4, #4]
 8006eba:	4299      	cmp	r1, r3
 8006ebc:	bfde      	ittt	le
 8006ebe:	2330      	movle	r3, #48	; 0x30
 8006ec0:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006ec4:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006ec8:	1b52      	subs	r2, r2, r5
 8006eca:	6122      	str	r2, [r4, #16]
 8006ecc:	f8cd a000 	str.w	sl, [sp]
 8006ed0:	464b      	mov	r3, r9
 8006ed2:	aa03      	add	r2, sp, #12
 8006ed4:	4621      	mov	r1, r4
 8006ed6:	4640      	mov	r0, r8
 8006ed8:	f7ff fee4 	bl	8006ca4 <_printf_common>
 8006edc:	3001      	adds	r0, #1
 8006ede:	d14a      	bne.n	8006f76 <_printf_i+0x1f6>
 8006ee0:	f04f 30ff 	mov.w	r0, #4294967295
 8006ee4:	b004      	add	sp, #16
 8006ee6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006eea:	6823      	ldr	r3, [r4, #0]
 8006eec:	f043 0320 	orr.w	r3, r3, #32
 8006ef0:	6023      	str	r3, [r4, #0]
 8006ef2:	4833      	ldr	r0, [pc, #204]	; (8006fc0 <_printf_i+0x240>)
 8006ef4:	2778      	movs	r7, #120	; 0x78
 8006ef6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006efa:	6823      	ldr	r3, [r4, #0]
 8006efc:	6829      	ldr	r1, [r5, #0]
 8006efe:	061f      	lsls	r7, r3, #24
 8006f00:	f851 6b04 	ldr.w	r6, [r1], #4
 8006f04:	d402      	bmi.n	8006f0c <_printf_i+0x18c>
 8006f06:	065f      	lsls	r7, r3, #25
 8006f08:	bf48      	it	mi
 8006f0a:	b2b6      	uxthmi	r6, r6
 8006f0c:	07df      	lsls	r7, r3, #31
 8006f0e:	bf48      	it	mi
 8006f10:	f043 0320 	orrmi.w	r3, r3, #32
 8006f14:	6029      	str	r1, [r5, #0]
 8006f16:	bf48      	it	mi
 8006f18:	6023      	strmi	r3, [r4, #0]
 8006f1a:	b91e      	cbnz	r6, 8006f24 <_printf_i+0x1a4>
 8006f1c:	6823      	ldr	r3, [r4, #0]
 8006f1e:	f023 0320 	bic.w	r3, r3, #32
 8006f22:	6023      	str	r3, [r4, #0]
 8006f24:	2310      	movs	r3, #16
 8006f26:	e7a7      	b.n	8006e78 <_printf_i+0xf8>
 8006f28:	4824      	ldr	r0, [pc, #144]	; (8006fbc <_printf_i+0x23c>)
 8006f2a:	e7e4      	b.n	8006ef6 <_printf_i+0x176>
 8006f2c:	4615      	mov	r5, r2
 8006f2e:	e7bd      	b.n	8006eac <_printf_i+0x12c>
 8006f30:	682b      	ldr	r3, [r5, #0]
 8006f32:	6826      	ldr	r6, [r4, #0]
 8006f34:	6961      	ldr	r1, [r4, #20]
 8006f36:	1d18      	adds	r0, r3, #4
 8006f38:	6028      	str	r0, [r5, #0]
 8006f3a:	0635      	lsls	r5, r6, #24
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	d501      	bpl.n	8006f44 <_printf_i+0x1c4>
 8006f40:	6019      	str	r1, [r3, #0]
 8006f42:	e002      	b.n	8006f4a <_printf_i+0x1ca>
 8006f44:	0670      	lsls	r0, r6, #25
 8006f46:	d5fb      	bpl.n	8006f40 <_printf_i+0x1c0>
 8006f48:	8019      	strh	r1, [r3, #0]
 8006f4a:	2300      	movs	r3, #0
 8006f4c:	6123      	str	r3, [r4, #16]
 8006f4e:	4615      	mov	r5, r2
 8006f50:	e7bc      	b.n	8006ecc <_printf_i+0x14c>
 8006f52:	682b      	ldr	r3, [r5, #0]
 8006f54:	1d1a      	adds	r2, r3, #4
 8006f56:	602a      	str	r2, [r5, #0]
 8006f58:	681d      	ldr	r5, [r3, #0]
 8006f5a:	6862      	ldr	r2, [r4, #4]
 8006f5c:	2100      	movs	r1, #0
 8006f5e:	4628      	mov	r0, r5
 8006f60:	f7f9 f94e 	bl	8000200 <memchr>
 8006f64:	b108      	cbz	r0, 8006f6a <_printf_i+0x1ea>
 8006f66:	1b40      	subs	r0, r0, r5
 8006f68:	6060      	str	r0, [r4, #4]
 8006f6a:	6863      	ldr	r3, [r4, #4]
 8006f6c:	6123      	str	r3, [r4, #16]
 8006f6e:	2300      	movs	r3, #0
 8006f70:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006f74:	e7aa      	b.n	8006ecc <_printf_i+0x14c>
 8006f76:	6923      	ldr	r3, [r4, #16]
 8006f78:	462a      	mov	r2, r5
 8006f7a:	4649      	mov	r1, r9
 8006f7c:	4640      	mov	r0, r8
 8006f7e:	47d0      	blx	sl
 8006f80:	3001      	adds	r0, #1
 8006f82:	d0ad      	beq.n	8006ee0 <_printf_i+0x160>
 8006f84:	6823      	ldr	r3, [r4, #0]
 8006f86:	079b      	lsls	r3, r3, #30
 8006f88:	d413      	bmi.n	8006fb2 <_printf_i+0x232>
 8006f8a:	68e0      	ldr	r0, [r4, #12]
 8006f8c:	9b03      	ldr	r3, [sp, #12]
 8006f8e:	4298      	cmp	r0, r3
 8006f90:	bfb8      	it	lt
 8006f92:	4618      	movlt	r0, r3
 8006f94:	e7a6      	b.n	8006ee4 <_printf_i+0x164>
 8006f96:	2301      	movs	r3, #1
 8006f98:	4632      	mov	r2, r6
 8006f9a:	4649      	mov	r1, r9
 8006f9c:	4640      	mov	r0, r8
 8006f9e:	47d0      	blx	sl
 8006fa0:	3001      	adds	r0, #1
 8006fa2:	d09d      	beq.n	8006ee0 <_printf_i+0x160>
 8006fa4:	3501      	adds	r5, #1
 8006fa6:	68e3      	ldr	r3, [r4, #12]
 8006fa8:	9903      	ldr	r1, [sp, #12]
 8006faa:	1a5b      	subs	r3, r3, r1
 8006fac:	42ab      	cmp	r3, r5
 8006fae:	dcf2      	bgt.n	8006f96 <_printf_i+0x216>
 8006fb0:	e7eb      	b.n	8006f8a <_printf_i+0x20a>
 8006fb2:	2500      	movs	r5, #0
 8006fb4:	f104 0619 	add.w	r6, r4, #25
 8006fb8:	e7f5      	b.n	8006fa6 <_printf_i+0x226>
 8006fba:	bf00      	nop
 8006fbc:	080071c5 	.word	0x080071c5
 8006fc0:	080071d6 	.word	0x080071d6

08006fc4 <memmove>:
 8006fc4:	4288      	cmp	r0, r1
 8006fc6:	b510      	push	{r4, lr}
 8006fc8:	eb01 0402 	add.w	r4, r1, r2
 8006fcc:	d902      	bls.n	8006fd4 <memmove+0x10>
 8006fce:	4284      	cmp	r4, r0
 8006fd0:	4623      	mov	r3, r4
 8006fd2:	d807      	bhi.n	8006fe4 <memmove+0x20>
 8006fd4:	1e43      	subs	r3, r0, #1
 8006fd6:	42a1      	cmp	r1, r4
 8006fd8:	d008      	beq.n	8006fec <memmove+0x28>
 8006fda:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006fde:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006fe2:	e7f8      	b.n	8006fd6 <memmove+0x12>
 8006fe4:	4402      	add	r2, r0
 8006fe6:	4601      	mov	r1, r0
 8006fe8:	428a      	cmp	r2, r1
 8006fea:	d100      	bne.n	8006fee <memmove+0x2a>
 8006fec:	bd10      	pop	{r4, pc}
 8006fee:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006ff2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006ff6:	e7f7      	b.n	8006fe8 <memmove+0x24>

08006ff8 <_sbrk_r>:
 8006ff8:	b538      	push	{r3, r4, r5, lr}
 8006ffa:	4d06      	ldr	r5, [pc, #24]	; (8007014 <_sbrk_r+0x1c>)
 8006ffc:	2300      	movs	r3, #0
 8006ffe:	4604      	mov	r4, r0
 8007000:	4608      	mov	r0, r1
 8007002:	602b      	str	r3, [r5, #0]
 8007004:	f7f9 fe80 	bl	8000d08 <_sbrk>
 8007008:	1c43      	adds	r3, r0, #1
 800700a:	d102      	bne.n	8007012 <_sbrk_r+0x1a>
 800700c:	682b      	ldr	r3, [r5, #0]
 800700e:	b103      	cbz	r3, 8007012 <_sbrk_r+0x1a>
 8007010:	6023      	str	r3, [r4, #0]
 8007012:	bd38      	pop	{r3, r4, r5, pc}
 8007014:	20007c1c 	.word	0x20007c1c

08007018 <_realloc_r>:
 8007018:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800701c:	4680      	mov	r8, r0
 800701e:	4614      	mov	r4, r2
 8007020:	460e      	mov	r6, r1
 8007022:	b921      	cbnz	r1, 800702e <_realloc_r+0x16>
 8007024:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007028:	4611      	mov	r1, r2
 800702a:	f7ff bc57 	b.w	80068dc <_malloc_r>
 800702e:	b92a      	cbnz	r2, 800703c <_realloc_r+0x24>
 8007030:	f7ff fbe8 	bl	8006804 <_free_r>
 8007034:	4625      	mov	r5, r4
 8007036:	4628      	mov	r0, r5
 8007038:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800703c:	f000 f81b 	bl	8007076 <_malloc_usable_size_r>
 8007040:	4284      	cmp	r4, r0
 8007042:	4607      	mov	r7, r0
 8007044:	d802      	bhi.n	800704c <_realloc_r+0x34>
 8007046:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800704a:	d812      	bhi.n	8007072 <_realloc_r+0x5a>
 800704c:	4621      	mov	r1, r4
 800704e:	4640      	mov	r0, r8
 8007050:	f7ff fc44 	bl	80068dc <_malloc_r>
 8007054:	4605      	mov	r5, r0
 8007056:	2800      	cmp	r0, #0
 8007058:	d0ed      	beq.n	8007036 <_realloc_r+0x1e>
 800705a:	42bc      	cmp	r4, r7
 800705c:	4622      	mov	r2, r4
 800705e:	4631      	mov	r1, r6
 8007060:	bf28      	it	cs
 8007062:	463a      	movcs	r2, r7
 8007064:	f7ff fbc0 	bl	80067e8 <memcpy>
 8007068:	4631      	mov	r1, r6
 800706a:	4640      	mov	r0, r8
 800706c:	f7ff fbca 	bl	8006804 <_free_r>
 8007070:	e7e1      	b.n	8007036 <_realloc_r+0x1e>
 8007072:	4635      	mov	r5, r6
 8007074:	e7df      	b.n	8007036 <_realloc_r+0x1e>

08007076 <_malloc_usable_size_r>:
 8007076:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800707a:	1f18      	subs	r0, r3, #4
 800707c:	2b00      	cmp	r3, #0
 800707e:	bfbc      	itt	lt
 8007080:	580b      	ldrlt	r3, [r1, r0]
 8007082:	18c0      	addlt	r0, r0, r3
 8007084:	4770      	bx	lr
	...

08007088 <_init>:
 8007088:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800708a:	bf00      	nop
 800708c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800708e:	bc08      	pop	{r3}
 8007090:	469e      	mov	lr, r3
 8007092:	4770      	bx	lr

08007094 <_fini>:
 8007094:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007096:	bf00      	nop
 8007098:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800709a:	bc08      	pop	{r3}
 800709c:	469e      	mov	lr, r3
 800709e:	4770      	bx	lr
