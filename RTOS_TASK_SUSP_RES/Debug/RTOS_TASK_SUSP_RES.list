
RTOS_TASK_SUSP_RES.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000065d0  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a8  08006790  08006790  00016790  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006838  08006838  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  08006838  08006838  00016838  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006840  08006840  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006840  08006840  00016840  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006844  08006844  00016844  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08006848  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0001e2bc  20000014  0800685c  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2001e2d0  0800685c  0002e2d0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY
 13 .debug_info   00017e27  00000000  00000000  00020087  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000031d3  00000000  00000000  00037eae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001428  00000000  00000000  0003b088  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000fb8  00000000  00000000  0003c4b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002b16f  00000000  00000000  0003d468  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000182fb  00000000  00000000  000685d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    001108f9  00000000  00000000  000808d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005458  00000000  00000000  001911cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000058  00000000  00000000  00196624  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000014 	.word	0x20000014
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08006778 	.word	0x08006778

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000018 	.word	0x20000018
 80001fc:	08006778 	.word	0x08006778

08000200 <__aeabi_uldivmod>:
 8000200:	b953      	cbnz	r3, 8000218 <__aeabi_uldivmod+0x18>
 8000202:	b94a      	cbnz	r2, 8000218 <__aeabi_uldivmod+0x18>
 8000204:	2900      	cmp	r1, #0
 8000206:	bf08      	it	eq
 8000208:	2800      	cmpeq	r0, #0
 800020a:	bf1c      	itt	ne
 800020c:	f04f 31ff 	movne.w	r1, #4294967295
 8000210:	f04f 30ff 	movne.w	r0, #4294967295
 8000214:	f000 b970 	b.w	80004f8 <__aeabi_idiv0>
 8000218:	f1ad 0c08 	sub.w	ip, sp, #8
 800021c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000220:	f000 f806 	bl	8000230 <__udivmoddi4>
 8000224:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000228:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800022c:	b004      	add	sp, #16
 800022e:	4770      	bx	lr

08000230 <__udivmoddi4>:
 8000230:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000234:	9e08      	ldr	r6, [sp, #32]
 8000236:	460d      	mov	r5, r1
 8000238:	4604      	mov	r4, r0
 800023a:	460f      	mov	r7, r1
 800023c:	2b00      	cmp	r3, #0
 800023e:	d14a      	bne.n	80002d6 <__udivmoddi4+0xa6>
 8000240:	428a      	cmp	r2, r1
 8000242:	4694      	mov	ip, r2
 8000244:	d965      	bls.n	8000312 <__udivmoddi4+0xe2>
 8000246:	fab2 f382 	clz	r3, r2
 800024a:	b143      	cbz	r3, 800025e <__udivmoddi4+0x2e>
 800024c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000250:	f1c3 0220 	rsb	r2, r3, #32
 8000254:	409f      	lsls	r7, r3
 8000256:	fa20 f202 	lsr.w	r2, r0, r2
 800025a:	4317      	orrs	r7, r2
 800025c:	409c      	lsls	r4, r3
 800025e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000262:	fa1f f58c 	uxth.w	r5, ip
 8000266:	fbb7 f1fe 	udiv	r1, r7, lr
 800026a:	0c22      	lsrs	r2, r4, #16
 800026c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000270:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000274:	fb01 f005 	mul.w	r0, r1, r5
 8000278:	4290      	cmp	r0, r2
 800027a:	d90a      	bls.n	8000292 <__udivmoddi4+0x62>
 800027c:	eb1c 0202 	adds.w	r2, ip, r2
 8000280:	f101 37ff 	add.w	r7, r1, #4294967295
 8000284:	f080 811c 	bcs.w	80004c0 <__udivmoddi4+0x290>
 8000288:	4290      	cmp	r0, r2
 800028a:	f240 8119 	bls.w	80004c0 <__udivmoddi4+0x290>
 800028e:	3902      	subs	r1, #2
 8000290:	4462      	add	r2, ip
 8000292:	1a12      	subs	r2, r2, r0
 8000294:	b2a4      	uxth	r4, r4
 8000296:	fbb2 f0fe 	udiv	r0, r2, lr
 800029a:	fb0e 2210 	mls	r2, lr, r0, r2
 800029e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002a2:	fb00 f505 	mul.w	r5, r0, r5
 80002a6:	42a5      	cmp	r5, r4
 80002a8:	d90a      	bls.n	80002c0 <__udivmoddi4+0x90>
 80002aa:	eb1c 0404 	adds.w	r4, ip, r4
 80002ae:	f100 32ff 	add.w	r2, r0, #4294967295
 80002b2:	f080 8107 	bcs.w	80004c4 <__udivmoddi4+0x294>
 80002b6:	42a5      	cmp	r5, r4
 80002b8:	f240 8104 	bls.w	80004c4 <__udivmoddi4+0x294>
 80002bc:	4464      	add	r4, ip
 80002be:	3802      	subs	r0, #2
 80002c0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002c4:	1b64      	subs	r4, r4, r5
 80002c6:	2100      	movs	r1, #0
 80002c8:	b11e      	cbz	r6, 80002d2 <__udivmoddi4+0xa2>
 80002ca:	40dc      	lsrs	r4, r3
 80002cc:	2300      	movs	r3, #0
 80002ce:	e9c6 4300 	strd	r4, r3, [r6]
 80002d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d908      	bls.n	80002ec <__udivmoddi4+0xbc>
 80002da:	2e00      	cmp	r6, #0
 80002dc:	f000 80ed 	beq.w	80004ba <__udivmoddi4+0x28a>
 80002e0:	2100      	movs	r1, #0
 80002e2:	e9c6 0500 	strd	r0, r5, [r6]
 80002e6:	4608      	mov	r0, r1
 80002e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ec:	fab3 f183 	clz	r1, r3
 80002f0:	2900      	cmp	r1, #0
 80002f2:	d149      	bne.n	8000388 <__udivmoddi4+0x158>
 80002f4:	42ab      	cmp	r3, r5
 80002f6:	d302      	bcc.n	80002fe <__udivmoddi4+0xce>
 80002f8:	4282      	cmp	r2, r0
 80002fa:	f200 80f8 	bhi.w	80004ee <__udivmoddi4+0x2be>
 80002fe:	1a84      	subs	r4, r0, r2
 8000300:	eb65 0203 	sbc.w	r2, r5, r3
 8000304:	2001      	movs	r0, #1
 8000306:	4617      	mov	r7, r2
 8000308:	2e00      	cmp	r6, #0
 800030a:	d0e2      	beq.n	80002d2 <__udivmoddi4+0xa2>
 800030c:	e9c6 4700 	strd	r4, r7, [r6]
 8000310:	e7df      	b.n	80002d2 <__udivmoddi4+0xa2>
 8000312:	b902      	cbnz	r2, 8000316 <__udivmoddi4+0xe6>
 8000314:	deff      	udf	#255	; 0xff
 8000316:	fab2 f382 	clz	r3, r2
 800031a:	2b00      	cmp	r3, #0
 800031c:	f040 8090 	bne.w	8000440 <__udivmoddi4+0x210>
 8000320:	1a8a      	subs	r2, r1, r2
 8000322:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000326:	fa1f fe8c 	uxth.w	lr, ip
 800032a:	2101      	movs	r1, #1
 800032c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000330:	fb07 2015 	mls	r0, r7, r5, r2
 8000334:	0c22      	lsrs	r2, r4, #16
 8000336:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800033a:	fb0e f005 	mul.w	r0, lr, r5
 800033e:	4290      	cmp	r0, r2
 8000340:	d908      	bls.n	8000354 <__udivmoddi4+0x124>
 8000342:	eb1c 0202 	adds.w	r2, ip, r2
 8000346:	f105 38ff 	add.w	r8, r5, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x122>
 800034c:	4290      	cmp	r0, r2
 800034e:	f200 80cb 	bhi.w	80004e8 <__udivmoddi4+0x2b8>
 8000352:	4645      	mov	r5, r8
 8000354:	1a12      	subs	r2, r2, r0
 8000356:	b2a4      	uxth	r4, r4
 8000358:	fbb2 f0f7 	udiv	r0, r2, r7
 800035c:	fb07 2210 	mls	r2, r7, r0, r2
 8000360:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000364:	fb0e fe00 	mul.w	lr, lr, r0
 8000368:	45a6      	cmp	lr, r4
 800036a:	d908      	bls.n	800037e <__udivmoddi4+0x14e>
 800036c:	eb1c 0404 	adds.w	r4, ip, r4
 8000370:	f100 32ff 	add.w	r2, r0, #4294967295
 8000374:	d202      	bcs.n	800037c <__udivmoddi4+0x14c>
 8000376:	45a6      	cmp	lr, r4
 8000378:	f200 80bb 	bhi.w	80004f2 <__udivmoddi4+0x2c2>
 800037c:	4610      	mov	r0, r2
 800037e:	eba4 040e 	sub.w	r4, r4, lr
 8000382:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000386:	e79f      	b.n	80002c8 <__udivmoddi4+0x98>
 8000388:	f1c1 0720 	rsb	r7, r1, #32
 800038c:	408b      	lsls	r3, r1
 800038e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000392:	ea4c 0c03 	orr.w	ip, ip, r3
 8000396:	fa05 f401 	lsl.w	r4, r5, r1
 800039a:	fa20 f307 	lsr.w	r3, r0, r7
 800039e:	40fd      	lsrs	r5, r7
 80003a0:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003a4:	4323      	orrs	r3, r4
 80003a6:	fbb5 f8f9 	udiv	r8, r5, r9
 80003aa:	fa1f fe8c 	uxth.w	lr, ip
 80003ae:	fb09 5518 	mls	r5, r9, r8, r5
 80003b2:	0c1c      	lsrs	r4, r3, #16
 80003b4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003b8:	fb08 f50e 	mul.w	r5, r8, lr
 80003bc:	42a5      	cmp	r5, r4
 80003be:	fa02 f201 	lsl.w	r2, r2, r1
 80003c2:	fa00 f001 	lsl.w	r0, r0, r1
 80003c6:	d90b      	bls.n	80003e0 <__udivmoddi4+0x1b0>
 80003c8:	eb1c 0404 	adds.w	r4, ip, r4
 80003cc:	f108 3aff 	add.w	sl, r8, #4294967295
 80003d0:	f080 8088 	bcs.w	80004e4 <__udivmoddi4+0x2b4>
 80003d4:	42a5      	cmp	r5, r4
 80003d6:	f240 8085 	bls.w	80004e4 <__udivmoddi4+0x2b4>
 80003da:	f1a8 0802 	sub.w	r8, r8, #2
 80003de:	4464      	add	r4, ip
 80003e0:	1b64      	subs	r4, r4, r5
 80003e2:	b29d      	uxth	r5, r3
 80003e4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003e8:	fb09 4413 	mls	r4, r9, r3, r4
 80003ec:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003f0:	fb03 fe0e 	mul.w	lr, r3, lr
 80003f4:	45a6      	cmp	lr, r4
 80003f6:	d908      	bls.n	800040a <__udivmoddi4+0x1da>
 80003f8:	eb1c 0404 	adds.w	r4, ip, r4
 80003fc:	f103 35ff 	add.w	r5, r3, #4294967295
 8000400:	d26c      	bcs.n	80004dc <__udivmoddi4+0x2ac>
 8000402:	45a6      	cmp	lr, r4
 8000404:	d96a      	bls.n	80004dc <__udivmoddi4+0x2ac>
 8000406:	3b02      	subs	r3, #2
 8000408:	4464      	add	r4, ip
 800040a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800040e:	fba3 9502 	umull	r9, r5, r3, r2
 8000412:	eba4 040e 	sub.w	r4, r4, lr
 8000416:	42ac      	cmp	r4, r5
 8000418:	46c8      	mov	r8, r9
 800041a:	46ae      	mov	lr, r5
 800041c:	d356      	bcc.n	80004cc <__udivmoddi4+0x29c>
 800041e:	d053      	beq.n	80004c8 <__udivmoddi4+0x298>
 8000420:	b156      	cbz	r6, 8000438 <__udivmoddi4+0x208>
 8000422:	ebb0 0208 	subs.w	r2, r0, r8
 8000426:	eb64 040e 	sbc.w	r4, r4, lr
 800042a:	fa04 f707 	lsl.w	r7, r4, r7
 800042e:	40ca      	lsrs	r2, r1
 8000430:	40cc      	lsrs	r4, r1
 8000432:	4317      	orrs	r7, r2
 8000434:	e9c6 7400 	strd	r7, r4, [r6]
 8000438:	4618      	mov	r0, r3
 800043a:	2100      	movs	r1, #0
 800043c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000440:	f1c3 0120 	rsb	r1, r3, #32
 8000444:	fa02 fc03 	lsl.w	ip, r2, r3
 8000448:	fa20 f201 	lsr.w	r2, r0, r1
 800044c:	fa25 f101 	lsr.w	r1, r5, r1
 8000450:	409d      	lsls	r5, r3
 8000452:	432a      	orrs	r2, r5
 8000454:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000458:	fa1f fe8c 	uxth.w	lr, ip
 800045c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000460:	fb07 1510 	mls	r5, r7, r0, r1
 8000464:	0c11      	lsrs	r1, r2, #16
 8000466:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800046a:	fb00 f50e 	mul.w	r5, r0, lr
 800046e:	428d      	cmp	r5, r1
 8000470:	fa04 f403 	lsl.w	r4, r4, r3
 8000474:	d908      	bls.n	8000488 <__udivmoddi4+0x258>
 8000476:	eb1c 0101 	adds.w	r1, ip, r1
 800047a:	f100 38ff 	add.w	r8, r0, #4294967295
 800047e:	d22f      	bcs.n	80004e0 <__udivmoddi4+0x2b0>
 8000480:	428d      	cmp	r5, r1
 8000482:	d92d      	bls.n	80004e0 <__udivmoddi4+0x2b0>
 8000484:	3802      	subs	r0, #2
 8000486:	4461      	add	r1, ip
 8000488:	1b49      	subs	r1, r1, r5
 800048a:	b292      	uxth	r2, r2
 800048c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000490:	fb07 1115 	mls	r1, r7, r5, r1
 8000494:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000498:	fb05 f10e 	mul.w	r1, r5, lr
 800049c:	4291      	cmp	r1, r2
 800049e:	d908      	bls.n	80004b2 <__udivmoddi4+0x282>
 80004a0:	eb1c 0202 	adds.w	r2, ip, r2
 80004a4:	f105 38ff 	add.w	r8, r5, #4294967295
 80004a8:	d216      	bcs.n	80004d8 <__udivmoddi4+0x2a8>
 80004aa:	4291      	cmp	r1, r2
 80004ac:	d914      	bls.n	80004d8 <__udivmoddi4+0x2a8>
 80004ae:	3d02      	subs	r5, #2
 80004b0:	4462      	add	r2, ip
 80004b2:	1a52      	subs	r2, r2, r1
 80004b4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004b8:	e738      	b.n	800032c <__udivmoddi4+0xfc>
 80004ba:	4631      	mov	r1, r6
 80004bc:	4630      	mov	r0, r6
 80004be:	e708      	b.n	80002d2 <__udivmoddi4+0xa2>
 80004c0:	4639      	mov	r1, r7
 80004c2:	e6e6      	b.n	8000292 <__udivmoddi4+0x62>
 80004c4:	4610      	mov	r0, r2
 80004c6:	e6fb      	b.n	80002c0 <__udivmoddi4+0x90>
 80004c8:	4548      	cmp	r0, r9
 80004ca:	d2a9      	bcs.n	8000420 <__udivmoddi4+0x1f0>
 80004cc:	ebb9 0802 	subs.w	r8, r9, r2
 80004d0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004d4:	3b01      	subs	r3, #1
 80004d6:	e7a3      	b.n	8000420 <__udivmoddi4+0x1f0>
 80004d8:	4645      	mov	r5, r8
 80004da:	e7ea      	b.n	80004b2 <__udivmoddi4+0x282>
 80004dc:	462b      	mov	r3, r5
 80004de:	e794      	b.n	800040a <__udivmoddi4+0x1da>
 80004e0:	4640      	mov	r0, r8
 80004e2:	e7d1      	b.n	8000488 <__udivmoddi4+0x258>
 80004e4:	46d0      	mov	r8, sl
 80004e6:	e77b      	b.n	80003e0 <__udivmoddi4+0x1b0>
 80004e8:	3d02      	subs	r5, #2
 80004ea:	4462      	add	r2, ip
 80004ec:	e732      	b.n	8000354 <__udivmoddi4+0x124>
 80004ee:	4608      	mov	r0, r1
 80004f0:	e70a      	b.n	8000308 <__udivmoddi4+0xd8>
 80004f2:	4464      	add	r4, ip
 80004f4:	3802      	subs	r0, #2
 80004f6:	e742      	b.n	800037e <__udivmoddi4+0x14e>

080004f8 <__aeabi_idiv0>:
 80004f8:	4770      	bx	lr
 80004fa:	bf00      	nop

080004fc <HAL_GPIO_EXTI_Callback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b084      	sub	sp, #16
 8000500:	af00      	add	r7, sp, #0
 8000502:	4603      	mov	r3, r0
 8000504:	80fb      	strh	r3, [r7, #6]
	BaseType_t xhigherprioritytaskwoken = pdFALSE;
 8000506:	2300      	movs	r3, #0
 8000508:	60fb      	str	r3, [r7, #12]

	xhigherprioritytaskwoken = xTaskResumeFromISR(task2handler);
 800050a:	4b0f      	ldr	r3, [pc, #60]	; (8000548 <HAL_GPIO_EXTI_Callback+0x4c>)
 800050c:	681b      	ldr	r3, [r3, #0]
 800050e:	4618      	mov	r0, r3
 8000510:	f004 fbd2 	bl	8004cb8 <xTaskResumeFromISR>
 8000514:	4603      	mov	r3, r0
 8000516:	60fb      	str	r3, [r7, #12]
	xSemaphoreGiveFromISR(sem,&xhigherprioritytaskwoken);
 8000518:	4b0c      	ldr	r3, [pc, #48]	; (800054c <HAL_GPIO_EXTI_Callback+0x50>)
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	f107 020c 	add.w	r2, r7, #12
 8000520:	4611      	mov	r1, r2
 8000522:	4618      	mov	r0, r3
 8000524:	f003 ff1d 	bl	8004362 <xQueueGiveFromISR>

	portEND_SWITCHING_ISR(xhigherprioritytaskwoken);
 8000528:	68fb      	ldr	r3, [r7, #12]
 800052a:	2b00      	cmp	r3, #0
 800052c:	d007      	beq.n	800053e <HAL_GPIO_EXTI_Callback+0x42>
 800052e:	4b08      	ldr	r3, [pc, #32]	; (8000550 <HAL_GPIO_EXTI_Callback+0x54>)
 8000530:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000534:	601a      	str	r2, [r3, #0]
 8000536:	f3bf 8f4f 	dsb	sy
 800053a:	f3bf 8f6f 	isb	sy

}
 800053e:	bf00      	nop
 8000540:	3710      	adds	r7, #16
 8000542:	46bd      	mov	sp, r7
 8000544:	bd80      	pop	{r7, pc}
 8000546:	bf00      	nop
 8000548:	20000114 	.word	0x20000114
 800054c:	20000118 	.word	0x20000118
 8000550:	e000ed04 	.word	0xe000ed04

08000554 <task1>:



void task1(void *params)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	b082      	sub	sp, #8
 8000558:	af00      	add	r7, sp, #0
 800055a:	6078      	str	r0, [r7, #4]
	while(1)
	{
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 800055c:	2180      	movs	r1, #128	; 0x80
 800055e:	4804      	ldr	r0, [pc, #16]	; (8000570 <task1+0x1c>)
 8000560:	f000 fe84 	bl	800126c <HAL_GPIO_TogglePin>
		vTaskDelay(1000);
 8000564:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000568:	f004 faa0 	bl	8004aac <vTaskDelay>
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 800056c:	e7f6      	b.n	800055c <task1+0x8>
 800056e:	bf00      	nop
 8000570:	48000400 	.word	0x48000400

08000574 <task2>:
	}
}

void task2(void *params)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b082      	sub	sp, #8
 8000578:	af00      	add	r7, sp, #0
 800057a:	6078      	str	r0, [r7, #4]

	while(1)
	{
		vTaskSuspend(NULL);
 800057c:	2000      	movs	r0, #0
 800057e:	f004 fac9 	bl	8004b14 <vTaskSuspend>
//		xSemaphoreTake(sem,10);
		vTaskDelay(100);
 8000582:	2064      	movs	r0, #100	; 0x64
 8000584:	f004 fa92 	bl	8004aac <vTaskDelay>
		if(HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) == GPIO_PIN_SET){
 8000588:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800058c:	4809      	ldr	r0, [pc, #36]	; (80005b4 <task2+0x40>)
 800058e:	f000 fe3d 	bl	800120c <HAL_GPIO_ReadPin>
 8000592:	4603      	mov	r3, r0
 8000594:	2b01      	cmp	r3, #1
 8000596:	d1f1      	bne.n	800057c <task2+0x8>
			HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8000598:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800059c:	4806      	ldr	r0, [pc, #24]	; (80005b8 <task2+0x44>)
 800059e:	f000 fe65 	bl	800126c <HAL_GPIO_TogglePin>
			HAL_UART_Transmit(&hlpuart1, (uint8_t*)"giving for semaphore\n\r", sizeof("giving for semaphore\n\r"), 1000);
 80005a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005a6:	2217      	movs	r2, #23
 80005a8:	4904      	ldr	r1, [pc, #16]	; (80005bc <task2+0x48>)
 80005aa:	4805      	ldr	r0, [pc, #20]	; (80005c0 <task2+0x4c>)
 80005ac:	f002 fe80 	bl	80032b0 <HAL_UART_Transmit>
		vTaskSuspend(NULL);
 80005b0:	e7e4      	b.n	800057c <task2+0x8>
 80005b2:	bf00      	nop
 80005b4:	48000800 	.word	0x48000800
 80005b8:	48000400 	.word	0x48000400
 80005bc:	08006790 	.word	0x08006790
 80005c0:	20000030 	.word	0x20000030

080005c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b082      	sub	sp, #8
 80005c8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005ca:	f000 fb72 	bl	8000cb2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005ce:	f000 f835 	bl	800063c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005d2:	f000 f8f9 	bl	80007c8 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 80005d6:	f000 f883 	bl	80006e0 <MX_LPUART1_UART_Init>
  MX_TIM16_Init();
 80005da:	f000 f8cd 	bl	8000778 <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */
  xTaskCreate(task1, "task1", 256, NULL, 1, &task1handler);
 80005de:	4b10      	ldr	r3, [pc, #64]	; (8000620 <main+0x5c>)
 80005e0:	9301      	str	r3, [sp, #4]
 80005e2:	2301      	movs	r3, #1
 80005e4:	9300      	str	r3, [sp, #0]
 80005e6:	2300      	movs	r3, #0
 80005e8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80005ec:	490d      	ldr	r1, [pc, #52]	; (8000624 <main+0x60>)
 80005ee:	480e      	ldr	r0, [pc, #56]	; (8000628 <main+0x64>)
 80005f0:	f004 f8fe 	bl	80047f0 <xTaskCreate>
  xTaskCreate(task2, "task2", 256, NULL, 1, &task2handler);
 80005f4:	4b0d      	ldr	r3, [pc, #52]	; (800062c <main+0x68>)
 80005f6:	9301      	str	r3, [sp, #4]
 80005f8:	2301      	movs	r3, #1
 80005fa:	9300      	str	r3, [sp, #0]
 80005fc:	2300      	movs	r3, #0
 80005fe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000602:	490b      	ldr	r1, [pc, #44]	; (8000630 <main+0x6c>)
 8000604:	480b      	ldr	r0, [pc, #44]	; (8000634 <main+0x70>)
 8000606:	f004 f8f3 	bl	80047f0 <xTaskCreate>
  sem = xSemaphoreCreateBinary();
 800060a:	2203      	movs	r2, #3
 800060c:	2100      	movs	r1, #0
 800060e:	2001      	movs	r0, #1
 8000610:	f003 fe3a 	bl	8004288 <xQueueGenericCreate>
 8000614:	4603      	mov	r3, r0
 8000616:	4a08      	ldr	r2, [pc, #32]	; (8000638 <main+0x74>)
 8000618:	6013      	str	r3, [r2, #0]
  vTaskStartScheduler();
 800061a:	f004 fbeb 	bl	8004df4 <vTaskStartScheduler>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800061e:	e7fe      	b.n	800061e <main+0x5a>
 8000620:	20000110 	.word	0x20000110
 8000624:	080067a8 	.word	0x080067a8
 8000628:	08000555 	.word	0x08000555
 800062c:	20000114 	.word	0x20000114
 8000630:	080067b0 	.word	0x080067b0
 8000634:	08000575 	.word	0x08000575
 8000638:	20000118 	.word	0x20000118

0800063c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b096      	sub	sp, #88	; 0x58
 8000640:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000642:	f107 0314 	add.w	r3, r7, #20
 8000646:	2244      	movs	r2, #68	; 0x44
 8000648:	2100      	movs	r1, #0
 800064a:	4618      	mov	r0, r3
 800064c:	f006 f85a 	bl	8006704 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000650:	463b      	mov	r3, r7
 8000652:	2200      	movs	r2, #0
 8000654:	601a      	str	r2, [r3, #0]
 8000656:	605a      	str	r2, [r3, #4]
 8000658:	609a      	str	r2, [r3, #8]
 800065a:	60da      	str	r2, [r3, #12]
 800065c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 800065e:	2000      	movs	r0, #0
 8000660:	f000 fe56 	bl	8001310 <HAL_PWREx_ControlVoltageScaling>
 8000664:	4603      	mov	r3, r0
 8000666:	2b00      	cmp	r3, #0
 8000668:	d001      	beq.n	800066e <SystemClock_Config+0x32>
  {
    Error_Handler();
 800066a:	f000 f99d 	bl	80009a8 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800066e:	2302      	movs	r3, #2
 8000670:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000672:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000676:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000678:	2340      	movs	r3, #64	; 0x40
 800067a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800067c:	2302      	movs	r3, #2
 800067e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000680:	2302      	movs	r3, #2
 8000682:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 2;
 8000684:	2302      	movs	r3, #2
 8000686:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 30;
 8000688:	231e      	movs	r3, #30
 800068a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800068c:	2302      	movs	r3, #2
 800068e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000690:	2302      	movs	r3, #2
 8000692:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000694:	2302      	movs	r3, #2
 8000696:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000698:	f107 0314 	add.w	r3, r7, #20
 800069c:	4618      	mov	r0, r3
 800069e:	f000 feeb 	bl	8001478 <HAL_RCC_OscConfig>
 80006a2:	4603      	mov	r3, r0
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d001      	beq.n	80006ac <SystemClock_Config+0x70>
  {
    Error_Handler();
 80006a8:	f000 f97e 	bl	80009a8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006ac:	230f      	movs	r3, #15
 80006ae:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006b0:	2303      	movs	r3, #3
 80006b2:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006b4:	2300      	movs	r3, #0
 80006b6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80006bc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006be:	2300      	movs	r3, #0
 80006c0:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006c2:	463b      	mov	r3, r7
 80006c4:	2105      	movs	r1, #5
 80006c6:	4618      	mov	r0, r3
 80006c8:	f001 faf0 	bl	8001cac <HAL_RCC_ClockConfig>
 80006cc:	4603      	mov	r3, r0
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d001      	beq.n	80006d6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80006d2:	f000 f969 	bl	80009a8 <Error_Handler>
  }
}
 80006d6:	bf00      	nop
 80006d8:	3758      	adds	r7, #88	; 0x58
 80006da:	46bd      	mov	sp, r7
 80006dc:	bd80      	pop	{r7, pc}
	...

080006e0 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80006e4:	4b22      	ldr	r3, [pc, #136]	; (8000770 <MX_LPUART1_UART_Init+0x90>)
 80006e6:	4a23      	ldr	r2, [pc, #140]	; (8000774 <MX_LPUART1_UART_Init+0x94>)
 80006e8:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 80006ea:	4b21      	ldr	r3, [pc, #132]	; (8000770 <MX_LPUART1_UART_Init+0x90>)
 80006ec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006f0:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80006f2:	4b1f      	ldr	r3, [pc, #124]	; (8000770 <MX_LPUART1_UART_Init+0x90>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80006f8:	4b1d      	ldr	r3, [pc, #116]	; (8000770 <MX_LPUART1_UART_Init+0x90>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80006fe:	4b1c      	ldr	r3, [pc, #112]	; (8000770 <MX_LPUART1_UART_Init+0x90>)
 8000700:	2200      	movs	r2, #0
 8000702:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000704:	4b1a      	ldr	r3, [pc, #104]	; (8000770 <MX_LPUART1_UART_Init+0x90>)
 8000706:	220c      	movs	r2, #12
 8000708:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800070a:	4b19      	ldr	r3, [pc, #100]	; (8000770 <MX_LPUART1_UART_Init+0x90>)
 800070c:	2200      	movs	r2, #0
 800070e:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000710:	4b17      	ldr	r3, [pc, #92]	; (8000770 <MX_LPUART1_UART_Init+0x90>)
 8000712:	2200      	movs	r2, #0
 8000714:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000716:	4b16      	ldr	r3, [pc, #88]	; (8000770 <MX_LPUART1_UART_Init+0x90>)
 8000718:	2200      	movs	r2, #0
 800071a:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800071c:	4b14      	ldr	r3, [pc, #80]	; (8000770 <MX_LPUART1_UART_Init+0x90>)
 800071e:	2200      	movs	r2, #0
 8000720:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8000722:	4b13      	ldr	r3, [pc, #76]	; (8000770 <MX_LPUART1_UART_Init+0x90>)
 8000724:	2200      	movs	r2, #0
 8000726:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000728:	4811      	ldr	r0, [pc, #68]	; (8000770 <MX_LPUART1_UART_Init+0x90>)
 800072a:	f002 fd71 	bl	8003210 <HAL_UART_Init>
 800072e:	4603      	mov	r3, r0
 8000730:	2b00      	cmp	r3, #0
 8000732:	d001      	beq.n	8000738 <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 8000734:	f000 f938 	bl	80009a8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000738:	2100      	movs	r1, #0
 800073a:	480d      	ldr	r0, [pc, #52]	; (8000770 <MX_LPUART1_UART_Init+0x90>)
 800073c:	f003 fb96 	bl	8003e6c <HAL_UARTEx_SetTxFifoThreshold>
 8000740:	4603      	mov	r3, r0
 8000742:	2b00      	cmp	r3, #0
 8000744:	d001      	beq.n	800074a <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000746:	f000 f92f 	bl	80009a8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800074a:	2100      	movs	r1, #0
 800074c:	4808      	ldr	r0, [pc, #32]	; (8000770 <MX_LPUART1_UART_Init+0x90>)
 800074e:	f003 fbcb 	bl	8003ee8 <HAL_UARTEx_SetRxFifoThreshold>
 8000752:	4603      	mov	r3, r0
 8000754:	2b00      	cmp	r3, #0
 8000756:	d001      	beq.n	800075c <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000758:	f000 f926 	bl	80009a8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 800075c:	4804      	ldr	r0, [pc, #16]	; (8000770 <MX_LPUART1_UART_Init+0x90>)
 800075e:	f003 fb4c 	bl	8003dfa <HAL_UARTEx_DisableFifoMode>
 8000762:	4603      	mov	r3, r0
 8000764:	2b00      	cmp	r3, #0
 8000766:	d001      	beq.n	800076c <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000768:	f000 f91e 	bl	80009a8 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 800076c:	bf00      	nop
 800076e:	bd80      	pop	{r7, pc}
 8000770:	20000030 	.word	0x20000030
 8000774:	40008000 	.word	0x40008000

08000778 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 800077c:	4b10      	ldr	r3, [pc, #64]	; (80007c0 <MX_TIM16_Init+0x48>)
 800077e:	4a11      	ldr	r2, [pc, #68]	; (80007c4 <MX_TIM16_Init+0x4c>)
 8000780:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 12000;
 8000782:	4b0f      	ldr	r3, [pc, #60]	; (80007c0 <MX_TIM16_Init+0x48>)
 8000784:	f642 62e0 	movw	r2, #12000	; 0x2ee0
 8000788:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 800078a:	4b0d      	ldr	r3, [pc, #52]	; (80007c0 <MX_TIM16_Init+0x48>)
 800078c:	2200      	movs	r2, #0
 800078e:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 10000;
 8000790:	4b0b      	ldr	r3, [pc, #44]	; (80007c0 <MX_TIM16_Init+0x48>)
 8000792:	f242 7210 	movw	r2, #10000	; 0x2710
 8000796:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000798:	4b09      	ldr	r3, [pc, #36]	; (80007c0 <MX_TIM16_Init+0x48>)
 800079a:	2200      	movs	r2, #0
 800079c:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 800079e:	4b08      	ldr	r3, [pc, #32]	; (80007c0 <MX_TIM16_Init+0x48>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007a4:	4b06      	ldr	r3, [pc, #24]	; (80007c0 <MX_TIM16_Init+0x48>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80007aa:	4805      	ldr	r0, [pc, #20]	; (80007c0 <MX_TIM16_Init+0x48>)
 80007ac:	f002 fa86 	bl	8002cbc <HAL_TIM_Base_Init>
 80007b0:	4603      	mov	r3, r0
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d001      	beq.n	80007ba <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 80007b6:	f000 f8f7 	bl	80009a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 80007ba:	bf00      	nop
 80007bc:	bd80      	pop	{r7, pc}
 80007be:	bf00      	nop
 80007c0:	200000c4 	.word	0x200000c4
 80007c4:	40014400 	.word	0x40014400

080007c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b08c      	sub	sp, #48	; 0x30
 80007cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ce:	f107 031c 	add.w	r3, r7, #28
 80007d2:	2200      	movs	r2, #0
 80007d4:	601a      	str	r2, [r3, #0]
 80007d6:	605a      	str	r2, [r3, #4]
 80007d8:	609a      	str	r2, [r3, #8]
 80007da:	60da      	str	r2, [r3, #12]
 80007dc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007de:	4b64      	ldr	r3, [pc, #400]	; (8000970 <MX_GPIO_Init+0x1a8>)
 80007e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007e2:	4a63      	ldr	r2, [pc, #396]	; (8000970 <MX_GPIO_Init+0x1a8>)
 80007e4:	f043 0304 	orr.w	r3, r3, #4
 80007e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007ea:	4b61      	ldr	r3, [pc, #388]	; (8000970 <MX_GPIO_Init+0x1a8>)
 80007ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007ee:	f003 0304 	and.w	r3, r3, #4
 80007f2:	61bb      	str	r3, [r7, #24]
 80007f4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007f6:	4b5e      	ldr	r3, [pc, #376]	; (8000970 <MX_GPIO_Init+0x1a8>)
 80007f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007fa:	4a5d      	ldr	r2, [pc, #372]	; (8000970 <MX_GPIO_Init+0x1a8>)
 80007fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000800:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000802:	4b5b      	ldr	r3, [pc, #364]	; (8000970 <MX_GPIO_Init+0x1a8>)
 8000804:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000806:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800080a:	617b      	str	r3, [r7, #20]
 800080c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800080e:	4b58      	ldr	r3, [pc, #352]	; (8000970 <MX_GPIO_Init+0x1a8>)
 8000810:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000812:	4a57      	ldr	r2, [pc, #348]	; (8000970 <MX_GPIO_Init+0x1a8>)
 8000814:	f043 0302 	orr.w	r3, r3, #2
 8000818:	64d3      	str	r3, [r2, #76]	; 0x4c
 800081a:	4b55      	ldr	r3, [pc, #340]	; (8000970 <MX_GPIO_Init+0x1a8>)
 800081c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800081e:	f003 0302 	and.w	r3, r3, #2
 8000822:	613b      	str	r3, [r7, #16]
 8000824:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000826:	4b52      	ldr	r3, [pc, #328]	; (8000970 <MX_GPIO_Init+0x1a8>)
 8000828:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800082a:	4a51      	ldr	r2, [pc, #324]	; (8000970 <MX_GPIO_Init+0x1a8>)
 800082c:	f043 0308 	orr.w	r3, r3, #8
 8000830:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000832:	4b4f      	ldr	r3, [pc, #316]	; (8000970 <MX_GPIO_Init+0x1a8>)
 8000834:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000836:	f003 0308 	and.w	r3, r3, #8
 800083a:	60fb      	str	r3, [r7, #12]
 800083c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800083e:	4b4c      	ldr	r3, [pc, #304]	; (8000970 <MX_GPIO_Init+0x1a8>)
 8000840:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000842:	4a4b      	ldr	r2, [pc, #300]	; (8000970 <MX_GPIO_Init+0x1a8>)
 8000844:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000848:	64d3      	str	r3, [r2, #76]	; 0x4c
 800084a:	4b49      	ldr	r3, [pc, #292]	; (8000970 <MX_GPIO_Init+0x1a8>)
 800084c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800084e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000852:	60bb      	str	r3, [r7, #8]
 8000854:	68bb      	ldr	r3, [r7, #8]
  HAL_PWREx_EnableVddIO2();
 8000856:	f000 fdff 	bl	8001458 <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800085a:	4b45      	ldr	r3, [pc, #276]	; (8000970 <MX_GPIO_Init+0x1a8>)
 800085c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800085e:	4a44      	ldr	r2, [pc, #272]	; (8000970 <MX_GPIO_Init+0x1a8>)
 8000860:	f043 0301 	orr.w	r3, r3, #1
 8000864:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000866:	4b42      	ldr	r3, [pc, #264]	; (8000970 <MX_GPIO_Init+0x1a8>)
 8000868:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800086a:	f003 0301 	and.w	r3, r3, #1
 800086e:	607b      	str	r3, [r7, #4]
 8000870:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000872:	2200      	movs	r2, #0
 8000874:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 8000878:	483e      	ldr	r0, [pc, #248]	; (8000974 <MX_GPIO_Init+0x1ac>)
 800087a:	f000 fcdf 	bl	800123c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800087e:	2200      	movs	r2, #0
 8000880:	2140      	movs	r1, #64	; 0x40
 8000882:	483d      	ldr	r0, [pc, #244]	; (8000978 <MX_GPIO_Init+0x1b0>)
 8000884:	f000 fcda 	bl	800123c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000888:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800088c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800088e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000892:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000894:	2300      	movs	r3, #0
 8000896:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000898:	f107 031c 	add.w	r3, r7, #28
 800089c:	4619      	mov	r1, r3
 800089e:	4837      	ldr	r0, [pc, #220]	; (800097c <MX_GPIO_Init+0x1b4>)
 80008a0:	f000 fb22 	bl	8000ee8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 80008a4:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 80008a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008aa:	2301      	movs	r3, #1
 80008ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ae:	2300      	movs	r3, #0
 80008b0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008b2:	2300      	movs	r3, #0
 80008b4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008b6:	f107 031c 	add.w	r3, r7, #28
 80008ba:	4619      	mov	r1, r3
 80008bc:	482d      	ldr	r0, [pc, #180]	; (8000974 <MX_GPIO_Init+0x1ac>)
 80008be:	f000 fb13 	bl	8000ee8 <HAL_GPIO_Init>

  /*Configure GPIO pins : STLK_RX_Pin STLK_TX_Pin */
  GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80008c2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80008c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008c8:	2302      	movs	r3, #2
 80008ca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008cc:	2300      	movs	r3, #0
 80008ce:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008d0:	2303      	movs	r3, #3
 80008d2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80008d4:	2307      	movs	r3, #7
 80008d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008d8:	f107 031c 	add.w	r3, r7, #28
 80008dc:	4619      	mov	r1, r3
 80008de:	4828      	ldr	r0, [pc, #160]	; (8000980 <MX_GPIO_Init+0x1b8>)
 80008e0:	f000 fb02 	bl	8000ee8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80008e4:	2320      	movs	r3, #32
 80008e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008e8:	2300      	movs	r3, #0
 80008ea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ec:	2300      	movs	r3, #0
 80008ee:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80008f0:	f107 031c 	add.w	r3, r7, #28
 80008f4:	4619      	mov	r1, r3
 80008f6:	4820      	ldr	r0, [pc, #128]	; (8000978 <MX_GPIO_Init+0x1b0>)
 80008f8:	f000 faf6 	bl	8000ee8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80008fc:	2340      	movs	r3, #64	; 0x40
 80008fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000900:	2301      	movs	r3, #1
 8000902:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000904:	2300      	movs	r3, #0
 8000906:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000908:	2300      	movs	r3, #0
 800090a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800090c:	f107 031c 	add.w	r3, r7, #28
 8000910:	4619      	mov	r1, r3
 8000912:	4819      	ldr	r0, [pc, #100]	; (8000978 <MX_GPIO_Init+0x1b0>)
 8000914:	f000 fae8 	bl	8000ee8 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000918:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 800091c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800091e:	2302      	movs	r3, #2
 8000920:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000922:	2300      	movs	r3, #0
 8000924:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000926:	2303      	movs	r3, #3
 8000928:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800092a:	230a      	movs	r3, #10
 800092c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800092e:	f107 031c 	add.w	r3, r7, #28
 8000932:	4619      	mov	r1, r3
 8000934:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000938:	f000 fad6 	bl	8000ee8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800093c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000940:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000942:	2300      	movs	r3, #0
 8000944:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000946:	2300      	movs	r3, #0
 8000948:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800094a:	f107 031c 	add.w	r3, r7, #28
 800094e:	4619      	mov	r1, r3
 8000950:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000954:	f000 fac8 	bl	8000ee8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8000958:	2200      	movs	r2, #0
 800095a:	2105      	movs	r1, #5
 800095c:	2028      	movs	r0, #40	; 0x28
 800095e:	f000 fa99 	bl	8000e94 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000962:	2028      	movs	r0, #40	; 0x28
 8000964:	f000 fab2 	bl	8000ecc <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000968:	bf00      	nop
 800096a:	3730      	adds	r7, #48	; 0x30
 800096c:	46bd      	mov	sp, r7
 800096e:	bd80      	pop	{r7, pc}
 8000970:	40021000 	.word	0x40021000
 8000974:	48000400 	.word	0x48000400
 8000978:	48001800 	.word	0x48001800
 800097c:	48000800 	.word	0x48000800
 8000980:	48000c00 	.word	0x48000c00

08000984 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b082      	sub	sp, #8
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	4a04      	ldr	r2, [pc, #16]	; (80009a4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000992:	4293      	cmp	r3, r2
 8000994:	d101      	bne.n	800099a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000996:	f000 f9a5 	bl	8000ce4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800099a:	bf00      	nop
 800099c:	3708      	adds	r7, #8
 800099e:	46bd      	mov	sp, r7
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	bf00      	nop
 80009a4:	40012c00 	.word	0x40012c00

080009a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009a8:	b480      	push	{r7}
 80009aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009ac:	b672      	cpsid	i
}
 80009ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009b0:	e7fe      	b.n	80009b0 <Error_Handler+0x8>
	...

080009b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009b4:	b480      	push	{r7}
 80009b6:	b083      	sub	sp, #12
 80009b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009ba:	4b0f      	ldr	r3, [pc, #60]	; (80009f8 <HAL_MspInit+0x44>)
 80009bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009be:	4a0e      	ldr	r2, [pc, #56]	; (80009f8 <HAL_MspInit+0x44>)
 80009c0:	f043 0301 	orr.w	r3, r3, #1
 80009c4:	6613      	str	r3, [r2, #96]	; 0x60
 80009c6:	4b0c      	ldr	r3, [pc, #48]	; (80009f8 <HAL_MspInit+0x44>)
 80009c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009ca:	f003 0301 	and.w	r3, r3, #1
 80009ce:	607b      	str	r3, [r7, #4]
 80009d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009d2:	4b09      	ldr	r3, [pc, #36]	; (80009f8 <HAL_MspInit+0x44>)
 80009d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009d6:	4a08      	ldr	r2, [pc, #32]	; (80009f8 <HAL_MspInit+0x44>)
 80009d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009dc:	6593      	str	r3, [r2, #88]	; 0x58
 80009de:	4b06      	ldr	r3, [pc, #24]	; (80009f8 <HAL_MspInit+0x44>)
 80009e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009e6:	603b      	str	r3, [r7, #0]
 80009e8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009ea:	bf00      	nop
 80009ec:	370c      	adds	r7, #12
 80009ee:	46bd      	mov	sp, r7
 80009f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f4:	4770      	bx	lr
 80009f6:	bf00      	nop
 80009f8:	40021000 	.word	0x40021000

080009fc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b0ae      	sub	sp, #184	; 0xb8
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a04:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000a08:	2200      	movs	r2, #0
 8000a0a:	601a      	str	r2, [r3, #0]
 8000a0c:	605a      	str	r2, [r3, #4]
 8000a0e:	609a      	str	r2, [r3, #8]
 8000a10:	60da      	str	r2, [r3, #12]
 8000a12:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a14:	f107 0310 	add.w	r3, r7, #16
 8000a18:	2294      	movs	r2, #148	; 0x94
 8000a1a:	2100      	movs	r1, #0
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	f005 fe71 	bl	8006704 <memset>
  if(huart->Instance==LPUART1)
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	4a22      	ldr	r2, [pc, #136]	; (8000ab0 <HAL_UART_MspInit+0xb4>)
 8000a28:	4293      	cmp	r3, r2
 8000a2a:	d13d      	bne.n	8000aa8 <HAL_UART_MspInit+0xac>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000a2c:	2320      	movs	r3, #32
 8000a2e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000a30:	2300      	movs	r3, #0
 8000a32:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a34:	f107 0310 	add.w	r3, r7, #16
 8000a38:	4618      	mov	r0, r3
 8000a3a:	f001 fc27 	bl	800228c <HAL_RCCEx_PeriphCLKConfig>
 8000a3e:	4603      	mov	r3, r0
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d001      	beq.n	8000a48 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000a44:	f7ff ffb0 	bl	80009a8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000a48:	4b1a      	ldr	r3, [pc, #104]	; (8000ab4 <HAL_UART_MspInit+0xb8>)
 8000a4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000a4c:	4a19      	ldr	r2, [pc, #100]	; (8000ab4 <HAL_UART_MspInit+0xb8>)
 8000a4e:	f043 0301 	orr.w	r3, r3, #1
 8000a52:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000a54:	4b17      	ldr	r3, [pc, #92]	; (8000ab4 <HAL_UART_MspInit+0xb8>)
 8000a56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000a58:	f003 0301 	and.w	r3, r3, #1
 8000a5c:	60fb      	str	r3, [r7, #12]
 8000a5e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a60:	4b14      	ldr	r3, [pc, #80]	; (8000ab4 <HAL_UART_MspInit+0xb8>)
 8000a62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a64:	4a13      	ldr	r2, [pc, #76]	; (8000ab4 <HAL_UART_MspInit+0xb8>)
 8000a66:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a6a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a6c:	4b11      	ldr	r3, [pc, #68]	; (8000ab4 <HAL_UART_MspInit+0xb8>)
 8000a6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a74:	60bb      	str	r3, [r7, #8]
 8000a76:	68bb      	ldr	r3, [r7, #8]
    HAL_PWREx_EnableVddIO2();
 8000a78:	f000 fcee 	bl	8001458 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_TX_Pin|STLINK_RX_Pin;
 8000a7c:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000a80:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a84:	2302      	movs	r3, #2
 8000a86:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a90:	2303      	movs	r3, #3
 8000a92:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8000a96:	2308      	movs	r3, #8
 8000a98:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000a9c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4805      	ldr	r0, [pc, #20]	; (8000ab8 <HAL_UART_MspInit+0xbc>)
 8000aa4:	f000 fa20 	bl	8000ee8 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8000aa8:	bf00      	nop
 8000aaa:	37b8      	adds	r7, #184	; 0xb8
 8000aac:	46bd      	mov	sp, r7
 8000aae:	bd80      	pop	{r7, pc}
 8000ab0:	40008000 	.word	0x40008000
 8000ab4:	40021000 	.word	0x40021000
 8000ab8:	48001800 	.word	0x48001800

08000abc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b084      	sub	sp, #16
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	4a0d      	ldr	r2, [pc, #52]	; (8000b00 <HAL_TIM_Base_MspInit+0x44>)
 8000aca:	4293      	cmp	r3, r2
 8000acc:	d113      	bne.n	8000af6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 8000ace:	4b0d      	ldr	r3, [pc, #52]	; (8000b04 <HAL_TIM_Base_MspInit+0x48>)
 8000ad0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ad2:	4a0c      	ldr	r2, [pc, #48]	; (8000b04 <HAL_TIM_Base_MspInit+0x48>)
 8000ad4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ad8:	6613      	str	r3, [r2, #96]	; 0x60
 8000ada:	4b0a      	ldr	r3, [pc, #40]	; (8000b04 <HAL_TIM_Base_MspInit+0x48>)
 8000adc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ade:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ae2:	60fb      	str	r3, [r7, #12]
 8000ae4:	68fb      	ldr	r3, [r7, #12]
    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 15, 0);
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	210f      	movs	r1, #15
 8000aea:	2019      	movs	r0, #25
 8000aec:	f000 f9d2 	bl	8000e94 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000af0:	2019      	movs	r0, #25
 8000af2:	f000 f9eb 	bl	8000ecc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8000af6:	bf00      	nop
 8000af8:	3710      	adds	r7, #16
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	bf00      	nop
 8000b00:	40014400 	.word	0x40014400
 8000b04:	40021000 	.word	0x40021000

08000b08 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b08c      	sub	sp, #48	; 0x30
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000b10:	2300      	movs	r3, #0
 8000b12:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000b16:	4b2e      	ldr	r3, [pc, #184]	; (8000bd0 <HAL_InitTick+0xc8>)
 8000b18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b1a:	4a2d      	ldr	r2, [pc, #180]	; (8000bd0 <HAL_InitTick+0xc8>)
 8000b1c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000b20:	6613      	str	r3, [r2, #96]	; 0x60
 8000b22:	4b2b      	ldr	r3, [pc, #172]	; (8000bd0 <HAL_InitTick+0xc8>)
 8000b24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b26:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000b2a:	60bb      	str	r3, [r7, #8]
 8000b2c:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000b2e:	f107 020c 	add.w	r2, r7, #12
 8000b32:	f107 0310 	add.w	r3, r7, #16
 8000b36:	4611      	mov	r1, r2
 8000b38:	4618      	mov	r0, r3
 8000b3a:	f001 fab5 	bl	80020a8 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000b3e:	f001 fa9d 	bl	800207c <HAL_RCC_GetPCLK2Freq>
 8000b42:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000b44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b46:	4a23      	ldr	r2, [pc, #140]	; (8000bd4 <HAL_InitTick+0xcc>)
 8000b48:	fba2 2303 	umull	r2, r3, r2, r3
 8000b4c:	0c9b      	lsrs	r3, r3, #18
 8000b4e:	3b01      	subs	r3, #1
 8000b50:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000b52:	4b21      	ldr	r3, [pc, #132]	; (8000bd8 <HAL_InitTick+0xd0>)
 8000b54:	4a21      	ldr	r2, [pc, #132]	; (8000bdc <HAL_InitTick+0xd4>)
 8000b56:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000b58:	4b1f      	ldr	r3, [pc, #124]	; (8000bd8 <HAL_InitTick+0xd0>)
 8000b5a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000b5e:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000b60:	4a1d      	ldr	r2, [pc, #116]	; (8000bd8 <HAL_InitTick+0xd0>)
 8000b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b64:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000b66:	4b1c      	ldr	r3, [pc, #112]	; (8000bd8 <HAL_InitTick+0xd0>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b6c:	4b1a      	ldr	r3, [pc, #104]	; (8000bd8 <HAL_InitTick+0xd0>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b72:	4b19      	ldr	r3, [pc, #100]	; (8000bd8 <HAL_InitTick+0xd0>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000b78:	4817      	ldr	r0, [pc, #92]	; (8000bd8 <HAL_InitTick+0xd0>)
 8000b7a:	f002 f89f 	bl	8002cbc <HAL_TIM_Base_Init>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8000b84:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d11b      	bne.n	8000bc4 <HAL_InitTick+0xbc>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000b8c:	4812      	ldr	r0, [pc, #72]	; (8000bd8 <HAL_InitTick+0xd0>)
 8000b8e:	f002 f8ed 	bl	8002d6c <HAL_TIM_Base_Start_IT>
 8000b92:	4603      	mov	r3, r0
 8000b94:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8000b98:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d111      	bne.n	8000bc4 <HAL_InitTick+0xbc>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000ba0:	2019      	movs	r0, #25
 8000ba2:	f000 f993 	bl	8000ecc <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	2b0f      	cmp	r3, #15
 8000baa:	d808      	bhi.n	8000bbe <HAL_InitTick+0xb6>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 8000bac:	2200      	movs	r2, #0
 8000bae:	6879      	ldr	r1, [r7, #4]
 8000bb0:	2019      	movs	r0, #25
 8000bb2:	f000 f96f 	bl	8000e94 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000bb6:	4a0a      	ldr	r2, [pc, #40]	; (8000be0 <HAL_InitTick+0xd8>)
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	6013      	str	r3, [r2, #0]
 8000bbc:	e002      	b.n	8000bc4 <HAL_InitTick+0xbc>
      }
      else
      {
        status = HAL_ERROR;
 8000bbe:	2301      	movs	r3, #1
 8000bc0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000bc4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000bc8:	4618      	mov	r0, r3
 8000bca:	3730      	adds	r7, #48	; 0x30
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	bd80      	pop	{r7, pc}
 8000bd0:	40021000 	.word	0x40021000
 8000bd4:	431bde83 	.word	0x431bde83
 8000bd8:	2000011c 	.word	0x2000011c
 8000bdc:	40012c00 	.word	0x40012c00
 8000be0:	20000004 	.word	0x20000004

08000be4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000be4:	b480      	push	{r7}
 8000be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000be8:	e7fe      	b.n	8000be8 <NMI_Handler+0x4>

08000bea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bea:	b480      	push	{r7}
 8000bec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bee:	e7fe      	b.n	8000bee <HardFault_Handler+0x4>

08000bf0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bf4:	e7fe      	b.n	8000bf4 <MemManage_Handler+0x4>

08000bf6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bf6:	b480      	push	{r7}
 8000bf8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bfa:	e7fe      	b.n	8000bfa <BusFault_Handler+0x4>

08000bfc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c00:	e7fe      	b.n	8000c00 <UsageFault_Handler+0x4>

08000c02 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c02:	b480      	push	{r7}
 8000c04:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c06:	bf00      	nop
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0e:	4770      	bx	lr

08000c10 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000c14:	4803      	ldr	r0, [pc, #12]	; (8000c24 <TIM1_UP_TIM16_IRQHandler+0x14>)
 8000c16:	f002 f919 	bl	8002e4c <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 8000c1a:	4803      	ldr	r0, [pc, #12]	; (8000c28 <TIM1_UP_TIM16_IRQHandler+0x18>)
 8000c1c:	f002 f916 	bl	8002e4c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000c20:	bf00      	nop
 8000c22:	bd80      	pop	{r7, pc}
 8000c24:	2000011c 	.word	0x2000011c
 8000c28:	200000c4 	.word	0x200000c4

08000c2c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000c30:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000c34:	f000 fb34 	bl	80012a0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000c38:	bf00      	nop
 8000c3a:	bd80      	pop	{r7, pc}

08000c3c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000c40:	4b06      	ldr	r3, [pc, #24]	; (8000c5c <SystemInit+0x20>)
 8000c42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c46:	4a05      	ldr	r2, [pc, #20]	; (8000c5c <SystemInit+0x20>)
 8000c48:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c4c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000c50:	bf00      	nop
 8000c52:	46bd      	mov	sp, r7
 8000c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c58:	4770      	bx	lr
 8000c5a:	bf00      	nop
 8000c5c:	e000ed00 	.word	0xe000ed00

08000c60 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000c60:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c98 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000c64:	f7ff ffea 	bl	8000c3c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c68:	480c      	ldr	r0, [pc, #48]	; (8000c9c <LoopForever+0x6>)
  ldr r1, =_edata
 8000c6a:	490d      	ldr	r1, [pc, #52]	; (8000ca0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c6c:	4a0d      	ldr	r2, [pc, #52]	; (8000ca4 <LoopForever+0xe>)
  movs r3, #0
 8000c6e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c70:	e002      	b.n	8000c78 <LoopCopyDataInit>

08000c72 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c72:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c74:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c76:	3304      	adds	r3, #4

08000c78 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c78:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c7a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c7c:	d3f9      	bcc.n	8000c72 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c7e:	4a0a      	ldr	r2, [pc, #40]	; (8000ca8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c80:	4c0a      	ldr	r4, [pc, #40]	; (8000cac <LoopForever+0x16>)
  movs r3, #0
 8000c82:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c84:	e001      	b.n	8000c8a <LoopFillZerobss>

08000c86 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c86:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c88:	3204      	adds	r2, #4

08000c8a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c8a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c8c:	d3fb      	bcc.n	8000c86 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c8e:	f005 fd41 	bl	8006714 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000c92:	f7ff fc97 	bl	80005c4 <main>

08000c96 <LoopForever>:

LoopForever:
    b LoopForever
 8000c96:	e7fe      	b.n	8000c96 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000c98:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8000c9c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ca0:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000ca4:	08006848 	.word	0x08006848
  ldr r2, =_sbss
 8000ca8:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000cac:	2001e2d0 	.word	0x2001e2d0

08000cb0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000cb0:	e7fe      	b.n	8000cb0 <ADC1_IRQHandler>

08000cb2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cb2:	b580      	push	{r7, lr}
 8000cb4:	b082      	sub	sp, #8
 8000cb6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cbc:	2003      	movs	r0, #3
 8000cbe:	f000 f8de 	bl	8000e7e <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000cc2:	200f      	movs	r0, #15
 8000cc4:	f7ff ff20 	bl	8000b08 <HAL_InitTick>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d002      	beq.n	8000cd4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000cce:	2301      	movs	r3, #1
 8000cd0:	71fb      	strb	r3, [r7, #7]
 8000cd2:	e001      	b.n	8000cd8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000cd4:	f7ff fe6e 	bl	80009b4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000cd8:	79fb      	ldrb	r3, [r7, #7]
}
 8000cda:	4618      	mov	r0, r3
 8000cdc:	3708      	adds	r7, #8
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bd80      	pop	{r7, pc}
	...

08000ce4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000ce8:	4b06      	ldr	r3, [pc, #24]	; (8000d04 <HAL_IncTick+0x20>)
 8000cea:	781b      	ldrb	r3, [r3, #0]
 8000cec:	461a      	mov	r2, r3
 8000cee:	4b06      	ldr	r3, [pc, #24]	; (8000d08 <HAL_IncTick+0x24>)
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	4413      	add	r3, r2
 8000cf4:	4a04      	ldr	r2, [pc, #16]	; (8000d08 <HAL_IncTick+0x24>)
 8000cf6:	6013      	str	r3, [r2, #0]
}
 8000cf8:	bf00      	nop
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d00:	4770      	bx	lr
 8000d02:	bf00      	nop
 8000d04:	20000008 	.word	0x20000008
 8000d08:	20000168 	.word	0x20000168

08000d0c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	af00      	add	r7, sp, #0
  return uwTick;
 8000d10:	4b03      	ldr	r3, [pc, #12]	; (8000d20 <HAL_GetTick+0x14>)
 8000d12:	681b      	ldr	r3, [r3, #0]
}
 8000d14:	4618      	mov	r0, r3
 8000d16:	46bd      	mov	sp, r7
 8000d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1c:	4770      	bx	lr
 8000d1e:	bf00      	nop
 8000d20:	20000168 	.word	0x20000168

08000d24 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d24:	b480      	push	{r7}
 8000d26:	b085      	sub	sp, #20
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	f003 0307 	and.w	r3, r3, #7
 8000d32:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d34:	4b0c      	ldr	r3, [pc, #48]	; (8000d68 <__NVIC_SetPriorityGrouping+0x44>)
 8000d36:	68db      	ldr	r3, [r3, #12]
 8000d38:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d3a:	68ba      	ldr	r2, [r7, #8]
 8000d3c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d40:	4013      	ands	r3, r2
 8000d42:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d44:	68fb      	ldr	r3, [r7, #12]
 8000d46:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d48:	68bb      	ldr	r3, [r7, #8]
 8000d4a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d4c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d54:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d56:	4a04      	ldr	r2, [pc, #16]	; (8000d68 <__NVIC_SetPriorityGrouping+0x44>)
 8000d58:	68bb      	ldr	r3, [r7, #8]
 8000d5a:	60d3      	str	r3, [r2, #12]
}
 8000d5c:	bf00      	nop
 8000d5e:	3714      	adds	r7, #20
 8000d60:	46bd      	mov	sp, r7
 8000d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d66:	4770      	bx	lr
 8000d68:	e000ed00 	.word	0xe000ed00

08000d6c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d70:	4b04      	ldr	r3, [pc, #16]	; (8000d84 <__NVIC_GetPriorityGrouping+0x18>)
 8000d72:	68db      	ldr	r3, [r3, #12]
 8000d74:	0a1b      	lsrs	r3, r3, #8
 8000d76:	f003 0307 	and.w	r3, r3, #7
}
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d82:	4770      	bx	lr
 8000d84:	e000ed00 	.word	0xe000ed00

08000d88 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	b083      	sub	sp, #12
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	4603      	mov	r3, r0
 8000d90:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	db0b      	blt.n	8000db2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d9a:	79fb      	ldrb	r3, [r7, #7]
 8000d9c:	f003 021f 	and.w	r2, r3, #31
 8000da0:	4907      	ldr	r1, [pc, #28]	; (8000dc0 <__NVIC_EnableIRQ+0x38>)
 8000da2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000da6:	095b      	lsrs	r3, r3, #5
 8000da8:	2001      	movs	r0, #1
 8000daa:	fa00 f202 	lsl.w	r2, r0, r2
 8000dae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000db2:	bf00      	nop
 8000db4:	370c      	adds	r7, #12
 8000db6:	46bd      	mov	sp, r7
 8000db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbc:	4770      	bx	lr
 8000dbe:	bf00      	nop
 8000dc0:	e000e100 	.word	0xe000e100

08000dc4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	b083      	sub	sp, #12
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	4603      	mov	r3, r0
 8000dcc:	6039      	str	r1, [r7, #0]
 8000dce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	db0a      	blt.n	8000dee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dd8:	683b      	ldr	r3, [r7, #0]
 8000dda:	b2da      	uxtb	r2, r3
 8000ddc:	490c      	ldr	r1, [pc, #48]	; (8000e10 <__NVIC_SetPriority+0x4c>)
 8000dde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000de2:	0112      	lsls	r2, r2, #4
 8000de4:	b2d2      	uxtb	r2, r2
 8000de6:	440b      	add	r3, r1
 8000de8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000dec:	e00a      	b.n	8000e04 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dee:	683b      	ldr	r3, [r7, #0]
 8000df0:	b2da      	uxtb	r2, r3
 8000df2:	4908      	ldr	r1, [pc, #32]	; (8000e14 <__NVIC_SetPriority+0x50>)
 8000df4:	79fb      	ldrb	r3, [r7, #7]
 8000df6:	f003 030f 	and.w	r3, r3, #15
 8000dfa:	3b04      	subs	r3, #4
 8000dfc:	0112      	lsls	r2, r2, #4
 8000dfe:	b2d2      	uxtb	r2, r2
 8000e00:	440b      	add	r3, r1
 8000e02:	761a      	strb	r2, [r3, #24]
}
 8000e04:	bf00      	nop
 8000e06:	370c      	adds	r7, #12
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0e:	4770      	bx	lr
 8000e10:	e000e100 	.word	0xe000e100
 8000e14:	e000ed00 	.word	0xe000ed00

08000e18 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	b089      	sub	sp, #36	; 0x24
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	60f8      	str	r0, [r7, #12]
 8000e20:	60b9      	str	r1, [r7, #8]
 8000e22:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e24:	68fb      	ldr	r3, [r7, #12]
 8000e26:	f003 0307 	and.w	r3, r3, #7
 8000e2a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e2c:	69fb      	ldr	r3, [r7, #28]
 8000e2e:	f1c3 0307 	rsb	r3, r3, #7
 8000e32:	2b04      	cmp	r3, #4
 8000e34:	bf28      	it	cs
 8000e36:	2304      	movcs	r3, #4
 8000e38:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e3a:	69fb      	ldr	r3, [r7, #28]
 8000e3c:	3304      	adds	r3, #4
 8000e3e:	2b06      	cmp	r3, #6
 8000e40:	d902      	bls.n	8000e48 <NVIC_EncodePriority+0x30>
 8000e42:	69fb      	ldr	r3, [r7, #28]
 8000e44:	3b03      	subs	r3, #3
 8000e46:	e000      	b.n	8000e4a <NVIC_EncodePriority+0x32>
 8000e48:	2300      	movs	r3, #0
 8000e4a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e4c:	f04f 32ff 	mov.w	r2, #4294967295
 8000e50:	69bb      	ldr	r3, [r7, #24]
 8000e52:	fa02 f303 	lsl.w	r3, r2, r3
 8000e56:	43da      	mvns	r2, r3
 8000e58:	68bb      	ldr	r3, [r7, #8]
 8000e5a:	401a      	ands	r2, r3
 8000e5c:	697b      	ldr	r3, [r7, #20]
 8000e5e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e60:	f04f 31ff 	mov.w	r1, #4294967295
 8000e64:	697b      	ldr	r3, [r7, #20]
 8000e66:	fa01 f303 	lsl.w	r3, r1, r3
 8000e6a:	43d9      	mvns	r1, r3
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e70:	4313      	orrs	r3, r2
         );
}
 8000e72:	4618      	mov	r0, r3
 8000e74:	3724      	adds	r7, #36	; 0x24
 8000e76:	46bd      	mov	sp, r7
 8000e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7c:	4770      	bx	lr

08000e7e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e7e:	b580      	push	{r7, lr}
 8000e80:	b082      	sub	sp, #8
 8000e82:	af00      	add	r7, sp, #0
 8000e84:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e86:	6878      	ldr	r0, [r7, #4]
 8000e88:	f7ff ff4c 	bl	8000d24 <__NVIC_SetPriorityGrouping>
}
 8000e8c:	bf00      	nop
 8000e8e:	3708      	adds	r7, #8
 8000e90:	46bd      	mov	sp, r7
 8000e92:	bd80      	pop	{r7, pc}

08000e94 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b086      	sub	sp, #24
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	60b9      	str	r1, [r7, #8]
 8000e9e:	607a      	str	r2, [r7, #4]
 8000ea0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000ea6:	f7ff ff61 	bl	8000d6c <__NVIC_GetPriorityGrouping>
 8000eaa:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000eac:	687a      	ldr	r2, [r7, #4]
 8000eae:	68b9      	ldr	r1, [r7, #8]
 8000eb0:	6978      	ldr	r0, [r7, #20]
 8000eb2:	f7ff ffb1 	bl	8000e18 <NVIC_EncodePriority>
 8000eb6:	4602      	mov	r2, r0
 8000eb8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ebc:	4611      	mov	r1, r2
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	f7ff ff80 	bl	8000dc4 <__NVIC_SetPriority>
}
 8000ec4:	bf00      	nop
 8000ec6:	3718      	adds	r7, #24
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bd80      	pop	{r7, pc}

08000ecc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b082      	sub	sp, #8
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ed6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eda:	4618      	mov	r0, r3
 8000edc:	f7ff ff54 	bl	8000d88 <__NVIC_EnableIRQ>
}
 8000ee0:	bf00      	nop
 8000ee2:	3708      	adds	r7, #8
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bd80      	pop	{r7, pc}

08000ee8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	b087      	sub	sp, #28
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
 8000ef0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ef6:	e166      	b.n	80011c6 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000ef8:	683b      	ldr	r3, [r7, #0]
 8000efa:	681a      	ldr	r2, [r3, #0]
 8000efc:	2101      	movs	r1, #1
 8000efe:	697b      	ldr	r3, [r7, #20]
 8000f00:	fa01 f303 	lsl.w	r3, r1, r3
 8000f04:	4013      	ands	r3, r2
 8000f06:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000f08:	68fb      	ldr	r3, [r7, #12]
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	f000 8158 	beq.w	80011c0 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000f10:	683b      	ldr	r3, [r7, #0]
 8000f12:	685b      	ldr	r3, [r3, #4]
 8000f14:	f003 0303 	and.w	r3, r3, #3
 8000f18:	2b01      	cmp	r3, #1
 8000f1a:	d005      	beq.n	8000f28 <HAL_GPIO_Init+0x40>
 8000f1c:	683b      	ldr	r3, [r7, #0]
 8000f1e:	685b      	ldr	r3, [r3, #4]
 8000f20:	f003 0303 	and.w	r3, r3, #3
 8000f24:	2b02      	cmp	r3, #2
 8000f26:	d130      	bne.n	8000f8a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	689b      	ldr	r3, [r3, #8]
 8000f2c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000f2e:	697b      	ldr	r3, [r7, #20]
 8000f30:	005b      	lsls	r3, r3, #1
 8000f32:	2203      	movs	r2, #3
 8000f34:	fa02 f303 	lsl.w	r3, r2, r3
 8000f38:	43db      	mvns	r3, r3
 8000f3a:	693a      	ldr	r2, [r7, #16]
 8000f3c:	4013      	ands	r3, r2
 8000f3e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000f40:	683b      	ldr	r3, [r7, #0]
 8000f42:	68da      	ldr	r2, [r3, #12]
 8000f44:	697b      	ldr	r3, [r7, #20]
 8000f46:	005b      	lsls	r3, r3, #1
 8000f48:	fa02 f303 	lsl.w	r3, r2, r3
 8000f4c:	693a      	ldr	r2, [r7, #16]
 8000f4e:	4313      	orrs	r3, r2
 8000f50:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	693a      	ldr	r2, [r7, #16]
 8000f56:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	685b      	ldr	r3, [r3, #4]
 8000f5c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000f5e:	2201      	movs	r2, #1
 8000f60:	697b      	ldr	r3, [r7, #20]
 8000f62:	fa02 f303 	lsl.w	r3, r2, r3
 8000f66:	43db      	mvns	r3, r3
 8000f68:	693a      	ldr	r2, [r7, #16]
 8000f6a:	4013      	ands	r3, r2
 8000f6c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f6e:	683b      	ldr	r3, [r7, #0]
 8000f70:	685b      	ldr	r3, [r3, #4]
 8000f72:	091b      	lsrs	r3, r3, #4
 8000f74:	f003 0201 	and.w	r2, r3, #1
 8000f78:	697b      	ldr	r3, [r7, #20]
 8000f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7e:	693a      	ldr	r2, [r7, #16]
 8000f80:	4313      	orrs	r3, r2
 8000f82:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	693a      	ldr	r2, [r7, #16]
 8000f88:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f8a:	683b      	ldr	r3, [r7, #0]
 8000f8c:	685b      	ldr	r3, [r3, #4]
 8000f8e:	f003 0303 	and.w	r3, r3, #3
 8000f92:	2b03      	cmp	r3, #3
 8000f94:	d017      	beq.n	8000fc6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	68db      	ldr	r3, [r3, #12]
 8000f9a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000f9c:	697b      	ldr	r3, [r7, #20]
 8000f9e:	005b      	lsls	r3, r3, #1
 8000fa0:	2203      	movs	r2, #3
 8000fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa6:	43db      	mvns	r3, r3
 8000fa8:	693a      	ldr	r2, [r7, #16]
 8000faa:	4013      	ands	r3, r2
 8000fac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000fae:	683b      	ldr	r3, [r7, #0]
 8000fb0:	689a      	ldr	r2, [r3, #8]
 8000fb2:	697b      	ldr	r3, [r7, #20]
 8000fb4:	005b      	lsls	r3, r3, #1
 8000fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fba:	693a      	ldr	r2, [r7, #16]
 8000fbc:	4313      	orrs	r3, r2
 8000fbe:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	693a      	ldr	r2, [r7, #16]
 8000fc4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fc6:	683b      	ldr	r3, [r7, #0]
 8000fc8:	685b      	ldr	r3, [r3, #4]
 8000fca:	f003 0303 	and.w	r3, r3, #3
 8000fce:	2b02      	cmp	r3, #2
 8000fd0:	d123      	bne.n	800101a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000fd2:	697b      	ldr	r3, [r7, #20]
 8000fd4:	08da      	lsrs	r2, r3, #3
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	3208      	adds	r2, #8
 8000fda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000fde:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000fe0:	697b      	ldr	r3, [r7, #20]
 8000fe2:	f003 0307 	and.w	r3, r3, #7
 8000fe6:	009b      	lsls	r3, r3, #2
 8000fe8:	220f      	movs	r2, #15
 8000fea:	fa02 f303 	lsl.w	r3, r2, r3
 8000fee:	43db      	mvns	r3, r3
 8000ff0:	693a      	ldr	r2, [r7, #16]
 8000ff2:	4013      	ands	r3, r2
 8000ff4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000ff6:	683b      	ldr	r3, [r7, #0]
 8000ff8:	691a      	ldr	r2, [r3, #16]
 8000ffa:	697b      	ldr	r3, [r7, #20]
 8000ffc:	f003 0307 	and.w	r3, r3, #7
 8001000:	009b      	lsls	r3, r3, #2
 8001002:	fa02 f303 	lsl.w	r3, r2, r3
 8001006:	693a      	ldr	r2, [r7, #16]
 8001008:	4313      	orrs	r3, r2
 800100a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800100c:	697b      	ldr	r3, [r7, #20]
 800100e:	08da      	lsrs	r2, r3, #3
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	3208      	adds	r2, #8
 8001014:	6939      	ldr	r1, [r7, #16]
 8001016:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001020:	697b      	ldr	r3, [r7, #20]
 8001022:	005b      	lsls	r3, r3, #1
 8001024:	2203      	movs	r2, #3
 8001026:	fa02 f303 	lsl.w	r3, r2, r3
 800102a:	43db      	mvns	r3, r3
 800102c:	693a      	ldr	r2, [r7, #16]
 800102e:	4013      	ands	r3, r2
 8001030:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001032:	683b      	ldr	r3, [r7, #0]
 8001034:	685b      	ldr	r3, [r3, #4]
 8001036:	f003 0203 	and.w	r2, r3, #3
 800103a:	697b      	ldr	r3, [r7, #20]
 800103c:	005b      	lsls	r3, r3, #1
 800103e:	fa02 f303 	lsl.w	r3, r2, r3
 8001042:	693a      	ldr	r2, [r7, #16]
 8001044:	4313      	orrs	r3, r2
 8001046:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	693a      	ldr	r2, [r7, #16]
 800104c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800104e:	683b      	ldr	r3, [r7, #0]
 8001050:	685b      	ldr	r3, [r3, #4]
 8001052:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001056:	2b00      	cmp	r3, #0
 8001058:	f000 80b2 	beq.w	80011c0 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800105c:	4b61      	ldr	r3, [pc, #388]	; (80011e4 <HAL_GPIO_Init+0x2fc>)
 800105e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001060:	4a60      	ldr	r2, [pc, #384]	; (80011e4 <HAL_GPIO_Init+0x2fc>)
 8001062:	f043 0301 	orr.w	r3, r3, #1
 8001066:	6613      	str	r3, [r2, #96]	; 0x60
 8001068:	4b5e      	ldr	r3, [pc, #376]	; (80011e4 <HAL_GPIO_Init+0x2fc>)
 800106a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800106c:	f003 0301 	and.w	r3, r3, #1
 8001070:	60bb      	str	r3, [r7, #8]
 8001072:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001074:	4a5c      	ldr	r2, [pc, #368]	; (80011e8 <HAL_GPIO_Init+0x300>)
 8001076:	697b      	ldr	r3, [r7, #20]
 8001078:	089b      	lsrs	r3, r3, #2
 800107a:	3302      	adds	r3, #2
 800107c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001080:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001082:	697b      	ldr	r3, [r7, #20]
 8001084:	f003 0303 	and.w	r3, r3, #3
 8001088:	009b      	lsls	r3, r3, #2
 800108a:	220f      	movs	r2, #15
 800108c:	fa02 f303 	lsl.w	r3, r2, r3
 8001090:	43db      	mvns	r3, r3
 8001092:	693a      	ldr	r2, [r7, #16]
 8001094:	4013      	ands	r3, r2
 8001096:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800109e:	d02b      	beq.n	80010f8 <HAL_GPIO_Init+0x210>
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	4a52      	ldr	r2, [pc, #328]	; (80011ec <HAL_GPIO_Init+0x304>)
 80010a4:	4293      	cmp	r3, r2
 80010a6:	d025      	beq.n	80010f4 <HAL_GPIO_Init+0x20c>
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	4a51      	ldr	r2, [pc, #324]	; (80011f0 <HAL_GPIO_Init+0x308>)
 80010ac:	4293      	cmp	r3, r2
 80010ae:	d01f      	beq.n	80010f0 <HAL_GPIO_Init+0x208>
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	4a50      	ldr	r2, [pc, #320]	; (80011f4 <HAL_GPIO_Init+0x30c>)
 80010b4:	4293      	cmp	r3, r2
 80010b6:	d019      	beq.n	80010ec <HAL_GPIO_Init+0x204>
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	4a4f      	ldr	r2, [pc, #316]	; (80011f8 <HAL_GPIO_Init+0x310>)
 80010bc:	4293      	cmp	r3, r2
 80010be:	d013      	beq.n	80010e8 <HAL_GPIO_Init+0x200>
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	4a4e      	ldr	r2, [pc, #312]	; (80011fc <HAL_GPIO_Init+0x314>)
 80010c4:	4293      	cmp	r3, r2
 80010c6:	d00d      	beq.n	80010e4 <HAL_GPIO_Init+0x1fc>
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	4a4d      	ldr	r2, [pc, #308]	; (8001200 <HAL_GPIO_Init+0x318>)
 80010cc:	4293      	cmp	r3, r2
 80010ce:	d007      	beq.n	80010e0 <HAL_GPIO_Init+0x1f8>
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	4a4c      	ldr	r2, [pc, #304]	; (8001204 <HAL_GPIO_Init+0x31c>)
 80010d4:	4293      	cmp	r3, r2
 80010d6:	d101      	bne.n	80010dc <HAL_GPIO_Init+0x1f4>
 80010d8:	2307      	movs	r3, #7
 80010da:	e00e      	b.n	80010fa <HAL_GPIO_Init+0x212>
 80010dc:	2308      	movs	r3, #8
 80010de:	e00c      	b.n	80010fa <HAL_GPIO_Init+0x212>
 80010e0:	2306      	movs	r3, #6
 80010e2:	e00a      	b.n	80010fa <HAL_GPIO_Init+0x212>
 80010e4:	2305      	movs	r3, #5
 80010e6:	e008      	b.n	80010fa <HAL_GPIO_Init+0x212>
 80010e8:	2304      	movs	r3, #4
 80010ea:	e006      	b.n	80010fa <HAL_GPIO_Init+0x212>
 80010ec:	2303      	movs	r3, #3
 80010ee:	e004      	b.n	80010fa <HAL_GPIO_Init+0x212>
 80010f0:	2302      	movs	r3, #2
 80010f2:	e002      	b.n	80010fa <HAL_GPIO_Init+0x212>
 80010f4:	2301      	movs	r3, #1
 80010f6:	e000      	b.n	80010fa <HAL_GPIO_Init+0x212>
 80010f8:	2300      	movs	r3, #0
 80010fa:	697a      	ldr	r2, [r7, #20]
 80010fc:	f002 0203 	and.w	r2, r2, #3
 8001100:	0092      	lsls	r2, r2, #2
 8001102:	4093      	lsls	r3, r2
 8001104:	693a      	ldr	r2, [r7, #16]
 8001106:	4313      	orrs	r3, r2
 8001108:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800110a:	4937      	ldr	r1, [pc, #220]	; (80011e8 <HAL_GPIO_Init+0x300>)
 800110c:	697b      	ldr	r3, [r7, #20]
 800110e:	089b      	lsrs	r3, r3, #2
 8001110:	3302      	adds	r3, #2
 8001112:	693a      	ldr	r2, [r7, #16]
 8001114:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001118:	4b3b      	ldr	r3, [pc, #236]	; (8001208 <HAL_GPIO_Init+0x320>)
 800111a:	689b      	ldr	r3, [r3, #8]
 800111c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	43db      	mvns	r3, r3
 8001122:	693a      	ldr	r2, [r7, #16]
 8001124:	4013      	ands	r3, r2
 8001126:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	685b      	ldr	r3, [r3, #4]
 800112c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001130:	2b00      	cmp	r3, #0
 8001132:	d003      	beq.n	800113c <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8001134:	693a      	ldr	r2, [r7, #16]
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	4313      	orrs	r3, r2
 800113a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800113c:	4a32      	ldr	r2, [pc, #200]	; (8001208 <HAL_GPIO_Init+0x320>)
 800113e:	693b      	ldr	r3, [r7, #16]
 8001140:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001142:	4b31      	ldr	r3, [pc, #196]	; (8001208 <HAL_GPIO_Init+0x320>)
 8001144:	68db      	ldr	r3, [r3, #12]
 8001146:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	43db      	mvns	r3, r3
 800114c:	693a      	ldr	r2, [r7, #16]
 800114e:	4013      	ands	r3, r2
 8001150:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001152:	683b      	ldr	r3, [r7, #0]
 8001154:	685b      	ldr	r3, [r3, #4]
 8001156:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800115a:	2b00      	cmp	r3, #0
 800115c:	d003      	beq.n	8001166 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 800115e:	693a      	ldr	r2, [r7, #16]
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	4313      	orrs	r3, r2
 8001164:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001166:	4a28      	ldr	r2, [pc, #160]	; (8001208 <HAL_GPIO_Init+0x320>)
 8001168:	693b      	ldr	r3, [r7, #16]
 800116a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800116c:	4b26      	ldr	r3, [pc, #152]	; (8001208 <HAL_GPIO_Init+0x320>)
 800116e:	685b      	ldr	r3, [r3, #4]
 8001170:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	43db      	mvns	r3, r3
 8001176:	693a      	ldr	r2, [r7, #16]
 8001178:	4013      	ands	r3, r2
 800117a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	685b      	ldr	r3, [r3, #4]
 8001180:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001184:	2b00      	cmp	r3, #0
 8001186:	d003      	beq.n	8001190 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8001188:	693a      	ldr	r2, [r7, #16]
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	4313      	orrs	r3, r2
 800118e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001190:	4a1d      	ldr	r2, [pc, #116]	; (8001208 <HAL_GPIO_Init+0x320>)
 8001192:	693b      	ldr	r3, [r7, #16]
 8001194:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001196:	4b1c      	ldr	r3, [pc, #112]	; (8001208 <HAL_GPIO_Init+0x320>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	43db      	mvns	r3, r3
 80011a0:	693a      	ldr	r2, [r7, #16]
 80011a2:	4013      	ands	r3, r2
 80011a4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	685b      	ldr	r3, [r3, #4]
 80011aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d003      	beq.n	80011ba <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 80011b2:	693a      	ldr	r2, [r7, #16]
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	4313      	orrs	r3, r2
 80011b8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80011ba:	4a13      	ldr	r2, [pc, #76]	; (8001208 <HAL_GPIO_Init+0x320>)
 80011bc:	693b      	ldr	r3, [r7, #16]
 80011be:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80011c0:	697b      	ldr	r3, [r7, #20]
 80011c2:	3301      	adds	r3, #1
 80011c4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011c6:	683b      	ldr	r3, [r7, #0]
 80011c8:	681a      	ldr	r2, [r3, #0]
 80011ca:	697b      	ldr	r3, [r7, #20]
 80011cc:	fa22 f303 	lsr.w	r3, r2, r3
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	f47f ae91 	bne.w	8000ef8 <HAL_GPIO_Init+0x10>
  }
}
 80011d6:	bf00      	nop
 80011d8:	bf00      	nop
 80011da:	371c      	adds	r7, #28
 80011dc:	46bd      	mov	sp, r7
 80011de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e2:	4770      	bx	lr
 80011e4:	40021000 	.word	0x40021000
 80011e8:	40010000 	.word	0x40010000
 80011ec:	48000400 	.word	0x48000400
 80011f0:	48000800 	.word	0x48000800
 80011f4:	48000c00 	.word	0x48000c00
 80011f8:	48001000 	.word	0x48001000
 80011fc:	48001400 	.word	0x48001400
 8001200:	48001800 	.word	0x48001800
 8001204:	48001c00 	.word	0x48001c00
 8001208:	40010400 	.word	0x40010400

0800120c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800120c:	b480      	push	{r7}
 800120e:	b085      	sub	sp, #20
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
 8001214:	460b      	mov	r3, r1
 8001216:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	691a      	ldr	r2, [r3, #16]
 800121c:	887b      	ldrh	r3, [r7, #2]
 800121e:	4013      	ands	r3, r2
 8001220:	2b00      	cmp	r3, #0
 8001222:	d002      	beq.n	800122a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001224:	2301      	movs	r3, #1
 8001226:	73fb      	strb	r3, [r7, #15]
 8001228:	e001      	b.n	800122e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800122a:	2300      	movs	r3, #0
 800122c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800122e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001230:	4618      	mov	r0, r3
 8001232:	3714      	adds	r7, #20
 8001234:	46bd      	mov	sp, r7
 8001236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123a:	4770      	bx	lr

0800123c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800123c:	b480      	push	{r7}
 800123e:	b083      	sub	sp, #12
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
 8001244:	460b      	mov	r3, r1
 8001246:	807b      	strh	r3, [r7, #2]
 8001248:	4613      	mov	r3, r2
 800124a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800124c:	787b      	ldrb	r3, [r7, #1]
 800124e:	2b00      	cmp	r3, #0
 8001250:	d003      	beq.n	800125a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001252:	887a      	ldrh	r2, [r7, #2]
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001258:	e002      	b.n	8001260 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800125a:	887a      	ldrh	r2, [r7, #2]
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001260:	bf00      	nop
 8001262:	370c      	adds	r7, #12
 8001264:	46bd      	mov	sp, r7
 8001266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126a:	4770      	bx	lr

0800126c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800126c:	b480      	push	{r7}
 800126e:	b085      	sub	sp, #20
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
 8001274:	460b      	mov	r3, r1
 8001276:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	695b      	ldr	r3, [r3, #20]
 800127c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800127e:	887a      	ldrh	r2, [r7, #2]
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	4013      	ands	r3, r2
 8001284:	041a      	lsls	r2, r3, #16
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	43d9      	mvns	r1, r3
 800128a:	887b      	ldrh	r3, [r7, #2]
 800128c:	400b      	ands	r3, r1
 800128e:	431a      	orrs	r2, r3
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	619a      	str	r2, [r3, #24]
}
 8001294:	bf00      	nop
 8001296:	3714      	adds	r7, #20
 8001298:	46bd      	mov	sp, r7
 800129a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129e:	4770      	bx	lr

080012a0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b082      	sub	sp, #8
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	4603      	mov	r3, r0
 80012a8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80012aa:	4b08      	ldr	r3, [pc, #32]	; (80012cc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80012ac:	695a      	ldr	r2, [r3, #20]
 80012ae:	88fb      	ldrh	r3, [r7, #6]
 80012b0:	4013      	ands	r3, r2
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d006      	beq.n	80012c4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80012b6:	4a05      	ldr	r2, [pc, #20]	; (80012cc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80012b8:	88fb      	ldrh	r3, [r7, #6]
 80012ba:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80012bc:	88fb      	ldrh	r3, [r7, #6]
 80012be:	4618      	mov	r0, r3
 80012c0:	f7ff f91c 	bl	80004fc <HAL_GPIO_EXTI_Callback>
  }
}
 80012c4:	bf00      	nop
 80012c6:	3708      	adds	r7, #8
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bd80      	pop	{r7, pc}
 80012cc:	40010400 	.word	0x40010400

080012d0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80012d0:	b480      	push	{r7}
 80012d2:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80012d4:	4b0d      	ldr	r3, [pc, #52]	; (800130c <HAL_PWREx_GetVoltageRange+0x3c>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80012dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80012e0:	d102      	bne.n	80012e8 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 80012e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80012e6:	e00b      	b.n	8001300 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 80012e8:	4b08      	ldr	r3, [pc, #32]	; (800130c <HAL_PWREx_GetVoltageRange+0x3c>)
 80012ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80012ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80012f6:	d102      	bne.n	80012fe <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 80012f8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80012fc:	e000      	b.n	8001300 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 80012fe:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8001300:	4618      	mov	r0, r3
 8001302:	46bd      	mov	sp, r7
 8001304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001308:	4770      	bx	lr
 800130a:	bf00      	nop
 800130c:	40007000 	.word	0x40007000

08001310 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001310:	b480      	push	{r7}
 8001312:	b085      	sub	sp, #20
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	2b00      	cmp	r3, #0
 800131c:	d141      	bne.n	80013a2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800131e:	4b4b      	ldr	r3, [pc, #300]	; (800144c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001326:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800132a:	d131      	bne.n	8001390 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800132c:	4b47      	ldr	r3, [pc, #284]	; (800144c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800132e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001332:	4a46      	ldr	r2, [pc, #280]	; (800144c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001334:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001338:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800133c:	4b43      	ldr	r3, [pc, #268]	; (800144c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001344:	4a41      	ldr	r2, [pc, #260]	; (800144c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001346:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800134a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 800134c:	4b40      	ldr	r3, [pc, #256]	; (8001450 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	2232      	movs	r2, #50	; 0x32
 8001352:	fb02 f303 	mul.w	r3, r2, r3
 8001356:	4a3f      	ldr	r2, [pc, #252]	; (8001454 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001358:	fba2 2303 	umull	r2, r3, r2, r3
 800135c:	0c9b      	lsrs	r3, r3, #18
 800135e:	3301      	adds	r3, #1
 8001360:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001362:	e002      	b.n	800136a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	3b01      	subs	r3, #1
 8001368:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800136a:	4b38      	ldr	r3, [pc, #224]	; (800144c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800136c:	695b      	ldr	r3, [r3, #20]
 800136e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001372:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001376:	d102      	bne.n	800137e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	2b00      	cmp	r3, #0
 800137c:	d1f2      	bne.n	8001364 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800137e:	4b33      	ldr	r3, [pc, #204]	; (800144c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001380:	695b      	ldr	r3, [r3, #20]
 8001382:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001386:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800138a:	d158      	bne.n	800143e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800138c:	2303      	movs	r3, #3
 800138e:	e057      	b.n	8001440 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001390:	4b2e      	ldr	r3, [pc, #184]	; (800144c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001392:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001396:	4a2d      	ldr	r2, [pc, #180]	; (800144c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001398:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800139c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80013a0:	e04d      	b.n	800143e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80013a8:	d141      	bne.n	800142e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80013aa:	4b28      	ldr	r3, [pc, #160]	; (800144c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80013b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80013b6:	d131      	bne.n	800141c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80013b8:	4b24      	ldr	r3, [pc, #144]	; (800144c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80013be:	4a23      	ldr	r2, [pc, #140]	; (800144c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013c4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80013c8:	4b20      	ldr	r3, [pc, #128]	; (800144c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80013d0:	4a1e      	ldr	r2, [pc, #120]	; (800144c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013d2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80013d6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80013d8:	4b1d      	ldr	r3, [pc, #116]	; (8001450 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	2232      	movs	r2, #50	; 0x32
 80013de:	fb02 f303 	mul.w	r3, r2, r3
 80013e2:	4a1c      	ldr	r2, [pc, #112]	; (8001454 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80013e4:	fba2 2303 	umull	r2, r3, r2, r3
 80013e8:	0c9b      	lsrs	r3, r3, #18
 80013ea:	3301      	adds	r3, #1
 80013ec:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80013ee:	e002      	b.n	80013f6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	3b01      	subs	r3, #1
 80013f4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80013f6:	4b15      	ldr	r3, [pc, #84]	; (800144c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013f8:	695b      	ldr	r3, [r3, #20]
 80013fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001402:	d102      	bne.n	800140a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	2b00      	cmp	r3, #0
 8001408:	d1f2      	bne.n	80013f0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800140a:	4b10      	ldr	r3, [pc, #64]	; (800144c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800140c:	695b      	ldr	r3, [r3, #20]
 800140e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001412:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001416:	d112      	bne.n	800143e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001418:	2303      	movs	r3, #3
 800141a:	e011      	b.n	8001440 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800141c:	4b0b      	ldr	r3, [pc, #44]	; (800144c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800141e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001422:	4a0a      	ldr	r2, [pc, #40]	; (800144c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001424:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001428:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800142c:	e007      	b.n	800143e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800142e:	4b07      	ldr	r3, [pc, #28]	; (800144c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001436:	4a05      	ldr	r2, [pc, #20]	; (800144c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001438:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800143c:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800143e:	2300      	movs	r3, #0
}
 8001440:	4618      	mov	r0, r3
 8001442:	3714      	adds	r7, #20
 8001444:	46bd      	mov	sp, r7
 8001446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144a:	4770      	bx	lr
 800144c:	40007000 	.word	0x40007000
 8001450:	20000000 	.word	0x20000000
 8001454:	431bde83 	.word	0x431bde83

08001458 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8001458:	b480      	push	{r7}
 800145a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 800145c:	4b05      	ldr	r3, [pc, #20]	; (8001474 <HAL_PWREx_EnableVddIO2+0x1c>)
 800145e:	685b      	ldr	r3, [r3, #4]
 8001460:	4a04      	ldr	r2, [pc, #16]	; (8001474 <HAL_PWREx_EnableVddIO2+0x1c>)
 8001462:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001466:	6053      	str	r3, [r2, #4]
}
 8001468:	bf00      	nop
 800146a:	46bd      	mov	sp, r7
 800146c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001470:	4770      	bx	lr
 8001472:	bf00      	nop
 8001474:	40007000 	.word	0x40007000

08001478 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b088      	sub	sp, #32
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	2b00      	cmp	r3, #0
 8001484:	d102      	bne.n	800148c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001486:	2301      	movs	r3, #1
 8001488:	f000 bc08 	b.w	8001c9c <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800148c:	4b96      	ldr	r3, [pc, #600]	; (80016e8 <HAL_RCC_OscConfig+0x270>)
 800148e:	689b      	ldr	r3, [r3, #8]
 8001490:	f003 030c 	and.w	r3, r3, #12
 8001494:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001496:	4b94      	ldr	r3, [pc, #592]	; (80016e8 <HAL_RCC_OscConfig+0x270>)
 8001498:	68db      	ldr	r3, [r3, #12]
 800149a:	f003 0303 	and.w	r3, r3, #3
 800149e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	f003 0310 	and.w	r3, r3, #16
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	f000 80e4 	beq.w	8001676 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80014ae:	69bb      	ldr	r3, [r7, #24]
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d007      	beq.n	80014c4 <HAL_RCC_OscConfig+0x4c>
 80014b4:	69bb      	ldr	r3, [r7, #24]
 80014b6:	2b0c      	cmp	r3, #12
 80014b8:	f040 808b 	bne.w	80015d2 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80014bc:	697b      	ldr	r3, [r7, #20]
 80014be:	2b01      	cmp	r3, #1
 80014c0:	f040 8087 	bne.w	80015d2 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80014c4:	4b88      	ldr	r3, [pc, #544]	; (80016e8 <HAL_RCC_OscConfig+0x270>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	f003 0302 	and.w	r3, r3, #2
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d005      	beq.n	80014dc <HAL_RCC_OscConfig+0x64>
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	699b      	ldr	r3, [r3, #24]
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d101      	bne.n	80014dc <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80014d8:	2301      	movs	r3, #1
 80014da:	e3df      	b.n	8001c9c <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	6a1a      	ldr	r2, [r3, #32]
 80014e0:	4b81      	ldr	r3, [pc, #516]	; (80016e8 <HAL_RCC_OscConfig+0x270>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f003 0308 	and.w	r3, r3, #8
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d004      	beq.n	80014f6 <HAL_RCC_OscConfig+0x7e>
 80014ec:	4b7e      	ldr	r3, [pc, #504]	; (80016e8 <HAL_RCC_OscConfig+0x270>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80014f4:	e005      	b.n	8001502 <HAL_RCC_OscConfig+0x8a>
 80014f6:	4b7c      	ldr	r3, [pc, #496]	; (80016e8 <HAL_RCC_OscConfig+0x270>)
 80014f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80014fc:	091b      	lsrs	r3, r3, #4
 80014fe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001502:	4293      	cmp	r3, r2
 8001504:	d223      	bcs.n	800154e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	6a1b      	ldr	r3, [r3, #32]
 800150a:	4618      	mov	r0, r3
 800150c:	f000 fdfe 	bl	800210c <RCC_SetFlashLatencyFromMSIRange>
 8001510:	4603      	mov	r3, r0
 8001512:	2b00      	cmp	r3, #0
 8001514:	d001      	beq.n	800151a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8001516:	2301      	movs	r3, #1
 8001518:	e3c0      	b.n	8001c9c <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800151a:	4b73      	ldr	r3, [pc, #460]	; (80016e8 <HAL_RCC_OscConfig+0x270>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	4a72      	ldr	r2, [pc, #456]	; (80016e8 <HAL_RCC_OscConfig+0x270>)
 8001520:	f043 0308 	orr.w	r3, r3, #8
 8001524:	6013      	str	r3, [r2, #0]
 8001526:	4b70      	ldr	r3, [pc, #448]	; (80016e8 <HAL_RCC_OscConfig+0x270>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	6a1b      	ldr	r3, [r3, #32]
 8001532:	496d      	ldr	r1, [pc, #436]	; (80016e8 <HAL_RCC_OscConfig+0x270>)
 8001534:	4313      	orrs	r3, r2
 8001536:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001538:	4b6b      	ldr	r3, [pc, #428]	; (80016e8 <HAL_RCC_OscConfig+0x270>)
 800153a:	685b      	ldr	r3, [r3, #4]
 800153c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	69db      	ldr	r3, [r3, #28]
 8001544:	021b      	lsls	r3, r3, #8
 8001546:	4968      	ldr	r1, [pc, #416]	; (80016e8 <HAL_RCC_OscConfig+0x270>)
 8001548:	4313      	orrs	r3, r2
 800154a:	604b      	str	r3, [r1, #4]
 800154c:	e025      	b.n	800159a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800154e:	4b66      	ldr	r3, [pc, #408]	; (80016e8 <HAL_RCC_OscConfig+0x270>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	4a65      	ldr	r2, [pc, #404]	; (80016e8 <HAL_RCC_OscConfig+0x270>)
 8001554:	f043 0308 	orr.w	r3, r3, #8
 8001558:	6013      	str	r3, [r2, #0]
 800155a:	4b63      	ldr	r3, [pc, #396]	; (80016e8 <HAL_RCC_OscConfig+0x270>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	6a1b      	ldr	r3, [r3, #32]
 8001566:	4960      	ldr	r1, [pc, #384]	; (80016e8 <HAL_RCC_OscConfig+0x270>)
 8001568:	4313      	orrs	r3, r2
 800156a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800156c:	4b5e      	ldr	r3, [pc, #376]	; (80016e8 <HAL_RCC_OscConfig+0x270>)
 800156e:	685b      	ldr	r3, [r3, #4]
 8001570:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	69db      	ldr	r3, [r3, #28]
 8001578:	021b      	lsls	r3, r3, #8
 800157a:	495b      	ldr	r1, [pc, #364]	; (80016e8 <HAL_RCC_OscConfig+0x270>)
 800157c:	4313      	orrs	r3, r2
 800157e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001580:	69bb      	ldr	r3, [r7, #24]
 8001582:	2b00      	cmp	r3, #0
 8001584:	d109      	bne.n	800159a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	6a1b      	ldr	r3, [r3, #32]
 800158a:	4618      	mov	r0, r3
 800158c:	f000 fdbe 	bl	800210c <RCC_SetFlashLatencyFromMSIRange>
 8001590:	4603      	mov	r3, r0
 8001592:	2b00      	cmp	r3, #0
 8001594:	d001      	beq.n	800159a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8001596:	2301      	movs	r3, #1
 8001598:	e380      	b.n	8001c9c <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800159a:	f000 fcc1 	bl	8001f20 <HAL_RCC_GetSysClockFreq>
 800159e:	4602      	mov	r2, r0
 80015a0:	4b51      	ldr	r3, [pc, #324]	; (80016e8 <HAL_RCC_OscConfig+0x270>)
 80015a2:	689b      	ldr	r3, [r3, #8]
 80015a4:	091b      	lsrs	r3, r3, #4
 80015a6:	f003 030f 	and.w	r3, r3, #15
 80015aa:	4950      	ldr	r1, [pc, #320]	; (80016ec <HAL_RCC_OscConfig+0x274>)
 80015ac:	5ccb      	ldrb	r3, [r1, r3]
 80015ae:	f003 031f 	and.w	r3, r3, #31
 80015b2:	fa22 f303 	lsr.w	r3, r2, r3
 80015b6:	4a4e      	ldr	r2, [pc, #312]	; (80016f0 <HAL_RCC_OscConfig+0x278>)
 80015b8:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80015ba:	4b4e      	ldr	r3, [pc, #312]	; (80016f4 <HAL_RCC_OscConfig+0x27c>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	4618      	mov	r0, r3
 80015c0:	f7ff faa2 	bl	8000b08 <HAL_InitTick>
 80015c4:	4603      	mov	r3, r0
 80015c6:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80015c8:	7bfb      	ldrb	r3, [r7, #15]
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d052      	beq.n	8001674 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80015ce:	7bfb      	ldrb	r3, [r7, #15]
 80015d0:	e364      	b.n	8001c9c <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	699b      	ldr	r3, [r3, #24]
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d032      	beq.n	8001640 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80015da:	4b43      	ldr	r3, [pc, #268]	; (80016e8 <HAL_RCC_OscConfig+0x270>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	4a42      	ldr	r2, [pc, #264]	; (80016e8 <HAL_RCC_OscConfig+0x270>)
 80015e0:	f043 0301 	orr.w	r3, r3, #1
 80015e4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80015e6:	f7ff fb91 	bl	8000d0c <HAL_GetTick>
 80015ea:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80015ec:	e008      	b.n	8001600 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80015ee:	f7ff fb8d 	bl	8000d0c <HAL_GetTick>
 80015f2:	4602      	mov	r2, r0
 80015f4:	693b      	ldr	r3, [r7, #16]
 80015f6:	1ad3      	subs	r3, r2, r3
 80015f8:	2b02      	cmp	r3, #2
 80015fa:	d901      	bls.n	8001600 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80015fc:	2303      	movs	r3, #3
 80015fe:	e34d      	b.n	8001c9c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001600:	4b39      	ldr	r3, [pc, #228]	; (80016e8 <HAL_RCC_OscConfig+0x270>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f003 0302 	and.w	r3, r3, #2
 8001608:	2b00      	cmp	r3, #0
 800160a:	d0f0      	beq.n	80015ee <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800160c:	4b36      	ldr	r3, [pc, #216]	; (80016e8 <HAL_RCC_OscConfig+0x270>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	4a35      	ldr	r2, [pc, #212]	; (80016e8 <HAL_RCC_OscConfig+0x270>)
 8001612:	f043 0308 	orr.w	r3, r3, #8
 8001616:	6013      	str	r3, [r2, #0]
 8001618:	4b33      	ldr	r3, [pc, #204]	; (80016e8 <HAL_RCC_OscConfig+0x270>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	6a1b      	ldr	r3, [r3, #32]
 8001624:	4930      	ldr	r1, [pc, #192]	; (80016e8 <HAL_RCC_OscConfig+0x270>)
 8001626:	4313      	orrs	r3, r2
 8001628:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800162a:	4b2f      	ldr	r3, [pc, #188]	; (80016e8 <HAL_RCC_OscConfig+0x270>)
 800162c:	685b      	ldr	r3, [r3, #4]
 800162e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	69db      	ldr	r3, [r3, #28]
 8001636:	021b      	lsls	r3, r3, #8
 8001638:	492b      	ldr	r1, [pc, #172]	; (80016e8 <HAL_RCC_OscConfig+0x270>)
 800163a:	4313      	orrs	r3, r2
 800163c:	604b      	str	r3, [r1, #4]
 800163e:	e01a      	b.n	8001676 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001640:	4b29      	ldr	r3, [pc, #164]	; (80016e8 <HAL_RCC_OscConfig+0x270>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	4a28      	ldr	r2, [pc, #160]	; (80016e8 <HAL_RCC_OscConfig+0x270>)
 8001646:	f023 0301 	bic.w	r3, r3, #1
 800164a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800164c:	f7ff fb5e 	bl	8000d0c <HAL_GetTick>
 8001650:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001652:	e008      	b.n	8001666 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001654:	f7ff fb5a 	bl	8000d0c <HAL_GetTick>
 8001658:	4602      	mov	r2, r0
 800165a:	693b      	ldr	r3, [r7, #16]
 800165c:	1ad3      	subs	r3, r2, r3
 800165e:	2b02      	cmp	r3, #2
 8001660:	d901      	bls.n	8001666 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8001662:	2303      	movs	r3, #3
 8001664:	e31a      	b.n	8001c9c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001666:	4b20      	ldr	r3, [pc, #128]	; (80016e8 <HAL_RCC_OscConfig+0x270>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f003 0302 	and.w	r3, r3, #2
 800166e:	2b00      	cmp	r3, #0
 8001670:	d1f0      	bne.n	8001654 <HAL_RCC_OscConfig+0x1dc>
 8001672:	e000      	b.n	8001676 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001674:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f003 0301 	and.w	r3, r3, #1
 800167e:	2b00      	cmp	r3, #0
 8001680:	d073      	beq.n	800176a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001682:	69bb      	ldr	r3, [r7, #24]
 8001684:	2b08      	cmp	r3, #8
 8001686:	d005      	beq.n	8001694 <HAL_RCC_OscConfig+0x21c>
 8001688:	69bb      	ldr	r3, [r7, #24]
 800168a:	2b0c      	cmp	r3, #12
 800168c:	d10e      	bne.n	80016ac <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800168e:	697b      	ldr	r3, [r7, #20]
 8001690:	2b03      	cmp	r3, #3
 8001692:	d10b      	bne.n	80016ac <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001694:	4b14      	ldr	r3, [pc, #80]	; (80016e8 <HAL_RCC_OscConfig+0x270>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800169c:	2b00      	cmp	r3, #0
 800169e:	d063      	beq.n	8001768 <HAL_RCC_OscConfig+0x2f0>
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	685b      	ldr	r3, [r3, #4]
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d15f      	bne.n	8001768 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80016a8:	2301      	movs	r3, #1
 80016aa:	e2f7      	b.n	8001c9c <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	685b      	ldr	r3, [r3, #4]
 80016b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016b4:	d106      	bne.n	80016c4 <HAL_RCC_OscConfig+0x24c>
 80016b6:	4b0c      	ldr	r3, [pc, #48]	; (80016e8 <HAL_RCC_OscConfig+0x270>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	4a0b      	ldr	r2, [pc, #44]	; (80016e8 <HAL_RCC_OscConfig+0x270>)
 80016bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016c0:	6013      	str	r3, [r2, #0]
 80016c2:	e025      	b.n	8001710 <HAL_RCC_OscConfig+0x298>
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	685b      	ldr	r3, [r3, #4]
 80016c8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80016cc:	d114      	bne.n	80016f8 <HAL_RCC_OscConfig+0x280>
 80016ce:	4b06      	ldr	r3, [pc, #24]	; (80016e8 <HAL_RCC_OscConfig+0x270>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	4a05      	ldr	r2, [pc, #20]	; (80016e8 <HAL_RCC_OscConfig+0x270>)
 80016d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80016d8:	6013      	str	r3, [r2, #0]
 80016da:	4b03      	ldr	r3, [pc, #12]	; (80016e8 <HAL_RCC_OscConfig+0x270>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	4a02      	ldr	r2, [pc, #8]	; (80016e8 <HAL_RCC_OscConfig+0x270>)
 80016e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016e4:	6013      	str	r3, [r2, #0]
 80016e6:	e013      	b.n	8001710 <HAL_RCC_OscConfig+0x298>
 80016e8:	40021000 	.word	0x40021000
 80016ec:	080067c8 	.word	0x080067c8
 80016f0:	20000000 	.word	0x20000000
 80016f4:	20000004 	.word	0x20000004
 80016f8:	4ba0      	ldr	r3, [pc, #640]	; (800197c <HAL_RCC_OscConfig+0x504>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	4a9f      	ldr	r2, [pc, #636]	; (800197c <HAL_RCC_OscConfig+0x504>)
 80016fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001702:	6013      	str	r3, [r2, #0]
 8001704:	4b9d      	ldr	r3, [pc, #628]	; (800197c <HAL_RCC_OscConfig+0x504>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	4a9c      	ldr	r2, [pc, #624]	; (800197c <HAL_RCC_OscConfig+0x504>)
 800170a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800170e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	685b      	ldr	r3, [r3, #4]
 8001714:	2b00      	cmp	r3, #0
 8001716:	d013      	beq.n	8001740 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001718:	f7ff faf8 	bl	8000d0c <HAL_GetTick>
 800171c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800171e:	e008      	b.n	8001732 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001720:	f7ff faf4 	bl	8000d0c <HAL_GetTick>
 8001724:	4602      	mov	r2, r0
 8001726:	693b      	ldr	r3, [r7, #16]
 8001728:	1ad3      	subs	r3, r2, r3
 800172a:	2b64      	cmp	r3, #100	; 0x64
 800172c:	d901      	bls.n	8001732 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800172e:	2303      	movs	r3, #3
 8001730:	e2b4      	b.n	8001c9c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001732:	4b92      	ldr	r3, [pc, #584]	; (800197c <HAL_RCC_OscConfig+0x504>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800173a:	2b00      	cmp	r3, #0
 800173c:	d0f0      	beq.n	8001720 <HAL_RCC_OscConfig+0x2a8>
 800173e:	e014      	b.n	800176a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001740:	f7ff fae4 	bl	8000d0c <HAL_GetTick>
 8001744:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001746:	e008      	b.n	800175a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001748:	f7ff fae0 	bl	8000d0c <HAL_GetTick>
 800174c:	4602      	mov	r2, r0
 800174e:	693b      	ldr	r3, [r7, #16]
 8001750:	1ad3      	subs	r3, r2, r3
 8001752:	2b64      	cmp	r3, #100	; 0x64
 8001754:	d901      	bls.n	800175a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001756:	2303      	movs	r3, #3
 8001758:	e2a0      	b.n	8001c9c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800175a:	4b88      	ldr	r3, [pc, #544]	; (800197c <HAL_RCC_OscConfig+0x504>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001762:	2b00      	cmp	r3, #0
 8001764:	d1f0      	bne.n	8001748 <HAL_RCC_OscConfig+0x2d0>
 8001766:	e000      	b.n	800176a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001768:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f003 0302 	and.w	r3, r3, #2
 8001772:	2b00      	cmp	r3, #0
 8001774:	d060      	beq.n	8001838 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001776:	69bb      	ldr	r3, [r7, #24]
 8001778:	2b04      	cmp	r3, #4
 800177a:	d005      	beq.n	8001788 <HAL_RCC_OscConfig+0x310>
 800177c:	69bb      	ldr	r3, [r7, #24]
 800177e:	2b0c      	cmp	r3, #12
 8001780:	d119      	bne.n	80017b6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001782:	697b      	ldr	r3, [r7, #20]
 8001784:	2b02      	cmp	r3, #2
 8001786:	d116      	bne.n	80017b6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001788:	4b7c      	ldr	r3, [pc, #496]	; (800197c <HAL_RCC_OscConfig+0x504>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001790:	2b00      	cmp	r3, #0
 8001792:	d005      	beq.n	80017a0 <HAL_RCC_OscConfig+0x328>
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	68db      	ldr	r3, [r3, #12]
 8001798:	2b00      	cmp	r3, #0
 800179a:	d101      	bne.n	80017a0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800179c:	2301      	movs	r3, #1
 800179e:	e27d      	b.n	8001c9c <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017a0:	4b76      	ldr	r3, [pc, #472]	; (800197c <HAL_RCC_OscConfig+0x504>)
 80017a2:	685b      	ldr	r3, [r3, #4]
 80017a4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	691b      	ldr	r3, [r3, #16]
 80017ac:	061b      	lsls	r3, r3, #24
 80017ae:	4973      	ldr	r1, [pc, #460]	; (800197c <HAL_RCC_OscConfig+0x504>)
 80017b0:	4313      	orrs	r3, r2
 80017b2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80017b4:	e040      	b.n	8001838 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	68db      	ldr	r3, [r3, #12]
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d023      	beq.n	8001806 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80017be:	4b6f      	ldr	r3, [pc, #444]	; (800197c <HAL_RCC_OscConfig+0x504>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	4a6e      	ldr	r2, [pc, #440]	; (800197c <HAL_RCC_OscConfig+0x504>)
 80017c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017c8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017ca:	f7ff fa9f 	bl	8000d0c <HAL_GetTick>
 80017ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80017d0:	e008      	b.n	80017e4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017d2:	f7ff fa9b 	bl	8000d0c <HAL_GetTick>
 80017d6:	4602      	mov	r2, r0
 80017d8:	693b      	ldr	r3, [r7, #16]
 80017da:	1ad3      	subs	r3, r2, r3
 80017dc:	2b02      	cmp	r3, #2
 80017de:	d901      	bls.n	80017e4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80017e0:	2303      	movs	r3, #3
 80017e2:	e25b      	b.n	8001c9c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80017e4:	4b65      	ldr	r3, [pc, #404]	; (800197c <HAL_RCC_OscConfig+0x504>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d0f0      	beq.n	80017d2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017f0:	4b62      	ldr	r3, [pc, #392]	; (800197c <HAL_RCC_OscConfig+0x504>)
 80017f2:	685b      	ldr	r3, [r3, #4]
 80017f4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	691b      	ldr	r3, [r3, #16]
 80017fc:	061b      	lsls	r3, r3, #24
 80017fe:	495f      	ldr	r1, [pc, #380]	; (800197c <HAL_RCC_OscConfig+0x504>)
 8001800:	4313      	orrs	r3, r2
 8001802:	604b      	str	r3, [r1, #4]
 8001804:	e018      	b.n	8001838 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001806:	4b5d      	ldr	r3, [pc, #372]	; (800197c <HAL_RCC_OscConfig+0x504>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	4a5c      	ldr	r2, [pc, #368]	; (800197c <HAL_RCC_OscConfig+0x504>)
 800180c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001810:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001812:	f7ff fa7b 	bl	8000d0c <HAL_GetTick>
 8001816:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001818:	e008      	b.n	800182c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800181a:	f7ff fa77 	bl	8000d0c <HAL_GetTick>
 800181e:	4602      	mov	r2, r0
 8001820:	693b      	ldr	r3, [r7, #16]
 8001822:	1ad3      	subs	r3, r2, r3
 8001824:	2b02      	cmp	r3, #2
 8001826:	d901      	bls.n	800182c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001828:	2303      	movs	r3, #3
 800182a:	e237      	b.n	8001c9c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800182c:	4b53      	ldr	r3, [pc, #332]	; (800197c <HAL_RCC_OscConfig+0x504>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001834:	2b00      	cmp	r3, #0
 8001836:	d1f0      	bne.n	800181a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f003 0308 	and.w	r3, r3, #8
 8001840:	2b00      	cmp	r3, #0
 8001842:	d03c      	beq.n	80018be <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	695b      	ldr	r3, [r3, #20]
 8001848:	2b00      	cmp	r3, #0
 800184a:	d01c      	beq.n	8001886 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800184c:	4b4b      	ldr	r3, [pc, #300]	; (800197c <HAL_RCC_OscConfig+0x504>)
 800184e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001852:	4a4a      	ldr	r2, [pc, #296]	; (800197c <HAL_RCC_OscConfig+0x504>)
 8001854:	f043 0301 	orr.w	r3, r3, #1
 8001858:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800185c:	f7ff fa56 	bl	8000d0c <HAL_GetTick>
 8001860:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001862:	e008      	b.n	8001876 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001864:	f7ff fa52 	bl	8000d0c <HAL_GetTick>
 8001868:	4602      	mov	r2, r0
 800186a:	693b      	ldr	r3, [r7, #16]
 800186c:	1ad3      	subs	r3, r2, r3
 800186e:	2b02      	cmp	r3, #2
 8001870:	d901      	bls.n	8001876 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001872:	2303      	movs	r3, #3
 8001874:	e212      	b.n	8001c9c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001876:	4b41      	ldr	r3, [pc, #260]	; (800197c <HAL_RCC_OscConfig+0x504>)
 8001878:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800187c:	f003 0302 	and.w	r3, r3, #2
 8001880:	2b00      	cmp	r3, #0
 8001882:	d0ef      	beq.n	8001864 <HAL_RCC_OscConfig+0x3ec>
 8001884:	e01b      	b.n	80018be <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001886:	4b3d      	ldr	r3, [pc, #244]	; (800197c <HAL_RCC_OscConfig+0x504>)
 8001888:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800188c:	4a3b      	ldr	r2, [pc, #236]	; (800197c <HAL_RCC_OscConfig+0x504>)
 800188e:	f023 0301 	bic.w	r3, r3, #1
 8001892:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001896:	f7ff fa39 	bl	8000d0c <HAL_GetTick>
 800189a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800189c:	e008      	b.n	80018b0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800189e:	f7ff fa35 	bl	8000d0c <HAL_GetTick>
 80018a2:	4602      	mov	r2, r0
 80018a4:	693b      	ldr	r3, [r7, #16]
 80018a6:	1ad3      	subs	r3, r2, r3
 80018a8:	2b02      	cmp	r3, #2
 80018aa:	d901      	bls.n	80018b0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80018ac:	2303      	movs	r3, #3
 80018ae:	e1f5      	b.n	8001c9c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80018b0:	4b32      	ldr	r3, [pc, #200]	; (800197c <HAL_RCC_OscConfig+0x504>)
 80018b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80018b6:	f003 0302 	and.w	r3, r3, #2
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d1ef      	bne.n	800189e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f003 0304 	and.w	r3, r3, #4
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	f000 80a6 	beq.w	8001a18 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80018cc:	2300      	movs	r3, #0
 80018ce:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80018d0:	4b2a      	ldr	r3, [pc, #168]	; (800197c <HAL_RCC_OscConfig+0x504>)
 80018d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d10d      	bne.n	80018f8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80018dc:	4b27      	ldr	r3, [pc, #156]	; (800197c <HAL_RCC_OscConfig+0x504>)
 80018de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018e0:	4a26      	ldr	r2, [pc, #152]	; (800197c <HAL_RCC_OscConfig+0x504>)
 80018e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018e6:	6593      	str	r3, [r2, #88]	; 0x58
 80018e8:	4b24      	ldr	r3, [pc, #144]	; (800197c <HAL_RCC_OscConfig+0x504>)
 80018ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018f0:	60bb      	str	r3, [r7, #8]
 80018f2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80018f4:	2301      	movs	r3, #1
 80018f6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80018f8:	4b21      	ldr	r3, [pc, #132]	; (8001980 <HAL_RCC_OscConfig+0x508>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001900:	2b00      	cmp	r3, #0
 8001902:	d118      	bne.n	8001936 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001904:	4b1e      	ldr	r3, [pc, #120]	; (8001980 <HAL_RCC_OscConfig+0x508>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	4a1d      	ldr	r2, [pc, #116]	; (8001980 <HAL_RCC_OscConfig+0x508>)
 800190a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800190e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001910:	f7ff f9fc 	bl	8000d0c <HAL_GetTick>
 8001914:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001916:	e008      	b.n	800192a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001918:	f7ff f9f8 	bl	8000d0c <HAL_GetTick>
 800191c:	4602      	mov	r2, r0
 800191e:	693b      	ldr	r3, [r7, #16]
 8001920:	1ad3      	subs	r3, r2, r3
 8001922:	2b02      	cmp	r3, #2
 8001924:	d901      	bls.n	800192a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001926:	2303      	movs	r3, #3
 8001928:	e1b8      	b.n	8001c9c <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800192a:	4b15      	ldr	r3, [pc, #84]	; (8001980 <HAL_RCC_OscConfig+0x508>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001932:	2b00      	cmp	r3, #0
 8001934:	d0f0      	beq.n	8001918 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	689b      	ldr	r3, [r3, #8]
 800193a:	2b01      	cmp	r3, #1
 800193c:	d108      	bne.n	8001950 <HAL_RCC_OscConfig+0x4d8>
 800193e:	4b0f      	ldr	r3, [pc, #60]	; (800197c <HAL_RCC_OscConfig+0x504>)
 8001940:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001944:	4a0d      	ldr	r2, [pc, #52]	; (800197c <HAL_RCC_OscConfig+0x504>)
 8001946:	f043 0301 	orr.w	r3, r3, #1
 800194a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800194e:	e029      	b.n	80019a4 <HAL_RCC_OscConfig+0x52c>
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	689b      	ldr	r3, [r3, #8]
 8001954:	2b05      	cmp	r3, #5
 8001956:	d115      	bne.n	8001984 <HAL_RCC_OscConfig+0x50c>
 8001958:	4b08      	ldr	r3, [pc, #32]	; (800197c <HAL_RCC_OscConfig+0x504>)
 800195a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800195e:	4a07      	ldr	r2, [pc, #28]	; (800197c <HAL_RCC_OscConfig+0x504>)
 8001960:	f043 0304 	orr.w	r3, r3, #4
 8001964:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001968:	4b04      	ldr	r3, [pc, #16]	; (800197c <HAL_RCC_OscConfig+0x504>)
 800196a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800196e:	4a03      	ldr	r2, [pc, #12]	; (800197c <HAL_RCC_OscConfig+0x504>)
 8001970:	f043 0301 	orr.w	r3, r3, #1
 8001974:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001978:	e014      	b.n	80019a4 <HAL_RCC_OscConfig+0x52c>
 800197a:	bf00      	nop
 800197c:	40021000 	.word	0x40021000
 8001980:	40007000 	.word	0x40007000
 8001984:	4b9d      	ldr	r3, [pc, #628]	; (8001bfc <HAL_RCC_OscConfig+0x784>)
 8001986:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800198a:	4a9c      	ldr	r2, [pc, #624]	; (8001bfc <HAL_RCC_OscConfig+0x784>)
 800198c:	f023 0301 	bic.w	r3, r3, #1
 8001990:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001994:	4b99      	ldr	r3, [pc, #612]	; (8001bfc <HAL_RCC_OscConfig+0x784>)
 8001996:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800199a:	4a98      	ldr	r2, [pc, #608]	; (8001bfc <HAL_RCC_OscConfig+0x784>)
 800199c:	f023 0304 	bic.w	r3, r3, #4
 80019a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	689b      	ldr	r3, [r3, #8]
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d016      	beq.n	80019da <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019ac:	f7ff f9ae 	bl	8000d0c <HAL_GetTick>
 80019b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80019b2:	e00a      	b.n	80019ca <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019b4:	f7ff f9aa 	bl	8000d0c <HAL_GetTick>
 80019b8:	4602      	mov	r2, r0
 80019ba:	693b      	ldr	r3, [r7, #16]
 80019bc:	1ad3      	subs	r3, r2, r3
 80019be:	f241 3288 	movw	r2, #5000	; 0x1388
 80019c2:	4293      	cmp	r3, r2
 80019c4:	d901      	bls.n	80019ca <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80019c6:	2303      	movs	r3, #3
 80019c8:	e168      	b.n	8001c9c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80019ca:	4b8c      	ldr	r3, [pc, #560]	; (8001bfc <HAL_RCC_OscConfig+0x784>)
 80019cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019d0:	f003 0302 	and.w	r3, r3, #2
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d0ed      	beq.n	80019b4 <HAL_RCC_OscConfig+0x53c>
 80019d8:	e015      	b.n	8001a06 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019da:	f7ff f997 	bl	8000d0c <HAL_GetTick>
 80019de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80019e0:	e00a      	b.n	80019f8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019e2:	f7ff f993 	bl	8000d0c <HAL_GetTick>
 80019e6:	4602      	mov	r2, r0
 80019e8:	693b      	ldr	r3, [r7, #16]
 80019ea:	1ad3      	subs	r3, r2, r3
 80019ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80019f0:	4293      	cmp	r3, r2
 80019f2:	d901      	bls.n	80019f8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80019f4:	2303      	movs	r3, #3
 80019f6:	e151      	b.n	8001c9c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80019f8:	4b80      	ldr	r3, [pc, #512]	; (8001bfc <HAL_RCC_OscConfig+0x784>)
 80019fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019fe:	f003 0302 	and.w	r3, r3, #2
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d1ed      	bne.n	80019e2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001a06:	7ffb      	ldrb	r3, [r7, #31]
 8001a08:	2b01      	cmp	r3, #1
 8001a0a:	d105      	bne.n	8001a18 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a0c:	4b7b      	ldr	r3, [pc, #492]	; (8001bfc <HAL_RCC_OscConfig+0x784>)
 8001a0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a10:	4a7a      	ldr	r2, [pc, #488]	; (8001bfc <HAL_RCC_OscConfig+0x784>)
 8001a12:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a16:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f003 0320 	and.w	r3, r3, #32
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d03c      	beq.n	8001a9e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d01c      	beq.n	8001a66 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001a2c:	4b73      	ldr	r3, [pc, #460]	; (8001bfc <HAL_RCC_OscConfig+0x784>)
 8001a2e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001a32:	4a72      	ldr	r2, [pc, #456]	; (8001bfc <HAL_RCC_OscConfig+0x784>)
 8001a34:	f043 0301 	orr.w	r3, r3, #1
 8001a38:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a3c:	f7ff f966 	bl	8000d0c <HAL_GetTick>
 8001a40:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001a42:	e008      	b.n	8001a56 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001a44:	f7ff f962 	bl	8000d0c <HAL_GetTick>
 8001a48:	4602      	mov	r2, r0
 8001a4a:	693b      	ldr	r3, [r7, #16]
 8001a4c:	1ad3      	subs	r3, r2, r3
 8001a4e:	2b02      	cmp	r3, #2
 8001a50:	d901      	bls.n	8001a56 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8001a52:	2303      	movs	r3, #3
 8001a54:	e122      	b.n	8001c9c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001a56:	4b69      	ldr	r3, [pc, #420]	; (8001bfc <HAL_RCC_OscConfig+0x784>)
 8001a58:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001a5c:	f003 0302 	and.w	r3, r3, #2
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d0ef      	beq.n	8001a44 <HAL_RCC_OscConfig+0x5cc>
 8001a64:	e01b      	b.n	8001a9e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001a66:	4b65      	ldr	r3, [pc, #404]	; (8001bfc <HAL_RCC_OscConfig+0x784>)
 8001a68:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001a6c:	4a63      	ldr	r2, [pc, #396]	; (8001bfc <HAL_RCC_OscConfig+0x784>)
 8001a6e:	f023 0301 	bic.w	r3, r3, #1
 8001a72:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a76:	f7ff f949 	bl	8000d0c <HAL_GetTick>
 8001a7a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001a7c:	e008      	b.n	8001a90 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001a7e:	f7ff f945 	bl	8000d0c <HAL_GetTick>
 8001a82:	4602      	mov	r2, r0
 8001a84:	693b      	ldr	r3, [r7, #16]
 8001a86:	1ad3      	subs	r3, r2, r3
 8001a88:	2b02      	cmp	r3, #2
 8001a8a:	d901      	bls.n	8001a90 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001a8c:	2303      	movs	r3, #3
 8001a8e:	e105      	b.n	8001c9c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001a90:	4b5a      	ldr	r3, [pc, #360]	; (8001bfc <HAL_RCC_OscConfig+0x784>)
 8001a92:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001a96:	f003 0302 	and.w	r3, r3, #2
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d1ef      	bne.n	8001a7e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	f000 80f9 	beq.w	8001c9a <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001aac:	2b02      	cmp	r3, #2
 8001aae:	f040 80cf 	bne.w	8001c50 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001ab2:	4b52      	ldr	r3, [pc, #328]	; (8001bfc <HAL_RCC_OscConfig+0x784>)
 8001ab4:	68db      	ldr	r3, [r3, #12]
 8001ab6:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ab8:	697b      	ldr	r3, [r7, #20]
 8001aba:	f003 0203 	and.w	r2, r3, #3
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ac2:	429a      	cmp	r2, r3
 8001ac4:	d12c      	bne.n	8001b20 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001ac6:	697b      	ldr	r3, [r7, #20]
 8001ac8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ad0:	3b01      	subs	r3, #1
 8001ad2:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ad4:	429a      	cmp	r2, r3
 8001ad6:	d123      	bne.n	8001b20 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001ad8:	697b      	ldr	r3, [r7, #20]
 8001ada:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ae2:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001ae4:	429a      	cmp	r2, r3
 8001ae6:	d11b      	bne.n	8001b20 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001ae8:	697b      	ldr	r3, [r7, #20]
 8001aea:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001af2:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001af4:	429a      	cmp	r2, r3
 8001af6:	d113      	bne.n	8001b20 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001af8:	697b      	ldr	r3, [r7, #20]
 8001afa:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b02:	085b      	lsrs	r3, r3, #1
 8001b04:	3b01      	subs	r3, #1
 8001b06:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001b08:	429a      	cmp	r2, r3
 8001b0a:	d109      	bne.n	8001b20 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001b0c:	697b      	ldr	r3, [r7, #20]
 8001b0e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b16:	085b      	lsrs	r3, r3, #1
 8001b18:	3b01      	subs	r3, #1
 8001b1a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001b1c:	429a      	cmp	r2, r3
 8001b1e:	d071      	beq.n	8001c04 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001b20:	69bb      	ldr	r3, [r7, #24]
 8001b22:	2b0c      	cmp	r3, #12
 8001b24:	d068      	beq.n	8001bf8 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001b26:	4b35      	ldr	r3, [pc, #212]	; (8001bfc <HAL_RCC_OscConfig+0x784>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d105      	bne.n	8001b3e <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001b32:	4b32      	ldr	r3, [pc, #200]	; (8001bfc <HAL_RCC_OscConfig+0x784>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d001      	beq.n	8001b42 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8001b3e:	2301      	movs	r3, #1
 8001b40:	e0ac      	b.n	8001c9c <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001b42:	4b2e      	ldr	r3, [pc, #184]	; (8001bfc <HAL_RCC_OscConfig+0x784>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	4a2d      	ldr	r2, [pc, #180]	; (8001bfc <HAL_RCC_OscConfig+0x784>)
 8001b48:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001b4c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001b4e:	f7ff f8dd 	bl	8000d0c <HAL_GetTick>
 8001b52:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b54:	e008      	b.n	8001b68 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b56:	f7ff f8d9 	bl	8000d0c <HAL_GetTick>
 8001b5a:	4602      	mov	r2, r0
 8001b5c:	693b      	ldr	r3, [r7, #16]
 8001b5e:	1ad3      	subs	r3, r2, r3
 8001b60:	2b02      	cmp	r3, #2
 8001b62:	d901      	bls.n	8001b68 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8001b64:	2303      	movs	r3, #3
 8001b66:	e099      	b.n	8001c9c <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b68:	4b24      	ldr	r3, [pc, #144]	; (8001bfc <HAL_RCC_OscConfig+0x784>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d1f0      	bne.n	8001b56 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b74:	4b21      	ldr	r3, [pc, #132]	; (8001bfc <HAL_RCC_OscConfig+0x784>)
 8001b76:	68da      	ldr	r2, [r3, #12]
 8001b78:	4b21      	ldr	r3, [pc, #132]	; (8001c00 <HAL_RCC_OscConfig+0x788>)
 8001b7a:	4013      	ands	r3, r2
 8001b7c:	687a      	ldr	r2, [r7, #4]
 8001b7e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001b80:	687a      	ldr	r2, [r7, #4]
 8001b82:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001b84:	3a01      	subs	r2, #1
 8001b86:	0112      	lsls	r2, r2, #4
 8001b88:	4311      	orrs	r1, r2
 8001b8a:	687a      	ldr	r2, [r7, #4]
 8001b8c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001b8e:	0212      	lsls	r2, r2, #8
 8001b90:	4311      	orrs	r1, r2
 8001b92:	687a      	ldr	r2, [r7, #4]
 8001b94:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001b96:	0852      	lsrs	r2, r2, #1
 8001b98:	3a01      	subs	r2, #1
 8001b9a:	0552      	lsls	r2, r2, #21
 8001b9c:	4311      	orrs	r1, r2
 8001b9e:	687a      	ldr	r2, [r7, #4]
 8001ba0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001ba2:	0852      	lsrs	r2, r2, #1
 8001ba4:	3a01      	subs	r2, #1
 8001ba6:	0652      	lsls	r2, r2, #25
 8001ba8:	4311      	orrs	r1, r2
 8001baa:	687a      	ldr	r2, [r7, #4]
 8001bac:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001bae:	06d2      	lsls	r2, r2, #27
 8001bb0:	430a      	orrs	r2, r1
 8001bb2:	4912      	ldr	r1, [pc, #72]	; (8001bfc <HAL_RCC_OscConfig+0x784>)
 8001bb4:	4313      	orrs	r3, r2
 8001bb6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001bb8:	4b10      	ldr	r3, [pc, #64]	; (8001bfc <HAL_RCC_OscConfig+0x784>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	4a0f      	ldr	r2, [pc, #60]	; (8001bfc <HAL_RCC_OscConfig+0x784>)
 8001bbe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001bc2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001bc4:	4b0d      	ldr	r3, [pc, #52]	; (8001bfc <HAL_RCC_OscConfig+0x784>)
 8001bc6:	68db      	ldr	r3, [r3, #12]
 8001bc8:	4a0c      	ldr	r2, [pc, #48]	; (8001bfc <HAL_RCC_OscConfig+0x784>)
 8001bca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001bce:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001bd0:	f7ff f89c 	bl	8000d0c <HAL_GetTick>
 8001bd4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001bd6:	e008      	b.n	8001bea <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bd8:	f7ff f898 	bl	8000d0c <HAL_GetTick>
 8001bdc:	4602      	mov	r2, r0
 8001bde:	693b      	ldr	r3, [r7, #16]
 8001be0:	1ad3      	subs	r3, r2, r3
 8001be2:	2b02      	cmp	r3, #2
 8001be4:	d901      	bls.n	8001bea <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8001be6:	2303      	movs	r3, #3
 8001be8:	e058      	b.n	8001c9c <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001bea:	4b04      	ldr	r3, [pc, #16]	; (8001bfc <HAL_RCC_OscConfig+0x784>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d0f0      	beq.n	8001bd8 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001bf6:	e050      	b.n	8001c9a <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001bf8:	2301      	movs	r3, #1
 8001bfa:	e04f      	b.n	8001c9c <HAL_RCC_OscConfig+0x824>
 8001bfc:	40021000 	.word	0x40021000
 8001c00:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c04:	4b27      	ldr	r3, [pc, #156]	; (8001ca4 <HAL_RCC_OscConfig+0x82c>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d144      	bne.n	8001c9a <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001c10:	4b24      	ldr	r3, [pc, #144]	; (8001ca4 <HAL_RCC_OscConfig+0x82c>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	4a23      	ldr	r2, [pc, #140]	; (8001ca4 <HAL_RCC_OscConfig+0x82c>)
 8001c16:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c1a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001c1c:	4b21      	ldr	r3, [pc, #132]	; (8001ca4 <HAL_RCC_OscConfig+0x82c>)
 8001c1e:	68db      	ldr	r3, [r3, #12]
 8001c20:	4a20      	ldr	r2, [pc, #128]	; (8001ca4 <HAL_RCC_OscConfig+0x82c>)
 8001c22:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c26:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001c28:	f7ff f870 	bl	8000d0c <HAL_GetTick>
 8001c2c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c2e:	e008      	b.n	8001c42 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c30:	f7ff f86c 	bl	8000d0c <HAL_GetTick>
 8001c34:	4602      	mov	r2, r0
 8001c36:	693b      	ldr	r3, [r7, #16]
 8001c38:	1ad3      	subs	r3, r2, r3
 8001c3a:	2b02      	cmp	r3, #2
 8001c3c:	d901      	bls.n	8001c42 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8001c3e:	2303      	movs	r3, #3
 8001c40:	e02c      	b.n	8001c9c <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c42:	4b18      	ldr	r3, [pc, #96]	; (8001ca4 <HAL_RCC_OscConfig+0x82c>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d0f0      	beq.n	8001c30 <HAL_RCC_OscConfig+0x7b8>
 8001c4e:	e024      	b.n	8001c9a <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001c50:	69bb      	ldr	r3, [r7, #24]
 8001c52:	2b0c      	cmp	r3, #12
 8001c54:	d01f      	beq.n	8001c96 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c56:	4b13      	ldr	r3, [pc, #76]	; (8001ca4 <HAL_RCC_OscConfig+0x82c>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	4a12      	ldr	r2, [pc, #72]	; (8001ca4 <HAL_RCC_OscConfig+0x82c>)
 8001c5c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001c60:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c62:	f7ff f853 	bl	8000d0c <HAL_GetTick>
 8001c66:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c68:	e008      	b.n	8001c7c <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c6a:	f7ff f84f 	bl	8000d0c <HAL_GetTick>
 8001c6e:	4602      	mov	r2, r0
 8001c70:	693b      	ldr	r3, [r7, #16]
 8001c72:	1ad3      	subs	r3, r2, r3
 8001c74:	2b02      	cmp	r3, #2
 8001c76:	d901      	bls.n	8001c7c <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8001c78:	2303      	movs	r3, #3
 8001c7a:	e00f      	b.n	8001c9c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c7c:	4b09      	ldr	r3, [pc, #36]	; (8001ca4 <HAL_RCC_OscConfig+0x82c>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d1f0      	bne.n	8001c6a <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001c88:	4b06      	ldr	r3, [pc, #24]	; (8001ca4 <HAL_RCC_OscConfig+0x82c>)
 8001c8a:	68da      	ldr	r2, [r3, #12]
 8001c8c:	4905      	ldr	r1, [pc, #20]	; (8001ca4 <HAL_RCC_OscConfig+0x82c>)
 8001c8e:	4b06      	ldr	r3, [pc, #24]	; (8001ca8 <HAL_RCC_OscConfig+0x830>)
 8001c90:	4013      	ands	r3, r2
 8001c92:	60cb      	str	r3, [r1, #12]
 8001c94:	e001      	b.n	8001c9a <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001c96:	2301      	movs	r3, #1
 8001c98:	e000      	b.n	8001c9c <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8001c9a:	2300      	movs	r3, #0
}
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	3720      	adds	r7, #32
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	bd80      	pop	{r7, pc}
 8001ca4:	40021000 	.word	0x40021000
 8001ca8:	feeefffc 	.word	0xfeeefffc

08001cac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b086      	sub	sp, #24
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
 8001cb4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d101      	bne.n	8001cc4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001cc0:	2301      	movs	r3, #1
 8001cc2:	e11d      	b.n	8001f00 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001cc4:	4b90      	ldr	r3, [pc, #576]	; (8001f08 <HAL_RCC_ClockConfig+0x25c>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f003 030f 	and.w	r3, r3, #15
 8001ccc:	683a      	ldr	r2, [r7, #0]
 8001cce:	429a      	cmp	r2, r3
 8001cd0:	d910      	bls.n	8001cf4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cd2:	4b8d      	ldr	r3, [pc, #564]	; (8001f08 <HAL_RCC_ClockConfig+0x25c>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f023 020f 	bic.w	r2, r3, #15
 8001cda:	498b      	ldr	r1, [pc, #556]	; (8001f08 <HAL_RCC_ClockConfig+0x25c>)
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	4313      	orrs	r3, r2
 8001ce0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ce2:	4b89      	ldr	r3, [pc, #548]	; (8001f08 <HAL_RCC_ClockConfig+0x25c>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f003 030f 	and.w	r3, r3, #15
 8001cea:	683a      	ldr	r2, [r7, #0]
 8001cec:	429a      	cmp	r2, r3
 8001cee:	d001      	beq.n	8001cf4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001cf0:	2301      	movs	r3, #1
 8001cf2:	e105      	b.n	8001f00 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f003 0302 	and.w	r3, r3, #2
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d010      	beq.n	8001d22 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	689a      	ldr	r2, [r3, #8]
 8001d04:	4b81      	ldr	r3, [pc, #516]	; (8001f0c <HAL_RCC_ClockConfig+0x260>)
 8001d06:	689b      	ldr	r3, [r3, #8]
 8001d08:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001d0c:	429a      	cmp	r2, r3
 8001d0e:	d908      	bls.n	8001d22 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d10:	4b7e      	ldr	r3, [pc, #504]	; (8001f0c <HAL_RCC_ClockConfig+0x260>)
 8001d12:	689b      	ldr	r3, [r3, #8]
 8001d14:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	689b      	ldr	r3, [r3, #8]
 8001d1c:	497b      	ldr	r1, [pc, #492]	; (8001f0c <HAL_RCC_ClockConfig+0x260>)
 8001d1e:	4313      	orrs	r3, r2
 8001d20:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f003 0301 	and.w	r3, r3, #1
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d079      	beq.n	8001e22 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	685b      	ldr	r3, [r3, #4]
 8001d32:	2b03      	cmp	r3, #3
 8001d34:	d11e      	bne.n	8001d74 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d36:	4b75      	ldr	r3, [pc, #468]	; (8001f0c <HAL_RCC_ClockConfig+0x260>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d101      	bne.n	8001d46 <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8001d42:	2301      	movs	r3, #1
 8001d44:	e0dc      	b.n	8001f00 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8001d46:	f000 fa3b 	bl	80021c0 <RCC_GetSysClockFreqFromPLLSource>
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	4a70      	ldr	r2, [pc, #448]	; (8001f10 <HAL_RCC_ClockConfig+0x264>)
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d946      	bls.n	8001de0 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8001d52:	4b6e      	ldr	r3, [pc, #440]	; (8001f0c <HAL_RCC_ClockConfig+0x260>)
 8001d54:	689b      	ldr	r3, [r3, #8]
 8001d56:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d140      	bne.n	8001de0 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001d5e:	4b6b      	ldr	r3, [pc, #428]	; (8001f0c <HAL_RCC_ClockConfig+0x260>)
 8001d60:	689b      	ldr	r3, [r3, #8]
 8001d62:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001d66:	4a69      	ldr	r2, [pc, #420]	; (8001f0c <HAL_RCC_ClockConfig+0x260>)
 8001d68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d6c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001d6e:	2380      	movs	r3, #128	; 0x80
 8001d70:	617b      	str	r3, [r7, #20]
 8001d72:	e035      	b.n	8001de0 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	2b02      	cmp	r3, #2
 8001d7a:	d107      	bne.n	8001d8c <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d7c:	4b63      	ldr	r3, [pc, #396]	; (8001f0c <HAL_RCC_ClockConfig+0x260>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d115      	bne.n	8001db4 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8001d88:	2301      	movs	r3, #1
 8001d8a:	e0b9      	b.n	8001f00 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	685b      	ldr	r3, [r3, #4]
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d107      	bne.n	8001da4 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001d94:	4b5d      	ldr	r3, [pc, #372]	; (8001f0c <HAL_RCC_ClockConfig+0x260>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f003 0302 	and.w	r3, r3, #2
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d109      	bne.n	8001db4 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8001da0:	2301      	movs	r3, #1
 8001da2:	e0ad      	b.n	8001f00 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001da4:	4b59      	ldr	r3, [pc, #356]	; (8001f0c <HAL_RCC_ClockConfig+0x260>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d101      	bne.n	8001db4 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8001db0:	2301      	movs	r3, #1
 8001db2:	e0a5      	b.n	8001f00 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8001db4:	f000 f8b4 	bl	8001f20 <HAL_RCC_GetSysClockFreq>
 8001db8:	4603      	mov	r3, r0
 8001dba:	4a55      	ldr	r2, [pc, #340]	; (8001f10 <HAL_RCC_ClockConfig+0x264>)
 8001dbc:	4293      	cmp	r3, r2
 8001dbe:	d90f      	bls.n	8001de0 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8001dc0:	4b52      	ldr	r3, [pc, #328]	; (8001f0c <HAL_RCC_ClockConfig+0x260>)
 8001dc2:	689b      	ldr	r3, [r3, #8]
 8001dc4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d109      	bne.n	8001de0 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001dcc:	4b4f      	ldr	r3, [pc, #316]	; (8001f0c <HAL_RCC_ClockConfig+0x260>)
 8001dce:	689b      	ldr	r3, [r3, #8]
 8001dd0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001dd4:	4a4d      	ldr	r2, [pc, #308]	; (8001f0c <HAL_RCC_ClockConfig+0x260>)
 8001dd6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001dda:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001ddc:	2380      	movs	r3, #128	; 0x80
 8001dde:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001de0:	4b4a      	ldr	r3, [pc, #296]	; (8001f0c <HAL_RCC_ClockConfig+0x260>)
 8001de2:	689b      	ldr	r3, [r3, #8]
 8001de4:	f023 0203 	bic.w	r2, r3, #3
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	685b      	ldr	r3, [r3, #4]
 8001dec:	4947      	ldr	r1, [pc, #284]	; (8001f0c <HAL_RCC_ClockConfig+0x260>)
 8001dee:	4313      	orrs	r3, r2
 8001df0:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001df2:	f7fe ff8b 	bl	8000d0c <HAL_GetTick>
 8001df6:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001df8:	e00a      	b.n	8001e10 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001dfa:	f7fe ff87 	bl	8000d0c <HAL_GetTick>
 8001dfe:	4602      	mov	r2, r0
 8001e00:	693b      	ldr	r3, [r7, #16]
 8001e02:	1ad3      	subs	r3, r2, r3
 8001e04:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e08:	4293      	cmp	r3, r2
 8001e0a:	d901      	bls.n	8001e10 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8001e0c:	2303      	movs	r3, #3
 8001e0e:	e077      	b.n	8001f00 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e10:	4b3e      	ldr	r3, [pc, #248]	; (8001f0c <HAL_RCC_ClockConfig+0x260>)
 8001e12:	689b      	ldr	r3, [r3, #8]
 8001e14:	f003 020c 	and.w	r2, r3, #12
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	685b      	ldr	r3, [r3, #4]
 8001e1c:	009b      	lsls	r3, r3, #2
 8001e1e:	429a      	cmp	r2, r3
 8001e20:	d1eb      	bne.n	8001dfa <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8001e22:	697b      	ldr	r3, [r7, #20]
 8001e24:	2b80      	cmp	r3, #128	; 0x80
 8001e26:	d105      	bne.n	8001e34 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001e28:	4b38      	ldr	r3, [pc, #224]	; (8001f0c <HAL_RCC_ClockConfig+0x260>)
 8001e2a:	689b      	ldr	r3, [r3, #8]
 8001e2c:	4a37      	ldr	r2, [pc, #220]	; (8001f0c <HAL_RCC_ClockConfig+0x260>)
 8001e2e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001e32:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f003 0302 	and.w	r3, r3, #2
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d010      	beq.n	8001e62 <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	689a      	ldr	r2, [r3, #8]
 8001e44:	4b31      	ldr	r3, [pc, #196]	; (8001f0c <HAL_RCC_ClockConfig+0x260>)
 8001e46:	689b      	ldr	r3, [r3, #8]
 8001e48:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001e4c:	429a      	cmp	r2, r3
 8001e4e:	d208      	bcs.n	8001e62 <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e50:	4b2e      	ldr	r3, [pc, #184]	; (8001f0c <HAL_RCC_ClockConfig+0x260>)
 8001e52:	689b      	ldr	r3, [r3, #8]
 8001e54:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	689b      	ldr	r3, [r3, #8]
 8001e5c:	492b      	ldr	r1, [pc, #172]	; (8001f0c <HAL_RCC_ClockConfig+0x260>)
 8001e5e:	4313      	orrs	r3, r2
 8001e60:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001e62:	4b29      	ldr	r3, [pc, #164]	; (8001f08 <HAL_RCC_ClockConfig+0x25c>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f003 030f 	and.w	r3, r3, #15
 8001e6a:	683a      	ldr	r2, [r7, #0]
 8001e6c:	429a      	cmp	r2, r3
 8001e6e:	d210      	bcs.n	8001e92 <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e70:	4b25      	ldr	r3, [pc, #148]	; (8001f08 <HAL_RCC_ClockConfig+0x25c>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f023 020f 	bic.w	r2, r3, #15
 8001e78:	4923      	ldr	r1, [pc, #140]	; (8001f08 <HAL_RCC_ClockConfig+0x25c>)
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	4313      	orrs	r3, r2
 8001e7e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e80:	4b21      	ldr	r3, [pc, #132]	; (8001f08 <HAL_RCC_ClockConfig+0x25c>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f003 030f 	and.w	r3, r3, #15
 8001e88:	683a      	ldr	r2, [r7, #0]
 8001e8a:	429a      	cmp	r2, r3
 8001e8c:	d001      	beq.n	8001e92 <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8001e8e:	2301      	movs	r3, #1
 8001e90:	e036      	b.n	8001f00 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f003 0304 	and.w	r3, r3, #4
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d008      	beq.n	8001eb0 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e9e:	4b1b      	ldr	r3, [pc, #108]	; (8001f0c <HAL_RCC_ClockConfig+0x260>)
 8001ea0:	689b      	ldr	r3, [r3, #8]
 8001ea2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	68db      	ldr	r3, [r3, #12]
 8001eaa:	4918      	ldr	r1, [pc, #96]	; (8001f0c <HAL_RCC_ClockConfig+0x260>)
 8001eac:	4313      	orrs	r3, r2
 8001eae:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f003 0308 	and.w	r3, r3, #8
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d009      	beq.n	8001ed0 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001ebc:	4b13      	ldr	r3, [pc, #76]	; (8001f0c <HAL_RCC_ClockConfig+0x260>)
 8001ebe:	689b      	ldr	r3, [r3, #8]
 8001ec0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	691b      	ldr	r3, [r3, #16]
 8001ec8:	00db      	lsls	r3, r3, #3
 8001eca:	4910      	ldr	r1, [pc, #64]	; (8001f0c <HAL_RCC_ClockConfig+0x260>)
 8001ecc:	4313      	orrs	r3, r2
 8001ece:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001ed0:	f000 f826 	bl	8001f20 <HAL_RCC_GetSysClockFreq>
 8001ed4:	4602      	mov	r2, r0
 8001ed6:	4b0d      	ldr	r3, [pc, #52]	; (8001f0c <HAL_RCC_ClockConfig+0x260>)
 8001ed8:	689b      	ldr	r3, [r3, #8]
 8001eda:	091b      	lsrs	r3, r3, #4
 8001edc:	f003 030f 	and.w	r3, r3, #15
 8001ee0:	490c      	ldr	r1, [pc, #48]	; (8001f14 <HAL_RCC_ClockConfig+0x268>)
 8001ee2:	5ccb      	ldrb	r3, [r1, r3]
 8001ee4:	f003 031f 	and.w	r3, r3, #31
 8001ee8:	fa22 f303 	lsr.w	r3, r2, r3
 8001eec:	4a0a      	ldr	r2, [pc, #40]	; (8001f18 <HAL_RCC_ClockConfig+0x26c>)
 8001eee:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001ef0:	4b0a      	ldr	r3, [pc, #40]	; (8001f1c <HAL_RCC_ClockConfig+0x270>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	f7fe fe07 	bl	8000b08 <HAL_InitTick>
 8001efa:	4603      	mov	r3, r0
 8001efc:	73fb      	strb	r3, [r7, #15]

  return status;
 8001efe:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f00:	4618      	mov	r0, r3
 8001f02:	3718      	adds	r7, #24
 8001f04:	46bd      	mov	sp, r7
 8001f06:	bd80      	pop	{r7, pc}
 8001f08:	40022000 	.word	0x40022000
 8001f0c:	40021000 	.word	0x40021000
 8001f10:	04c4b400 	.word	0x04c4b400
 8001f14:	080067c8 	.word	0x080067c8
 8001f18:	20000000 	.word	0x20000000
 8001f1c:	20000004 	.word	0x20000004

08001f20 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f20:	b480      	push	{r7}
 8001f22:	b089      	sub	sp, #36	; 0x24
 8001f24:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001f26:	2300      	movs	r3, #0
 8001f28:	61fb      	str	r3, [r7, #28]
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f2e:	4b3e      	ldr	r3, [pc, #248]	; (8002028 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f30:	689b      	ldr	r3, [r3, #8]
 8001f32:	f003 030c 	and.w	r3, r3, #12
 8001f36:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001f38:	4b3b      	ldr	r3, [pc, #236]	; (8002028 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f3a:	68db      	ldr	r3, [r3, #12]
 8001f3c:	f003 0303 	and.w	r3, r3, #3
 8001f40:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001f42:	693b      	ldr	r3, [r7, #16]
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d005      	beq.n	8001f54 <HAL_RCC_GetSysClockFreq+0x34>
 8001f48:	693b      	ldr	r3, [r7, #16]
 8001f4a:	2b0c      	cmp	r3, #12
 8001f4c:	d121      	bne.n	8001f92 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	2b01      	cmp	r3, #1
 8001f52:	d11e      	bne.n	8001f92 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001f54:	4b34      	ldr	r3, [pc, #208]	; (8002028 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f003 0308 	and.w	r3, r3, #8
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d107      	bne.n	8001f70 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001f60:	4b31      	ldr	r3, [pc, #196]	; (8002028 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f62:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f66:	0a1b      	lsrs	r3, r3, #8
 8001f68:	f003 030f 	and.w	r3, r3, #15
 8001f6c:	61fb      	str	r3, [r7, #28]
 8001f6e:	e005      	b.n	8001f7c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001f70:	4b2d      	ldr	r3, [pc, #180]	; (8002028 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	091b      	lsrs	r3, r3, #4
 8001f76:	f003 030f 	and.w	r3, r3, #15
 8001f7a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001f7c:	4a2b      	ldr	r2, [pc, #172]	; (800202c <HAL_RCC_GetSysClockFreq+0x10c>)
 8001f7e:	69fb      	ldr	r3, [r7, #28]
 8001f80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f84:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001f86:	693b      	ldr	r3, [r7, #16]
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d10d      	bne.n	8001fa8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001f8c:	69fb      	ldr	r3, [r7, #28]
 8001f8e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001f90:	e00a      	b.n	8001fa8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001f92:	693b      	ldr	r3, [r7, #16]
 8001f94:	2b04      	cmp	r3, #4
 8001f96:	d102      	bne.n	8001f9e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001f98:	4b25      	ldr	r3, [pc, #148]	; (8002030 <HAL_RCC_GetSysClockFreq+0x110>)
 8001f9a:	61bb      	str	r3, [r7, #24]
 8001f9c:	e004      	b.n	8001fa8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001f9e:	693b      	ldr	r3, [r7, #16]
 8001fa0:	2b08      	cmp	r3, #8
 8001fa2:	d101      	bne.n	8001fa8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001fa4:	4b23      	ldr	r3, [pc, #140]	; (8002034 <HAL_RCC_GetSysClockFreq+0x114>)
 8001fa6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001fa8:	693b      	ldr	r3, [r7, #16]
 8001faa:	2b0c      	cmp	r3, #12
 8001fac:	d134      	bne.n	8002018 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001fae:	4b1e      	ldr	r3, [pc, #120]	; (8002028 <HAL_RCC_GetSysClockFreq+0x108>)
 8001fb0:	68db      	ldr	r3, [r3, #12]
 8001fb2:	f003 0303 	and.w	r3, r3, #3
 8001fb6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001fb8:	68bb      	ldr	r3, [r7, #8]
 8001fba:	2b02      	cmp	r3, #2
 8001fbc:	d003      	beq.n	8001fc6 <HAL_RCC_GetSysClockFreq+0xa6>
 8001fbe:	68bb      	ldr	r3, [r7, #8]
 8001fc0:	2b03      	cmp	r3, #3
 8001fc2:	d003      	beq.n	8001fcc <HAL_RCC_GetSysClockFreq+0xac>
 8001fc4:	e005      	b.n	8001fd2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001fc6:	4b1a      	ldr	r3, [pc, #104]	; (8002030 <HAL_RCC_GetSysClockFreq+0x110>)
 8001fc8:	617b      	str	r3, [r7, #20]
      break;
 8001fca:	e005      	b.n	8001fd8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001fcc:	4b19      	ldr	r3, [pc, #100]	; (8002034 <HAL_RCC_GetSysClockFreq+0x114>)
 8001fce:	617b      	str	r3, [r7, #20]
      break;
 8001fd0:	e002      	b.n	8001fd8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001fd2:	69fb      	ldr	r3, [r7, #28]
 8001fd4:	617b      	str	r3, [r7, #20]
      break;
 8001fd6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001fd8:	4b13      	ldr	r3, [pc, #76]	; (8002028 <HAL_RCC_GetSysClockFreq+0x108>)
 8001fda:	68db      	ldr	r3, [r3, #12]
 8001fdc:	091b      	lsrs	r3, r3, #4
 8001fde:	f003 030f 	and.w	r3, r3, #15
 8001fe2:	3301      	adds	r3, #1
 8001fe4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001fe6:	4b10      	ldr	r3, [pc, #64]	; (8002028 <HAL_RCC_GetSysClockFreq+0x108>)
 8001fe8:	68db      	ldr	r3, [r3, #12]
 8001fea:	0a1b      	lsrs	r3, r3, #8
 8001fec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001ff0:	697a      	ldr	r2, [r7, #20]
 8001ff2:	fb03 f202 	mul.w	r2, r3, r2
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ffc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001ffe:	4b0a      	ldr	r3, [pc, #40]	; (8002028 <HAL_RCC_GetSysClockFreq+0x108>)
 8002000:	68db      	ldr	r3, [r3, #12]
 8002002:	0e5b      	lsrs	r3, r3, #25
 8002004:	f003 0303 	and.w	r3, r3, #3
 8002008:	3301      	adds	r3, #1
 800200a:	005b      	lsls	r3, r3, #1
 800200c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800200e:	697a      	ldr	r2, [r7, #20]
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	fbb2 f3f3 	udiv	r3, r2, r3
 8002016:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002018:	69bb      	ldr	r3, [r7, #24]
}
 800201a:	4618      	mov	r0, r3
 800201c:	3724      	adds	r7, #36	; 0x24
 800201e:	46bd      	mov	sp, r7
 8002020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002024:	4770      	bx	lr
 8002026:	bf00      	nop
 8002028:	40021000 	.word	0x40021000
 800202c:	080067e0 	.word	0x080067e0
 8002030:	00f42400 	.word	0x00f42400
 8002034:	007a1200 	.word	0x007a1200

08002038 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002038:	b480      	push	{r7}
 800203a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800203c:	4b03      	ldr	r3, [pc, #12]	; (800204c <HAL_RCC_GetHCLKFreq+0x14>)
 800203e:	681b      	ldr	r3, [r3, #0]
}
 8002040:	4618      	mov	r0, r3
 8002042:	46bd      	mov	sp, r7
 8002044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002048:	4770      	bx	lr
 800204a:	bf00      	nop
 800204c:	20000000 	.word	0x20000000

08002050 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002054:	f7ff fff0 	bl	8002038 <HAL_RCC_GetHCLKFreq>
 8002058:	4602      	mov	r2, r0
 800205a:	4b06      	ldr	r3, [pc, #24]	; (8002074 <HAL_RCC_GetPCLK1Freq+0x24>)
 800205c:	689b      	ldr	r3, [r3, #8]
 800205e:	0a1b      	lsrs	r3, r3, #8
 8002060:	f003 0307 	and.w	r3, r3, #7
 8002064:	4904      	ldr	r1, [pc, #16]	; (8002078 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002066:	5ccb      	ldrb	r3, [r1, r3]
 8002068:	f003 031f 	and.w	r3, r3, #31
 800206c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002070:	4618      	mov	r0, r3
 8002072:	bd80      	pop	{r7, pc}
 8002074:	40021000 	.word	0x40021000
 8002078:	080067d8 	.word	0x080067d8

0800207c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002080:	f7ff ffda 	bl	8002038 <HAL_RCC_GetHCLKFreq>
 8002084:	4602      	mov	r2, r0
 8002086:	4b06      	ldr	r3, [pc, #24]	; (80020a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002088:	689b      	ldr	r3, [r3, #8]
 800208a:	0adb      	lsrs	r3, r3, #11
 800208c:	f003 0307 	and.w	r3, r3, #7
 8002090:	4904      	ldr	r1, [pc, #16]	; (80020a4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002092:	5ccb      	ldrb	r3, [r1, r3]
 8002094:	f003 031f 	and.w	r3, r3, #31
 8002098:	fa22 f303 	lsr.w	r3, r2, r3
}
 800209c:	4618      	mov	r0, r3
 800209e:	bd80      	pop	{r7, pc}
 80020a0:	40021000 	.word	0x40021000
 80020a4:	080067d8 	.word	0x080067d8

080020a8 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80020a8:	b480      	push	{r7}
 80020aa:	b083      	sub	sp, #12
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
 80020b0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	220f      	movs	r2, #15
 80020b6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80020b8:	4b12      	ldr	r3, [pc, #72]	; (8002104 <HAL_RCC_GetClockConfig+0x5c>)
 80020ba:	689b      	ldr	r3, [r3, #8]
 80020bc:	f003 0203 	and.w	r2, r3, #3
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80020c4:	4b0f      	ldr	r3, [pc, #60]	; (8002104 <HAL_RCC_GetClockConfig+0x5c>)
 80020c6:	689b      	ldr	r3, [r3, #8]
 80020c8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80020d0:	4b0c      	ldr	r3, [pc, #48]	; (8002104 <HAL_RCC_GetClockConfig+0x5c>)
 80020d2:	689b      	ldr	r3, [r3, #8]
 80020d4:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80020dc:	4b09      	ldr	r3, [pc, #36]	; (8002104 <HAL_RCC_GetClockConfig+0x5c>)
 80020de:	689b      	ldr	r3, [r3, #8]
 80020e0:	08db      	lsrs	r3, r3, #3
 80020e2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80020ea:	4b07      	ldr	r3, [pc, #28]	; (8002108 <HAL_RCC_GetClockConfig+0x60>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f003 020f 	and.w	r2, r3, #15
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	601a      	str	r2, [r3, #0]
}
 80020f6:	bf00      	nop
 80020f8:	370c      	adds	r7, #12
 80020fa:	46bd      	mov	sp, r7
 80020fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002100:	4770      	bx	lr
 8002102:	bf00      	nop
 8002104:	40021000 	.word	0x40021000
 8002108:	40022000 	.word	0x40022000

0800210c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b086      	sub	sp, #24
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002114:	2300      	movs	r3, #0
 8002116:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002118:	4b27      	ldr	r3, [pc, #156]	; (80021b8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800211a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800211c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002120:	2b00      	cmp	r3, #0
 8002122:	d003      	beq.n	800212c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002124:	f7ff f8d4 	bl	80012d0 <HAL_PWREx_GetVoltageRange>
 8002128:	6178      	str	r0, [r7, #20]
 800212a:	e014      	b.n	8002156 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800212c:	4b22      	ldr	r3, [pc, #136]	; (80021b8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800212e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002130:	4a21      	ldr	r2, [pc, #132]	; (80021b8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002132:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002136:	6593      	str	r3, [r2, #88]	; 0x58
 8002138:	4b1f      	ldr	r3, [pc, #124]	; (80021b8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800213a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800213c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002140:	60fb      	str	r3, [r7, #12]
 8002142:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002144:	f7ff f8c4 	bl	80012d0 <HAL_PWREx_GetVoltageRange>
 8002148:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800214a:	4b1b      	ldr	r3, [pc, #108]	; (80021b8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800214c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800214e:	4a1a      	ldr	r2, [pc, #104]	; (80021b8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002150:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002154:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002156:	697b      	ldr	r3, [r7, #20]
 8002158:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800215c:	d10b      	bne.n	8002176 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	2b80      	cmp	r3, #128	; 0x80
 8002162:	d913      	bls.n	800218c <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	2ba0      	cmp	r3, #160	; 0xa0
 8002168:	d902      	bls.n	8002170 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800216a:	2302      	movs	r3, #2
 800216c:	613b      	str	r3, [r7, #16]
 800216e:	e00d      	b.n	800218c <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002170:	2301      	movs	r3, #1
 8002172:	613b      	str	r3, [r7, #16]
 8002174:	e00a      	b.n	800218c <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	2b7f      	cmp	r3, #127	; 0x7f
 800217a:	d902      	bls.n	8002182 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 800217c:	2302      	movs	r3, #2
 800217e:	613b      	str	r3, [r7, #16]
 8002180:	e004      	b.n	800218c <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	2b70      	cmp	r3, #112	; 0x70
 8002186:	d101      	bne.n	800218c <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002188:	2301      	movs	r3, #1
 800218a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800218c:	4b0b      	ldr	r3, [pc, #44]	; (80021bc <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f023 020f 	bic.w	r2, r3, #15
 8002194:	4909      	ldr	r1, [pc, #36]	; (80021bc <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002196:	693b      	ldr	r3, [r7, #16]
 8002198:	4313      	orrs	r3, r2
 800219a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800219c:	4b07      	ldr	r3, [pc, #28]	; (80021bc <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f003 030f 	and.w	r3, r3, #15
 80021a4:	693a      	ldr	r2, [r7, #16]
 80021a6:	429a      	cmp	r2, r3
 80021a8:	d001      	beq.n	80021ae <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 80021aa:	2301      	movs	r3, #1
 80021ac:	e000      	b.n	80021b0 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 80021ae:	2300      	movs	r3, #0
}
 80021b0:	4618      	mov	r0, r3
 80021b2:	3718      	adds	r7, #24
 80021b4:	46bd      	mov	sp, r7
 80021b6:	bd80      	pop	{r7, pc}
 80021b8:	40021000 	.word	0x40021000
 80021bc:	40022000 	.word	0x40022000

080021c0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80021c0:	b480      	push	{r7}
 80021c2:	b087      	sub	sp, #28
 80021c4:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80021c6:	4b2d      	ldr	r3, [pc, #180]	; (800227c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80021c8:	68db      	ldr	r3, [r3, #12]
 80021ca:	f003 0303 	and.w	r3, r3, #3
 80021ce:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	2b03      	cmp	r3, #3
 80021d4:	d00b      	beq.n	80021ee <RCC_GetSysClockFreqFromPLLSource+0x2e>
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	2b03      	cmp	r3, #3
 80021da:	d825      	bhi.n	8002228 <RCC_GetSysClockFreqFromPLLSource+0x68>
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	2b01      	cmp	r3, #1
 80021e0:	d008      	beq.n	80021f4 <RCC_GetSysClockFreqFromPLLSource+0x34>
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	2b02      	cmp	r3, #2
 80021e6:	d11f      	bne.n	8002228 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 80021e8:	4b25      	ldr	r3, [pc, #148]	; (8002280 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80021ea:	613b      	str	r3, [r7, #16]
    break;
 80021ec:	e01f      	b.n	800222e <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 80021ee:	4b25      	ldr	r3, [pc, #148]	; (8002284 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 80021f0:	613b      	str	r3, [r7, #16]
    break;
 80021f2:	e01c      	b.n	800222e <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80021f4:	4b21      	ldr	r3, [pc, #132]	; (800227c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f003 0308 	and.w	r3, r3, #8
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d107      	bne.n	8002210 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002200:	4b1e      	ldr	r3, [pc, #120]	; (800227c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002202:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002206:	0a1b      	lsrs	r3, r3, #8
 8002208:	f003 030f 	and.w	r3, r3, #15
 800220c:	617b      	str	r3, [r7, #20]
 800220e:	e005      	b.n	800221c <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002210:	4b1a      	ldr	r3, [pc, #104]	; (800227c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	091b      	lsrs	r3, r3, #4
 8002216:	f003 030f 	and.w	r3, r3, #15
 800221a:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 800221c:	4a1a      	ldr	r2, [pc, #104]	; (8002288 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 800221e:	697b      	ldr	r3, [r7, #20]
 8002220:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002224:	613b      	str	r3, [r7, #16]
    break;
 8002226:	e002      	b.n	800222e <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8002228:	2300      	movs	r3, #0
 800222a:	613b      	str	r3, [r7, #16]
    break;
 800222c:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800222e:	4b13      	ldr	r3, [pc, #76]	; (800227c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002230:	68db      	ldr	r3, [r3, #12]
 8002232:	091b      	lsrs	r3, r3, #4
 8002234:	f003 030f 	and.w	r3, r3, #15
 8002238:	3301      	adds	r3, #1
 800223a:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800223c:	4b0f      	ldr	r3, [pc, #60]	; (800227c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800223e:	68db      	ldr	r3, [r3, #12]
 8002240:	0a1b      	lsrs	r3, r3, #8
 8002242:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002246:	693a      	ldr	r2, [r7, #16]
 8002248:	fb03 f202 	mul.w	r2, r3, r2
 800224c:	68bb      	ldr	r3, [r7, #8]
 800224e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002252:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002254:	4b09      	ldr	r3, [pc, #36]	; (800227c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002256:	68db      	ldr	r3, [r3, #12]
 8002258:	0e5b      	lsrs	r3, r3, #25
 800225a:	f003 0303 	and.w	r3, r3, #3
 800225e:	3301      	adds	r3, #1
 8002260:	005b      	lsls	r3, r3, #1
 8002262:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8002264:	693a      	ldr	r2, [r7, #16]
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	fbb2 f3f3 	udiv	r3, r2, r3
 800226c:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 800226e:	683b      	ldr	r3, [r7, #0]
}
 8002270:	4618      	mov	r0, r3
 8002272:	371c      	adds	r7, #28
 8002274:	46bd      	mov	sp, r7
 8002276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227a:	4770      	bx	lr
 800227c:	40021000 	.word	0x40021000
 8002280:	00f42400 	.word	0x00f42400
 8002284:	007a1200 	.word	0x007a1200
 8002288:	080067e0 	.word	0x080067e0

0800228c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b086      	sub	sp, #24
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002294:	2300      	movs	r3, #0
 8002296:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002298:	2300      	movs	r3, #0
 800229a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d040      	beq.n	800232a <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80022ac:	2b80      	cmp	r3, #128	; 0x80
 80022ae:	d02a      	beq.n	8002306 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80022b0:	2b80      	cmp	r3, #128	; 0x80
 80022b2:	d825      	bhi.n	8002300 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80022b4:	2b60      	cmp	r3, #96	; 0x60
 80022b6:	d026      	beq.n	8002306 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80022b8:	2b60      	cmp	r3, #96	; 0x60
 80022ba:	d821      	bhi.n	8002300 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80022bc:	2b40      	cmp	r3, #64	; 0x40
 80022be:	d006      	beq.n	80022ce <HAL_RCCEx_PeriphCLKConfig+0x42>
 80022c0:	2b40      	cmp	r3, #64	; 0x40
 80022c2:	d81d      	bhi.n	8002300 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d009      	beq.n	80022dc <HAL_RCCEx_PeriphCLKConfig+0x50>
 80022c8:	2b20      	cmp	r3, #32
 80022ca:	d010      	beq.n	80022ee <HAL_RCCEx_PeriphCLKConfig+0x62>
 80022cc:	e018      	b.n	8002300 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80022ce:	4b89      	ldr	r3, [pc, #548]	; (80024f4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80022d0:	68db      	ldr	r3, [r3, #12]
 80022d2:	4a88      	ldr	r2, [pc, #544]	; (80024f4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80022d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022d8:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80022da:	e015      	b.n	8002308 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	3304      	adds	r3, #4
 80022e0:	2100      	movs	r1, #0
 80022e2:	4618      	mov	r0, r3
 80022e4:	f000 fb02 	bl	80028ec <RCCEx_PLLSAI1_Config>
 80022e8:	4603      	mov	r3, r0
 80022ea:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80022ec:	e00c      	b.n	8002308 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	3320      	adds	r3, #32
 80022f2:	2100      	movs	r1, #0
 80022f4:	4618      	mov	r0, r3
 80022f6:	f000 fbed 	bl	8002ad4 <RCCEx_PLLSAI2_Config>
 80022fa:	4603      	mov	r3, r0
 80022fc:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80022fe:	e003      	b.n	8002308 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002300:	2301      	movs	r3, #1
 8002302:	74fb      	strb	r3, [r7, #19]
      break;
 8002304:	e000      	b.n	8002308 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8002306:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002308:	7cfb      	ldrb	r3, [r7, #19]
 800230a:	2b00      	cmp	r3, #0
 800230c:	d10b      	bne.n	8002326 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800230e:	4b79      	ldr	r3, [pc, #484]	; (80024f4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002310:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002314:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800231c:	4975      	ldr	r1, [pc, #468]	; (80024f4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800231e:	4313      	orrs	r3, r2
 8002320:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8002324:	e001      	b.n	800232a <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002326:	7cfb      	ldrb	r3, [r7, #19]
 8002328:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002332:	2b00      	cmp	r3, #0
 8002334:	d047      	beq.n	80023c6 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800233a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800233e:	d030      	beq.n	80023a2 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8002340:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002344:	d82a      	bhi.n	800239c <HAL_RCCEx_PeriphCLKConfig+0x110>
 8002346:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800234a:	d02a      	beq.n	80023a2 <HAL_RCCEx_PeriphCLKConfig+0x116>
 800234c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002350:	d824      	bhi.n	800239c <HAL_RCCEx_PeriphCLKConfig+0x110>
 8002352:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002356:	d008      	beq.n	800236a <HAL_RCCEx_PeriphCLKConfig+0xde>
 8002358:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800235c:	d81e      	bhi.n	800239c <HAL_RCCEx_PeriphCLKConfig+0x110>
 800235e:	2b00      	cmp	r3, #0
 8002360:	d00a      	beq.n	8002378 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8002362:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002366:	d010      	beq.n	800238a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8002368:	e018      	b.n	800239c <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800236a:	4b62      	ldr	r3, [pc, #392]	; (80024f4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800236c:	68db      	ldr	r3, [r3, #12]
 800236e:	4a61      	ldr	r2, [pc, #388]	; (80024f4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002370:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002374:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002376:	e015      	b.n	80023a4 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	3304      	adds	r3, #4
 800237c:	2100      	movs	r1, #0
 800237e:	4618      	mov	r0, r3
 8002380:	f000 fab4 	bl	80028ec <RCCEx_PLLSAI1_Config>
 8002384:	4603      	mov	r3, r0
 8002386:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002388:	e00c      	b.n	80023a4 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	3320      	adds	r3, #32
 800238e:	2100      	movs	r1, #0
 8002390:	4618      	mov	r0, r3
 8002392:	f000 fb9f 	bl	8002ad4 <RCCEx_PLLSAI2_Config>
 8002396:	4603      	mov	r3, r0
 8002398:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800239a:	e003      	b.n	80023a4 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800239c:	2301      	movs	r3, #1
 800239e:	74fb      	strb	r3, [r7, #19]
      break;
 80023a0:	e000      	b.n	80023a4 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 80023a2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80023a4:	7cfb      	ldrb	r3, [r7, #19]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d10b      	bne.n	80023c2 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80023aa:	4b52      	ldr	r3, [pc, #328]	; (80024f4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80023ac:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80023b0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023b8:	494e      	ldr	r1, [pc, #312]	; (80024f4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80023ba:	4313      	orrs	r3, r2
 80023bc:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 80023c0:	e001      	b.n	80023c6 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80023c2:	7cfb      	ldrb	r3, [r7, #19]
 80023c4:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	f000 809f 	beq.w	8002512 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 80023d4:	2300      	movs	r3, #0
 80023d6:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80023d8:	4b46      	ldr	r3, [pc, #280]	; (80024f4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80023da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d101      	bne.n	80023e8 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 80023e4:	2301      	movs	r3, #1
 80023e6:	e000      	b.n	80023ea <HAL_RCCEx_PeriphCLKConfig+0x15e>
 80023e8:	2300      	movs	r3, #0
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d00d      	beq.n	800240a <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023ee:	4b41      	ldr	r3, [pc, #260]	; (80024f4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80023f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023f2:	4a40      	ldr	r2, [pc, #256]	; (80024f4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80023f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023f8:	6593      	str	r3, [r2, #88]	; 0x58
 80023fa:	4b3e      	ldr	r3, [pc, #248]	; (80024f4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80023fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002402:	60bb      	str	r3, [r7, #8]
 8002404:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002406:	2301      	movs	r3, #1
 8002408:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800240a:	4b3b      	ldr	r3, [pc, #236]	; (80024f8 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	4a3a      	ldr	r2, [pc, #232]	; (80024f8 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8002410:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002414:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002416:	f7fe fc79 	bl	8000d0c <HAL_GetTick>
 800241a:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800241c:	e009      	b.n	8002432 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800241e:	f7fe fc75 	bl	8000d0c <HAL_GetTick>
 8002422:	4602      	mov	r2, r0
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	1ad3      	subs	r3, r2, r3
 8002428:	2b02      	cmp	r3, #2
 800242a:	d902      	bls.n	8002432 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 800242c:	2303      	movs	r3, #3
 800242e:	74fb      	strb	r3, [r7, #19]
        break;
 8002430:	e005      	b.n	800243e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002432:	4b31      	ldr	r3, [pc, #196]	; (80024f8 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800243a:	2b00      	cmp	r3, #0
 800243c:	d0ef      	beq.n	800241e <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 800243e:	7cfb      	ldrb	r3, [r7, #19]
 8002440:	2b00      	cmp	r3, #0
 8002442:	d15b      	bne.n	80024fc <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002444:	4b2b      	ldr	r3, [pc, #172]	; (80024f4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002446:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800244a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800244e:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002450:	697b      	ldr	r3, [r7, #20]
 8002452:	2b00      	cmp	r3, #0
 8002454:	d01f      	beq.n	8002496 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800245c:	697a      	ldr	r2, [r7, #20]
 800245e:	429a      	cmp	r2, r3
 8002460:	d019      	beq.n	8002496 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002462:	4b24      	ldr	r3, [pc, #144]	; (80024f4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002464:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002468:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800246c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800246e:	4b21      	ldr	r3, [pc, #132]	; (80024f4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002470:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002474:	4a1f      	ldr	r2, [pc, #124]	; (80024f4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002476:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800247a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800247e:	4b1d      	ldr	r3, [pc, #116]	; (80024f4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002480:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002484:	4a1b      	ldr	r2, [pc, #108]	; (80024f4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002486:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800248a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800248e:	4a19      	ldr	r2, [pc, #100]	; (80024f4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002490:	697b      	ldr	r3, [r7, #20]
 8002492:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002496:	697b      	ldr	r3, [r7, #20]
 8002498:	f003 0301 	and.w	r3, r3, #1
 800249c:	2b00      	cmp	r3, #0
 800249e:	d016      	beq.n	80024ce <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024a0:	f7fe fc34 	bl	8000d0c <HAL_GetTick>
 80024a4:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80024a6:	e00b      	b.n	80024c0 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024a8:	f7fe fc30 	bl	8000d0c <HAL_GetTick>
 80024ac:	4602      	mov	r2, r0
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	1ad3      	subs	r3, r2, r3
 80024b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80024b6:	4293      	cmp	r3, r2
 80024b8:	d902      	bls.n	80024c0 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 80024ba:	2303      	movs	r3, #3
 80024bc:	74fb      	strb	r3, [r7, #19]
            break;
 80024be:	e006      	b.n	80024ce <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80024c0:	4b0c      	ldr	r3, [pc, #48]	; (80024f4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80024c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024c6:	f003 0302 	and.w	r3, r3, #2
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d0ec      	beq.n	80024a8 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 80024ce:	7cfb      	ldrb	r3, [r7, #19]
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d10c      	bne.n	80024ee <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80024d4:	4b07      	ldr	r3, [pc, #28]	; (80024f4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80024d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024da:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024e4:	4903      	ldr	r1, [pc, #12]	; (80024f4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80024e6:	4313      	orrs	r3, r2
 80024e8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80024ec:	e008      	b.n	8002500 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80024ee:	7cfb      	ldrb	r3, [r7, #19]
 80024f0:	74bb      	strb	r3, [r7, #18]
 80024f2:	e005      	b.n	8002500 <HAL_RCCEx_PeriphCLKConfig+0x274>
 80024f4:	40021000 	.word	0x40021000
 80024f8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80024fc:	7cfb      	ldrb	r3, [r7, #19]
 80024fe:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002500:	7c7b      	ldrb	r3, [r7, #17]
 8002502:	2b01      	cmp	r3, #1
 8002504:	d105      	bne.n	8002512 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002506:	4ba0      	ldr	r3, [pc, #640]	; (8002788 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002508:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800250a:	4a9f      	ldr	r2, [pc, #636]	; (8002788 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800250c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002510:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f003 0301 	and.w	r3, r3, #1
 800251a:	2b00      	cmp	r3, #0
 800251c:	d00a      	beq.n	8002534 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800251e:	4b9a      	ldr	r3, [pc, #616]	; (8002788 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002520:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002524:	f023 0203 	bic.w	r2, r3, #3
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800252c:	4996      	ldr	r1, [pc, #600]	; (8002788 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800252e:	4313      	orrs	r3, r2
 8002530:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f003 0302 	and.w	r3, r3, #2
 800253c:	2b00      	cmp	r3, #0
 800253e:	d00a      	beq.n	8002556 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002540:	4b91      	ldr	r3, [pc, #580]	; (8002788 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002542:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002546:	f023 020c 	bic.w	r2, r3, #12
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800254e:	498e      	ldr	r1, [pc, #568]	; (8002788 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002550:	4313      	orrs	r3, r2
 8002552:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f003 0304 	and.w	r3, r3, #4
 800255e:	2b00      	cmp	r3, #0
 8002560:	d00a      	beq.n	8002578 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002562:	4b89      	ldr	r3, [pc, #548]	; (8002788 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002564:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002568:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002570:	4985      	ldr	r1, [pc, #532]	; (8002788 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002572:	4313      	orrs	r3, r2
 8002574:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f003 0308 	and.w	r3, r3, #8
 8002580:	2b00      	cmp	r3, #0
 8002582:	d00a      	beq.n	800259a <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002584:	4b80      	ldr	r3, [pc, #512]	; (8002788 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002586:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800258a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002592:	497d      	ldr	r1, [pc, #500]	; (8002788 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002594:	4313      	orrs	r3, r2
 8002596:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f003 0310 	and.w	r3, r3, #16
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d00a      	beq.n	80025bc <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80025a6:	4b78      	ldr	r3, [pc, #480]	; (8002788 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80025a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025ac:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025b4:	4974      	ldr	r1, [pc, #464]	; (8002788 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80025b6:	4313      	orrs	r3, r2
 80025b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f003 0320 	and.w	r3, r3, #32
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d00a      	beq.n	80025de <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80025c8:	4b6f      	ldr	r3, [pc, #444]	; (8002788 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80025ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025ce:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80025d6:	496c      	ldr	r1, [pc, #432]	; (8002788 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80025d8:	4313      	orrs	r3, r2
 80025da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d00a      	beq.n	8002600 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80025ea:	4b67      	ldr	r3, [pc, #412]	; (8002788 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80025ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025f0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80025f8:	4963      	ldr	r1, [pc, #396]	; (8002788 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80025fa:	4313      	orrs	r3, r2
 80025fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002608:	2b00      	cmp	r3, #0
 800260a:	d00a      	beq.n	8002622 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800260c:	4b5e      	ldr	r3, [pc, #376]	; (8002788 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800260e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002612:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800261a:	495b      	ldr	r1, [pc, #364]	; (8002788 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800261c:	4313      	orrs	r3, r2
 800261e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800262a:	2b00      	cmp	r3, #0
 800262c:	d00a      	beq.n	8002644 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800262e:	4b56      	ldr	r3, [pc, #344]	; (8002788 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002630:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002634:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800263c:	4952      	ldr	r1, [pc, #328]	; (8002788 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800263e:	4313      	orrs	r3, r2
 8002640:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800264c:	2b00      	cmp	r3, #0
 800264e:	d00a      	beq.n	8002666 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002650:	4b4d      	ldr	r3, [pc, #308]	; (8002788 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002652:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002656:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800265e:	494a      	ldr	r1, [pc, #296]	; (8002788 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002660:	4313      	orrs	r3, r2
 8002662:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800266e:	2b00      	cmp	r3, #0
 8002670:	d00a      	beq.n	8002688 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002672:	4b45      	ldr	r3, [pc, #276]	; (8002788 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002674:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002678:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002680:	4941      	ldr	r1, [pc, #260]	; (8002788 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002682:	4313      	orrs	r3, r2
 8002684:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002690:	2b00      	cmp	r3, #0
 8002692:	d00a      	beq.n	80026aa <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002694:	4b3c      	ldr	r3, [pc, #240]	; (8002788 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002696:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800269a:	f023 0203 	bic.w	r2, r3, #3
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026a2:	4939      	ldr	r1, [pc, #228]	; (8002788 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80026a4:	4313      	orrs	r3, r2
 80026a6:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d028      	beq.n	8002708 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80026b6:	4b34      	ldr	r3, [pc, #208]	; (8002788 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80026b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026bc:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026c4:	4930      	ldr	r1, [pc, #192]	; (8002788 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80026c6:	4313      	orrs	r3, r2
 80026c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026d0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80026d4:	d106      	bne.n	80026e4 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80026d6:	4b2c      	ldr	r3, [pc, #176]	; (8002788 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80026d8:	68db      	ldr	r3, [r3, #12]
 80026da:	4a2b      	ldr	r2, [pc, #172]	; (8002788 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80026dc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80026e0:	60d3      	str	r3, [r2, #12]
 80026e2:	e011      	b.n	8002708 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026e8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80026ec:	d10c      	bne.n	8002708 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	3304      	adds	r3, #4
 80026f2:	2101      	movs	r1, #1
 80026f4:	4618      	mov	r0, r3
 80026f6:	f000 f8f9 	bl	80028ec <RCCEx_PLLSAI1_Config>
 80026fa:	4603      	mov	r3, r0
 80026fc:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80026fe:	7cfb      	ldrb	r3, [r7, #19]
 8002700:	2b00      	cmp	r3, #0
 8002702:	d001      	beq.n	8002708 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8002704:	7cfb      	ldrb	r3, [r7, #19]
 8002706:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002710:	2b00      	cmp	r3, #0
 8002712:	d04d      	beq.n	80027b0 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002718:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800271c:	d108      	bne.n	8002730 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 800271e:	4b1a      	ldr	r3, [pc, #104]	; (8002788 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002720:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002724:	4a18      	ldr	r2, [pc, #96]	; (8002788 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002726:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800272a:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 800272e:	e012      	b.n	8002756 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8002730:	4b15      	ldr	r3, [pc, #84]	; (8002788 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002732:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002736:	4a14      	ldr	r2, [pc, #80]	; (8002788 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002738:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800273c:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8002740:	4b11      	ldr	r3, [pc, #68]	; (8002788 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002742:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002746:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800274e:	490e      	ldr	r1, [pc, #56]	; (8002788 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002750:	4313      	orrs	r3, r2
 8002752:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800275a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800275e:	d106      	bne.n	800276e <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002760:	4b09      	ldr	r3, [pc, #36]	; (8002788 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002762:	68db      	ldr	r3, [r3, #12]
 8002764:	4a08      	ldr	r2, [pc, #32]	; (8002788 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002766:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800276a:	60d3      	str	r3, [r2, #12]
 800276c:	e020      	b.n	80027b0 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002772:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002776:	d109      	bne.n	800278c <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002778:	4b03      	ldr	r3, [pc, #12]	; (8002788 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800277a:	68db      	ldr	r3, [r3, #12]
 800277c:	4a02      	ldr	r2, [pc, #8]	; (8002788 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800277e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002782:	60d3      	str	r3, [r2, #12]
 8002784:	e014      	b.n	80027b0 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8002786:	bf00      	nop
 8002788:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002790:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002794:	d10c      	bne.n	80027b0 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	3304      	adds	r3, #4
 800279a:	2101      	movs	r1, #1
 800279c:	4618      	mov	r0, r3
 800279e:	f000 f8a5 	bl	80028ec <RCCEx_PLLSAI1_Config>
 80027a2:	4603      	mov	r3, r0
 80027a4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80027a6:	7cfb      	ldrb	r3, [r7, #19]
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d001      	beq.n	80027b0 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 80027ac:	7cfb      	ldrb	r3, [r7, #19]
 80027ae:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d028      	beq.n	800280e <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80027bc:	4b4a      	ldr	r3, [pc, #296]	; (80028e8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80027be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027c2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80027ca:	4947      	ldr	r1, [pc, #284]	; (80028e8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80027cc:	4313      	orrs	r3, r2
 80027ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80027d6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80027da:	d106      	bne.n	80027ea <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80027dc:	4b42      	ldr	r3, [pc, #264]	; (80028e8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80027de:	68db      	ldr	r3, [r3, #12]
 80027e0:	4a41      	ldr	r2, [pc, #260]	; (80028e8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80027e2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80027e6:	60d3      	str	r3, [r2, #12]
 80027e8:	e011      	b.n	800280e <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80027ee:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80027f2:	d10c      	bne.n	800280e <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	3304      	adds	r3, #4
 80027f8:	2101      	movs	r1, #1
 80027fa:	4618      	mov	r0, r3
 80027fc:	f000 f876 	bl	80028ec <RCCEx_PLLSAI1_Config>
 8002800:	4603      	mov	r3, r0
 8002802:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002804:	7cfb      	ldrb	r3, [r7, #19]
 8002806:	2b00      	cmp	r3, #0
 8002808:	d001      	beq.n	800280e <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 800280a:	7cfb      	ldrb	r3, [r7, #19]
 800280c:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002816:	2b00      	cmp	r3, #0
 8002818:	d01e      	beq.n	8002858 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800281a:	4b33      	ldr	r3, [pc, #204]	; (80028e8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800281c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002820:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800282a:	492f      	ldr	r1, [pc, #188]	; (80028e8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800282c:	4313      	orrs	r3, r2
 800282e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002838:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800283c:	d10c      	bne.n	8002858 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	3304      	adds	r3, #4
 8002842:	2102      	movs	r1, #2
 8002844:	4618      	mov	r0, r3
 8002846:	f000 f851 	bl	80028ec <RCCEx_PLLSAI1_Config>
 800284a:	4603      	mov	r3, r0
 800284c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800284e:	7cfb      	ldrb	r3, [r7, #19]
 8002850:	2b00      	cmp	r3, #0
 8002852:	d001      	beq.n	8002858 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8002854:	7cfb      	ldrb	r3, [r7, #19]
 8002856:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002860:	2b00      	cmp	r3, #0
 8002862:	d00b      	beq.n	800287c <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002864:	4b20      	ldr	r3, [pc, #128]	; (80028e8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002866:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800286a:	f023 0204 	bic.w	r2, r3, #4
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002874:	491c      	ldr	r1, [pc, #112]	; (80028e8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002876:	4313      	orrs	r3, r2
 8002878:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002884:	2b00      	cmp	r3, #0
 8002886:	d00b      	beq.n	80028a0 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002888:	4b17      	ldr	r3, [pc, #92]	; (80028e8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800288a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800288e:	f023 0218 	bic.w	r2, r3, #24
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002898:	4913      	ldr	r1, [pc, #76]	; (80028e8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800289a:	4313      	orrs	r3, r2
 800289c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d017      	beq.n	80028dc <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80028ac:	4b0e      	ldr	r3, [pc, #56]	; (80028e8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80028ae:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80028b2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80028bc:	490a      	ldr	r1, [pc, #40]	; (80028e8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80028be:	4313      	orrs	r3, r2
 80028c0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80028ca:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80028ce:	d105      	bne.n	80028dc <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80028d0:	4b05      	ldr	r3, [pc, #20]	; (80028e8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80028d2:	68db      	ldr	r3, [r3, #12]
 80028d4:	4a04      	ldr	r2, [pc, #16]	; (80028e8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80028d6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80028da:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80028dc:	7cbb      	ldrb	r3, [r7, #18]
}
 80028de:	4618      	mov	r0, r3
 80028e0:	3718      	adds	r7, #24
 80028e2:	46bd      	mov	sp, r7
 80028e4:	bd80      	pop	{r7, pc}
 80028e6:	bf00      	nop
 80028e8:	40021000 	.word	0x40021000

080028ec <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b084      	sub	sp, #16
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
 80028f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80028f6:	2300      	movs	r3, #0
 80028f8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80028fa:	4b72      	ldr	r3, [pc, #456]	; (8002ac4 <RCCEx_PLLSAI1_Config+0x1d8>)
 80028fc:	68db      	ldr	r3, [r3, #12]
 80028fe:	f003 0303 	and.w	r3, r3, #3
 8002902:	2b00      	cmp	r3, #0
 8002904:	d00e      	beq.n	8002924 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002906:	4b6f      	ldr	r3, [pc, #444]	; (8002ac4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002908:	68db      	ldr	r3, [r3, #12]
 800290a:	f003 0203 	and.w	r2, r3, #3
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	429a      	cmp	r2, r3
 8002914:	d103      	bne.n	800291e <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
       ||
 800291a:	2b00      	cmp	r3, #0
 800291c:	d142      	bne.n	80029a4 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 800291e:	2301      	movs	r3, #1
 8002920:	73fb      	strb	r3, [r7, #15]
 8002922:	e03f      	b.n	80029a4 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	2b03      	cmp	r3, #3
 800292a:	d018      	beq.n	800295e <RCCEx_PLLSAI1_Config+0x72>
 800292c:	2b03      	cmp	r3, #3
 800292e:	d825      	bhi.n	800297c <RCCEx_PLLSAI1_Config+0x90>
 8002930:	2b01      	cmp	r3, #1
 8002932:	d002      	beq.n	800293a <RCCEx_PLLSAI1_Config+0x4e>
 8002934:	2b02      	cmp	r3, #2
 8002936:	d009      	beq.n	800294c <RCCEx_PLLSAI1_Config+0x60>
 8002938:	e020      	b.n	800297c <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800293a:	4b62      	ldr	r3, [pc, #392]	; (8002ac4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f003 0302 	and.w	r3, r3, #2
 8002942:	2b00      	cmp	r3, #0
 8002944:	d11d      	bne.n	8002982 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8002946:	2301      	movs	r3, #1
 8002948:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800294a:	e01a      	b.n	8002982 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800294c:	4b5d      	ldr	r3, [pc, #372]	; (8002ac4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002954:	2b00      	cmp	r3, #0
 8002956:	d116      	bne.n	8002986 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8002958:	2301      	movs	r3, #1
 800295a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800295c:	e013      	b.n	8002986 <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800295e:	4b59      	ldr	r3, [pc, #356]	; (8002ac4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002966:	2b00      	cmp	r3, #0
 8002968:	d10f      	bne.n	800298a <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800296a:	4b56      	ldr	r3, [pc, #344]	; (8002ac4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002972:	2b00      	cmp	r3, #0
 8002974:	d109      	bne.n	800298a <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 8002976:	2301      	movs	r3, #1
 8002978:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800297a:	e006      	b.n	800298a <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 800297c:	2301      	movs	r3, #1
 800297e:	73fb      	strb	r3, [r7, #15]
      break;
 8002980:	e004      	b.n	800298c <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8002982:	bf00      	nop
 8002984:	e002      	b.n	800298c <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8002986:	bf00      	nop
 8002988:	e000      	b.n	800298c <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800298a:	bf00      	nop
    }

    if(status == HAL_OK)
 800298c:	7bfb      	ldrb	r3, [r7, #15]
 800298e:	2b00      	cmp	r3, #0
 8002990:	d108      	bne.n	80029a4 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8002992:	4b4c      	ldr	r3, [pc, #304]	; (8002ac4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002994:	68db      	ldr	r3, [r3, #12]
 8002996:	f023 0203 	bic.w	r2, r3, #3
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	4949      	ldr	r1, [pc, #292]	; (8002ac4 <RCCEx_PLLSAI1_Config+0x1d8>)
 80029a0:	4313      	orrs	r3, r2
 80029a2:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80029a4:	7bfb      	ldrb	r3, [r7, #15]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	f040 8086 	bne.w	8002ab8 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80029ac:	4b45      	ldr	r3, [pc, #276]	; (8002ac4 <RCCEx_PLLSAI1_Config+0x1d8>)
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	4a44      	ldr	r2, [pc, #272]	; (8002ac4 <RCCEx_PLLSAI1_Config+0x1d8>)
 80029b2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80029b6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80029b8:	f7fe f9a8 	bl	8000d0c <HAL_GetTick>
 80029bc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80029be:	e009      	b.n	80029d4 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80029c0:	f7fe f9a4 	bl	8000d0c <HAL_GetTick>
 80029c4:	4602      	mov	r2, r0
 80029c6:	68bb      	ldr	r3, [r7, #8]
 80029c8:	1ad3      	subs	r3, r2, r3
 80029ca:	2b02      	cmp	r3, #2
 80029cc:	d902      	bls.n	80029d4 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 80029ce:	2303      	movs	r3, #3
 80029d0:	73fb      	strb	r3, [r7, #15]
        break;
 80029d2:	e005      	b.n	80029e0 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80029d4:	4b3b      	ldr	r3, [pc, #236]	; (8002ac4 <RCCEx_PLLSAI1_Config+0x1d8>)
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d1ef      	bne.n	80029c0 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 80029e0:	7bfb      	ldrb	r3, [r7, #15]
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d168      	bne.n	8002ab8 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d113      	bne.n	8002a14 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80029ec:	4b35      	ldr	r3, [pc, #212]	; (8002ac4 <RCCEx_PLLSAI1_Config+0x1d8>)
 80029ee:	691a      	ldr	r2, [r3, #16]
 80029f0:	4b35      	ldr	r3, [pc, #212]	; (8002ac8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80029f2:	4013      	ands	r3, r2
 80029f4:	687a      	ldr	r2, [r7, #4]
 80029f6:	6892      	ldr	r2, [r2, #8]
 80029f8:	0211      	lsls	r1, r2, #8
 80029fa:	687a      	ldr	r2, [r7, #4]
 80029fc:	68d2      	ldr	r2, [r2, #12]
 80029fe:	06d2      	lsls	r2, r2, #27
 8002a00:	4311      	orrs	r1, r2
 8002a02:	687a      	ldr	r2, [r7, #4]
 8002a04:	6852      	ldr	r2, [r2, #4]
 8002a06:	3a01      	subs	r2, #1
 8002a08:	0112      	lsls	r2, r2, #4
 8002a0a:	430a      	orrs	r2, r1
 8002a0c:	492d      	ldr	r1, [pc, #180]	; (8002ac4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002a0e:	4313      	orrs	r3, r2
 8002a10:	610b      	str	r3, [r1, #16]
 8002a12:	e02d      	b.n	8002a70 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	2b01      	cmp	r3, #1
 8002a18:	d115      	bne.n	8002a46 <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002a1a:	4b2a      	ldr	r3, [pc, #168]	; (8002ac4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002a1c:	691a      	ldr	r2, [r3, #16]
 8002a1e:	4b2b      	ldr	r3, [pc, #172]	; (8002acc <RCCEx_PLLSAI1_Config+0x1e0>)
 8002a20:	4013      	ands	r3, r2
 8002a22:	687a      	ldr	r2, [r7, #4]
 8002a24:	6892      	ldr	r2, [r2, #8]
 8002a26:	0211      	lsls	r1, r2, #8
 8002a28:	687a      	ldr	r2, [r7, #4]
 8002a2a:	6912      	ldr	r2, [r2, #16]
 8002a2c:	0852      	lsrs	r2, r2, #1
 8002a2e:	3a01      	subs	r2, #1
 8002a30:	0552      	lsls	r2, r2, #21
 8002a32:	4311      	orrs	r1, r2
 8002a34:	687a      	ldr	r2, [r7, #4]
 8002a36:	6852      	ldr	r2, [r2, #4]
 8002a38:	3a01      	subs	r2, #1
 8002a3a:	0112      	lsls	r2, r2, #4
 8002a3c:	430a      	orrs	r2, r1
 8002a3e:	4921      	ldr	r1, [pc, #132]	; (8002ac4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002a40:	4313      	orrs	r3, r2
 8002a42:	610b      	str	r3, [r1, #16]
 8002a44:	e014      	b.n	8002a70 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002a46:	4b1f      	ldr	r3, [pc, #124]	; (8002ac4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002a48:	691a      	ldr	r2, [r3, #16]
 8002a4a:	4b21      	ldr	r3, [pc, #132]	; (8002ad0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a4c:	4013      	ands	r3, r2
 8002a4e:	687a      	ldr	r2, [r7, #4]
 8002a50:	6892      	ldr	r2, [r2, #8]
 8002a52:	0211      	lsls	r1, r2, #8
 8002a54:	687a      	ldr	r2, [r7, #4]
 8002a56:	6952      	ldr	r2, [r2, #20]
 8002a58:	0852      	lsrs	r2, r2, #1
 8002a5a:	3a01      	subs	r2, #1
 8002a5c:	0652      	lsls	r2, r2, #25
 8002a5e:	4311      	orrs	r1, r2
 8002a60:	687a      	ldr	r2, [r7, #4]
 8002a62:	6852      	ldr	r2, [r2, #4]
 8002a64:	3a01      	subs	r2, #1
 8002a66:	0112      	lsls	r2, r2, #4
 8002a68:	430a      	orrs	r2, r1
 8002a6a:	4916      	ldr	r1, [pc, #88]	; (8002ac4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002a6c:	4313      	orrs	r3, r2
 8002a6e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002a70:	4b14      	ldr	r3, [pc, #80]	; (8002ac4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	4a13      	ldr	r2, [pc, #76]	; (8002ac4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002a76:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002a7a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a7c:	f7fe f946 	bl	8000d0c <HAL_GetTick>
 8002a80:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002a82:	e009      	b.n	8002a98 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002a84:	f7fe f942 	bl	8000d0c <HAL_GetTick>
 8002a88:	4602      	mov	r2, r0
 8002a8a:	68bb      	ldr	r3, [r7, #8]
 8002a8c:	1ad3      	subs	r3, r2, r3
 8002a8e:	2b02      	cmp	r3, #2
 8002a90:	d902      	bls.n	8002a98 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8002a92:	2303      	movs	r3, #3
 8002a94:	73fb      	strb	r3, [r7, #15]
          break;
 8002a96:	e005      	b.n	8002aa4 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002a98:	4b0a      	ldr	r3, [pc, #40]	; (8002ac4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d0ef      	beq.n	8002a84 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8002aa4:	7bfb      	ldrb	r3, [r7, #15]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d106      	bne.n	8002ab8 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002aaa:	4b06      	ldr	r3, [pc, #24]	; (8002ac4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002aac:	691a      	ldr	r2, [r3, #16]
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	699b      	ldr	r3, [r3, #24]
 8002ab2:	4904      	ldr	r1, [pc, #16]	; (8002ac4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002ab4:	4313      	orrs	r3, r2
 8002ab6:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002ab8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002aba:	4618      	mov	r0, r3
 8002abc:	3710      	adds	r7, #16
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	bd80      	pop	{r7, pc}
 8002ac2:	bf00      	nop
 8002ac4:	40021000 	.word	0x40021000
 8002ac8:	07ff800f 	.word	0x07ff800f
 8002acc:	ff9f800f 	.word	0xff9f800f
 8002ad0:	f9ff800f 	.word	0xf9ff800f

08002ad4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b084      	sub	sp, #16
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
 8002adc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002ade:	2300      	movs	r3, #0
 8002ae0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002ae2:	4b72      	ldr	r3, [pc, #456]	; (8002cac <RCCEx_PLLSAI2_Config+0x1d8>)
 8002ae4:	68db      	ldr	r3, [r3, #12]
 8002ae6:	f003 0303 	and.w	r3, r3, #3
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d00e      	beq.n	8002b0c <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002aee:	4b6f      	ldr	r3, [pc, #444]	; (8002cac <RCCEx_PLLSAI2_Config+0x1d8>)
 8002af0:	68db      	ldr	r3, [r3, #12]
 8002af2:	f003 0203 	and.w	r2, r3, #3
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	429a      	cmp	r2, r3
 8002afc:	d103      	bne.n	8002b06 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
       ||
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d142      	bne.n	8002b8c <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8002b06:	2301      	movs	r3, #1
 8002b08:	73fb      	strb	r3, [r7, #15]
 8002b0a:	e03f      	b.n	8002b8c <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	2b03      	cmp	r3, #3
 8002b12:	d018      	beq.n	8002b46 <RCCEx_PLLSAI2_Config+0x72>
 8002b14:	2b03      	cmp	r3, #3
 8002b16:	d825      	bhi.n	8002b64 <RCCEx_PLLSAI2_Config+0x90>
 8002b18:	2b01      	cmp	r3, #1
 8002b1a:	d002      	beq.n	8002b22 <RCCEx_PLLSAI2_Config+0x4e>
 8002b1c:	2b02      	cmp	r3, #2
 8002b1e:	d009      	beq.n	8002b34 <RCCEx_PLLSAI2_Config+0x60>
 8002b20:	e020      	b.n	8002b64 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002b22:	4b62      	ldr	r3, [pc, #392]	; (8002cac <RCCEx_PLLSAI2_Config+0x1d8>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f003 0302 	and.w	r3, r3, #2
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d11d      	bne.n	8002b6a <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8002b2e:	2301      	movs	r3, #1
 8002b30:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b32:	e01a      	b.n	8002b6a <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002b34:	4b5d      	ldr	r3, [pc, #372]	; (8002cac <RCCEx_PLLSAI2_Config+0x1d8>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d116      	bne.n	8002b6e <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8002b40:	2301      	movs	r3, #1
 8002b42:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b44:	e013      	b.n	8002b6e <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002b46:	4b59      	ldr	r3, [pc, #356]	; (8002cac <RCCEx_PLLSAI2_Config+0x1d8>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d10f      	bne.n	8002b72 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002b52:	4b56      	ldr	r3, [pc, #344]	; (8002cac <RCCEx_PLLSAI2_Config+0x1d8>)
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d109      	bne.n	8002b72 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8002b5e:	2301      	movs	r3, #1
 8002b60:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002b62:	e006      	b.n	8002b72 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8002b64:	2301      	movs	r3, #1
 8002b66:	73fb      	strb	r3, [r7, #15]
      break;
 8002b68:	e004      	b.n	8002b74 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8002b6a:	bf00      	nop
 8002b6c:	e002      	b.n	8002b74 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8002b6e:	bf00      	nop
 8002b70:	e000      	b.n	8002b74 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8002b72:	bf00      	nop
    }

    if(status == HAL_OK)
 8002b74:	7bfb      	ldrb	r3, [r7, #15]
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d108      	bne.n	8002b8c <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8002b7a:	4b4c      	ldr	r3, [pc, #304]	; (8002cac <RCCEx_PLLSAI2_Config+0x1d8>)
 8002b7c:	68db      	ldr	r3, [r3, #12]
 8002b7e:	f023 0203 	bic.w	r2, r3, #3
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	4949      	ldr	r1, [pc, #292]	; (8002cac <RCCEx_PLLSAI2_Config+0x1d8>)
 8002b88:	4313      	orrs	r3, r2
 8002b8a:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8002b8c:	7bfb      	ldrb	r3, [r7, #15]
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	f040 8086 	bne.w	8002ca0 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002b94:	4b45      	ldr	r3, [pc, #276]	; (8002cac <RCCEx_PLLSAI2_Config+0x1d8>)
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	4a44      	ldr	r2, [pc, #272]	; (8002cac <RCCEx_PLLSAI2_Config+0x1d8>)
 8002b9a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b9e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ba0:	f7fe f8b4 	bl	8000d0c <HAL_GetTick>
 8002ba4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002ba6:	e009      	b.n	8002bbc <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002ba8:	f7fe f8b0 	bl	8000d0c <HAL_GetTick>
 8002bac:	4602      	mov	r2, r0
 8002bae:	68bb      	ldr	r3, [r7, #8]
 8002bb0:	1ad3      	subs	r3, r2, r3
 8002bb2:	2b02      	cmp	r3, #2
 8002bb4:	d902      	bls.n	8002bbc <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8002bb6:	2303      	movs	r3, #3
 8002bb8:	73fb      	strb	r3, [r7, #15]
        break;
 8002bba:	e005      	b.n	8002bc8 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002bbc:	4b3b      	ldr	r3, [pc, #236]	; (8002cac <RCCEx_PLLSAI2_Config+0x1d8>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d1ef      	bne.n	8002ba8 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8002bc8:	7bfb      	ldrb	r3, [r7, #15]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d168      	bne.n	8002ca0 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d113      	bne.n	8002bfc <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002bd4:	4b35      	ldr	r3, [pc, #212]	; (8002cac <RCCEx_PLLSAI2_Config+0x1d8>)
 8002bd6:	695a      	ldr	r2, [r3, #20]
 8002bd8:	4b35      	ldr	r3, [pc, #212]	; (8002cb0 <RCCEx_PLLSAI2_Config+0x1dc>)
 8002bda:	4013      	ands	r3, r2
 8002bdc:	687a      	ldr	r2, [r7, #4]
 8002bde:	6892      	ldr	r2, [r2, #8]
 8002be0:	0211      	lsls	r1, r2, #8
 8002be2:	687a      	ldr	r2, [r7, #4]
 8002be4:	68d2      	ldr	r2, [r2, #12]
 8002be6:	06d2      	lsls	r2, r2, #27
 8002be8:	4311      	orrs	r1, r2
 8002bea:	687a      	ldr	r2, [r7, #4]
 8002bec:	6852      	ldr	r2, [r2, #4]
 8002bee:	3a01      	subs	r2, #1
 8002bf0:	0112      	lsls	r2, r2, #4
 8002bf2:	430a      	orrs	r2, r1
 8002bf4:	492d      	ldr	r1, [pc, #180]	; (8002cac <RCCEx_PLLSAI2_Config+0x1d8>)
 8002bf6:	4313      	orrs	r3, r2
 8002bf8:	614b      	str	r3, [r1, #20]
 8002bfa:	e02d      	b.n	8002c58 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	2b01      	cmp	r3, #1
 8002c00:	d115      	bne.n	8002c2e <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002c02:	4b2a      	ldr	r3, [pc, #168]	; (8002cac <RCCEx_PLLSAI2_Config+0x1d8>)
 8002c04:	695a      	ldr	r2, [r3, #20]
 8002c06:	4b2b      	ldr	r3, [pc, #172]	; (8002cb4 <RCCEx_PLLSAI2_Config+0x1e0>)
 8002c08:	4013      	ands	r3, r2
 8002c0a:	687a      	ldr	r2, [r7, #4]
 8002c0c:	6892      	ldr	r2, [r2, #8]
 8002c0e:	0211      	lsls	r1, r2, #8
 8002c10:	687a      	ldr	r2, [r7, #4]
 8002c12:	6912      	ldr	r2, [r2, #16]
 8002c14:	0852      	lsrs	r2, r2, #1
 8002c16:	3a01      	subs	r2, #1
 8002c18:	0552      	lsls	r2, r2, #21
 8002c1a:	4311      	orrs	r1, r2
 8002c1c:	687a      	ldr	r2, [r7, #4]
 8002c1e:	6852      	ldr	r2, [r2, #4]
 8002c20:	3a01      	subs	r2, #1
 8002c22:	0112      	lsls	r2, r2, #4
 8002c24:	430a      	orrs	r2, r1
 8002c26:	4921      	ldr	r1, [pc, #132]	; (8002cac <RCCEx_PLLSAI2_Config+0x1d8>)
 8002c28:	4313      	orrs	r3, r2
 8002c2a:	614b      	str	r3, [r1, #20]
 8002c2c:	e014      	b.n	8002c58 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002c2e:	4b1f      	ldr	r3, [pc, #124]	; (8002cac <RCCEx_PLLSAI2_Config+0x1d8>)
 8002c30:	695a      	ldr	r2, [r3, #20]
 8002c32:	4b21      	ldr	r3, [pc, #132]	; (8002cb8 <RCCEx_PLLSAI2_Config+0x1e4>)
 8002c34:	4013      	ands	r3, r2
 8002c36:	687a      	ldr	r2, [r7, #4]
 8002c38:	6892      	ldr	r2, [r2, #8]
 8002c3a:	0211      	lsls	r1, r2, #8
 8002c3c:	687a      	ldr	r2, [r7, #4]
 8002c3e:	6952      	ldr	r2, [r2, #20]
 8002c40:	0852      	lsrs	r2, r2, #1
 8002c42:	3a01      	subs	r2, #1
 8002c44:	0652      	lsls	r2, r2, #25
 8002c46:	4311      	orrs	r1, r2
 8002c48:	687a      	ldr	r2, [r7, #4]
 8002c4a:	6852      	ldr	r2, [r2, #4]
 8002c4c:	3a01      	subs	r2, #1
 8002c4e:	0112      	lsls	r2, r2, #4
 8002c50:	430a      	orrs	r2, r1
 8002c52:	4916      	ldr	r1, [pc, #88]	; (8002cac <RCCEx_PLLSAI2_Config+0x1d8>)
 8002c54:	4313      	orrs	r3, r2
 8002c56:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002c58:	4b14      	ldr	r3, [pc, #80]	; (8002cac <RCCEx_PLLSAI2_Config+0x1d8>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4a13      	ldr	r2, [pc, #76]	; (8002cac <RCCEx_PLLSAI2_Config+0x1d8>)
 8002c5e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c62:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c64:	f7fe f852 	bl	8000d0c <HAL_GetTick>
 8002c68:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002c6a:	e009      	b.n	8002c80 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002c6c:	f7fe f84e 	bl	8000d0c <HAL_GetTick>
 8002c70:	4602      	mov	r2, r0
 8002c72:	68bb      	ldr	r3, [r7, #8]
 8002c74:	1ad3      	subs	r3, r2, r3
 8002c76:	2b02      	cmp	r3, #2
 8002c78:	d902      	bls.n	8002c80 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8002c7a:	2303      	movs	r3, #3
 8002c7c:	73fb      	strb	r3, [r7, #15]
          break;
 8002c7e:	e005      	b.n	8002c8c <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002c80:	4b0a      	ldr	r3, [pc, #40]	; (8002cac <RCCEx_PLLSAI2_Config+0x1d8>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d0ef      	beq.n	8002c6c <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8002c8c:	7bfb      	ldrb	r3, [r7, #15]
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d106      	bne.n	8002ca0 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002c92:	4b06      	ldr	r3, [pc, #24]	; (8002cac <RCCEx_PLLSAI2_Config+0x1d8>)
 8002c94:	695a      	ldr	r2, [r3, #20]
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	699b      	ldr	r3, [r3, #24]
 8002c9a:	4904      	ldr	r1, [pc, #16]	; (8002cac <RCCEx_PLLSAI2_Config+0x1d8>)
 8002c9c:	4313      	orrs	r3, r2
 8002c9e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002ca0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	3710      	adds	r7, #16
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	bd80      	pop	{r7, pc}
 8002caa:	bf00      	nop
 8002cac:	40021000 	.word	0x40021000
 8002cb0:	07ff800f 	.word	0x07ff800f
 8002cb4:	ff9f800f 	.word	0xff9f800f
 8002cb8:	f9ff800f 	.word	0xf9ff800f

08002cbc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b082      	sub	sp, #8
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d101      	bne.n	8002cce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002cca:	2301      	movs	r3, #1
 8002ccc:	e049      	b.n	8002d62 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002cd4:	b2db      	uxtb	r3, r3
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d106      	bne.n	8002ce8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	2200      	movs	r2, #0
 8002cde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002ce2:	6878      	ldr	r0, [r7, #4]
 8002ce4:	f7fd feea 	bl	8000abc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2202      	movs	r2, #2
 8002cec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681a      	ldr	r2, [r3, #0]
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	3304      	adds	r3, #4
 8002cf8:	4619      	mov	r1, r3
 8002cfa:	4610      	mov	r0, r2
 8002cfc:	f000 f9d0 	bl	80030a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2201      	movs	r2, #1
 8002d04:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2201      	movs	r2, #1
 8002d0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2201      	movs	r2, #1
 8002d14:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2201      	movs	r2, #1
 8002d1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2201      	movs	r2, #1
 8002d24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2201      	movs	r2, #1
 8002d2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2201      	movs	r2, #1
 8002d34:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2201      	movs	r2, #1
 8002d3c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2201      	movs	r2, #1
 8002d44:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2201      	movs	r2, #1
 8002d4c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2201      	movs	r2, #1
 8002d54:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2201      	movs	r2, #1
 8002d5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002d60:	2300      	movs	r3, #0
}
 8002d62:	4618      	mov	r0, r3
 8002d64:	3708      	adds	r7, #8
 8002d66:	46bd      	mov	sp, r7
 8002d68:	bd80      	pop	{r7, pc}
	...

08002d6c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002d6c:	b480      	push	{r7}
 8002d6e:	b085      	sub	sp, #20
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d7a:	b2db      	uxtb	r3, r3
 8002d7c:	2b01      	cmp	r3, #1
 8002d7e:	d001      	beq.n	8002d84 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002d80:	2301      	movs	r3, #1
 8002d82:	e04f      	b.n	8002e24 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2202      	movs	r2, #2
 8002d88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	68da      	ldr	r2, [r3, #12]
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f042 0201 	orr.w	r2, r2, #1
 8002d9a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	4a23      	ldr	r2, [pc, #140]	; (8002e30 <HAL_TIM_Base_Start_IT+0xc4>)
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d01d      	beq.n	8002de2 <HAL_TIM_Base_Start_IT+0x76>
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002dae:	d018      	beq.n	8002de2 <HAL_TIM_Base_Start_IT+0x76>
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	4a1f      	ldr	r2, [pc, #124]	; (8002e34 <HAL_TIM_Base_Start_IT+0xc8>)
 8002db6:	4293      	cmp	r3, r2
 8002db8:	d013      	beq.n	8002de2 <HAL_TIM_Base_Start_IT+0x76>
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	4a1e      	ldr	r2, [pc, #120]	; (8002e38 <HAL_TIM_Base_Start_IT+0xcc>)
 8002dc0:	4293      	cmp	r3, r2
 8002dc2:	d00e      	beq.n	8002de2 <HAL_TIM_Base_Start_IT+0x76>
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	4a1c      	ldr	r2, [pc, #112]	; (8002e3c <HAL_TIM_Base_Start_IT+0xd0>)
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	d009      	beq.n	8002de2 <HAL_TIM_Base_Start_IT+0x76>
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	4a1b      	ldr	r2, [pc, #108]	; (8002e40 <HAL_TIM_Base_Start_IT+0xd4>)
 8002dd4:	4293      	cmp	r3, r2
 8002dd6:	d004      	beq.n	8002de2 <HAL_TIM_Base_Start_IT+0x76>
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	4a19      	ldr	r2, [pc, #100]	; (8002e44 <HAL_TIM_Base_Start_IT+0xd8>)
 8002dde:	4293      	cmp	r3, r2
 8002de0:	d115      	bne.n	8002e0e <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	689a      	ldr	r2, [r3, #8]
 8002de8:	4b17      	ldr	r3, [pc, #92]	; (8002e48 <HAL_TIM_Base_Start_IT+0xdc>)
 8002dea:	4013      	ands	r3, r2
 8002dec:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	2b06      	cmp	r3, #6
 8002df2:	d015      	beq.n	8002e20 <HAL_TIM_Base_Start_IT+0xb4>
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002dfa:	d011      	beq.n	8002e20 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	681a      	ldr	r2, [r3, #0]
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f042 0201 	orr.w	r2, r2, #1
 8002e0a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e0c:	e008      	b.n	8002e20 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	681a      	ldr	r2, [r3, #0]
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f042 0201 	orr.w	r2, r2, #1
 8002e1c:	601a      	str	r2, [r3, #0]
 8002e1e:	e000      	b.n	8002e22 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e20:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002e22:	2300      	movs	r3, #0
}
 8002e24:	4618      	mov	r0, r3
 8002e26:	3714      	adds	r7, #20
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2e:	4770      	bx	lr
 8002e30:	40012c00 	.word	0x40012c00
 8002e34:	40000400 	.word	0x40000400
 8002e38:	40000800 	.word	0x40000800
 8002e3c:	40000c00 	.word	0x40000c00
 8002e40:	40013400 	.word	0x40013400
 8002e44:	40014000 	.word	0x40014000
 8002e48:	00010007 	.word	0x00010007

08002e4c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b084      	sub	sp, #16
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	68db      	ldr	r3, [r3, #12]
 8002e5a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	691b      	ldr	r3, [r3, #16]
 8002e62:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002e64:	68bb      	ldr	r3, [r7, #8]
 8002e66:	f003 0302 	and.w	r3, r3, #2
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d020      	beq.n	8002eb0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	f003 0302 	and.w	r3, r3, #2
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d01b      	beq.n	8002eb0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f06f 0202 	mvn.w	r2, #2
 8002e80:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	2201      	movs	r2, #1
 8002e86:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	699b      	ldr	r3, [r3, #24]
 8002e8e:	f003 0303 	and.w	r3, r3, #3
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d003      	beq.n	8002e9e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002e96:	6878      	ldr	r0, [r7, #4]
 8002e98:	f000 f8e4 	bl	8003064 <HAL_TIM_IC_CaptureCallback>
 8002e9c:	e005      	b.n	8002eaa <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e9e:	6878      	ldr	r0, [r7, #4]
 8002ea0:	f000 f8d6 	bl	8003050 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ea4:	6878      	ldr	r0, [r7, #4]
 8002ea6:	f000 f8e7 	bl	8003078 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	2200      	movs	r2, #0
 8002eae:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002eb0:	68bb      	ldr	r3, [r7, #8]
 8002eb2:	f003 0304 	and.w	r3, r3, #4
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d020      	beq.n	8002efc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	f003 0304 	and.w	r3, r3, #4
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d01b      	beq.n	8002efc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f06f 0204 	mvn.w	r2, #4
 8002ecc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	2202      	movs	r2, #2
 8002ed2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	699b      	ldr	r3, [r3, #24]
 8002eda:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d003      	beq.n	8002eea <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ee2:	6878      	ldr	r0, [r7, #4]
 8002ee4:	f000 f8be 	bl	8003064 <HAL_TIM_IC_CaptureCallback>
 8002ee8:	e005      	b.n	8002ef6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002eea:	6878      	ldr	r0, [r7, #4]
 8002eec:	f000 f8b0 	bl	8003050 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ef0:	6878      	ldr	r0, [r7, #4]
 8002ef2:	f000 f8c1 	bl	8003078 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	2200      	movs	r2, #0
 8002efa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002efc:	68bb      	ldr	r3, [r7, #8]
 8002efe:	f003 0308 	and.w	r3, r3, #8
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d020      	beq.n	8002f48 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	f003 0308 	and.w	r3, r3, #8
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d01b      	beq.n	8002f48 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f06f 0208 	mvn.w	r2, #8
 8002f18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	2204      	movs	r2, #4
 8002f1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	69db      	ldr	r3, [r3, #28]
 8002f26:	f003 0303 	and.w	r3, r3, #3
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d003      	beq.n	8002f36 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f2e:	6878      	ldr	r0, [r7, #4]
 8002f30:	f000 f898 	bl	8003064 <HAL_TIM_IC_CaptureCallback>
 8002f34:	e005      	b.n	8002f42 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f36:	6878      	ldr	r0, [r7, #4]
 8002f38:	f000 f88a 	bl	8003050 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f3c:	6878      	ldr	r0, [r7, #4]
 8002f3e:	f000 f89b 	bl	8003078 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	2200      	movs	r2, #0
 8002f46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002f48:	68bb      	ldr	r3, [r7, #8]
 8002f4a:	f003 0310 	and.w	r3, r3, #16
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d020      	beq.n	8002f94 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	f003 0310 	and.w	r3, r3, #16
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d01b      	beq.n	8002f94 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f06f 0210 	mvn.w	r2, #16
 8002f64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	2208      	movs	r2, #8
 8002f6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	69db      	ldr	r3, [r3, #28]
 8002f72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d003      	beq.n	8002f82 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f7a:	6878      	ldr	r0, [r7, #4]
 8002f7c:	f000 f872 	bl	8003064 <HAL_TIM_IC_CaptureCallback>
 8002f80:	e005      	b.n	8002f8e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f82:	6878      	ldr	r0, [r7, #4]
 8002f84:	f000 f864 	bl	8003050 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f88:	6878      	ldr	r0, [r7, #4]
 8002f8a:	f000 f875 	bl	8003078 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	2200      	movs	r2, #0
 8002f92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002f94:	68bb      	ldr	r3, [r7, #8]
 8002f96:	f003 0301 	and.w	r3, r3, #1
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d00c      	beq.n	8002fb8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	f003 0301 	and.w	r3, r3, #1
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d007      	beq.n	8002fb8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f06f 0201 	mvn.w	r2, #1
 8002fb0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002fb2:	6878      	ldr	r0, [r7, #4]
 8002fb4:	f7fd fce6 	bl	8000984 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002fb8:	68bb      	ldr	r3, [r7, #8]
 8002fba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d00c      	beq.n	8002fdc <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d007      	beq.n	8002fdc <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002fd4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002fd6:	6878      	ldr	r0, [r7, #4]
 8002fd8:	f000 f906 	bl	80031e8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8002fdc:	68bb      	ldr	r3, [r7, #8]
 8002fde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d00c      	beq.n	8003000 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d007      	beq.n	8003000 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002ff8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002ffa:	6878      	ldr	r0, [r7, #4]
 8002ffc:	f000 f8fe 	bl	80031fc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003000:	68bb      	ldr	r3, [r7, #8]
 8003002:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003006:	2b00      	cmp	r3, #0
 8003008:	d00c      	beq.n	8003024 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003010:	2b00      	cmp	r3, #0
 8003012:	d007      	beq.n	8003024 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800301c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800301e:	6878      	ldr	r0, [r7, #4]
 8003020:	f000 f834 	bl	800308c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003024:	68bb      	ldr	r3, [r7, #8]
 8003026:	f003 0320 	and.w	r3, r3, #32
 800302a:	2b00      	cmp	r3, #0
 800302c:	d00c      	beq.n	8003048 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	f003 0320 	and.w	r3, r3, #32
 8003034:	2b00      	cmp	r3, #0
 8003036:	d007      	beq.n	8003048 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f06f 0220 	mvn.w	r2, #32
 8003040:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003042:	6878      	ldr	r0, [r7, #4]
 8003044:	f000 f8c6 	bl	80031d4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003048:	bf00      	nop
 800304a:	3710      	adds	r7, #16
 800304c:	46bd      	mov	sp, r7
 800304e:	bd80      	pop	{r7, pc}

08003050 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003050:	b480      	push	{r7}
 8003052:	b083      	sub	sp, #12
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003058:	bf00      	nop
 800305a:	370c      	adds	r7, #12
 800305c:	46bd      	mov	sp, r7
 800305e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003062:	4770      	bx	lr

08003064 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003064:	b480      	push	{r7}
 8003066:	b083      	sub	sp, #12
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800306c:	bf00      	nop
 800306e:	370c      	adds	r7, #12
 8003070:	46bd      	mov	sp, r7
 8003072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003076:	4770      	bx	lr

08003078 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003078:	b480      	push	{r7}
 800307a:	b083      	sub	sp, #12
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003080:	bf00      	nop
 8003082:	370c      	adds	r7, #12
 8003084:	46bd      	mov	sp, r7
 8003086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308a:	4770      	bx	lr

0800308c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800308c:	b480      	push	{r7}
 800308e:	b083      	sub	sp, #12
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003094:	bf00      	nop
 8003096:	370c      	adds	r7, #12
 8003098:	46bd      	mov	sp, r7
 800309a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309e:	4770      	bx	lr

080030a0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80030a0:	b480      	push	{r7}
 80030a2:	b085      	sub	sp, #20
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
 80030a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	4a40      	ldr	r2, [pc, #256]	; (80031b4 <TIM_Base_SetConfig+0x114>)
 80030b4:	4293      	cmp	r3, r2
 80030b6:	d013      	beq.n	80030e0 <TIM_Base_SetConfig+0x40>
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030be:	d00f      	beq.n	80030e0 <TIM_Base_SetConfig+0x40>
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	4a3d      	ldr	r2, [pc, #244]	; (80031b8 <TIM_Base_SetConfig+0x118>)
 80030c4:	4293      	cmp	r3, r2
 80030c6:	d00b      	beq.n	80030e0 <TIM_Base_SetConfig+0x40>
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	4a3c      	ldr	r2, [pc, #240]	; (80031bc <TIM_Base_SetConfig+0x11c>)
 80030cc:	4293      	cmp	r3, r2
 80030ce:	d007      	beq.n	80030e0 <TIM_Base_SetConfig+0x40>
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	4a3b      	ldr	r2, [pc, #236]	; (80031c0 <TIM_Base_SetConfig+0x120>)
 80030d4:	4293      	cmp	r3, r2
 80030d6:	d003      	beq.n	80030e0 <TIM_Base_SetConfig+0x40>
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	4a3a      	ldr	r2, [pc, #232]	; (80031c4 <TIM_Base_SetConfig+0x124>)
 80030dc:	4293      	cmp	r3, r2
 80030de:	d108      	bne.n	80030f2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030e6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	685b      	ldr	r3, [r3, #4]
 80030ec:	68fa      	ldr	r2, [r7, #12]
 80030ee:	4313      	orrs	r3, r2
 80030f0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	4a2f      	ldr	r2, [pc, #188]	; (80031b4 <TIM_Base_SetConfig+0x114>)
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d01f      	beq.n	800313a <TIM_Base_SetConfig+0x9a>
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003100:	d01b      	beq.n	800313a <TIM_Base_SetConfig+0x9a>
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	4a2c      	ldr	r2, [pc, #176]	; (80031b8 <TIM_Base_SetConfig+0x118>)
 8003106:	4293      	cmp	r3, r2
 8003108:	d017      	beq.n	800313a <TIM_Base_SetConfig+0x9a>
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	4a2b      	ldr	r2, [pc, #172]	; (80031bc <TIM_Base_SetConfig+0x11c>)
 800310e:	4293      	cmp	r3, r2
 8003110:	d013      	beq.n	800313a <TIM_Base_SetConfig+0x9a>
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	4a2a      	ldr	r2, [pc, #168]	; (80031c0 <TIM_Base_SetConfig+0x120>)
 8003116:	4293      	cmp	r3, r2
 8003118:	d00f      	beq.n	800313a <TIM_Base_SetConfig+0x9a>
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	4a29      	ldr	r2, [pc, #164]	; (80031c4 <TIM_Base_SetConfig+0x124>)
 800311e:	4293      	cmp	r3, r2
 8003120:	d00b      	beq.n	800313a <TIM_Base_SetConfig+0x9a>
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	4a28      	ldr	r2, [pc, #160]	; (80031c8 <TIM_Base_SetConfig+0x128>)
 8003126:	4293      	cmp	r3, r2
 8003128:	d007      	beq.n	800313a <TIM_Base_SetConfig+0x9a>
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	4a27      	ldr	r2, [pc, #156]	; (80031cc <TIM_Base_SetConfig+0x12c>)
 800312e:	4293      	cmp	r3, r2
 8003130:	d003      	beq.n	800313a <TIM_Base_SetConfig+0x9a>
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	4a26      	ldr	r2, [pc, #152]	; (80031d0 <TIM_Base_SetConfig+0x130>)
 8003136:	4293      	cmp	r3, r2
 8003138:	d108      	bne.n	800314c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003140:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	68db      	ldr	r3, [r3, #12]
 8003146:	68fa      	ldr	r2, [r7, #12]
 8003148:	4313      	orrs	r3, r2
 800314a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	695b      	ldr	r3, [r3, #20]
 8003156:	4313      	orrs	r3, r2
 8003158:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	68fa      	ldr	r2, [r7, #12]
 800315e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	689a      	ldr	r2, [r3, #8]
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	681a      	ldr	r2, [r3, #0]
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	4a10      	ldr	r2, [pc, #64]	; (80031b4 <TIM_Base_SetConfig+0x114>)
 8003174:	4293      	cmp	r3, r2
 8003176:	d00f      	beq.n	8003198 <TIM_Base_SetConfig+0xf8>
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	4a12      	ldr	r2, [pc, #72]	; (80031c4 <TIM_Base_SetConfig+0x124>)
 800317c:	4293      	cmp	r3, r2
 800317e:	d00b      	beq.n	8003198 <TIM_Base_SetConfig+0xf8>
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	4a11      	ldr	r2, [pc, #68]	; (80031c8 <TIM_Base_SetConfig+0x128>)
 8003184:	4293      	cmp	r3, r2
 8003186:	d007      	beq.n	8003198 <TIM_Base_SetConfig+0xf8>
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	4a10      	ldr	r2, [pc, #64]	; (80031cc <TIM_Base_SetConfig+0x12c>)
 800318c:	4293      	cmp	r3, r2
 800318e:	d003      	beq.n	8003198 <TIM_Base_SetConfig+0xf8>
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	4a0f      	ldr	r2, [pc, #60]	; (80031d0 <TIM_Base_SetConfig+0x130>)
 8003194:	4293      	cmp	r3, r2
 8003196:	d103      	bne.n	80031a0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	691a      	ldr	r2, [r3, #16]
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2201      	movs	r2, #1
 80031a4:	615a      	str	r2, [r3, #20]
}
 80031a6:	bf00      	nop
 80031a8:	3714      	adds	r7, #20
 80031aa:	46bd      	mov	sp, r7
 80031ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b0:	4770      	bx	lr
 80031b2:	bf00      	nop
 80031b4:	40012c00 	.word	0x40012c00
 80031b8:	40000400 	.word	0x40000400
 80031bc:	40000800 	.word	0x40000800
 80031c0:	40000c00 	.word	0x40000c00
 80031c4:	40013400 	.word	0x40013400
 80031c8:	40014000 	.word	0x40014000
 80031cc:	40014400 	.word	0x40014400
 80031d0:	40014800 	.word	0x40014800

080031d4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80031d4:	b480      	push	{r7}
 80031d6:	b083      	sub	sp, #12
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80031dc:	bf00      	nop
 80031de:	370c      	adds	r7, #12
 80031e0:	46bd      	mov	sp, r7
 80031e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e6:	4770      	bx	lr

080031e8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80031e8:	b480      	push	{r7}
 80031ea:	b083      	sub	sp, #12
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80031f0:	bf00      	nop
 80031f2:	370c      	adds	r7, #12
 80031f4:	46bd      	mov	sp, r7
 80031f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fa:	4770      	bx	lr

080031fc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80031fc:	b480      	push	{r7}
 80031fe:	b083      	sub	sp, #12
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003204:	bf00      	nop
 8003206:	370c      	adds	r7, #12
 8003208:	46bd      	mov	sp, r7
 800320a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320e:	4770      	bx	lr

08003210 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	b082      	sub	sp, #8
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2b00      	cmp	r3, #0
 800321c:	d101      	bne.n	8003222 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800321e:	2301      	movs	r3, #1
 8003220:	e042      	b.n	80032a8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003228:	2b00      	cmp	r3, #0
 800322a:	d106      	bne.n	800323a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2200      	movs	r2, #0
 8003230:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003234:	6878      	ldr	r0, [r7, #4]
 8003236:	f7fd fbe1 	bl	80009fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	2224      	movs	r2, #36	; 0x24
 800323e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	681a      	ldr	r2, [r3, #0]
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f022 0201 	bic.w	r2, r2, #1
 8003250:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003256:	2b00      	cmp	r3, #0
 8003258:	d002      	beq.n	8003260 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800325a:	6878      	ldr	r0, [r7, #4]
 800325c:	f000 fbb4 	bl	80039c8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003260:	6878      	ldr	r0, [r7, #4]
 8003262:	f000 f8b5 	bl	80033d0 <UART_SetConfig>
 8003266:	4603      	mov	r3, r0
 8003268:	2b01      	cmp	r3, #1
 800326a:	d101      	bne.n	8003270 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800326c:	2301      	movs	r3, #1
 800326e:	e01b      	b.n	80032a8 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	685a      	ldr	r2, [r3, #4]
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800327e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	689a      	ldr	r2, [r3, #8]
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800328e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	681a      	ldr	r2, [r3, #0]
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f042 0201 	orr.w	r2, r2, #1
 800329e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80032a0:	6878      	ldr	r0, [r7, #4]
 80032a2:	f000 fc33 	bl	8003b0c <UART_CheckIdleState>
 80032a6:	4603      	mov	r3, r0
}
 80032a8:	4618      	mov	r0, r3
 80032aa:	3708      	adds	r7, #8
 80032ac:	46bd      	mov	sp, r7
 80032ae:	bd80      	pop	{r7, pc}

080032b0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b08a      	sub	sp, #40	; 0x28
 80032b4:	af02      	add	r7, sp, #8
 80032b6:	60f8      	str	r0, [r7, #12]
 80032b8:	60b9      	str	r1, [r7, #8]
 80032ba:	603b      	str	r3, [r7, #0]
 80032bc:	4613      	mov	r3, r2
 80032be:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032c6:	2b20      	cmp	r3, #32
 80032c8:	d17c      	bne.n	80033c4 <HAL_UART_Transmit+0x114>
  {
    if ((pData == NULL) || (Size == 0U))
 80032ca:	68bb      	ldr	r3, [r7, #8]
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d002      	beq.n	80032d6 <HAL_UART_Transmit+0x26>
 80032d0:	88fb      	ldrh	r3, [r7, #6]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d101      	bne.n	80032da <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80032d6:	2301      	movs	r3, #1
 80032d8:	e075      	b.n	80033c6 <HAL_UART_Transmit+0x116>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	2200      	movs	r2, #0
 80032de:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	2221      	movs	r2, #33	; 0x21
 80032e6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80032ea:	f7fd fd0f 	bl	8000d0c <HAL_GetTick>
 80032ee:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	88fa      	ldrh	r2, [r7, #6]
 80032f4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	88fa      	ldrh	r2, [r7, #6]
 80032fc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	689b      	ldr	r3, [r3, #8]
 8003304:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003308:	d108      	bne.n	800331c <HAL_UART_Transmit+0x6c>
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	691b      	ldr	r3, [r3, #16]
 800330e:	2b00      	cmp	r3, #0
 8003310:	d104      	bne.n	800331c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003312:	2300      	movs	r3, #0
 8003314:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003316:	68bb      	ldr	r3, [r7, #8]
 8003318:	61bb      	str	r3, [r7, #24]
 800331a:	e003      	b.n	8003324 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800331c:	68bb      	ldr	r3, [r7, #8]
 800331e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003320:	2300      	movs	r3, #0
 8003322:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003324:	e031      	b.n	800338a <HAL_UART_Transmit+0xda>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	9300      	str	r3, [sp, #0]
 800332a:	697b      	ldr	r3, [r7, #20]
 800332c:	2200      	movs	r2, #0
 800332e:	2180      	movs	r1, #128	; 0x80
 8003330:	68f8      	ldr	r0, [r7, #12]
 8003332:	f000 fc95 	bl	8003c60 <UART_WaitOnFlagUntilTimeout>
 8003336:	4603      	mov	r3, r0
 8003338:	2b00      	cmp	r3, #0
 800333a:	d005      	beq.n	8003348 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	2220      	movs	r2, #32
 8003340:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8003344:	2303      	movs	r3, #3
 8003346:	e03e      	b.n	80033c6 <HAL_UART_Transmit+0x116>
      }
      if (pdata8bits == NULL)
 8003348:	69fb      	ldr	r3, [r7, #28]
 800334a:	2b00      	cmp	r3, #0
 800334c:	d10b      	bne.n	8003366 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800334e:	69bb      	ldr	r3, [r7, #24]
 8003350:	881a      	ldrh	r2, [r3, #0]
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800335a:	b292      	uxth	r2, r2
 800335c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800335e:	69bb      	ldr	r3, [r7, #24]
 8003360:	3302      	adds	r3, #2
 8003362:	61bb      	str	r3, [r7, #24]
 8003364:	e008      	b.n	8003378 <HAL_UART_Transmit+0xc8>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003366:	69fb      	ldr	r3, [r7, #28]
 8003368:	781a      	ldrb	r2, [r3, #0]
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	b292      	uxth	r2, r2
 8003370:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003372:	69fb      	ldr	r3, [r7, #28]
 8003374:	3301      	adds	r3, #1
 8003376:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800337e:	b29b      	uxth	r3, r3
 8003380:	3b01      	subs	r3, #1
 8003382:	b29a      	uxth	r2, r3
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003390:	b29b      	uxth	r3, r3
 8003392:	2b00      	cmp	r3, #0
 8003394:	d1c7      	bne.n	8003326 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	9300      	str	r3, [sp, #0]
 800339a:	697b      	ldr	r3, [r7, #20]
 800339c:	2200      	movs	r2, #0
 800339e:	2140      	movs	r1, #64	; 0x40
 80033a0:	68f8      	ldr	r0, [r7, #12]
 80033a2:	f000 fc5d 	bl	8003c60 <UART_WaitOnFlagUntilTimeout>
 80033a6:	4603      	mov	r3, r0
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d005      	beq.n	80033b8 <HAL_UART_Transmit+0x108>
    {
      huart->gState = HAL_UART_STATE_READY;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	2220      	movs	r2, #32
 80033b0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 80033b4:	2303      	movs	r3, #3
 80033b6:	e006      	b.n	80033c6 <HAL_UART_Transmit+0x116>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	2220      	movs	r2, #32
 80033bc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 80033c0:	2300      	movs	r3, #0
 80033c2:	e000      	b.n	80033c6 <HAL_UART_Transmit+0x116>
  }
  else
  {
    return HAL_BUSY;
 80033c4:	2302      	movs	r3, #2
  }
}
 80033c6:	4618      	mov	r0, r3
 80033c8:	3720      	adds	r7, #32
 80033ca:	46bd      	mov	sp, r7
 80033cc:	bd80      	pop	{r7, pc}
	...

080033d0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80033d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80033d4:	b08c      	sub	sp, #48	; 0x30
 80033d6:	af00      	add	r7, sp, #0
 80033d8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80033da:	2300      	movs	r3, #0
 80033dc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80033e0:	697b      	ldr	r3, [r7, #20]
 80033e2:	689a      	ldr	r2, [r3, #8]
 80033e4:	697b      	ldr	r3, [r7, #20]
 80033e6:	691b      	ldr	r3, [r3, #16]
 80033e8:	431a      	orrs	r2, r3
 80033ea:	697b      	ldr	r3, [r7, #20]
 80033ec:	695b      	ldr	r3, [r3, #20]
 80033ee:	431a      	orrs	r2, r3
 80033f0:	697b      	ldr	r3, [r7, #20]
 80033f2:	69db      	ldr	r3, [r3, #28]
 80033f4:	4313      	orrs	r3, r2
 80033f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80033f8:	697b      	ldr	r3, [r7, #20]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	681a      	ldr	r2, [r3, #0]
 80033fe:	4baa      	ldr	r3, [pc, #680]	; (80036a8 <UART_SetConfig+0x2d8>)
 8003400:	4013      	ands	r3, r2
 8003402:	697a      	ldr	r2, [r7, #20]
 8003404:	6812      	ldr	r2, [r2, #0]
 8003406:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003408:	430b      	orrs	r3, r1
 800340a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800340c:	697b      	ldr	r3, [r7, #20]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	685b      	ldr	r3, [r3, #4]
 8003412:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003416:	697b      	ldr	r3, [r7, #20]
 8003418:	68da      	ldr	r2, [r3, #12]
 800341a:	697b      	ldr	r3, [r7, #20]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	430a      	orrs	r2, r1
 8003420:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003422:	697b      	ldr	r3, [r7, #20]
 8003424:	699b      	ldr	r3, [r3, #24]
 8003426:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003428:	697b      	ldr	r3, [r7, #20]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	4a9f      	ldr	r2, [pc, #636]	; (80036ac <UART_SetConfig+0x2dc>)
 800342e:	4293      	cmp	r3, r2
 8003430:	d004      	beq.n	800343c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003432:	697b      	ldr	r3, [r7, #20]
 8003434:	6a1b      	ldr	r3, [r3, #32]
 8003436:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003438:	4313      	orrs	r3, r2
 800343a:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800343c:	697b      	ldr	r3, [r7, #20]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	689b      	ldr	r3, [r3, #8]
 8003442:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8003446:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800344a:	697a      	ldr	r2, [r7, #20]
 800344c:	6812      	ldr	r2, [r2, #0]
 800344e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003450:	430b      	orrs	r3, r1
 8003452:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003454:	697b      	ldr	r3, [r7, #20]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800345a:	f023 010f 	bic.w	r1, r3, #15
 800345e:	697b      	ldr	r3, [r7, #20]
 8003460:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003462:	697b      	ldr	r3, [r7, #20]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	430a      	orrs	r2, r1
 8003468:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800346a:	697b      	ldr	r3, [r7, #20]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	4a90      	ldr	r2, [pc, #576]	; (80036b0 <UART_SetConfig+0x2e0>)
 8003470:	4293      	cmp	r3, r2
 8003472:	d125      	bne.n	80034c0 <UART_SetConfig+0xf0>
 8003474:	4b8f      	ldr	r3, [pc, #572]	; (80036b4 <UART_SetConfig+0x2e4>)
 8003476:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800347a:	f003 0303 	and.w	r3, r3, #3
 800347e:	2b03      	cmp	r3, #3
 8003480:	d81a      	bhi.n	80034b8 <UART_SetConfig+0xe8>
 8003482:	a201      	add	r2, pc, #4	; (adr r2, 8003488 <UART_SetConfig+0xb8>)
 8003484:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003488:	08003499 	.word	0x08003499
 800348c:	080034a9 	.word	0x080034a9
 8003490:	080034a1 	.word	0x080034a1
 8003494:	080034b1 	.word	0x080034b1
 8003498:	2301      	movs	r3, #1
 800349a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800349e:	e116      	b.n	80036ce <UART_SetConfig+0x2fe>
 80034a0:	2302      	movs	r3, #2
 80034a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80034a6:	e112      	b.n	80036ce <UART_SetConfig+0x2fe>
 80034a8:	2304      	movs	r3, #4
 80034aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80034ae:	e10e      	b.n	80036ce <UART_SetConfig+0x2fe>
 80034b0:	2308      	movs	r3, #8
 80034b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80034b6:	e10a      	b.n	80036ce <UART_SetConfig+0x2fe>
 80034b8:	2310      	movs	r3, #16
 80034ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80034be:	e106      	b.n	80036ce <UART_SetConfig+0x2fe>
 80034c0:	697b      	ldr	r3, [r7, #20]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	4a7c      	ldr	r2, [pc, #496]	; (80036b8 <UART_SetConfig+0x2e8>)
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d138      	bne.n	800353c <UART_SetConfig+0x16c>
 80034ca:	4b7a      	ldr	r3, [pc, #488]	; (80036b4 <UART_SetConfig+0x2e4>)
 80034cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034d0:	f003 030c 	and.w	r3, r3, #12
 80034d4:	2b0c      	cmp	r3, #12
 80034d6:	d82d      	bhi.n	8003534 <UART_SetConfig+0x164>
 80034d8:	a201      	add	r2, pc, #4	; (adr r2, 80034e0 <UART_SetConfig+0x110>)
 80034da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034de:	bf00      	nop
 80034e0:	08003515 	.word	0x08003515
 80034e4:	08003535 	.word	0x08003535
 80034e8:	08003535 	.word	0x08003535
 80034ec:	08003535 	.word	0x08003535
 80034f0:	08003525 	.word	0x08003525
 80034f4:	08003535 	.word	0x08003535
 80034f8:	08003535 	.word	0x08003535
 80034fc:	08003535 	.word	0x08003535
 8003500:	0800351d 	.word	0x0800351d
 8003504:	08003535 	.word	0x08003535
 8003508:	08003535 	.word	0x08003535
 800350c:	08003535 	.word	0x08003535
 8003510:	0800352d 	.word	0x0800352d
 8003514:	2300      	movs	r3, #0
 8003516:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800351a:	e0d8      	b.n	80036ce <UART_SetConfig+0x2fe>
 800351c:	2302      	movs	r3, #2
 800351e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003522:	e0d4      	b.n	80036ce <UART_SetConfig+0x2fe>
 8003524:	2304      	movs	r3, #4
 8003526:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800352a:	e0d0      	b.n	80036ce <UART_SetConfig+0x2fe>
 800352c:	2308      	movs	r3, #8
 800352e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003532:	e0cc      	b.n	80036ce <UART_SetConfig+0x2fe>
 8003534:	2310      	movs	r3, #16
 8003536:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800353a:	e0c8      	b.n	80036ce <UART_SetConfig+0x2fe>
 800353c:	697b      	ldr	r3, [r7, #20]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	4a5e      	ldr	r2, [pc, #376]	; (80036bc <UART_SetConfig+0x2ec>)
 8003542:	4293      	cmp	r3, r2
 8003544:	d125      	bne.n	8003592 <UART_SetConfig+0x1c2>
 8003546:	4b5b      	ldr	r3, [pc, #364]	; (80036b4 <UART_SetConfig+0x2e4>)
 8003548:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800354c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003550:	2b30      	cmp	r3, #48	; 0x30
 8003552:	d016      	beq.n	8003582 <UART_SetConfig+0x1b2>
 8003554:	2b30      	cmp	r3, #48	; 0x30
 8003556:	d818      	bhi.n	800358a <UART_SetConfig+0x1ba>
 8003558:	2b20      	cmp	r3, #32
 800355a:	d00a      	beq.n	8003572 <UART_SetConfig+0x1a2>
 800355c:	2b20      	cmp	r3, #32
 800355e:	d814      	bhi.n	800358a <UART_SetConfig+0x1ba>
 8003560:	2b00      	cmp	r3, #0
 8003562:	d002      	beq.n	800356a <UART_SetConfig+0x19a>
 8003564:	2b10      	cmp	r3, #16
 8003566:	d008      	beq.n	800357a <UART_SetConfig+0x1aa>
 8003568:	e00f      	b.n	800358a <UART_SetConfig+0x1ba>
 800356a:	2300      	movs	r3, #0
 800356c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003570:	e0ad      	b.n	80036ce <UART_SetConfig+0x2fe>
 8003572:	2302      	movs	r3, #2
 8003574:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003578:	e0a9      	b.n	80036ce <UART_SetConfig+0x2fe>
 800357a:	2304      	movs	r3, #4
 800357c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003580:	e0a5      	b.n	80036ce <UART_SetConfig+0x2fe>
 8003582:	2308      	movs	r3, #8
 8003584:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003588:	e0a1      	b.n	80036ce <UART_SetConfig+0x2fe>
 800358a:	2310      	movs	r3, #16
 800358c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003590:	e09d      	b.n	80036ce <UART_SetConfig+0x2fe>
 8003592:	697b      	ldr	r3, [r7, #20]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	4a4a      	ldr	r2, [pc, #296]	; (80036c0 <UART_SetConfig+0x2f0>)
 8003598:	4293      	cmp	r3, r2
 800359a:	d125      	bne.n	80035e8 <UART_SetConfig+0x218>
 800359c:	4b45      	ldr	r3, [pc, #276]	; (80036b4 <UART_SetConfig+0x2e4>)
 800359e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035a2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80035a6:	2bc0      	cmp	r3, #192	; 0xc0
 80035a8:	d016      	beq.n	80035d8 <UART_SetConfig+0x208>
 80035aa:	2bc0      	cmp	r3, #192	; 0xc0
 80035ac:	d818      	bhi.n	80035e0 <UART_SetConfig+0x210>
 80035ae:	2b80      	cmp	r3, #128	; 0x80
 80035b0:	d00a      	beq.n	80035c8 <UART_SetConfig+0x1f8>
 80035b2:	2b80      	cmp	r3, #128	; 0x80
 80035b4:	d814      	bhi.n	80035e0 <UART_SetConfig+0x210>
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d002      	beq.n	80035c0 <UART_SetConfig+0x1f0>
 80035ba:	2b40      	cmp	r3, #64	; 0x40
 80035bc:	d008      	beq.n	80035d0 <UART_SetConfig+0x200>
 80035be:	e00f      	b.n	80035e0 <UART_SetConfig+0x210>
 80035c0:	2300      	movs	r3, #0
 80035c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80035c6:	e082      	b.n	80036ce <UART_SetConfig+0x2fe>
 80035c8:	2302      	movs	r3, #2
 80035ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80035ce:	e07e      	b.n	80036ce <UART_SetConfig+0x2fe>
 80035d0:	2304      	movs	r3, #4
 80035d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80035d6:	e07a      	b.n	80036ce <UART_SetConfig+0x2fe>
 80035d8:	2308      	movs	r3, #8
 80035da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80035de:	e076      	b.n	80036ce <UART_SetConfig+0x2fe>
 80035e0:	2310      	movs	r3, #16
 80035e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80035e6:	e072      	b.n	80036ce <UART_SetConfig+0x2fe>
 80035e8:	697b      	ldr	r3, [r7, #20]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	4a35      	ldr	r2, [pc, #212]	; (80036c4 <UART_SetConfig+0x2f4>)
 80035ee:	4293      	cmp	r3, r2
 80035f0:	d12a      	bne.n	8003648 <UART_SetConfig+0x278>
 80035f2:	4b30      	ldr	r3, [pc, #192]	; (80036b4 <UART_SetConfig+0x2e4>)
 80035f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035f8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80035fc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003600:	d01a      	beq.n	8003638 <UART_SetConfig+0x268>
 8003602:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003606:	d81b      	bhi.n	8003640 <UART_SetConfig+0x270>
 8003608:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800360c:	d00c      	beq.n	8003628 <UART_SetConfig+0x258>
 800360e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003612:	d815      	bhi.n	8003640 <UART_SetConfig+0x270>
 8003614:	2b00      	cmp	r3, #0
 8003616:	d003      	beq.n	8003620 <UART_SetConfig+0x250>
 8003618:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800361c:	d008      	beq.n	8003630 <UART_SetConfig+0x260>
 800361e:	e00f      	b.n	8003640 <UART_SetConfig+0x270>
 8003620:	2300      	movs	r3, #0
 8003622:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003626:	e052      	b.n	80036ce <UART_SetConfig+0x2fe>
 8003628:	2302      	movs	r3, #2
 800362a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800362e:	e04e      	b.n	80036ce <UART_SetConfig+0x2fe>
 8003630:	2304      	movs	r3, #4
 8003632:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003636:	e04a      	b.n	80036ce <UART_SetConfig+0x2fe>
 8003638:	2308      	movs	r3, #8
 800363a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800363e:	e046      	b.n	80036ce <UART_SetConfig+0x2fe>
 8003640:	2310      	movs	r3, #16
 8003642:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003646:	e042      	b.n	80036ce <UART_SetConfig+0x2fe>
 8003648:	697b      	ldr	r3, [r7, #20]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	4a17      	ldr	r2, [pc, #92]	; (80036ac <UART_SetConfig+0x2dc>)
 800364e:	4293      	cmp	r3, r2
 8003650:	d13a      	bne.n	80036c8 <UART_SetConfig+0x2f8>
 8003652:	4b18      	ldr	r3, [pc, #96]	; (80036b4 <UART_SetConfig+0x2e4>)
 8003654:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003658:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800365c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003660:	d01a      	beq.n	8003698 <UART_SetConfig+0x2c8>
 8003662:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003666:	d81b      	bhi.n	80036a0 <UART_SetConfig+0x2d0>
 8003668:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800366c:	d00c      	beq.n	8003688 <UART_SetConfig+0x2b8>
 800366e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003672:	d815      	bhi.n	80036a0 <UART_SetConfig+0x2d0>
 8003674:	2b00      	cmp	r3, #0
 8003676:	d003      	beq.n	8003680 <UART_SetConfig+0x2b0>
 8003678:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800367c:	d008      	beq.n	8003690 <UART_SetConfig+0x2c0>
 800367e:	e00f      	b.n	80036a0 <UART_SetConfig+0x2d0>
 8003680:	2300      	movs	r3, #0
 8003682:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003686:	e022      	b.n	80036ce <UART_SetConfig+0x2fe>
 8003688:	2302      	movs	r3, #2
 800368a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800368e:	e01e      	b.n	80036ce <UART_SetConfig+0x2fe>
 8003690:	2304      	movs	r3, #4
 8003692:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003696:	e01a      	b.n	80036ce <UART_SetConfig+0x2fe>
 8003698:	2308      	movs	r3, #8
 800369a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800369e:	e016      	b.n	80036ce <UART_SetConfig+0x2fe>
 80036a0:	2310      	movs	r3, #16
 80036a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80036a6:	e012      	b.n	80036ce <UART_SetConfig+0x2fe>
 80036a8:	cfff69f3 	.word	0xcfff69f3
 80036ac:	40008000 	.word	0x40008000
 80036b0:	40013800 	.word	0x40013800
 80036b4:	40021000 	.word	0x40021000
 80036b8:	40004400 	.word	0x40004400
 80036bc:	40004800 	.word	0x40004800
 80036c0:	40004c00 	.word	0x40004c00
 80036c4:	40005000 	.word	0x40005000
 80036c8:	2310      	movs	r3, #16
 80036ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80036ce:	697b      	ldr	r3, [r7, #20]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	4aae      	ldr	r2, [pc, #696]	; (800398c <UART_SetConfig+0x5bc>)
 80036d4:	4293      	cmp	r3, r2
 80036d6:	f040 8097 	bne.w	8003808 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80036da:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80036de:	2b08      	cmp	r3, #8
 80036e0:	d823      	bhi.n	800372a <UART_SetConfig+0x35a>
 80036e2:	a201      	add	r2, pc, #4	; (adr r2, 80036e8 <UART_SetConfig+0x318>)
 80036e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036e8:	0800370d 	.word	0x0800370d
 80036ec:	0800372b 	.word	0x0800372b
 80036f0:	08003715 	.word	0x08003715
 80036f4:	0800372b 	.word	0x0800372b
 80036f8:	0800371b 	.word	0x0800371b
 80036fc:	0800372b 	.word	0x0800372b
 8003700:	0800372b 	.word	0x0800372b
 8003704:	0800372b 	.word	0x0800372b
 8003708:	08003723 	.word	0x08003723
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800370c:	f7fe fca0 	bl	8002050 <HAL_RCC_GetPCLK1Freq>
 8003710:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003712:	e010      	b.n	8003736 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003714:	4b9e      	ldr	r3, [pc, #632]	; (8003990 <UART_SetConfig+0x5c0>)
 8003716:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003718:	e00d      	b.n	8003736 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800371a:	f7fe fc01 	bl	8001f20 <HAL_RCC_GetSysClockFreq>
 800371e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003720:	e009      	b.n	8003736 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003722:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003726:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003728:	e005      	b.n	8003736 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800372a:	2300      	movs	r3, #0
 800372c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800372e:	2301      	movs	r3, #1
 8003730:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003734:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003738:	2b00      	cmp	r3, #0
 800373a:	f000 8130 	beq.w	800399e <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800373e:	697b      	ldr	r3, [r7, #20]
 8003740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003742:	4a94      	ldr	r2, [pc, #592]	; (8003994 <UART_SetConfig+0x5c4>)
 8003744:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003748:	461a      	mov	r2, r3
 800374a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800374c:	fbb3 f3f2 	udiv	r3, r3, r2
 8003750:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003752:	697b      	ldr	r3, [r7, #20]
 8003754:	685a      	ldr	r2, [r3, #4]
 8003756:	4613      	mov	r3, r2
 8003758:	005b      	lsls	r3, r3, #1
 800375a:	4413      	add	r3, r2
 800375c:	69ba      	ldr	r2, [r7, #24]
 800375e:	429a      	cmp	r2, r3
 8003760:	d305      	bcc.n	800376e <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003762:	697b      	ldr	r3, [r7, #20]
 8003764:	685b      	ldr	r3, [r3, #4]
 8003766:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003768:	69ba      	ldr	r2, [r7, #24]
 800376a:	429a      	cmp	r2, r3
 800376c:	d903      	bls.n	8003776 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800376e:	2301      	movs	r3, #1
 8003770:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003774:	e113      	b.n	800399e <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003778:	2200      	movs	r2, #0
 800377a:	60bb      	str	r3, [r7, #8]
 800377c:	60fa      	str	r2, [r7, #12]
 800377e:	697b      	ldr	r3, [r7, #20]
 8003780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003782:	4a84      	ldr	r2, [pc, #528]	; (8003994 <UART_SetConfig+0x5c4>)
 8003784:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003788:	b29b      	uxth	r3, r3
 800378a:	2200      	movs	r2, #0
 800378c:	603b      	str	r3, [r7, #0]
 800378e:	607a      	str	r2, [r7, #4]
 8003790:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003794:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003798:	f7fc fd32 	bl	8000200 <__aeabi_uldivmod>
 800379c:	4602      	mov	r2, r0
 800379e:	460b      	mov	r3, r1
 80037a0:	4610      	mov	r0, r2
 80037a2:	4619      	mov	r1, r3
 80037a4:	f04f 0200 	mov.w	r2, #0
 80037a8:	f04f 0300 	mov.w	r3, #0
 80037ac:	020b      	lsls	r3, r1, #8
 80037ae:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80037b2:	0202      	lsls	r2, r0, #8
 80037b4:	6979      	ldr	r1, [r7, #20]
 80037b6:	6849      	ldr	r1, [r1, #4]
 80037b8:	0849      	lsrs	r1, r1, #1
 80037ba:	2000      	movs	r0, #0
 80037bc:	460c      	mov	r4, r1
 80037be:	4605      	mov	r5, r0
 80037c0:	eb12 0804 	adds.w	r8, r2, r4
 80037c4:	eb43 0905 	adc.w	r9, r3, r5
 80037c8:	697b      	ldr	r3, [r7, #20]
 80037ca:	685b      	ldr	r3, [r3, #4]
 80037cc:	2200      	movs	r2, #0
 80037ce:	469a      	mov	sl, r3
 80037d0:	4693      	mov	fp, r2
 80037d2:	4652      	mov	r2, sl
 80037d4:	465b      	mov	r3, fp
 80037d6:	4640      	mov	r0, r8
 80037d8:	4649      	mov	r1, r9
 80037da:	f7fc fd11 	bl	8000200 <__aeabi_uldivmod>
 80037de:	4602      	mov	r2, r0
 80037e0:	460b      	mov	r3, r1
 80037e2:	4613      	mov	r3, r2
 80037e4:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80037e6:	6a3b      	ldr	r3, [r7, #32]
 80037e8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80037ec:	d308      	bcc.n	8003800 <UART_SetConfig+0x430>
 80037ee:	6a3b      	ldr	r3, [r7, #32]
 80037f0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80037f4:	d204      	bcs.n	8003800 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 80037f6:	697b      	ldr	r3, [r7, #20]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	6a3a      	ldr	r2, [r7, #32]
 80037fc:	60da      	str	r2, [r3, #12]
 80037fe:	e0ce      	b.n	800399e <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8003800:	2301      	movs	r3, #1
 8003802:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003806:	e0ca      	b.n	800399e <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003808:	697b      	ldr	r3, [r7, #20]
 800380a:	69db      	ldr	r3, [r3, #28]
 800380c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003810:	d166      	bne.n	80038e0 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8003812:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003816:	2b08      	cmp	r3, #8
 8003818:	d827      	bhi.n	800386a <UART_SetConfig+0x49a>
 800381a:	a201      	add	r2, pc, #4	; (adr r2, 8003820 <UART_SetConfig+0x450>)
 800381c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003820:	08003845 	.word	0x08003845
 8003824:	0800384d 	.word	0x0800384d
 8003828:	08003855 	.word	0x08003855
 800382c:	0800386b 	.word	0x0800386b
 8003830:	0800385b 	.word	0x0800385b
 8003834:	0800386b 	.word	0x0800386b
 8003838:	0800386b 	.word	0x0800386b
 800383c:	0800386b 	.word	0x0800386b
 8003840:	08003863 	.word	0x08003863
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003844:	f7fe fc04 	bl	8002050 <HAL_RCC_GetPCLK1Freq>
 8003848:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800384a:	e014      	b.n	8003876 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800384c:	f7fe fc16 	bl	800207c <HAL_RCC_GetPCLK2Freq>
 8003850:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003852:	e010      	b.n	8003876 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003854:	4b4e      	ldr	r3, [pc, #312]	; (8003990 <UART_SetConfig+0x5c0>)
 8003856:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003858:	e00d      	b.n	8003876 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800385a:	f7fe fb61 	bl	8001f20 <HAL_RCC_GetSysClockFreq>
 800385e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003860:	e009      	b.n	8003876 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003862:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003866:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003868:	e005      	b.n	8003876 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800386a:	2300      	movs	r3, #0
 800386c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800386e:	2301      	movs	r3, #1
 8003870:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003874:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003878:	2b00      	cmp	r3, #0
 800387a:	f000 8090 	beq.w	800399e <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800387e:	697b      	ldr	r3, [r7, #20]
 8003880:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003882:	4a44      	ldr	r2, [pc, #272]	; (8003994 <UART_SetConfig+0x5c4>)
 8003884:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003888:	461a      	mov	r2, r3
 800388a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800388c:	fbb3 f3f2 	udiv	r3, r3, r2
 8003890:	005a      	lsls	r2, r3, #1
 8003892:	697b      	ldr	r3, [r7, #20]
 8003894:	685b      	ldr	r3, [r3, #4]
 8003896:	085b      	lsrs	r3, r3, #1
 8003898:	441a      	add	r2, r3
 800389a:	697b      	ldr	r3, [r7, #20]
 800389c:	685b      	ldr	r3, [r3, #4]
 800389e:	fbb2 f3f3 	udiv	r3, r2, r3
 80038a2:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80038a4:	6a3b      	ldr	r3, [r7, #32]
 80038a6:	2b0f      	cmp	r3, #15
 80038a8:	d916      	bls.n	80038d8 <UART_SetConfig+0x508>
 80038aa:	6a3b      	ldr	r3, [r7, #32]
 80038ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038b0:	d212      	bcs.n	80038d8 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80038b2:	6a3b      	ldr	r3, [r7, #32]
 80038b4:	b29b      	uxth	r3, r3
 80038b6:	f023 030f 	bic.w	r3, r3, #15
 80038ba:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80038bc:	6a3b      	ldr	r3, [r7, #32]
 80038be:	085b      	lsrs	r3, r3, #1
 80038c0:	b29b      	uxth	r3, r3
 80038c2:	f003 0307 	and.w	r3, r3, #7
 80038c6:	b29a      	uxth	r2, r3
 80038c8:	8bfb      	ldrh	r3, [r7, #30]
 80038ca:	4313      	orrs	r3, r2
 80038cc:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80038ce:	697b      	ldr	r3, [r7, #20]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	8bfa      	ldrh	r2, [r7, #30]
 80038d4:	60da      	str	r2, [r3, #12]
 80038d6:	e062      	b.n	800399e <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80038d8:	2301      	movs	r3, #1
 80038da:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80038de:	e05e      	b.n	800399e <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80038e0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80038e4:	2b08      	cmp	r3, #8
 80038e6:	d828      	bhi.n	800393a <UART_SetConfig+0x56a>
 80038e8:	a201      	add	r2, pc, #4	; (adr r2, 80038f0 <UART_SetConfig+0x520>)
 80038ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038ee:	bf00      	nop
 80038f0:	08003915 	.word	0x08003915
 80038f4:	0800391d 	.word	0x0800391d
 80038f8:	08003925 	.word	0x08003925
 80038fc:	0800393b 	.word	0x0800393b
 8003900:	0800392b 	.word	0x0800392b
 8003904:	0800393b 	.word	0x0800393b
 8003908:	0800393b 	.word	0x0800393b
 800390c:	0800393b 	.word	0x0800393b
 8003910:	08003933 	.word	0x08003933
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003914:	f7fe fb9c 	bl	8002050 <HAL_RCC_GetPCLK1Freq>
 8003918:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800391a:	e014      	b.n	8003946 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800391c:	f7fe fbae 	bl	800207c <HAL_RCC_GetPCLK2Freq>
 8003920:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003922:	e010      	b.n	8003946 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003924:	4b1a      	ldr	r3, [pc, #104]	; (8003990 <UART_SetConfig+0x5c0>)
 8003926:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003928:	e00d      	b.n	8003946 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800392a:	f7fe faf9 	bl	8001f20 <HAL_RCC_GetSysClockFreq>
 800392e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003930:	e009      	b.n	8003946 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003932:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003936:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003938:	e005      	b.n	8003946 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800393a:	2300      	movs	r3, #0
 800393c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800393e:	2301      	movs	r3, #1
 8003940:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003944:	bf00      	nop
    }

    if (pclk != 0U)
 8003946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003948:	2b00      	cmp	r3, #0
 800394a:	d028      	beq.n	800399e <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800394c:	697b      	ldr	r3, [r7, #20]
 800394e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003950:	4a10      	ldr	r2, [pc, #64]	; (8003994 <UART_SetConfig+0x5c4>)
 8003952:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003956:	461a      	mov	r2, r3
 8003958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800395a:	fbb3 f2f2 	udiv	r2, r3, r2
 800395e:	697b      	ldr	r3, [r7, #20]
 8003960:	685b      	ldr	r3, [r3, #4]
 8003962:	085b      	lsrs	r3, r3, #1
 8003964:	441a      	add	r2, r3
 8003966:	697b      	ldr	r3, [r7, #20]
 8003968:	685b      	ldr	r3, [r3, #4]
 800396a:	fbb2 f3f3 	udiv	r3, r2, r3
 800396e:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003970:	6a3b      	ldr	r3, [r7, #32]
 8003972:	2b0f      	cmp	r3, #15
 8003974:	d910      	bls.n	8003998 <UART_SetConfig+0x5c8>
 8003976:	6a3b      	ldr	r3, [r7, #32]
 8003978:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800397c:	d20c      	bcs.n	8003998 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800397e:	6a3b      	ldr	r3, [r7, #32]
 8003980:	b29a      	uxth	r2, r3
 8003982:	697b      	ldr	r3, [r7, #20]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	60da      	str	r2, [r3, #12]
 8003988:	e009      	b.n	800399e <UART_SetConfig+0x5ce>
 800398a:	bf00      	nop
 800398c:	40008000 	.word	0x40008000
 8003990:	00f42400 	.word	0x00f42400
 8003994:	08006810 	.word	0x08006810
      }
      else
      {
        ret = HAL_ERROR;
 8003998:	2301      	movs	r3, #1
 800399a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800399e:	697b      	ldr	r3, [r7, #20]
 80039a0:	2201      	movs	r2, #1
 80039a2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80039a6:	697b      	ldr	r3, [r7, #20]
 80039a8:	2201      	movs	r2, #1
 80039aa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80039ae:	697b      	ldr	r3, [r7, #20]
 80039b0:	2200      	movs	r2, #0
 80039b2:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80039b4:	697b      	ldr	r3, [r7, #20]
 80039b6:	2200      	movs	r2, #0
 80039b8:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80039ba:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80039be:	4618      	mov	r0, r3
 80039c0:	3730      	adds	r7, #48	; 0x30
 80039c2:	46bd      	mov	sp, r7
 80039c4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080039c8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80039c8:	b480      	push	{r7}
 80039ca:	b083      	sub	sp, #12
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039d4:	f003 0308 	and.w	r3, r3, #8
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d00a      	beq.n	80039f2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	685b      	ldr	r3, [r3, #4]
 80039e2:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	430a      	orrs	r2, r1
 80039f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039f6:	f003 0301 	and.w	r3, r3, #1
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d00a      	beq.n	8003a14 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	685b      	ldr	r3, [r3, #4]
 8003a04:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	430a      	orrs	r2, r1
 8003a12:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a18:	f003 0302 	and.w	r3, r3, #2
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d00a      	beq.n	8003a36 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	685b      	ldr	r3, [r3, #4]
 8003a26:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	430a      	orrs	r2, r1
 8003a34:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a3a:	f003 0304 	and.w	r3, r3, #4
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d00a      	beq.n	8003a58 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	685b      	ldr	r3, [r3, #4]
 8003a48:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	430a      	orrs	r2, r1
 8003a56:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a5c:	f003 0310 	and.w	r3, r3, #16
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d00a      	beq.n	8003a7a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	689b      	ldr	r3, [r3, #8]
 8003a6a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	430a      	orrs	r2, r1
 8003a78:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a7e:	f003 0320 	and.w	r3, r3, #32
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d00a      	beq.n	8003a9c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	689b      	ldr	r3, [r3, #8]
 8003a8c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	430a      	orrs	r2, r1
 8003a9a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003aa0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d01a      	beq.n	8003ade <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	685b      	ldr	r3, [r3, #4]
 8003aae:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	430a      	orrs	r2, r1
 8003abc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ac2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003ac6:	d10a      	bne.n	8003ade <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	685b      	ldr	r3, [r3, #4]
 8003ace:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	430a      	orrs	r2, r1
 8003adc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ae2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d00a      	beq.n	8003b00 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	685b      	ldr	r3, [r3, #4]
 8003af0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	430a      	orrs	r2, r1
 8003afe:	605a      	str	r2, [r3, #4]
  }
}
 8003b00:	bf00      	nop
 8003b02:	370c      	adds	r7, #12
 8003b04:	46bd      	mov	sp, r7
 8003b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0a:	4770      	bx	lr

08003b0c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	b098      	sub	sp, #96	; 0x60
 8003b10:	af02      	add	r7, sp, #8
 8003b12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2200      	movs	r2, #0
 8003b18:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003b1c:	f7fd f8f6 	bl	8000d0c <HAL_GetTick>
 8003b20:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f003 0308 	and.w	r3, r3, #8
 8003b2c:	2b08      	cmp	r3, #8
 8003b2e:	d12f      	bne.n	8003b90 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003b30:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003b34:	9300      	str	r3, [sp, #0]
 8003b36:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b38:	2200      	movs	r2, #0
 8003b3a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003b3e:	6878      	ldr	r0, [r7, #4]
 8003b40:	f000 f88e 	bl	8003c60 <UART_WaitOnFlagUntilTimeout>
 8003b44:	4603      	mov	r3, r0
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d022      	beq.n	8003b90 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b52:	e853 3f00 	ldrex	r3, [r3]
 8003b56:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003b58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b5a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003b5e:	653b      	str	r3, [r7, #80]	; 0x50
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	461a      	mov	r2, r3
 8003b66:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003b68:	647b      	str	r3, [r7, #68]	; 0x44
 8003b6a:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b6c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003b6e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003b70:	e841 2300 	strex	r3, r2, [r1]
 8003b74:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003b76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d1e6      	bne.n	8003b4a <UART_CheckIdleState+0x3e>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2220      	movs	r2, #32
 8003b80:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2200      	movs	r2, #0
 8003b88:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003b8c:	2303      	movs	r3, #3
 8003b8e:	e063      	b.n	8003c58 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f003 0304 	and.w	r3, r3, #4
 8003b9a:	2b04      	cmp	r3, #4
 8003b9c:	d149      	bne.n	8003c32 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003b9e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003ba2:	9300      	str	r3, [sp, #0]
 8003ba4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003bac:	6878      	ldr	r0, [r7, #4]
 8003bae:	f000 f857 	bl	8003c60 <UART_WaitOnFlagUntilTimeout>
 8003bb2:	4603      	mov	r3, r0
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d03c      	beq.n	8003c32 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bc0:	e853 3f00 	ldrex	r3, [r3]
 8003bc4:	623b      	str	r3, [r7, #32]
   return(result);
 8003bc6:	6a3b      	ldr	r3, [r7, #32]
 8003bc8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003bcc:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	461a      	mov	r2, r3
 8003bd4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003bd6:	633b      	str	r3, [r7, #48]	; 0x30
 8003bd8:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bda:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003bdc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003bde:	e841 2300 	strex	r3, r2, [r1]
 8003be2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003be4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d1e6      	bne.n	8003bb8 <UART_CheckIdleState+0xac>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	3308      	adds	r3, #8
 8003bf0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bf2:	693b      	ldr	r3, [r7, #16]
 8003bf4:	e853 3f00 	ldrex	r3, [r3]
 8003bf8:	60fb      	str	r3, [r7, #12]
   return(result);
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	f023 0301 	bic.w	r3, r3, #1
 8003c00:	64bb      	str	r3, [r7, #72]	; 0x48
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	3308      	adds	r3, #8
 8003c08:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003c0a:	61fa      	str	r2, [r7, #28]
 8003c0c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c0e:	69b9      	ldr	r1, [r7, #24]
 8003c10:	69fa      	ldr	r2, [r7, #28]
 8003c12:	e841 2300 	strex	r3, r2, [r1]
 8003c16:	617b      	str	r3, [r7, #20]
   return(result);
 8003c18:	697b      	ldr	r3, [r7, #20]
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d1e5      	bne.n	8003bea <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	2220      	movs	r2, #32
 8003c22:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	2200      	movs	r2, #0
 8003c2a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003c2e:	2303      	movs	r3, #3
 8003c30:	e012      	b.n	8003c58 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	2220      	movs	r2, #32
 8003c36:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	2220      	movs	r2, #32
 8003c3e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	2200      	movs	r2, #0
 8003c46:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	2200      	movs	r2, #0
 8003c52:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8003c56:	2300      	movs	r3, #0
}
 8003c58:	4618      	mov	r0, r3
 8003c5a:	3758      	adds	r7, #88	; 0x58
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	bd80      	pop	{r7, pc}

08003c60 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	b084      	sub	sp, #16
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	60f8      	str	r0, [r7, #12]
 8003c68:	60b9      	str	r1, [r7, #8]
 8003c6a:	603b      	str	r3, [r7, #0]
 8003c6c:	4613      	mov	r3, r2
 8003c6e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c70:	e049      	b.n	8003d06 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c72:	69bb      	ldr	r3, [r7, #24]
 8003c74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c78:	d045      	beq.n	8003d06 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c7a:	f7fd f847 	bl	8000d0c <HAL_GetTick>
 8003c7e:	4602      	mov	r2, r0
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	1ad3      	subs	r3, r2, r3
 8003c84:	69ba      	ldr	r2, [r7, #24]
 8003c86:	429a      	cmp	r2, r3
 8003c88:	d302      	bcc.n	8003c90 <UART_WaitOnFlagUntilTimeout+0x30>
 8003c8a:	69bb      	ldr	r3, [r7, #24]
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d101      	bne.n	8003c94 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003c90:	2303      	movs	r3, #3
 8003c92:	e048      	b.n	8003d26 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f003 0304 	and.w	r3, r3, #4
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d031      	beq.n	8003d06 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	69db      	ldr	r3, [r3, #28]
 8003ca8:	f003 0308 	and.w	r3, r3, #8
 8003cac:	2b08      	cmp	r3, #8
 8003cae:	d110      	bne.n	8003cd2 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	2208      	movs	r2, #8
 8003cb6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003cb8:	68f8      	ldr	r0, [r7, #12]
 8003cba:	f000 f838 	bl	8003d2e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	2208      	movs	r2, #8
 8003cc2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	2200      	movs	r2, #0
 8003cca:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8003cce:	2301      	movs	r3, #1
 8003cd0:	e029      	b.n	8003d26 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	69db      	ldr	r3, [r3, #28]
 8003cd8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003cdc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ce0:	d111      	bne.n	8003d06 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003cea:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003cec:	68f8      	ldr	r0, [r7, #12]
 8003cee:	f000 f81e 	bl	8003d2e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	2220      	movs	r2, #32
 8003cf6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8003d02:	2303      	movs	r3, #3
 8003d04:	e00f      	b.n	8003d26 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	69da      	ldr	r2, [r3, #28]
 8003d0c:	68bb      	ldr	r3, [r7, #8]
 8003d0e:	4013      	ands	r3, r2
 8003d10:	68ba      	ldr	r2, [r7, #8]
 8003d12:	429a      	cmp	r2, r3
 8003d14:	bf0c      	ite	eq
 8003d16:	2301      	moveq	r3, #1
 8003d18:	2300      	movne	r3, #0
 8003d1a:	b2db      	uxtb	r3, r3
 8003d1c:	461a      	mov	r2, r3
 8003d1e:	79fb      	ldrb	r3, [r7, #7]
 8003d20:	429a      	cmp	r2, r3
 8003d22:	d0a6      	beq.n	8003c72 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003d24:	2300      	movs	r3, #0
}
 8003d26:	4618      	mov	r0, r3
 8003d28:	3710      	adds	r7, #16
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	bd80      	pop	{r7, pc}

08003d2e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003d2e:	b480      	push	{r7}
 8003d30:	b095      	sub	sp, #84	; 0x54
 8003d32:	af00      	add	r7, sp, #0
 8003d34:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d3e:	e853 3f00 	ldrex	r3, [r3]
 8003d42:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003d44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d46:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003d4a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	461a      	mov	r2, r3
 8003d52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d54:	643b      	str	r3, [r7, #64]	; 0x40
 8003d56:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d58:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003d5a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003d5c:	e841 2300 	strex	r3, r2, [r1]
 8003d60:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003d62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d1e6      	bne.n	8003d36 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	3308      	adds	r3, #8
 8003d6e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d70:	6a3b      	ldr	r3, [r7, #32]
 8003d72:	e853 3f00 	ldrex	r3, [r3]
 8003d76:	61fb      	str	r3, [r7, #28]
   return(result);
 8003d78:	69fb      	ldr	r3, [r7, #28]
 8003d7a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d7e:	f023 0301 	bic.w	r3, r3, #1
 8003d82:	64bb      	str	r3, [r7, #72]	; 0x48
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	3308      	adds	r3, #8
 8003d8a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003d8c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003d8e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d90:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003d92:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003d94:	e841 2300 	strex	r3, r2, [r1]
 8003d98:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d1e3      	bne.n	8003d68 <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003da4:	2b01      	cmp	r3, #1
 8003da6:	d118      	bne.n	8003dda <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	e853 3f00 	ldrex	r3, [r3]
 8003db4:	60bb      	str	r3, [r7, #8]
   return(result);
 8003db6:	68bb      	ldr	r3, [r7, #8]
 8003db8:	f023 0310 	bic.w	r3, r3, #16
 8003dbc:	647b      	str	r3, [r7, #68]	; 0x44
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	461a      	mov	r2, r3
 8003dc4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003dc6:	61bb      	str	r3, [r7, #24]
 8003dc8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dca:	6979      	ldr	r1, [r7, #20]
 8003dcc:	69ba      	ldr	r2, [r7, #24]
 8003dce:	e841 2300 	strex	r3, r2, [r1]
 8003dd2:	613b      	str	r3, [r7, #16]
   return(result);
 8003dd4:	693b      	ldr	r3, [r7, #16]
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d1e6      	bne.n	8003da8 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	2220      	movs	r2, #32
 8003dde:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	2200      	movs	r2, #0
 8003de6:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2200      	movs	r2, #0
 8003dec:	675a      	str	r2, [r3, #116]	; 0x74
}
 8003dee:	bf00      	nop
 8003df0:	3754      	adds	r7, #84	; 0x54
 8003df2:	46bd      	mov	sp, r7
 8003df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df8:	4770      	bx	lr

08003dfa <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8003dfa:	b480      	push	{r7}
 8003dfc:	b085      	sub	sp, #20
 8003dfe:	af00      	add	r7, sp, #0
 8003e00:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8003e08:	2b01      	cmp	r3, #1
 8003e0a:	d101      	bne.n	8003e10 <HAL_UARTEx_DisableFifoMode+0x16>
 8003e0c:	2302      	movs	r3, #2
 8003e0e:	e027      	b.n	8003e60 <HAL_UARTEx_DisableFifoMode+0x66>
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2201      	movs	r2, #1
 8003e14:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2224      	movs	r2, #36	; 0x24
 8003e1c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	681a      	ldr	r2, [r3, #0]
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f022 0201 	bic.w	r2, r2, #1
 8003e36:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8003e3e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2200      	movs	r2, #0
 8003e44:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	68fa      	ldr	r2, [r7, #12]
 8003e4c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	2220      	movs	r2, #32
 8003e52:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	2200      	movs	r2, #0
 8003e5a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8003e5e:	2300      	movs	r3, #0
}
 8003e60:	4618      	mov	r0, r3
 8003e62:	3714      	adds	r7, #20
 8003e64:	46bd      	mov	sp, r7
 8003e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6a:	4770      	bx	lr

08003e6c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	b084      	sub	sp, #16
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
 8003e74:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8003e7c:	2b01      	cmp	r3, #1
 8003e7e:	d101      	bne.n	8003e84 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8003e80:	2302      	movs	r3, #2
 8003e82:	e02d      	b.n	8003ee0 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2201      	movs	r2, #1
 8003e88:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2224      	movs	r2, #36	; 0x24
 8003e90:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	681a      	ldr	r2, [r3, #0]
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f022 0201 	bic.w	r2, r2, #1
 8003eaa:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	689b      	ldr	r3, [r3, #8]
 8003eb2:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	683a      	ldr	r2, [r7, #0]
 8003ebc:	430a      	orrs	r2, r1
 8003ebe:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003ec0:	6878      	ldr	r0, [r7, #4]
 8003ec2:	f000 f84f 	bl	8003f64 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	68fa      	ldr	r2, [r7, #12]
 8003ecc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	2220      	movs	r2, #32
 8003ed2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	2200      	movs	r2, #0
 8003eda:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8003ede:	2300      	movs	r3, #0
}
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	3710      	adds	r7, #16
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	bd80      	pop	{r7, pc}

08003ee8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	b084      	sub	sp, #16
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
 8003ef0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8003ef8:	2b01      	cmp	r3, #1
 8003efa:	d101      	bne.n	8003f00 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8003efc:	2302      	movs	r3, #2
 8003efe:	e02d      	b.n	8003f5c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2201      	movs	r2, #1
 8003f04:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2224      	movs	r2, #36	; 0x24
 8003f0c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	681a      	ldr	r2, [r3, #0]
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f022 0201 	bic.w	r2, r2, #1
 8003f26:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	689b      	ldr	r3, [r3, #8]
 8003f2e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	683a      	ldr	r2, [r7, #0]
 8003f38:	430a      	orrs	r2, r1
 8003f3a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003f3c:	6878      	ldr	r0, [r7, #4]
 8003f3e:	f000 f811 	bl	8003f64 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	68fa      	ldr	r2, [r7, #12]
 8003f48:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	2220      	movs	r2, #32
 8003f4e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	2200      	movs	r2, #0
 8003f56:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8003f5a:	2300      	movs	r3, #0
}
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	3710      	adds	r7, #16
 8003f60:	46bd      	mov	sp, r7
 8003f62:	bd80      	pop	{r7, pc}

08003f64 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8003f64:	b480      	push	{r7}
 8003f66:	b085      	sub	sp, #20
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d108      	bne.n	8003f86 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2201      	movs	r2, #1
 8003f78:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2201      	movs	r2, #1
 8003f80:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8003f84:	e031      	b.n	8003fea <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8003f86:	2308      	movs	r3, #8
 8003f88:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8003f8a:	2308      	movs	r3, #8
 8003f8c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	689b      	ldr	r3, [r3, #8]
 8003f94:	0e5b      	lsrs	r3, r3, #25
 8003f96:	b2db      	uxtb	r3, r3
 8003f98:	f003 0307 	and.w	r3, r3, #7
 8003f9c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	689b      	ldr	r3, [r3, #8]
 8003fa4:	0f5b      	lsrs	r3, r3, #29
 8003fa6:	b2db      	uxtb	r3, r3
 8003fa8:	f003 0307 	and.w	r3, r3, #7
 8003fac:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003fae:	7bbb      	ldrb	r3, [r7, #14]
 8003fb0:	7b3a      	ldrb	r2, [r7, #12]
 8003fb2:	4911      	ldr	r1, [pc, #68]	; (8003ff8 <UARTEx_SetNbDataToProcess+0x94>)
 8003fb4:	5c8a      	ldrb	r2, [r1, r2]
 8003fb6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8003fba:	7b3a      	ldrb	r2, [r7, #12]
 8003fbc:	490f      	ldr	r1, [pc, #60]	; (8003ffc <UARTEx_SetNbDataToProcess+0x98>)
 8003fbe:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003fc0:	fb93 f3f2 	sdiv	r3, r3, r2
 8003fc4:	b29a      	uxth	r2, r3
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003fcc:	7bfb      	ldrb	r3, [r7, #15]
 8003fce:	7b7a      	ldrb	r2, [r7, #13]
 8003fd0:	4909      	ldr	r1, [pc, #36]	; (8003ff8 <UARTEx_SetNbDataToProcess+0x94>)
 8003fd2:	5c8a      	ldrb	r2, [r1, r2]
 8003fd4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8003fd8:	7b7a      	ldrb	r2, [r7, #13]
 8003fda:	4908      	ldr	r1, [pc, #32]	; (8003ffc <UARTEx_SetNbDataToProcess+0x98>)
 8003fdc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003fde:	fb93 f3f2 	sdiv	r3, r3, r2
 8003fe2:	b29a      	uxth	r2, r3
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8003fea:	bf00      	nop
 8003fec:	3714      	adds	r7, #20
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff4:	4770      	bx	lr
 8003ff6:	bf00      	nop
 8003ff8:	08006828 	.word	0x08006828
 8003ffc:	08006830 	.word	0x08006830

08004000 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004000:	b480      	push	{r7}
 8004002:	b083      	sub	sp, #12
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	f103 0208 	add.w	r2, r3, #8
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	f04f 32ff 	mov.w	r2, #4294967295
 8004018:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	f103 0208 	add.w	r2, r3, #8
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	f103 0208 	add.w	r2, r3, #8
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	2200      	movs	r2, #0
 8004032:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004034:	bf00      	nop
 8004036:	370c      	adds	r7, #12
 8004038:	46bd      	mov	sp, r7
 800403a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403e:	4770      	bx	lr

08004040 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004040:	b480      	push	{r7}
 8004042:	b083      	sub	sp, #12
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2200      	movs	r2, #0
 800404c:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800404e:	bf00      	nop
 8004050:	370c      	adds	r7, #12
 8004052:	46bd      	mov	sp, r7
 8004054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004058:	4770      	bx	lr

0800405a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 800405a:	b480      	push	{r7}
 800405c:	b085      	sub	sp, #20
 800405e:	af00      	add	r7, sp, #0
 8004060:	6078      	str	r0, [r7, #4]
 8004062:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	685b      	ldr	r3, [r3, #4]
 8004068:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 800406a:	683b      	ldr	r3, [r7, #0]
 800406c:	68fa      	ldr	r2, [r7, #12]
 800406e:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	689a      	ldr	r2, [r3, #8]
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	689b      	ldr	r3, [r3, #8]
 800407c:	683a      	ldr	r2, [r7, #0]
 800407e:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	683a      	ldr	r2, [r7, #0]
 8004084:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 8004086:	683b      	ldr	r3, [r7, #0]
 8004088:	687a      	ldr	r2, [r7, #4]
 800408a:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	1c5a      	adds	r2, r3, #1
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	601a      	str	r2, [r3, #0]
}
 8004096:	bf00      	nop
 8004098:	3714      	adds	r7, #20
 800409a:	46bd      	mov	sp, r7
 800409c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a0:	4770      	bx	lr

080040a2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 80040a2:	b480      	push	{r7}
 80040a4:	b085      	sub	sp, #20
 80040a6:	af00      	add	r7, sp, #0
 80040a8:	6078      	str	r0, [r7, #4]
 80040aa:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80040ac:	683b      	ldr	r3, [r7, #0]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 80040b2:	68bb      	ldr	r3, [r7, #8]
 80040b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040b8:	d103      	bne.n	80040c2 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	691b      	ldr	r3, [r3, #16]
 80040be:	60fb      	str	r3, [r7, #12]
 80040c0:	e00c      	b.n	80040dc <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	3308      	adds	r3, #8
 80040c6:	60fb      	str	r3, [r7, #12]
 80040c8:	e002      	b.n	80040d0 <vListInsert+0x2e>
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	685b      	ldr	r3, [r3, #4]
 80040ce:	60fb      	str	r3, [r7, #12]
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	685b      	ldr	r3, [r3, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	68ba      	ldr	r2, [r7, #8]
 80040d8:	429a      	cmp	r2, r3
 80040da:	d2f6      	bcs.n	80040ca <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	685a      	ldr	r2, [r3, #4]
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80040e4:	683b      	ldr	r3, [r7, #0]
 80040e6:	685b      	ldr	r3, [r3, #4]
 80040e8:	683a      	ldr	r2, [r7, #0]
 80040ea:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	68fa      	ldr	r2, [r7, #12]
 80040f0:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	683a      	ldr	r2, [r7, #0]
 80040f6:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	687a      	ldr	r2, [r7, #4]
 80040fc:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	1c5a      	adds	r2, r3, #1
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	601a      	str	r2, [r3, #0]
}
 8004108:	bf00      	nop
 800410a:	3714      	adds	r7, #20
 800410c:	46bd      	mov	sp, r7
 800410e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004112:	4770      	bx	lr

08004114 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004114:	b480      	push	{r7}
 8004116:	b085      	sub	sp, #20
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	691b      	ldr	r3, [r3, #16]
 8004120:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	685b      	ldr	r3, [r3, #4]
 8004126:	687a      	ldr	r2, [r7, #4]
 8004128:	6892      	ldr	r2, [r2, #8]
 800412a:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	689b      	ldr	r3, [r3, #8]
 8004130:	687a      	ldr	r2, [r7, #4]
 8004132:	6852      	ldr	r2, [r2, #4]
 8004134:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	685b      	ldr	r3, [r3, #4]
 800413a:	687a      	ldr	r2, [r7, #4]
 800413c:	429a      	cmp	r2, r3
 800413e:	d103      	bne.n	8004148 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	689a      	ldr	r2, [r3, #8]
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2200      	movs	r2, #0
 800414c:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	1e5a      	subs	r2, r3, #1
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	681b      	ldr	r3, [r3, #0]
}
 800415c:	4618      	mov	r0, r3
 800415e:	3714      	adds	r7, #20
 8004160:	46bd      	mov	sp, r7
 8004162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004166:	4770      	bx	lr

08004168 <xQueueGenericReset>:
    }
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8004168:	b580      	push	{r7, lr}
 800416a:	b086      	sub	sp, #24
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
 8004170:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 8004172:	2301      	movs	r3, #1
 8004174:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 800417a:	693b      	ldr	r3, [r7, #16]
 800417c:	2b00      	cmp	r3, #0
 800417e:	d10a      	bne.n	8004196 <xQueueGenericReset+0x2e>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8004180:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004184:	f383 8811 	msr	BASEPRI, r3
 8004188:	f3bf 8f6f 	isb	sy
 800418c:	f3bf 8f4f 	dsb	sy
 8004190:	60fb      	str	r3, [r7, #12]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8004192:	bf00      	nop
 8004194:	e7fe      	b.n	8004194 <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 8004196:	693b      	ldr	r3, [r7, #16]
 8004198:	2b00      	cmp	r3, #0
 800419a:	d05d      	beq.n	8004258 <xQueueGenericReset+0xf0>
        ( pxQueue->uxLength >= 1U ) &&
 800419c:	693b      	ldr	r3, [r7, #16]
 800419e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d059      	beq.n	8004258 <xQueueGenericReset+0xf0>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 80041a4:	693b      	ldr	r3, [r7, #16]
 80041a6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80041a8:	693b      	ldr	r3, [r7, #16]
 80041aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041ac:	2100      	movs	r1, #0
 80041ae:	fba3 2302 	umull	r2, r3, r3, r2
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d000      	beq.n	80041b8 <xQueueGenericReset+0x50>
 80041b6:	2101      	movs	r1, #1
 80041b8:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d14c      	bne.n	8004258 <xQueueGenericReset+0xf0>
    {
        taskENTER_CRITICAL();
 80041be:	f001 ffb3 	bl	8006128 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80041c2:	693b      	ldr	r3, [r7, #16]
 80041c4:	681a      	ldr	r2, [r3, #0]
 80041c6:	693b      	ldr	r3, [r7, #16]
 80041c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041ca:	6939      	ldr	r1, [r7, #16]
 80041cc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80041ce:	fb01 f303 	mul.w	r3, r1, r3
 80041d2:	441a      	add	r2, r3
 80041d4:	693b      	ldr	r3, [r7, #16]
 80041d6:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80041d8:	693b      	ldr	r3, [r7, #16]
 80041da:	2200      	movs	r2, #0
 80041dc:	639a      	str	r2, [r3, #56]	; 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 80041de:	693b      	ldr	r3, [r7, #16]
 80041e0:	681a      	ldr	r2, [r3, #0]
 80041e2:	693b      	ldr	r3, [r7, #16]
 80041e4:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80041e6:	693b      	ldr	r3, [r7, #16]
 80041e8:	681a      	ldr	r2, [r3, #0]
 80041ea:	693b      	ldr	r3, [r7, #16]
 80041ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041ee:	3b01      	subs	r3, #1
 80041f0:	6939      	ldr	r1, [r7, #16]
 80041f2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80041f4:	fb01 f303 	mul.w	r3, r1, r3
 80041f8:	441a      	add	r2, r3
 80041fa:	693b      	ldr	r3, [r7, #16]
 80041fc:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 80041fe:	693b      	ldr	r3, [r7, #16]
 8004200:	22ff      	movs	r2, #255	; 0xff
 8004202:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 8004206:	693b      	ldr	r3, [r7, #16]
 8004208:	22ff      	movs	r2, #255	; 0xff
 800420a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

            if( xNewQueue == pdFALSE )
 800420e:	683b      	ldr	r3, [r7, #0]
 8004210:	2b00      	cmp	r3, #0
 8004212:	d114      	bne.n	800423e <xQueueGenericReset+0xd6>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004214:	693b      	ldr	r3, [r7, #16]
 8004216:	691b      	ldr	r3, [r3, #16]
 8004218:	2b00      	cmp	r3, #0
 800421a:	d01a      	beq.n	8004252 <xQueueGenericReset+0xea>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800421c:	693b      	ldr	r3, [r7, #16]
 800421e:	3310      	adds	r3, #16
 8004220:	4618      	mov	r0, r3
 8004222:	f001 f93b 	bl	800549c <xTaskRemoveFromEventList>
 8004226:	4603      	mov	r3, r0
 8004228:	2b00      	cmp	r3, #0
 800422a:	d012      	beq.n	8004252 <xQueueGenericReset+0xea>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 800422c:	4b15      	ldr	r3, [pc, #84]	; (8004284 <xQueueGenericReset+0x11c>)
 800422e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004232:	601a      	str	r2, [r3, #0]
 8004234:	f3bf 8f4f 	dsb	sy
 8004238:	f3bf 8f6f 	isb	sy
 800423c:	e009      	b.n	8004252 <xQueueGenericReset+0xea>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800423e:	693b      	ldr	r3, [r7, #16]
 8004240:	3310      	adds	r3, #16
 8004242:	4618      	mov	r0, r3
 8004244:	f7ff fedc 	bl	8004000 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004248:	693b      	ldr	r3, [r7, #16]
 800424a:	3324      	adds	r3, #36	; 0x24
 800424c:	4618      	mov	r0, r3
 800424e:	f7ff fed7 	bl	8004000 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 8004252:	f001 ff99 	bl	8006188 <vPortExitCritical>
 8004256:	e001      	b.n	800425c <xQueueGenericReset+0xf4>
    }
    else
    {
        xReturn = pdFAIL;
 8004258:	2300      	movs	r3, #0
 800425a:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 800425c:	697b      	ldr	r3, [r7, #20]
 800425e:	2b00      	cmp	r3, #0
 8004260:	d10a      	bne.n	8004278 <xQueueGenericReset+0x110>
        __asm volatile
 8004262:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004266:	f383 8811 	msr	BASEPRI, r3
 800426a:	f3bf 8f6f 	isb	sy
 800426e:	f3bf 8f4f 	dsb	sy
 8004272:	60bb      	str	r3, [r7, #8]
    }
 8004274:	bf00      	nop
 8004276:	e7fe      	b.n	8004276 <xQueueGenericReset+0x10e>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 8004278:	697b      	ldr	r3, [r7, #20]
}
 800427a:	4618      	mov	r0, r3
 800427c:	3718      	adds	r7, #24
 800427e:	46bd      	mov	sp, r7
 8004280:	bd80      	pop	{r7, pc}
 8004282:	bf00      	nop
 8004284:	e000ed04 	.word	0xe000ed04

08004288 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8004288:	b580      	push	{r7, lr}
 800428a:	b08a      	sub	sp, #40	; 0x28
 800428c:	af02      	add	r7, sp, #8
 800428e:	60f8      	str	r0, [r7, #12]
 8004290:	60b9      	str	r1, [r7, #8]
 8004292:	4613      	mov	r3, r2
 8004294:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 8004296:	2300      	movs	r3, #0
 8004298:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	2b00      	cmp	r3, #0
 800429e:	d02e      	beq.n	80042fe <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 80042a0:	2100      	movs	r1, #0
 80042a2:	68ba      	ldr	r2, [r7, #8]
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	fba3 2302 	umull	r2, r3, r3, r2
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d000      	beq.n	80042b0 <xQueueGenericCreate+0x28>
 80042ae:	2101      	movs	r1, #1
 80042b0:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d123      	bne.n	80042fe <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	68ba      	ldr	r2, [r7, #8]
 80042ba:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 80042be:	f113 0f49 	cmn.w	r3, #73	; 0x49
 80042c2:	d81c      	bhi.n	80042fe <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	68ba      	ldr	r2, [r7, #8]
 80042c8:	fb02 f303 	mul.w	r3, r2, r3
 80042cc:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80042ce:	69bb      	ldr	r3, [r7, #24]
 80042d0:	3348      	adds	r3, #72	; 0x48
 80042d2:	4618      	mov	r0, r3
 80042d4:	f002 f84a 	bl	800636c <pvPortMalloc>
 80042d8:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 80042da:	69fb      	ldr	r3, [r7, #28]
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d01c      	beq.n	800431a <xQueueGenericCreate+0x92>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80042e0:	69fb      	ldr	r3, [r7, #28]
 80042e2:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80042e4:	697b      	ldr	r3, [r7, #20]
 80042e6:	3348      	adds	r3, #72	; 0x48
 80042e8:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80042ea:	79fa      	ldrb	r2, [r7, #7]
 80042ec:	69fb      	ldr	r3, [r7, #28]
 80042ee:	9300      	str	r3, [sp, #0]
 80042f0:	4613      	mov	r3, r2
 80042f2:	697a      	ldr	r2, [r7, #20]
 80042f4:	68b9      	ldr	r1, [r7, #8]
 80042f6:	68f8      	ldr	r0, [r7, #12]
 80042f8:	f000 f814 	bl	8004324 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 80042fc:	e00d      	b.n	800431a <xQueueGenericCreate+0x92>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 80042fe:	69fb      	ldr	r3, [r7, #28]
 8004300:	2b00      	cmp	r3, #0
 8004302:	d10a      	bne.n	800431a <xQueueGenericCreate+0x92>
        __asm volatile
 8004304:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004308:	f383 8811 	msr	BASEPRI, r3
 800430c:	f3bf 8f6f 	isb	sy
 8004310:	f3bf 8f4f 	dsb	sy
 8004314:	613b      	str	r3, [r7, #16]
    }
 8004316:	bf00      	nop
 8004318:	e7fe      	b.n	8004318 <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 800431a:	69fb      	ldr	r3, [r7, #28]
    }
 800431c:	4618      	mov	r0, r3
 800431e:	3720      	adds	r7, #32
 8004320:	46bd      	mov	sp, r7
 8004322:	bd80      	pop	{r7, pc}

08004324 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8004324:	b580      	push	{r7, lr}
 8004326:	b084      	sub	sp, #16
 8004328:	af00      	add	r7, sp, #0
 800432a:	60f8      	str	r0, [r7, #12]
 800432c:	60b9      	str	r1, [r7, #8]
 800432e:	607a      	str	r2, [r7, #4]
 8004330:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8004332:	68bb      	ldr	r3, [r7, #8]
 8004334:	2b00      	cmp	r3, #0
 8004336:	d103      	bne.n	8004340 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004338:	69bb      	ldr	r3, [r7, #24]
 800433a:	69ba      	ldr	r2, [r7, #24]
 800433c:	601a      	str	r2, [r3, #0]
 800433e:	e002      	b.n	8004346 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004340:	69bb      	ldr	r3, [r7, #24]
 8004342:	687a      	ldr	r2, [r7, #4]
 8004344:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8004346:	69bb      	ldr	r3, [r7, #24]
 8004348:	68fa      	ldr	r2, [r7, #12]
 800434a:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 800434c:	69bb      	ldr	r3, [r7, #24]
 800434e:	68ba      	ldr	r2, [r7, #8]
 8004350:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004352:	2101      	movs	r1, #1
 8004354:	69b8      	ldr	r0, [r7, #24]
 8004356:	f7ff ff07 	bl	8004168 <xQueueGenericReset>
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 800435a:	bf00      	nop
 800435c:	3710      	adds	r7, #16
 800435e:	46bd      	mov	sp, r7
 8004360:	bd80      	pop	{r7, pc}

08004362 <xQueueGiveFromISR>:
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue,
                              BaseType_t * const pxHigherPriorityTaskWoken )
{
 8004362:	b580      	push	{r7, lr}
 8004364:	b090      	sub	sp, #64	; 0x40
 8004366:	af00      	add	r7, sp, #0
 8004368:	6078      	str	r0, [r7, #4]
 800436a:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	63bb      	str	r3, [r7, #56]	; 0x38
     * item size is 0.  Don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */

    configASSERT( pxQueue );
 8004370:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004372:	2b00      	cmp	r3, #0
 8004374:	d10a      	bne.n	800438c <xQueueGiveFromISR+0x2a>
        __asm volatile
 8004376:	f04f 0350 	mov.w	r3, #80	; 0x50
 800437a:	f383 8811 	msr	BASEPRI, r3
 800437e:	f3bf 8f6f 	isb	sy
 8004382:	f3bf 8f4f 	dsb	sy
 8004386:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8004388:	bf00      	nop
 800438a:	e7fe      	b.n	800438a <xQueueGiveFromISR+0x28>

    /* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
     * if the item size is not 0. */
    configASSERT( pxQueue->uxItemSize == 0 );
 800438c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800438e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004390:	2b00      	cmp	r3, #0
 8004392:	d00a      	beq.n	80043aa <xQueueGiveFromISR+0x48>
        __asm volatile
 8004394:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004398:	f383 8811 	msr	BASEPRI, r3
 800439c:	f3bf 8f6f 	isb	sy
 80043a0:	f3bf 8f4f 	dsb	sy
 80043a4:	623b      	str	r3, [r7, #32]
    }
 80043a6:	bf00      	nop
 80043a8:	e7fe      	b.n	80043a8 <xQueueGiveFromISR+0x46>

    /* Normally a mutex would not be given from an interrupt, especially if
     * there is a mutex holder, as priority inheritance makes no sense for an
     * interrupts, only tasks. */
    configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80043aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d103      	bne.n	80043ba <xQueueGiveFromISR+0x58>
 80043b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043b4:	689b      	ldr	r3, [r3, #8]
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d101      	bne.n	80043be <xQueueGiveFromISR+0x5c>
 80043ba:	2301      	movs	r3, #1
 80043bc:	e000      	b.n	80043c0 <xQueueGiveFromISR+0x5e>
 80043be:	2300      	movs	r3, #0
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d10a      	bne.n	80043da <xQueueGiveFromISR+0x78>
        __asm volatile
 80043c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043c8:	f383 8811 	msr	BASEPRI, r3
 80043cc:	f3bf 8f6f 	isb	sy
 80043d0:	f3bf 8f4f 	dsb	sy
 80043d4:	61fb      	str	r3, [r7, #28]
    }
 80043d6:	bf00      	nop
 80043d8:	e7fe      	b.n	80043d8 <xQueueGiveFromISR+0x76>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80043da:	f001 ff87 	bl	80062ec <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 80043de:	f3ef 8211 	mrs	r2, BASEPRI
 80043e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043e6:	f383 8811 	msr	BASEPRI, r3
 80043ea:	f3bf 8f6f 	isb	sy
 80043ee:	f3bf 8f4f 	dsb	sy
 80043f2:	61ba      	str	r2, [r7, #24]
 80043f4:	617b      	str	r3, [r7, #20]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 80043f6:	69bb      	ldr	r3, [r7, #24]

    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80043f8:	637b      	str	r3, [r7, #52]	; 0x34
    {
        const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80043fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043fe:	633b      	str	r3, [r7, #48]	; 0x30

        /* When the queue is used to implement a semaphore no data is ever
         * moved through the queue but it is still valid to see if the queue 'has
         * space'. */
        if( uxMessagesWaiting < pxQueue->uxLength )
 8004400:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004402:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004404:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004406:	429a      	cmp	r2, r3
 8004408:	d242      	bcs.n	8004490 <xQueueGiveFromISR+0x12e>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 800440a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800440c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004410:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
             * holder - and if there is a mutex holder then the mutex cannot be
             * given from an ISR.  As this is the ISR version of the function it
             * can be assumed there is no mutex holder and no need to determine if
             * priority disinheritance is needed.  Simply increase the count of
             * messages (semaphores) available. */
            pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004414:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004416:	1c5a      	adds	r2, r3, #1
 8004418:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800441a:	639a      	str	r2, [r3, #56]	; 0x38

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 800441c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8004420:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004424:	d112      	bne.n	800444c <xQueueGiveFromISR+0xea>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004426:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800442a:	2b00      	cmp	r3, #0
 800442c:	d02d      	beq.n	800448a <xQueueGiveFromISR+0x128>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800442e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004430:	3324      	adds	r3, #36	; 0x24
 8004432:	4618      	mov	r0, r3
 8004434:	f001 f832 	bl	800549c <xTaskRemoveFromEventList>
 8004438:	4603      	mov	r3, r0
 800443a:	2b00      	cmp	r3, #0
 800443c:	d025      	beq.n	800448a <xQueueGiveFromISR+0x128>
                        {
                            /* The task waiting has a higher priority so record that a
                             * context switch is required. */
                            if( pxHigherPriorityTaskWoken != NULL )
 800443e:	683b      	ldr	r3, [r7, #0]
 8004440:	2b00      	cmp	r3, #0
 8004442:	d022      	beq.n	800448a <xQueueGiveFromISR+0x128>
                            {
                                *pxHigherPriorityTaskWoken = pdTRUE;
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	2201      	movs	r2, #1
 8004448:	601a      	str	r2, [r3, #0]
 800444a:	e01e      	b.n	800448a <xQueueGiveFromISR+0x128>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                prvIncrementQueueTxLock( pxQueue, cTxLock );
 800444c:	f000 fe3e 	bl	80050cc <uxTaskGetNumberOfTasks>
 8004450:	62b8      	str	r0, [r7, #40]	; 0x28
 8004452:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8004456:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004458:	429a      	cmp	r2, r3
 800445a:	d916      	bls.n	800448a <xQueueGiveFromISR+0x128>
 800445c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8004460:	2b7f      	cmp	r3, #127	; 0x7f
 8004462:	d10a      	bne.n	800447a <xQueueGiveFromISR+0x118>
        __asm volatile
 8004464:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004468:	f383 8811 	msr	BASEPRI, r3
 800446c:	f3bf 8f6f 	isb	sy
 8004470:	f3bf 8f4f 	dsb	sy
 8004474:	613b      	str	r3, [r7, #16]
    }
 8004476:	bf00      	nop
 8004478:	e7fe      	b.n	8004478 <xQueueGiveFromISR+0x116>
 800447a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800447e:	3301      	adds	r3, #1
 8004480:	b2db      	uxtb	r3, r3
 8004482:	b25a      	sxtb	r2, r3
 8004484:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004486:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 800448a:	2301      	movs	r3, #1
 800448c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800448e:	e001      	b.n	8004494 <xQueueGiveFromISR+0x132>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 8004490:	2300      	movs	r3, #0
 8004492:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004494:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004496:	60fb      	str	r3, [r7, #12]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 800449e:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 80044a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80044a2:	4618      	mov	r0, r3
 80044a4:	3740      	adds	r7, #64	; 0x40
 80044a6:	46bd      	mov	sp, r7
 80044a8:	bd80      	pop	{r7, pc}
	...

080044ac <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	b08c      	sub	sp, #48	; 0x30
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	60f8      	str	r0, [r7, #12]
 80044b4:	60b9      	str	r1, [r7, #8]
 80044b6:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 80044b8:	2300      	movs	r3, #0
 80044ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 80044c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d10a      	bne.n	80044dc <xQueueReceive+0x30>
        __asm volatile
 80044c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044ca:	f383 8811 	msr	BASEPRI, r3
 80044ce:	f3bf 8f6f 	isb	sy
 80044d2:	f3bf 8f4f 	dsb	sy
 80044d6:	623b      	str	r3, [r7, #32]
    }
 80044d8:	bf00      	nop
 80044da:	e7fe      	b.n	80044da <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80044dc:	68bb      	ldr	r3, [r7, #8]
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d103      	bne.n	80044ea <xQueueReceive+0x3e>
 80044e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d101      	bne.n	80044ee <xQueueReceive+0x42>
 80044ea:	2301      	movs	r3, #1
 80044ec:	e000      	b.n	80044f0 <xQueueReceive+0x44>
 80044ee:	2300      	movs	r3, #0
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d10a      	bne.n	800450a <xQueueReceive+0x5e>
        __asm volatile
 80044f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044f8:	f383 8811 	msr	BASEPRI, r3
 80044fc:	f3bf 8f6f 	isb	sy
 8004500:	f3bf 8f4f 	dsb	sy
 8004504:	61fb      	str	r3, [r7, #28]
    }
 8004506:	bf00      	nop
 8004508:	e7fe      	b.n	8004508 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800450a:	f001 f9c7 	bl	800589c <xTaskGetSchedulerState>
 800450e:	4603      	mov	r3, r0
 8004510:	2b00      	cmp	r3, #0
 8004512:	d102      	bne.n	800451a <xQueueReceive+0x6e>
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2b00      	cmp	r3, #0
 8004518:	d101      	bne.n	800451e <xQueueReceive+0x72>
 800451a:	2301      	movs	r3, #1
 800451c:	e000      	b.n	8004520 <xQueueReceive+0x74>
 800451e:	2300      	movs	r3, #0
 8004520:	2b00      	cmp	r3, #0
 8004522:	d10a      	bne.n	800453a <xQueueReceive+0x8e>
        __asm volatile
 8004524:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004528:	f383 8811 	msr	BASEPRI, r3
 800452c:	f3bf 8f6f 	isb	sy
 8004530:	f3bf 8f4f 	dsb	sy
 8004534:	61bb      	str	r3, [r7, #24]
    }
 8004536:	bf00      	nop
 8004538:	e7fe      	b.n	8004538 <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 800453a:	f001 fdf5 	bl	8006128 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800453e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004540:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004542:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004546:	2b00      	cmp	r3, #0
 8004548:	d01f      	beq.n	800458a <xQueueReceive+0xde>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 800454a:	68b9      	ldr	r1, [r7, #8]
 800454c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800454e:	f000 f88d 	bl	800466c <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004554:	1e5a      	subs	r2, r3, #1
 8004556:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004558:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800455a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800455c:	691b      	ldr	r3, [r3, #16]
 800455e:	2b00      	cmp	r3, #0
 8004560:	d00f      	beq.n	8004582 <xQueueReceive+0xd6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004562:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004564:	3310      	adds	r3, #16
 8004566:	4618      	mov	r0, r3
 8004568:	f000 ff98 	bl	800549c <xTaskRemoveFromEventList>
 800456c:	4603      	mov	r3, r0
 800456e:	2b00      	cmp	r3, #0
 8004570:	d007      	beq.n	8004582 <xQueueReceive+0xd6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8004572:	4b3d      	ldr	r3, [pc, #244]	; (8004668 <xQueueReceive+0x1bc>)
 8004574:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004578:	601a      	str	r2, [r3, #0]
 800457a:	f3bf 8f4f 	dsb	sy
 800457e:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8004582:	f001 fe01 	bl	8006188 <vPortExitCritical>
                return pdPASS;
 8004586:	2301      	movs	r3, #1
 8004588:	e069      	b.n	800465e <xQueueReceive+0x1b2>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	2b00      	cmp	r3, #0
 800458e:	d103      	bne.n	8004598 <xQueueReceive+0xec>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8004590:	f001 fdfa 	bl	8006188 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8004594:	2300      	movs	r3, #0
 8004596:	e062      	b.n	800465e <xQueueReceive+0x1b2>
                }
                else if( xEntryTimeSet == pdFALSE )
 8004598:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800459a:	2b00      	cmp	r3, #0
 800459c:	d106      	bne.n	80045ac <xQueueReceive+0x100>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800459e:	f107 0310 	add.w	r3, r7, #16
 80045a2:	4618      	mov	r0, r3
 80045a4:	f001 f850 	bl	8005648 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80045a8:	2301      	movs	r3, #1
 80045aa:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80045ac:	f001 fdec 	bl	8006188 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80045b0:	f000 fc72 	bl	8004e98 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80045b4:	f001 fdb8 	bl	8006128 <vPortEnterCritical>
 80045b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045ba:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80045be:	b25b      	sxtb	r3, r3
 80045c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045c4:	d103      	bne.n	80045ce <xQueueReceive+0x122>
 80045c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045c8:	2200      	movs	r2, #0
 80045ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80045ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045d0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80045d4:	b25b      	sxtb	r3, r3
 80045d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045da:	d103      	bne.n	80045e4 <xQueueReceive+0x138>
 80045dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045de:	2200      	movs	r2, #0
 80045e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80045e4:	f001 fdd0 	bl	8006188 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80045e8:	1d3a      	adds	r2, r7, #4
 80045ea:	f107 0310 	add.w	r3, r7, #16
 80045ee:	4611      	mov	r1, r2
 80045f0:	4618      	mov	r0, r3
 80045f2:	f001 f83f 	bl	8005674 <xTaskCheckForTimeOut>
 80045f6:	4603      	mov	r3, r0
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d123      	bne.n	8004644 <xQueueReceive+0x198>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80045fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80045fe:	f000 f8ad 	bl	800475c <prvIsQueueEmpty>
 8004602:	4603      	mov	r3, r0
 8004604:	2b00      	cmp	r3, #0
 8004606:	d017      	beq.n	8004638 <xQueueReceive+0x18c>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004608:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800460a:	3324      	adds	r3, #36	; 0x24
 800460c:	687a      	ldr	r2, [r7, #4]
 800460e:	4611      	mov	r1, r2
 8004610:	4618      	mov	r0, r3
 8004612:	f000 fed9 	bl	80053c8 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8004616:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004618:	f000 f84e 	bl	80046b8 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 800461c:	f000 fc4a 	bl	8004eb4 <xTaskResumeAll>
 8004620:	4603      	mov	r3, r0
 8004622:	2b00      	cmp	r3, #0
 8004624:	d189      	bne.n	800453a <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 8004626:	4b10      	ldr	r3, [pc, #64]	; (8004668 <xQueueReceive+0x1bc>)
 8004628:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800462c:	601a      	str	r2, [r3, #0]
 800462e:	f3bf 8f4f 	dsb	sy
 8004632:	f3bf 8f6f 	isb	sy
 8004636:	e780      	b.n	800453a <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8004638:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800463a:	f000 f83d 	bl	80046b8 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800463e:	f000 fc39 	bl	8004eb4 <xTaskResumeAll>
 8004642:	e77a      	b.n	800453a <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8004644:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004646:	f000 f837 	bl	80046b8 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800464a:	f000 fc33 	bl	8004eb4 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800464e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004650:	f000 f884 	bl	800475c <prvIsQueueEmpty>
 8004654:	4603      	mov	r3, r0
 8004656:	2b00      	cmp	r3, #0
 8004658:	f43f af6f 	beq.w	800453a <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 800465c:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 800465e:	4618      	mov	r0, r3
 8004660:	3730      	adds	r7, #48	; 0x30
 8004662:	46bd      	mov	sp, r7
 8004664:	bd80      	pop	{r7, pc}
 8004666:	bf00      	nop
 8004668:	e000ed04 	.word	0xe000ed04

0800466c <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 800466c:	b580      	push	{r7, lr}
 800466e:	b082      	sub	sp, #8
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]
 8004674:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800467a:	2b00      	cmp	r3, #0
 800467c:	d018      	beq.n	80046b0 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	68da      	ldr	r2, [r3, #12]
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004686:	441a      	add	r2, r3
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	68da      	ldr	r2, [r3, #12]
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	689b      	ldr	r3, [r3, #8]
 8004694:	429a      	cmp	r2, r3
 8004696:	d303      	bcc.n	80046a0 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681a      	ldr	r2, [r3, #0]
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	68d9      	ldr	r1, [r3, #12]
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046a8:	461a      	mov	r2, r3
 80046aa:	6838      	ldr	r0, [r7, #0]
 80046ac:	f002 f856 	bl	800675c <memcpy>
    }
}
 80046b0:	bf00      	nop
 80046b2:	3708      	adds	r7, #8
 80046b4:	46bd      	mov	sp, r7
 80046b6:	bd80      	pop	{r7, pc}

080046b8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80046b8:	b580      	push	{r7, lr}
 80046ba:	b084      	sub	sp, #16
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 80046c0:	f001 fd32 	bl	8006128 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80046ca:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80046cc:	e011      	b.n	80046f2 <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d012      	beq.n	80046fc <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	3324      	adds	r3, #36	; 0x24
 80046da:	4618      	mov	r0, r3
 80046dc:	f000 fede 	bl	800549c <xTaskRemoveFromEventList>
 80046e0:	4603      	mov	r3, r0
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d001      	beq.n	80046ea <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 80046e6:	f001 f82b 	bl	8005740 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 80046ea:	7bfb      	ldrb	r3, [r7, #15]
 80046ec:	3b01      	subs	r3, #1
 80046ee:	b2db      	uxtb	r3, r3
 80046f0:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80046f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	dce9      	bgt.n	80046ce <prvUnlockQueue+0x16>
 80046fa:	e000      	b.n	80046fe <prvUnlockQueue+0x46>
                    break;
 80046fc:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	22ff      	movs	r2, #255	; 0xff
 8004702:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8004706:	f001 fd3f 	bl	8006188 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 800470a:	f001 fd0d 	bl	8006128 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004714:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8004716:	e011      	b.n	800473c <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	691b      	ldr	r3, [r3, #16]
 800471c:	2b00      	cmp	r3, #0
 800471e:	d012      	beq.n	8004746 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	3310      	adds	r3, #16
 8004724:	4618      	mov	r0, r3
 8004726:	f000 feb9 	bl	800549c <xTaskRemoveFromEventList>
 800472a:	4603      	mov	r3, r0
 800472c:	2b00      	cmp	r3, #0
 800472e:	d001      	beq.n	8004734 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8004730:	f001 f806 	bl	8005740 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8004734:	7bbb      	ldrb	r3, [r7, #14]
 8004736:	3b01      	subs	r3, #1
 8004738:	b2db      	uxtb	r3, r3
 800473a:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 800473c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004740:	2b00      	cmp	r3, #0
 8004742:	dce9      	bgt.n	8004718 <prvUnlockQueue+0x60>
 8004744:	e000      	b.n	8004748 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8004746:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	22ff      	movs	r2, #255	; 0xff
 800474c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8004750:	f001 fd1a 	bl	8006188 <vPortExitCritical>
}
 8004754:	bf00      	nop
 8004756:	3710      	adds	r7, #16
 8004758:	46bd      	mov	sp, r7
 800475a:	bd80      	pop	{r7, pc}

0800475c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 800475c:	b580      	push	{r7, lr}
 800475e:	b084      	sub	sp, #16
 8004760:	af00      	add	r7, sp, #0
 8004762:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8004764:	f001 fce0 	bl	8006128 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800476c:	2b00      	cmp	r3, #0
 800476e:	d102      	bne.n	8004776 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8004770:	2301      	movs	r3, #1
 8004772:	60fb      	str	r3, [r7, #12]
 8004774:	e001      	b.n	800477a <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8004776:	2300      	movs	r3, #0
 8004778:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 800477a:	f001 fd05 	bl	8006188 <vPortExitCritical>

    return xReturn;
 800477e:	68fb      	ldr	r3, [r7, #12]
}
 8004780:	4618      	mov	r0, r3
 8004782:	3710      	adds	r7, #16
 8004784:	46bd      	mov	sp, r7
 8004786:	bd80      	pop	{r7, pc}

08004788 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8004788:	b580      	push	{r7, lr}
 800478a:	b086      	sub	sp, #24
 800478c:	af00      	add	r7, sp, #0
 800478e:	60f8      	str	r0, [r7, #12]
 8004790:	60b9      	str	r1, [r7, #8]
 8004792:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8004798:	f001 fcc6 	bl	8006128 <vPortEnterCritical>
 800479c:	697b      	ldr	r3, [r7, #20]
 800479e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80047a2:	b25b      	sxtb	r3, r3
 80047a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047a8:	d103      	bne.n	80047b2 <vQueueWaitForMessageRestricted+0x2a>
 80047aa:	697b      	ldr	r3, [r7, #20]
 80047ac:	2200      	movs	r2, #0
 80047ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80047b2:	697b      	ldr	r3, [r7, #20]
 80047b4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80047b8:	b25b      	sxtb	r3, r3
 80047ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047be:	d103      	bne.n	80047c8 <vQueueWaitForMessageRestricted+0x40>
 80047c0:	697b      	ldr	r3, [r7, #20]
 80047c2:	2200      	movs	r2, #0
 80047c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80047c8:	f001 fcde 	bl	8006188 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80047cc:	697b      	ldr	r3, [r7, #20]
 80047ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d106      	bne.n	80047e2 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80047d4:	697b      	ldr	r3, [r7, #20]
 80047d6:	3324      	adds	r3, #36	; 0x24
 80047d8:	687a      	ldr	r2, [r7, #4]
 80047da:	68b9      	ldr	r1, [r7, #8]
 80047dc:	4618      	mov	r0, r3
 80047de:	f000 fe17 	bl	8005410 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 80047e2:	6978      	ldr	r0, [r7, #20]
 80047e4:	f7ff ff68 	bl	80046b8 <prvUnlockQueue>
    }
 80047e8:	bf00      	nop
 80047ea:	3718      	adds	r7, #24
 80047ec:	46bd      	mov	sp, r7
 80047ee:	bd80      	pop	{r7, pc}

080047f0 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 80047f0:	b580      	push	{r7, lr}
 80047f2:	b08c      	sub	sp, #48	; 0x30
 80047f4:	af04      	add	r7, sp, #16
 80047f6:	60f8      	str	r0, [r7, #12]
 80047f8:	60b9      	str	r1, [r7, #8]
 80047fa:	603b      	str	r3, [r7, #0]
 80047fc:	4613      	mov	r3, r2
 80047fe:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004800:	88fb      	ldrh	r3, [r7, #6]
 8004802:	009b      	lsls	r3, r3, #2
 8004804:	4618      	mov	r0, r3
 8004806:	f001 fdb1 	bl	800636c <pvPortMalloc>
 800480a:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 800480c:	697b      	ldr	r3, [r7, #20]
 800480e:	2b00      	cmp	r3, #0
 8004810:	d013      	beq.n	800483a <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004812:	2050      	movs	r0, #80	; 0x50
 8004814:	f001 fdaa 	bl	800636c <pvPortMalloc>
 8004818:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 800481a:	69fb      	ldr	r3, [r7, #28]
 800481c:	2b00      	cmp	r3, #0
 800481e:	d008      	beq.n	8004832 <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8004820:	2250      	movs	r2, #80	; 0x50
 8004822:	2100      	movs	r1, #0
 8004824:	69f8      	ldr	r0, [r7, #28]
 8004826:	f001 ff6d 	bl	8006704 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 800482a:	69fb      	ldr	r3, [r7, #28]
 800482c:	697a      	ldr	r2, [r7, #20]
 800482e:	631a      	str	r2, [r3, #48]	; 0x30
 8004830:	e005      	b.n	800483e <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 8004832:	6978      	ldr	r0, [r7, #20]
 8004834:	f001 fe54 	bl	80064e0 <vPortFree>
 8004838:	e001      	b.n	800483e <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 800483a:	2300      	movs	r3, #0
 800483c:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 800483e:	69fb      	ldr	r3, [r7, #28]
 8004840:	2b00      	cmp	r3, #0
 8004842:	d013      	beq.n	800486c <xTaskCreate+0x7c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004844:	88fa      	ldrh	r2, [r7, #6]
 8004846:	2300      	movs	r3, #0
 8004848:	9303      	str	r3, [sp, #12]
 800484a:	69fb      	ldr	r3, [r7, #28]
 800484c:	9302      	str	r3, [sp, #8]
 800484e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004850:	9301      	str	r3, [sp, #4]
 8004852:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004854:	9300      	str	r3, [sp, #0]
 8004856:	683b      	ldr	r3, [r7, #0]
 8004858:	68b9      	ldr	r1, [r7, #8]
 800485a:	68f8      	ldr	r0, [r7, #12]
 800485c:	f000 f80e 	bl	800487c <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8004860:	69f8      	ldr	r0, [r7, #28]
 8004862:	f000 f891 	bl	8004988 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8004866:	2301      	movs	r3, #1
 8004868:	61bb      	str	r3, [r7, #24]
 800486a:	e002      	b.n	8004872 <xTaskCreate+0x82>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800486c:	f04f 33ff 	mov.w	r3, #4294967295
 8004870:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8004872:	69bb      	ldr	r3, [r7, #24]
    }
 8004874:	4618      	mov	r0, r3
 8004876:	3720      	adds	r7, #32
 8004878:	46bd      	mov	sp, r7
 800487a:	bd80      	pop	{r7, pc}

0800487c <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 800487c:	b580      	push	{r7, lr}
 800487e:	b088      	sub	sp, #32
 8004880:	af00      	add	r7, sp, #0
 8004882:	60f8      	str	r0, [r7, #12]
 8004884:	60b9      	str	r1, [r7, #8]
 8004886:	607a      	str	r2, [r7, #4]
 8004888:	603b      	str	r3, [r7, #0]
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800488a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800488c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004894:	3b01      	subs	r3, #1
 8004896:	009b      	lsls	r3, r3, #2
 8004898:	4413      	add	r3, r2
 800489a:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800489c:	69bb      	ldr	r3, [r7, #24]
 800489e:	f023 0307 	bic.w	r3, r3, #7
 80048a2:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80048a4:	69bb      	ldr	r3, [r7, #24]
 80048a6:	f003 0307 	and.w	r3, r3, #7
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d00a      	beq.n	80048c4 <prvInitialiseNewTask+0x48>
        __asm volatile
 80048ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048b2:	f383 8811 	msr	BASEPRI, r3
 80048b6:	f3bf 8f6f 	isb	sy
 80048ba:	f3bf 8f4f 	dsb	sy
 80048be:	617b      	str	r3, [r7, #20]
    }
 80048c0:	bf00      	nop
 80048c2:	e7fe      	b.n	80048c2 <prvInitialiseNewTask+0x46>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 80048c4:	68bb      	ldr	r3, [r7, #8]
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d01e      	beq.n	8004908 <prvInitialiseNewTask+0x8c>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80048ca:	2300      	movs	r3, #0
 80048cc:	61fb      	str	r3, [r7, #28]
 80048ce:	e012      	b.n	80048f6 <prvInitialiseNewTask+0x7a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80048d0:	68ba      	ldr	r2, [r7, #8]
 80048d2:	69fb      	ldr	r3, [r7, #28]
 80048d4:	4413      	add	r3, r2
 80048d6:	7819      	ldrb	r1, [r3, #0]
 80048d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80048da:	69fb      	ldr	r3, [r7, #28]
 80048dc:	4413      	add	r3, r2
 80048de:	3334      	adds	r3, #52	; 0x34
 80048e0:	460a      	mov	r2, r1
 80048e2:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 80048e4:	68ba      	ldr	r2, [r7, #8]
 80048e6:	69fb      	ldr	r3, [r7, #28]
 80048e8:	4413      	add	r3, r2
 80048ea:	781b      	ldrb	r3, [r3, #0]
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d006      	beq.n	80048fe <prvInitialiseNewTask+0x82>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80048f0:	69fb      	ldr	r3, [r7, #28]
 80048f2:	3301      	adds	r3, #1
 80048f4:	61fb      	str	r3, [r7, #28]
 80048f6:	69fb      	ldr	r3, [r7, #28]
 80048f8:	2b09      	cmp	r3, #9
 80048fa:	d9e9      	bls.n	80048d0 <prvInitialiseNewTask+0x54>
 80048fc:	e000      	b.n	8004900 <prvInitialiseNewTask+0x84>
            {
                break;
 80048fe:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004900:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004902:	2200      	movs	r2, #0
 8004904:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8004908:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800490a:	2b04      	cmp	r3, #4
 800490c:	d90a      	bls.n	8004924 <prvInitialiseNewTask+0xa8>
        __asm volatile
 800490e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004912:	f383 8811 	msr	BASEPRI, r3
 8004916:	f3bf 8f6f 	isb	sy
 800491a:	f3bf 8f4f 	dsb	sy
 800491e:	613b      	str	r3, [r7, #16]
    }
 8004920:	bf00      	nop
 8004922:	e7fe      	b.n	8004922 <prvInitialiseNewTask+0xa6>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004924:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004926:	2b04      	cmp	r3, #4
 8004928:	d901      	bls.n	800492e <prvInitialiseNewTask+0xb2>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800492a:	2304      	movs	r3, #4
 800492c:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 800492e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004930:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004932:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8004934:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004936:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004938:	641a      	str	r2, [r3, #64]	; 0x40
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800493a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800493c:	3304      	adds	r3, #4
 800493e:	4618      	mov	r0, r3
 8004940:	f7ff fb7e 	bl	8004040 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004944:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004946:	3318      	adds	r3, #24
 8004948:	4618      	mov	r0, r3
 800494a:	f7ff fb79 	bl	8004040 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800494e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004950:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004952:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004954:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004956:	f1c3 0205 	rsb	r2, r3, #5
 800495a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800495c:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800495e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004960:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004962:	625a      	str	r2, [r3, #36]	; 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004964:	683a      	ldr	r2, [r7, #0]
 8004966:	68f9      	ldr	r1, [r7, #12]
 8004968:	69b8      	ldr	r0, [r7, #24]
 800496a:	f001 faad 	bl	8005ec8 <pxPortInitialiseStack>
 800496e:	4602      	mov	r2, r0
 8004970:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004972:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8004974:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004976:	2b00      	cmp	r3, #0
 8004978:	d002      	beq.n	8004980 <prvInitialiseNewTask+0x104>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800497a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800497c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800497e:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8004980:	bf00      	nop
 8004982:	3720      	adds	r7, #32
 8004984:	46bd      	mov	sp, r7
 8004986:	bd80      	pop	{r7, pc}

08004988 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8004988:	b580      	push	{r7, lr}
 800498a:	b084      	sub	sp, #16
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8004990:	f001 fbca 	bl	8006128 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8004994:	4b3e      	ldr	r3, [pc, #248]	; (8004a90 <prvAddNewTaskToReadyList+0x108>)
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	3301      	adds	r3, #1
 800499a:	4a3d      	ldr	r2, [pc, #244]	; (8004a90 <prvAddNewTaskToReadyList+0x108>)
 800499c:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 800499e:	4b3d      	ldr	r3, [pc, #244]	; (8004a94 <prvAddNewTaskToReadyList+0x10c>)
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d109      	bne.n	80049ba <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 80049a6:	4a3b      	ldr	r2, [pc, #236]	; (8004a94 <prvAddNewTaskToReadyList+0x10c>)
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80049ac:	4b38      	ldr	r3, [pc, #224]	; (8004a90 <prvAddNewTaskToReadyList+0x108>)
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	2b01      	cmp	r3, #1
 80049b2:	d110      	bne.n	80049d6 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 80049b4:	f000 fed8 	bl	8005768 <prvInitialiseTaskLists>
 80049b8:	e00d      	b.n	80049d6 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 80049ba:	4b37      	ldr	r3, [pc, #220]	; (8004a98 <prvAddNewTaskToReadyList+0x110>)
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d109      	bne.n	80049d6 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80049c2:	4b34      	ldr	r3, [pc, #208]	; (8004a94 <prvAddNewTaskToReadyList+0x10c>)
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049cc:	429a      	cmp	r2, r3
 80049ce:	d802      	bhi.n	80049d6 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 80049d0:	4a30      	ldr	r2, [pc, #192]	; (8004a94 <prvAddNewTaskToReadyList+0x10c>)
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 80049d6:	4b31      	ldr	r3, [pc, #196]	; (8004a9c <prvAddNewTaskToReadyList+0x114>)
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	3301      	adds	r3, #1
 80049dc:	4a2f      	ldr	r2, [pc, #188]	; (8004a9c <prvAddNewTaskToReadyList+0x114>)
 80049de:	6013      	str	r3, [r2, #0]
            pxNewTCB->uxTCBNumber = uxTaskNumber;
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049e4:	2201      	movs	r2, #1
 80049e6:	409a      	lsls	r2, r3
 80049e8:	4b2d      	ldr	r3, [pc, #180]	; (8004aa0 <prvAddNewTaskToReadyList+0x118>)
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	4313      	orrs	r3, r2
 80049ee:	4a2c      	ldr	r2, [pc, #176]	; (8004aa0 <prvAddNewTaskToReadyList+0x118>)
 80049f0:	6013      	str	r3, [r2, #0]
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049f6:	492b      	ldr	r1, [pc, #172]	; (8004aa4 <prvAddNewTaskToReadyList+0x11c>)
 80049f8:	4613      	mov	r3, r2
 80049fa:	009b      	lsls	r3, r3, #2
 80049fc:	4413      	add	r3, r2
 80049fe:	009b      	lsls	r3, r3, #2
 8004a00:	440b      	add	r3, r1
 8004a02:	3304      	adds	r3, #4
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	60fb      	str	r3, [r7, #12]
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	68fa      	ldr	r2, [r7, #12]
 8004a0c:	609a      	str	r2, [r3, #8]
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	689a      	ldr	r2, [r3, #8]
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	60da      	str	r2, [r3, #12]
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	689b      	ldr	r3, [r3, #8]
 8004a1a:	687a      	ldr	r2, [r7, #4]
 8004a1c:	3204      	adds	r2, #4
 8004a1e:	605a      	str	r2, [r3, #4]
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	1d1a      	adds	r2, r3, #4
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	609a      	str	r2, [r3, #8]
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a2c:	4613      	mov	r3, r2
 8004a2e:	009b      	lsls	r3, r3, #2
 8004a30:	4413      	add	r3, r2
 8004a32:	009b      	lsls	r3, r3, #2
 8004a34:	4a1b      	ldr	r2, [pc, #108]	; (8004aa4 <prvAddNewTaskToReadyList+0x11c>)
 8004a36:	441a      	add	r2, r3
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	615a      	str	r2, [r3, #20]
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a40:	4918      	ldr	r1, [pc, #96]	; (8004aa4 <prvAddNewTaskToReadyList+0x11c>)
 8004a42:	4613      	mov	r3, r2
 8004a44:	009b      	lsls	r3, r3, #2
 8004a46:	4413      	add	r3, r2
 8004a48:	009b      	lsls	r3, r3, #2
 8004a4a:	440b      	add	r3, r1
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	1c59      	adds	r1, r3, #1
 8004a50:	4814      	ldr	r0, [pc, #80]	; (8004aa4 <prvAddNewTaskToReadyList+0x11c>)
 8004a52:	4613      	mov	r3, r2
 8004a54:	009b      	lsls	r3, r3, #2
 8004a56:	4413      	add	r3, r2
 8004a58:	009b      	lsls	r3, r3, #2
 8004a5a:	4403      	add	r3, r0
 8004a5c:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8004a5e:	f001 fb93 	bl	8006188 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8004a62:	4b0d      	ldr	r3, [pc, #52]	; (8004a98 <prvAddNewTaskToReadyList+0x110>)
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d00e      	beq.n	8004a88 <prvAddNewTaskToReadyList+0x100>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004a6a:	4b0a      	ldr	r3, [pc, #40]	; (8004a94 <prvAddNewTaskToReadyList+0x10c>)
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a74:	429a      	cmp	r2, r3
 8004a76:	d207      	bcs.n	8004a88 <prvAddNewTaskToReadyList+0x100>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8004a78:	4b0b      	ldr	r3, [pc, #44]	; (8004aa8 <prvAddNewTaskToReadyList+0x120>)
 8004a7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a7e:	601a      	str	r2, [r3, #0]
 8004a80:	f3bf 8f4f 	dsb	sy
 8004a84:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8004a88:	bf00      	nop
 8004a8a:	3710      	adds	r7, #16
 8004a8c:	46bd      	mov	sp, r7
 8004a8e:	bd80      	pop	{r7, pc}
 8004a90:	20000244 	.word	0x20000244
 8004a94:	2000016c 	.word	0x2000016c
 8004a98:	20000250 	.word	0x20000250
 8004a9c:	20000260 	.word	0x20000260
 8004aa0:	2000024c 	.word	0x2000024c
 8004aa4:	20000170 	.word	0x20000170
 8004aa8:	e000ed04 	.word	0xe000ed04

08004aac <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8004aac:	b580      	push	{r7, lr}
 8004aae:	b084      	sub	sp, #16
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8004ab4:	2300      	movs	r3, #0
 8004ab6:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d017      	beq.n	8004aee <vTaskDelay+0x42>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 8004abe:	4b13      	ldr	r3, [pc, #76]	; (8004b0c <vTaskDelay+0x60>)
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d00a      	beq.n	8004adc <vTaskDelay+0x30>
        __asm volatile
 8004ac6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004aca:	f383 8811 	msr	BASEPRI, r3
 8004ace:	f3bf 8f6f 	isb	sy
 8004ad2:	f3bf 8f4f 	dsb	sy
 8004ad6:	60bb      	str	r3, [r7, #8]
    }
 8004ad8:	bf00      	nop
 8004ada:	e7fe      	b.n	8004ada <vTaskDelay+0x2e>
            vTaskSuspendAll();
 8004adc:	f000 f9dc 	bl	8004e98 <vTaskSuspendAll>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004ae0:	2100      	movs	r1, #0
 8004ae2:	6878      	ldr	r0, [r7, #4]
 8004ae4:	f000 fef8 	bl	80058d8 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8004ae8:	f000 f9e4 	bl	8004eb4 <xTaskResumeAll>
 8004aec:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d107      	bne.n	8004b04 <vTaskDelay+0x58>
        {
            portYIELD_WITHIN_API();
 8004af4:	4b06      	ldr	r3, [pc, #24]	; (8004b10 <vTaskDelay+0x64>)
 8004af6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004afa:	601a      	str	r2, [r3, #0]
 8004afc:	f3bf 8f4f 	dsb	sy
 8004b00:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8004b04:	bf00      	nop
 8004b06:	3710      	adds	r7, #16
 8004b08:	46bd      	mov	sp, r7
 8004b0a:	bd80      	pop	{r7, pc}
 8004b0c:	2000026c 	.word	0x2000026c
 8004b10:	e000ed04 	.word	0xe000ed04

08004b14 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

    void vTaskSuspend( TaskHandle_t xTaskToSuspend )
    {
 8004b14:	b580      	push	{r7, lr}
 8004b16:	b086      	sub	sp, #24
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	6078      	str	r0, [r7, #4]
        TCB_t * pxTCB;

        taskENTER_CRITICAL();
 8004b1c:	f001 fb04 	bl	8006128 <vPortEnterCritical>
        {
            /* If null is passed in here then it is the running task that is
             * being suspended. */
            pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d102      	bne.n	8004b2c <vTaskSuspend+0x18>
 8004b26:	4b43      	ldr	r3, [pc, #268]	; (8004c34 <vTaskSuspend+0x120>)
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	e000      	b.n	8004b2e <vTaskSuspend+0x1a>
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	613b      	str	r3, [r7, #16]

            traceTASK_SUSPEND( pxTCB );

            /* Remove task from the ready/delayed list and place in the
             * suspended list. */
            if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004b30:	693b      	ldr	r3, [r7, #16]
 8004b32:	3304      	adds	r3, #4
 8004b34:	4618      	mov	r0, r3
 8004b36:	f7ff faed 	bl	8004114 <uxListRemove>
 8004b3a:	4603      	mov	r3, r0
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d115      	bne.n	8004b6c <vTaskSuspend+0x58>
            {
                taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8004b40:	693b      	ldr	r3, [r7, #16]
 8004b42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b44:	493c      	ldr	r1, [pc, #240]	; (8004c38 <vTaskSuspend+0x124>)
 8004b46:	4613      	mov	r3, r2
 8004b48:	009b      	lsls	r3, r3, #2
 8004b4a:	4413      	add	r3, r2
 8004b4c:	009b      	lsls	r3, r3, #2
 8004b4e:	440b      	add	r3, r1
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d10a      	bne.n	8004b6c <vTaskSuspend+0x58>
 8004b56:	693b      	ldr	r3, [r7, #16]
 8004b58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b5a:	2201      	movs	r2, #1
 8004b5c:	fa02 f303 	lsl.w	r3, r2, r3
 8004b60:	43da      	mvns	r2, r3
 8004b62:	4b36      	ldr	r3, [pc, #216]	; (8004c3c <vTaskSuspend+0x128>)
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	4013      	ands	r3, r2
 8004b68:	4a34      	ldr	r2, [pc, #208]	; (8004c3c <vTaskSuspend+0x128>)
 8004b6a:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }

            /* Is the task waiting on an event also? */
            if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004b6c:	693b      	ldr	r3, [r7, #16]
 8004b6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d004      	beq.n	8004b7e <vTaskSuspend+0x6a>
            {
                ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004b74:	693b      	ldr	r3, [r7, #16]
 8004b76:	3318      	adds	r3, #24
 8004b78:	4618      	mov	r0, r3
 8004b7a:	f7ff facb 	bl	8004114 <uxListRemove>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }

            vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8004b7e:	693b      	ldr	r3, [r7, #16]
 8004b80:	3304      	adds	r3, #4
 8004b82:	4619      	mov	r1, r3
 8004b84:	482e      	ldr	r0, [pc, #184]	; (8004c40 <vTaskSuspend+0x12c>)
 8004b86:	f7ff fa68 	bl	800405a <vListInsertEnd>

            #if ( configUSE_TASK_NOTIFICATIONS == 1 )
            {
                BaseType_t x;

                for( x = 0; x < configTASK_NOTIFICATION_ARRAY_ENTRIES; x++ )
 8004b8a:	2300      	movs	r3, #0
 8004b8c:	617b      	str	r3, [r7, #20]
 8004b8e:	e010      	b.n	8004bb2 <vTaskSuspend+0x9e>
                {
                    if( pxTCB->ucNotifyState[ x ] == taskWAITING_NOTIFICATION )
 8004b90:	693a      	ldr	r2, [r7, #16]
 8004b92:	697b      	ldr	r3, [r7, #20]
 8004b94:	4413      	add	r3, r2
 8004b96:	334c      	adds	r3, #76	; 0x4c
 8004b98:	781b      	ldrb	r3, [r3, #0]
 8004b9a:	b2db      	uxtb	r3, r3
 8004b9c:	2b01      	cmp	r3, #1
 8004b9e:	d105      	bne.n	8004bac <vTaskSuspend+0x98>
                    {
                        /* The task was blocked to wait for a notification, but is
                         * now suspended, so no notification was received. */
                        pxTCB->ucNotifyState[ x ] = taskNOT_WAITING_NOTIFICATION;
 8004ba0:	693a      	ldr	r2, [r7, #16]
 8004ba2:	697b      	ldr	r3, [r7, #20]
 8004ba4:	4413      	add	r3, r2
 8004ba6:	334c      	adds	r3, #76	; 0x4c
 8004ba8:	2200      	movs	r2, #0
 8004baa:	701a      	strb	r2, [r3, #0]
                for( x = 0; x < configTASK_NOTIFICATION_ARRAY_ENTRIES; x++ )
 8004bac:	697b      	ldr	r3, [r7, #20]
 8004bae:	3301      	adds	r3, #1
 8004bb0:	617b      	str	r3, [r7, #20]
 8004bb2:	697b      	ldr	r3, [r7, #20]
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	ddeb      	ble.n	8004b90 <vTaskSuspend+0x7c>
                    }
                }
            }
            #endif /* if ( configUSE_TASK_NOTIFICATIONS == 1 ) */
        }
        taskEXIT_CRITICAL();
 8004bb8:	f001 fae6 	bl	8006188 <vPortExitCritical>

        if( xSchedulerRunning != pdFALSE )
 8004bbc:	4b21      	ldr	r3, [pc, #132]	; (8004c44 <vTaskSuspend+0x130>)
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d005      	beq.n	8004bd0 <vTaskSuspend+0xbc>
        {
            /* Reset the next expected unblock time in case it referred to the
             * task that is now in the Suspended state. */
            taskENTER_CRITICAL();
 8004bc4:	f001 fab0 	bl	8006128 <vPortEnterCritical>
            {
                prvResetNextTaskUnblockTime();
 8004bc8:	f000 fe4c 	bl	8005864 <prvResetNextTaskUnblockTime>
            }
            taskEXIT_CRITICAL();
 8004bcc:	f001 fadc 	bl	8006188 <vPortExitCritical>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( pxTCB == pxCurrentTCB )
 8004bd0:	4b18      	ldr	r3, [pc, #96]	; (8004c34 <vTaskSuspend+0x120>)
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	693a      	ldr	r2, [r7, #16]
 8004bd6:	429a      	cmp	r2, r3
 8004bd8:	d127      	bne.n	8004c2a <vTaskSuspend+0x116>
        {
            if( xSchedulerRunning != pdFALSE )
 8004bda:	4b1a      	ldr	r3, [pc, #104]	; (8004c44 <vTaskSuspend+0x130>)
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d017      	beq.n	8004c12 <vTaskSuspend+0xfe>
            {
                /* The current task has just been suspended. */
                configASSERT( uxSchedulerSuspended == 0 );
 8004be2:	4b19      	ldr	r3, [pc, #100]	; (8004c48 <vTaskSuspend+0x134>)
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d00a      	beq.n	8004c00 <vTaskSuspend+0xec>
        __asm volatile
 8004bea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bee:	f383 8811 	msr	BASEPRI, r3
 8004bf2:	f3bf 8f6f 	isb	sy
 8004bf6:	f3bf 8f4f 	dsb	sy
 8004bfa:	60fb      	str	r3, [r7, #12]
    }
 8004bfc:	bf00      	nop
 8004bfe:	e7fe      	b.n	8004bfe <vTaskSuspend+0xea>
                portYIELD_WITHIN_API();
 8004c00:	4b12      	ldr	r3, [pc, #72]	; (8004c4c <vTaskSuspend+0x138>)
 8004c02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c06:	601a      	str	r2, [r3, #0]
 8004c08:	f3bf 8f4f 	dsb	sy
 8004c0c:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8004c10:	e00b      	b.n	8004c2a <vTaskSuspend+0x116>
                if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 8004c12:	4b0b      	ldr	r3, [pc, #44]	; (8004c40 <vTaskSuspend+0x12c>)
 8004c14:	681a      	ldr	r2, [r3, #0]
 8004c16:	4b0e      	ldr	r3, [pc, #56]	; (8004c50 <vTaskSuspend+0x13c>)
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	429a      	cmp	r2, r3
 8004c1c:	d103      	bne.n	8004c26 <vTaskSuspend+0x112>
                    pxCurrentTCB = NULL;
 8004c1e:	4b05      	ldr	r3, [pc, #20]	; (8004c34 <vTaskSuspend+0x120>)
 8004c20:	2200      	movs	r2, #0
 8004c22:	601a      	str	r2, [r3, #0]
    }
 8004c24:	e001      	b.n	8004c2a <vTaskSuspend+0x116>
                    vTaskSwitchContext();
 8004c26:	f000 fb73 	bl	8005310 <vTaskSwitchContext>
    }
 8004c2a:	bf00      	nop
 8004c2c:	3718      	adds	r7, #24
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	bd80      	pop	{r7, pc}
 8004c32:	bf00      	nop
 8004c34:	2000016c 	.word	0x2000016c
 8004c38:	20000170 	.word	0x20000170
 8004c3c:	2000024c 	.word	0x2000024c
 8004c40:	20000230 	.word	0x20000230
 8004c44:	20000250 	.word	0x20000250
 8004c48:	2000026c 	.word	0x2000026c
 8004c4c:	e000ed04 	.word	0xe000ed04
 8004c50:	20000244 	.word	0x20000244

08004c54 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

    static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
    {
 8004c54:	b480      	push	{r7}
 8004c56:	b087      	sub	sp, #28
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	6078      	str	r0, [r7, #4]
        BaseType_t xReturn = pdFALSE;
 8004c5c:	2300      	movs	r3, #0
 8004c5e:	617b      	str	r3, [r7, #20]
        const TCB_t * const pxTCB = xTask;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	613b      	str	r3, [r7, #16]

        /* Accesses xPendingReadyList so must be called from a critical
         * section. */

        /* It does not make sense to check if the calling task is suspended. */
        configASSERT( xTask );
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d10a      	bne.n	8004c80 <prvTaskIsTaskSuspended+0x2c>
        __asm volatile
 8004c6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c6e:	f383 8811 	msr	BASEPRI, r3
 8004c72:	f3bf 8f6f 	isb	sy
 8004c76:	f3bf 8f4f 	dsb	sy
 8004c7a:	60fb      	str	r3, [r7, #12]
    }
 8004c7c:	bf00      	nop
 8004c7e:	e7fe      	b.n	8004c7e <prvTaskIsTaskSuspended+0x2a>

        /* Is the task being resumed actually in the suspended list? */
        if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8004c80:	693b      	ldr	r3, [r7, #16]
 8004c82:	695b      	ldr	r3, [r3, #20]
 8004c84:	4a0a      	ldr	r2, [pc, #40]	; (8004cb0 <prvTaskIsTaskSuspended+0x5c>)
 8004c86:	4293      	cmp	r3, r2
 8004c88:	d10a      	bne.n	8004ca0 <prvTaskIsTaskSuspended+0x4c>
        {
            /* Has the task already been resumed from within an ISR? */
            if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 8004c8a:	693b      	ldr	r3, [r7, #16]
 8004c8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c8e:	4a09      	ldr	r2, [pc, #36]	; (8004cb4 <prvTaskIsTaskSuspended+0x60>)
 8004c90:	4293      	cmp	r3, r2
 8004c92:	d005      	beq.n	8004ca0 <prvTaskIsTaskSuspended+0x4c>
            {
                /* Is it in the suspended list because it is in the Suspended
                 * state, or because is is blocked with no timeout? */
                if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 8004c94:	693b      	ldr	r3, [r7, #16]
 8004c96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d101      	bne.n	8004ca0 <prvTaskIsTaskSuspended+0x4c>
                {
                    xReturn = pdTRUE;
 8004c9c:	2301      	movs	r3, #1
 8004c9e:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8004ca0:	697b      	ldr	r3, [r7, #20]
    } /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	371c      	adds	r7, #28
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cac:	4770      	bx	lr
 8004cae:	bf00      	nop
 8004cb0:	20000230 	.word	0x20000230
 8004cb4:	20000204 	.word	0x20000204

08004cb8 <xTaskResumeFromISR>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

    BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
    {
 8004cb8:	b580      	push	{r7, lr}
 8004cba:	b08a      	sub	sp, #40	; 0x28
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	6078      	str	r0, [r7, #4]
        BaseType_t xYieldRequired = pdFALSE;
 8004cc0:	2300      	movs	r3, #0
 8004cc2:	627b      	str	r3, [r7, #36]	; 0x24
        TCB_t * const pxTCB = xTaskToResume;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	623b      	str	r3, [r7, #32]
        UBaseType_t uxSavedInterruptStatus;

        configASSERT( xTaskToResume );
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d10a      	bne.n	8004ce4 <xTaskResumeFromISR+0x2c>
        __asm volatile
 8004cce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cd2:	f383 8811 	msr	BASEPRI, r3
 8004cd6:	f3bf 8f6f 	isb	sy
 8004cda:	f3bf 8f4f 	dsb	sy
 8004cde:	617b      	str	r3, [r7, #20]
    }
 8004ce0:	bf00      	nop
 8004ce2:	e7fe      	b.n	8004ce2 <xTaskResumeFromISR+0x2a>
         * below the maximum system call interrupt priority.  FreeRTOS maintains a
         * separate interrupt safe API to ensure interrupt entry is as fast and as
         * simple as possible.  More information (albeit Cortex-M specific) is
         * provided on the following link:
         * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004ce4:	f001 fb02 	bl	80062ec <vPortValidateInterruptPriority>
        __asm volatile
 8004ce8:	f3ef 8211 	mrs	r2, BASEPRI
 8004cec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cf0:	f383 8811 	msr	BASEPRI, r3
 8004cf4:	f3bf 8f6f 	isb	sy
 8004cf8:	f3bf 8f4f 	dsb	sy
 8004cfc:	613a      	str	r2, [r7, #16]
 8004cfe:	60fb      	str	r3, [r7, #12]
        return ulOriginalBASEPRI;
 8004d00:	693b      	ldr	r3, [r7, #16]

        uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004d02:	61fb      	str	r3, [r7, #28]
        {
            if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8004d04:	6a38      	ldr	r0, [r7, #32]
 8004d06:	f7ff ffa5 	bl	8004c54 <prvTaskIsTaskSuspended>
 8004d0a:	4603      	mov	r3, r0
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d05a      	beq.n	8004dc6 <xTaskResumeFromISR+0x10e>
            {
                traceTASK_RESUME_FROM_ISR( pxTCB );

                /* Check the ready lists can be accessed. */
                if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004d10:	4b32      	ldr	r3, [pc, #200]	; (8004ddc <xTaskResumeFromISR+0x124>)
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d150      	bne.n	8004dba <xTaskResumeFromISR+0x102>
                {
                    /* Ready lists can be accessed so move the task from the
                     * suspended list to the ready list directly. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004d18:	6a3b      	ldr	r3, [r7, #32]
 8004d1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d1c:	4b30      	ldr	r3, [pc, #192]	; (8004de0 <xTaskResumeFromISR+0x128>)
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d22:	429a      	cmp	r2, r3
 8004d24:	d304      	bcc.n	8004d30 <xTaskResumeFromISR+0x78>
                    {
                        xYieldRequired = pdTRUE;
 8004d26:	2301      	movs	r3, #1
 8004d28:	627b      	str	r3, [r7, #36]	; 0x24

                        /* Mark that a yield is pending in case the user is not
                         * using the return value to initiate a context switch
                         * from the ISR using portYIELD_FROM_ISR. */
                        xYieldPending = pdTRUE;
 8004d2a:	4b2e      	ldr	r3, [pc, #184]	; (8004de4 <xTaskResumeFromISR+0x12c>)
 8004d2c:	2201      	movs	r2, #1
 8004d2e:	601a      	str	r2, [r3, #0]
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004d30:	6a3b      	ldr	r3, [r7, #32]
 8004d32:	3304      	adds	r3, #4
 8004d34:	4618      	mov	r0, r3
 8004d36:	f7ff f9ed 	bl	8004114 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8004d3a:	6a3b      	ldr	r3, [r7, #32]
 8004d3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d3e:	2201      	movs	r2, #1
 8004d40:	409a      	lsls	r2, r3
 8004d42:	4b29      	ldr	r3, [pc, #164]	; (8004de8 <xTaskResumeFromISR+0x130>)
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	4313      	orrs	r3, r2
 8004d48:	4a27      	ldr	r2, [pc, #156]	; (8004de8 <xTaskResumeFromISR+0x130>)
 8004d4a:	6013      	str	r3, [r2, #0]
 8004d4c:	6a3b      	ldr	r3, [r7, #32]
 8004d4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d50:	4926      	ldr	r1, [pc, #152]	; (8004dec <xTaskResumeFromISR+0x134>)
 8004d52:	4613      	mov	r3, r2
 8004d54:	009b      	lsls	r3, r3, #2
 8004d56:	4413      	add	r3, r2
 8004d58:	009b      	lsls	r3, r3, #2
 8004d5a:	440b      	add	r3, r1
 8004d5c:	3304      	adds	r3, #4
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	61bb      	str	r3, [r7, #24]
 8004d62:	6a3b      	ldr	r3, [r7, #32]
 8004d64:	69ba      	ldr	r2, [r7, #24]
 8004d66:	609a      	str	r2, [r3, #8]
 8004d68:	69bb      	ldr	r3, [r7, #24]
 8004d6a:	689a      	ldr	r2, [r3, #8]
 8004d6c:	6a3b      	ldr	r3, [r7, #32]
 8004d6e:	60da      	str	r2, [r3, #12]
 8004d70:	69bb      	ldr	r3, [r7, #24]
 8004d72:	689b      	ldr	r3, [r3, #8]
 8004d74:	6a3a      	ldr	r2, [r7, #32]
 8004d76:	3204      	adds	r2, #4
 8004d78:	605a      	str	r2, [r3, #4]
 8004d7a:	6a3b      	ldr	r3, [r7, #32]
 8004d7c:	1d1a      	adds	r2, r3, #4
 8004d7e:	69bb      	ldr	r3, [r7, #24]
 8004d80:	609a      	str	r2, [r3, #8]
 8004d82:	6a3b      	ldr	r3, [r7, #32]
 8004d84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d86:	4613      	mov	r3, r2
 8004d88:	009b      	lsls	r3, r3, #2
 8004d8a:	4413      	add	r3, r2
 8004d8c:	009b      	lsls	r3, r3, #2
 8004d8e:	4a17      	ldr	r2, [pc, #92]	; (8004dec <xTaskResumeFromISR+0x134>)
 8004d90:	441a      	add	r2, r3
 8004d92:	6a3b      	ldr	r3, [r7, #32]
 8004d94:	615a      	str	r2, [r3, #20]
 8004d96:	6a3b      	ldr	r3, [r7, #32]
 8004d98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d9a:	4914      	ldr	r1, [pc, #80]	; (8004dec <xTaskResumeFromISR+0x134>)
 8004d9c:	4613      	mov	r3, r2
 8004d9e:	009b      	lsls	r3, r3, #2
 8004da0:	4413      	add	r3, r2
 8004da2:	009b      	lsls	r3, r3, #2
 8004da4:	440b      	add	r3, r1
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	1c59      	adds	r1, r3, #1
 8004daa:	4810      	ldr	r0, [pc, #64]	; (8004dec <xTaskResumeFromISR+0x134>)
 8004dac:	4613      	mov	r3, r2
 8004dae:	009b      	lsls	r3, r3, #2
 8004db0:	4413      	add	r3, r2
 8004db2:	009b      	lsls	r3, r3, #2
 8004db4:	4403      	add	r3, r0
 8004db6:	6019      	str	r1, [r3, #0]
 8004db8:	e005      	b.n	8004dc6 <xTaskResumeFromISR+0x10e>
                else
                {
                    /* The delayed or ready lists cannot be accessed so the task
                     * is held in the pending ready list until the scheduler is
                     * unsuspended. */
                    vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8004dba:	6a3b      	ldr	r3, [r7, #32]
 8004dbc:	3318      	adds	r3, #24
 8004dbe:	4619      	mov	r1, r3
 8004dc0:	480b      	ldr	r0, [pc, #44]	; (8004df0 <xTaskResumeFromISR+0x138>)
 8004dc2:	f7ff f94a 	bl	800405a <vListInsertEnd>
 8004dc6:	69fb      	ldr	r3, [r7, #28]
 8004dc8:	60bb      	str	r3, [r7, #8]
        __asm volatile
 8004dca:	68bb      	ldr	r3, [r7, #8]
 8004dcc:	f383 8811 	msr	BASEPRI, r3
    }
 8004dd0:	bf00      	nop
                mtCOVERAGE_TEST_MARKER();
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

        return xYieldRequired;
 8004dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8004dd4:	4618      	mov	r0, r3
 8004dd6:	3728      	adds	r7, #40	; 0x28
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	bd80      	pop	{r7, pc}
 8004ddc:	2000026c 	.word	0x2000026c
 8004de0:	2000016c 	.word	0x2000016c
 8004de4:	20000258 	.word	0x20000258
 8004de8:	2000024c 	.word	0x2000024c
 8004dec:	20000170 	.word	0x20000170
 8004df0:	20000204 	.word	0x20000204

08004df4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004df4:	b580      	push	{r7, lr}
 8004df6:	b086      	sub	sp, #24
 8004df8:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 8004dfa:	4b20      	ldr	r3, [pc, #128]	; (8004e7c <vTaskStartScheduler+0x88>)
 8004dfc:	9301      	str	r3, [sp, #4]
 8004dfe:	2300      	movs	r3, #0
 8004e00:	9300      	str	r3, [sp, #0]
 8004e02:	2300      	movs	r3, #0
 8004e04:	2280      	movs	r2, #128	; 0x80
 8004e06:	491e      	ldr	r1, [pc, #120]	; (8004e80 <vTaskStartScheduler+0x8c>)
 8004e08:	481e      	ldr	r0, [pc, #120]	; (8004e84 <vTaskStartScheduler+0x90>)
 8004e0a:	f7ff fcf1 	bl	80047f0 <xTaskCreate>
 8004e0e:	60f8      	str	r0, [r7, #12]
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	2b01      	cmp	r3, #1
 8004e14:	d102      	bne.n	8004e1c <vTaskStartScheduler+0x28>
        {
            xReturn = xTimerCreateTimerTask();
 8004e16:	f000 fddf 	bl	80059d8 <xTimerCreateTimerTask>
 8004e1a:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	2b01      	cmp	r3, #1
 8004e20:	d116      	bne.n	8004e50 <vTaskStartScheduler+0x5c>
        __asm volatile
 8004e22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e26:	f383 8811 	msr	BASEPRI, r3
 8004e2a:	f3bf 8f6f 	isb	sy
 8004e2e:	f3bf 8f4f 	dsb	sy
 8004e32:	60bb      	str	r3, [r7, #8]
    }
 8004e34:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 8004e36:	4b14      	ldr	r3, [pc, #80]	; (8004e88 <vTaskStartScheduler+0x94>)
 8004e38:	f04f 32ff 	mov.w	r2, #4294967295
 8004e3c:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8004e3e:	4b13      	ldr	r3, [pc, #76]	; (8004e8c <vTaskStartScheduler+0x98>)
 8004e40:	2201      	movs	r2, #1
 8004e42:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004e44:	4b12      	ldr	r3, [pc, #72]	; (8004e90 <vTaskStartScheduler+0x9c>)
 8004e46:	2200      	movs	r2, #0
 8004e48:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 8004e4a:	f001 f8cb 	bl	8005fe4 <xPortStartScheduler>
 8004e4e:	e00e      	b.n	8004e6e <vTaskStartScheduler+0x7a>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e56:	d10a      	bne.n	8004e6e <vTaskStartScheduler+0x7a>
        __asm volatile
 8004e58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e5c:	f383 8811 	msr	BASEPRI, r3
 8004e60:	f3bf 8f6f 	isb	sy
 8004e64:	f3bf 8f4f 	dsb	sy
 8004e68:	607b      	str	r3, [r7, #4]
    }
 8004e6a:	bf00      	nop
 8004e6c:	e7fe      	b.n	8004e6c <vTaskStartScheduler+0x78>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8004e6e:	4b09      	ldr	r3, [pc, #36]	; (8004e94 <vTaskStartScheduler+0xa0>)
 8004e70:	681b      	ldr	r3, [r3, #0]
}
 8004e72:	bf00      	nop
 8004e74:	3710      	adds	r7, #16
 8004e76:	46bd      	mov	sp, r7
 8004e78:	bd80      	pop	{r7, pc}
 8004e7a:	bf00      	nop
 8004e7c:	20000268 	.word	0x20000268
 8004e80:	080067b8 	.word	0x080067b8
 8004e84:	08005759 	.word	0x08005759
 8004e88:	20000264 	.word	0x20000264
 8004e8c:	20000250 	.word	0x20000250
 8004e90:	20000248 	.word	0x20000248
 8004e94:	2000000c 	.word	0x2000000c

08004e98 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004e98:	b480      	push	{r7}
 8004e9a:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8004e9c:	4b04      	ldr	r3, [pc, #16]	; (8004eb0 <vTaskSuspendAll+0x18>)
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	3301      	adds	r3, #1
 8004ea2:	4a03      	ldr	r2, [pc, #12]	; (8004eb0 <vTaskSuspendAll+0x18>)
 8004ea4:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8004ea6:	bf00      	nop
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eae:	4770      	bx	lr
 8004eb0:	2000026c 	.word	0x2000026c

08004eb4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004eb4:	b580      	push	{r7, lr}
 8004eb6:	b088      	sub	sp, #32
 8004eb8:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8004eba:	2300      	movs	r3, #0
 8004ebc:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 8004ebe:	2300      	movs	r3, #0
 8004ec0:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8004ec2:	4b71      	ldr	r3, [pc, #452]	; (8005088 <xTaskResumeAll+0x1d4>)
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d10a      	bne.n	8004ee0 <xTaskResumeAll+0x2c>
        __asm volatile
 8004eca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ece:	f383 8811 	msr	BASEPRI, r3
 8004ed2:	f3bf 8f6f 	isb	sy
 8004ed6:	f3bf 8f4f 	dsb	sy
 8004eda:	607b      	str	r3, [r7, #4]
    }
 8004edc:	bf00      	nop
 8004ede:	e7fe      	b.n	8004ede <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8004ee0:	f001 f922 	bl	8006128 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8004ee4:	4b68      	ldr	r3, [pc, #416]	; (8005088 <xTaskResumeAll+0x1d4>)
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	3b01      	subs	r3, #1
 8004eea:	4a67      	ldr	r2, [pc, #412]	; (8005088 <xTaskResumeAll+0x1d4>)
 8004eec:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004eee:	4b66      	ldr	r3, [pc, #408]	; (8005088 <xTaskResumeAll+0x1d4>)
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	f040 80c0 	bne.w	8005078 <xTaskResumeAll+0x1c4>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004ef8:	4b64      	ldr	r3, [pc, #400]	; (800508c <xTaskResumeAll+0x1d8>)
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	f000 80bb 	beq.w	8005078 <xTaskResumeAll+0x1c4>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004f02:	e08a      	b.n	800501a <xTaskResumeAll+0x166>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004f04:	4b62      	ldr	r3, [pc, #392]	; (8005090 <xTaskResumeAll+0x1dc>)
 8004f06:	68db      	ldr	r3, [r3, #12]
 8004f08:	68db      	ldr	r3, [r3, #12]
 8004f0a:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8004f0c:	69fb      	ldr	r3, [r7, #28]
 8004f0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f10:	613b      	str	r3, [r7, #16]
 8004f12:	69fb      	ldr	r3, [r7, #28]
 8004f14:	69db      	ldr	r3, [r3, #28]
 8004f16:	69fa      	ldr	r2, [r7, #28]
 8004f18:	6a12      	ldr	r2, [r2, #32]
 8004f1a:	609a      	str	r2, [r3, #8]
 8004f1c:	69fb      	ldr	r3, [r7, #28]
 8004f1e:	6a1b      	ldr	r3, [r3, #32]
 8004f20:	69fa      	ldr	r2, [r7, #28]
 8004f22:	69d2      	ldr	r2, [r2, #28]
 8004f24:	605a      	str	r2, [r3, #4]
 8004f26:	693b      	ldr	r3, [r7, #16]
 8004f28:	685a      	ldr	r2, [r3, #4]
 8004f2a:	69fb      	ldr	r3, [r7, #28]
 8004f2c:	3318      	adds	r3, #24
 8004f2e:	429a      	cmp	r2, r3
 8004f30:	d103      	bne.n	8004f3a <xTaskResumeAll+0x86>
 8004f32:	69fb      	ldr	r3, [r7, #28]
 8004f34:	6a1a      	ldr	r2, [r3, #32]
 8004f36:	693b      	ldr	r3, [r7, #16]
 8004f38:	605a      	str	r2, [r3, #4]
 8004f3a:	69fb      	ldr	r3, [r7, #28]
 8004f3c:	2200      	movs	r2, #0
 8004f3e:	629a      	str	r2, [r3, #40]	; 0x28
 8004f40:	693b      	ldr	r3, [r7, #16]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	1e5a      	subs	r2, r3, #1
 8004f46:	693b      	ldr	r3, [r7, #16]
 8004f48:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8004f4a:	69fb      	ldr	r3, [r7, #28]
 8004f4c:	695b      	ldr	r3, [r3, #20]
 8004f4e:	60fb      	str	r3, [r7, #12]
 8004f50:	69fb      	ldr	r3, [r7, #28]
 8004f52:	689b      	ldr	r3, [r3, #8]
 8004f54:	69fa      	ldr	r2, [r7, #28]
 8004f56:	68d2      	ldr	r2, [r2, #12]
 8004f58:	609a      	str	r2, [r3, #8]
 8004f5a:	69fb      	ldr	r3, [r7, #28]
 8004f5c:	68db      	ldr	r3, [r3, #12]
 8004f5e:	69fa      	ldr	r2, [r7, #28]
 8004f60:	6892      	ldr	r2, [r2, #8]
 8004f62:	605a      	str	r2, [r3, #4]
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	685a      	ldr	r2, [r3, #4]
 8004f68:	69fb      	ldr	r3, [r7, #28]
 8004f6a:	3304      	adds	r3, #4
 8004f6c:	429a      	cmp	r2, r3
 8004f6e:	d103      	bne.n	8004f78 <xTaskResumeAll+0xc4>
 8004f70:	69fb      	ldr	r3, [r7, #28]
 8004f72:	68da      	ldr	r2, [r3, #12]
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	605a      	str	r2, [r3, #4]
 8004f78:	69fb      	ldr	r3, [r7, #28]
 8004f7a:	2200      	movs	r2, #0
 8004f7c:	615a      	str	r2, [r3, #20]
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	1e5a      	subs	r2, r3, #1
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8004f88:	69fb      	ldr	r3, [r7, #28]
 8004f8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f8c:	2201      	movs	r2, #1
 8004f8e:	409a      	lsls	r2, r3
 8004f90:	4b40      	ldr	r3, [pc, #256]	; (8005094 <xTaskResumeAll+0x1e0>)
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	4313      	orrs	r3, r2
 8004f96:	4a3f      	ldr	r2, [pc, #252]	; (8005094 <xTaskResumeAll+0x1e0>)
 8004f98:	6013      	str	r3, [r2, #0]
 8004f9a:	69fb      	ldr	r3, [r7, #28]
 8004f9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f9e:	493e      	ldr	r1, [pc, #248]	; (8005098 <xTaskResumeAll+0x1e4>)
 8004fa0:	4613      	mov	r3, r2
 8004fa2:	009b      	lsls	r3, r3, #2
 8004fa4:	4413      	add	r3, r2
 8004fa6:	009b      	lsls	r3, r3, #2
 8004fa8:	440b      	add	r3, r1
 8004faa:	3304      	adds	r3, #4
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	60bb      	str	r3, [r7, #8]
 8004fb0:	69fb      	ldr	r3, [r7, #28]
 8004fb2:	68ba      	ldr	r2, [r7, #8]
 8004fb4:	609a      	str	r2, [r3, #8]
 8004fb6:	68bb      	ldr	r3, [r7, #8]
 8004fb8:	689a      	ldr	r2, [r3, #8]
 8004fba:	69fb      	ldr	r3, [r7, #28]
 8004fbc:	60da      	str	r2, [r3, #12]
 8004fbe:	68bb      	ldr	r3, [r7, #8]
 8004fc0:	689b      	ldr	r3, [r3, #8]
 8004fc2:	69fa      	ldr	r2, [r7, #28]
 8004fc4:	3204      	adds	r2, #4
 8004fc6:	605a      	str	r2, [r3, #4]
 8004fc8:	69fb      	ldr	r3, [r7, #28]
 8004fca:	1d1a      	adds	r2, r3, #4
 8004fcc:	68bb      	ldr	r3, [r7, #8]
 8004fce:	609a      	str	r2, [r3, #8]
 8004fd0:	69fb      	ldr	r3, [r7, #28]
 8004fd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fd4:	4613      	mov	r3, r2
 8004fd6:	009b      	lsls	r3, r3, #2
 8004fd8:	4413      	add	r3, r2
 8004fda:	009b      	lsls	r3, r3, #2
 8004fdc:	4a2e      	ldr	r2, [pc, #184]	; (8005098 <xTaskResumeAll+0x1e4>)
 8004fde:	441a      	add	r2, r3
 8004fe0:	69fb      	ldr	r3, [r7, #28]
 8004fe2:	615a      	str	r2, [r3, #20]
 8004fe4:	69fb      	ldr	r3, [r7, #28]
 8004fe6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fe8:	492b      	ldr	r1, [pc, #172]	; (8005098 <xTaskResumeAll+0x1e4>)
 8004fea:	4613      	mov	r3, r2
 8004fec:	009b      	lsls	r3, r3, #2
 8004fee:	4413      	add	r3, r2
 8004ff0:	009b      	lsls	r3, r3, #2
 8004ff2:	440b      	add	r3, r1
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	1c59      	adds	r1, r3, #1
 8004ff8:	4827      	ldr	r0, [pc, #156]	; (8005098 <xTaskResumeAll+0x1e4>)
 8004ffa:	4613      	mov	r3, r2
 8004ffc:	009b      	lsls	r3, r3, #2
 8004ffe:	4413      	add	r3, r2
 8005000:	009b      	lsls	r3, r3, #2
 8005002:	4403      	add	r3, r0
 8005004:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005006:	69fb      	ldr	r3, [r7, #28]
 8005008:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800500a:	4b24      	ldr	r3, [pc, #144]	; (800509c <xTaskResumeAll+0x1e8>)
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005010:	429a      	cmp	r2, r3
 8005012:	d302      	bcc.n	800501a <xTaskResumeAll+0x166>
                    {
                        xYieldPending = pdTRUE;
 8005014:	4b22      	ldr	r3, [pc, #136]	; (80050a0 <xTaskResumeAll+0x1ec>)
 8005016:	2201      	movs	r2, #1
 8005018:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800501a:	4b1d      	ldr	r3, [pc, #116]	; (8005090 <xTaskResumeAll+0x1dc>)
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	2b00      	cmp	r3, #0
 8005020:	f47f af70 	bne.w	8004f04 <xTaskResumeAll+0x50>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8005024:	69fb      	ldr	r3, [r7, #28]
 8005026:	2b00      	cmp	r3, #0
 8005028:	d001      	beq.n	800502e <xTaskResumeAll+0x17a>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 800502a:	f000 fc1b 	bl	8005864 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800502e:	4b1d      	ldr	r3, [pc, #116]	; (80050a4 <xTaskResumeAll+0x1f0>)
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8005034:	697b      	ldr	r3, [r7, #20]
 8005036:	2b00      	cmp	r3, #0
 8005038:	d010      	beq.n	800505c <xTaskResumeAll+0x1a8>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 800503a:	f000 f853 	bl	80050e4 <xTaskIncrementTick>
 800503e:	4603      	mov	r3, r0
 8005040:	2b00      	cmp	r3, #0
 8005042:	d002      	beq.n	800504a <xTaskResumeAll+0x196>
                            {
                                xYieldPending = pdTRUE;
 8005044:	4b16      	ldr	r3, [pc, #88]	; (80050a0 <xTaskResumeAll+0x1ec>)
 8005046:	2201      	movs	r2, #1
 8005048:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 800504a:	697b      	ldr	r3, [r7, #20]
 800504c:	3b01      	subs	r3, #1
 800504e:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8005050:	697b      	ldr	r3, [r7, #20]
 8005052:	2b00      	cmp	r3, #0
 8005054:	d1f1      	bne.n	800503a <xTaskResumeAll+0x186>

                        xPendedTicks = 0;
 8005056:	4b13      	ldr	r3, [pc, #76]	; (80050a4 <xTaskResumeAll+0x1f0>)
 8005058:	2200      	movs	r2, #0
 800505a:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 800505c:	4b10      	ldr	r3, [pc, #64]	; (80050a0 <xTaskResumeAll+0x1ec>)
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	2b00      	cmp	r3, #0
 8005062:	d009      	beq.n	8005078 <xTaskResumeAll+0x1c4>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 8005064:	2301      	movs	r3, #1
 8005066:	61bb      	str	r3, [r7, #24]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8005068:	4b0f      	ldr	r3, [pc, #60]	; (80050a8 <xTaskResumeAll+0x1f4>)
 800506a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800506e:	601a      	str	r2, [r3, #0]
 8005070:	f3bf 8f4f 	dsb	sy
 8005074:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8005078:	f001 f886 	bl	8006188 <vPortExitCritical>

    return xAlreadyYielded;
 800507c:	69bb      	ldr	r3, [r7, #24]
}
 800507e:	4618      	mov	r0, r3
 8005080:	3720      	adds	r7, #32
 8005082:	46bd      	mov	sp, r7
 8005084:	bd80      	pop	{r7, pc}
 8005086:	bf00      	nop
 8005088:	2000026c 	.word	0x2000026c
 800508c:	20000244 	.word	0x20000244
 8005090:	20000204 	.word	0x20000204
 8005094:	2000024c 	.word	0x2000024c
 8005098:	20000170 	.word	0x20000170
 800509c:	2000016c 	.word	0x2000016c
 80050a0:	20000258 	.word	0x20000258
 80050a4:	20000254 	.word	0x20000254
 80050a8:	e000ed04 	.word	0xe000ed04

080050ac <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80050ac:	b480      	push	{r7}
 80050ae:	b083      	sub	sp, #12
 80050b0:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 80050b2:	4b05      	ldr	r3, [pc, #20]	; (80050c8 <xTaskGetTickCount+0x1c>)
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 80050b8:	687b      	ldr	r3, [r7, #4]
}
 80050ba:	4618      	mov	r0, r3
 80050bc:	370c      	adds	r7, #12
 80050be:	46bd      	mov	sp, r7
 80050c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c4:	4770      	bx	lr
 80050c6:	bf00      	nop
 80050c8:	20000248 	.word	0x20000248

080050cc <uxTaskGetNumberOfTasks>:
    return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxTaskGetNumberOfTasks( void )
{
 80050cc:	b480      	push	{r7}
 80050ce:	af00      	add	r7, sp, #0
    /* A critical section is not required because the variables are of type
     * BaseType_t. */
    return uxCurrentNumberOfTasks;
 80050d0:	4b03      	ldr	r3, [pc, #12]	; (80050e0 <uxTaskGetNumberOfTasks+0x14>)
 80050d2:	681b      	ldr	r3, [r3, #0]
}
 80050d4:	4618      	mov	r0, r3
 80050d6:	46bd      	mov	sp, r7
 80050d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050dc:	4770      	bx	lr
 80050de:	bf00      	nop
 80050e0:	20000244 	.word	0x20000244

080050e4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80050e4:	b580      	push	{r7, lr}
 80050e6:	b08a      	sub	sp, #40	; 0x28
 80050e8:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 80050ea:	2300      	movs	r3, #0
 80050ec:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80050ee:	4b7d      	ldr	r3, [pc, #500]	; (80052e4 <xTaskIncrementTick+0x200>)
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	f040 80ec 	bne.w	80052d0 <xTaskIncrementTick+0x1ec>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80050f8:	4b7b      	ldr	r3, [pc, #492]	; (80052e8 <xTaskIncrementTick+0x204>)
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	3301      	adds	r3, #1
 80050fe:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8005100:	4a79      	ldr	r2, [pc, #484]	; (80052e8 <xTaskIncrementTick+0x204>)
 8005102:	6a3b      	ldr	r3, [r7, #32]
 8005104:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005106:	6a3b      	ldr	r3, [r7, #32]
 8005108:	2b00      	cmp	r3, #0
 800510a:	d120      	bne.n	800514e <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 800510c:	4b77      	ldr	r3, [pc, #476]	; (80052ec <xTaskIncrementTick+0x208>)
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	2b00      	cmp	r3, #0
 8005114:	d00a      	beq.n	800512c <xTaskIncrementTick+0x48>
        __asm volatile
 8005116:	f04f 0350 	mov.w	r3, #80	; 0x50
 800511a:	f383 8811 	msr	BASEPRI, r3
 800511e:	f3bf 8f6f 	isb	sy
 8005122:	f3bf 8f4f 	dsb	sy
 8005126:	607b      	str	r3, [r7, #4]
    }
 8005128:	bf00      	nop
 800512a:	e7fe      	b.n	800512a <xTaskIncrementTick+0x46>
 800512c:	4b6f      	ldr	r3, [pc, #444]	; (80052ec <xTaskIncrementTick+0x208>)
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	61fb      	str	r3, [r7, #28]
 8005132:	4b6f      	ldr	r3, [pc, #444]	; (80052f0 <xTaskIncrementTick+0x20c>)
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	4a6d      	ldr	r2, [pc, #436]	; (80052ec <xTaskIncrementTick+0x208>)
 8005138:	6013      	str	r3, [r2, #0]
 800513a:	4a6d      	ldr	r2, [pc, #436]	; (80052f0 <xTaskIncrementTick+0x20c>)
 800513c:	69fb      	ldr	r3, [r7, #28]
 800513e:	6013      	str	r3, [r2, #0]
 8005140:	4b6c      	ldr	r3, [pc, #432]	; (80052f4 <xTaskIncrementTick+0x210>)
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	3301      	adds	r3, #1
 8005146:	4a6b      	ldr	r2, [pc, #428]	; (80052f4 <xTaskIncrementTick+0x210>)
 8005148:	6013      	str	r3, [r2, #0]
 800514a:	f000 fb8b 	bl	8005864 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 800514e:	4b6a      	ldr	r3, [pc, #424]	; (80052f8 <xTaskIncrementTick+0x214>)
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	6a3a      	ldr	r2, [r7, #32]
 8005154:	429a      	cmp	r2, r3
 8005156:	f0c0 80a6 	bcc.w	80052a6 <xTaskIncrementTick+0x1c2>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800515a:	4b64      	ldr	r3, [pc, #400]	; (80052ec <xTaskIncrementTick+0x208>)
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	2b00      	cmp	r3, #0
 8005162:	d104      	bne.n	800516e <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005164:	4b64      	ldr	r3, [pc, #400]	; (80052f8 <xTaskIncrementTick+0x214>)
 8005166:	f04f 32ff 	mov.w	r2, #4294967295
 800516a:	601a      	str	r2, [r3, #0]
                    break;
 800516c:	e09b      	b.n	80052a6 <xTaskIncrementTick+0x1c2>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800516e:	4b5f      	ldr	r3, [pc, #380]	; (80052ec <xTaskIncrementTick+0x208>)
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	68db      	ldr	r3, [r3, #12]
 8005174:	68db      	ldr	r3, [r3, #12]
 8005176:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005178:	69bb      	ldr	r3, [r7, #24]
 800517a:	685b      	ldr	r3, [r3, #4]
 800517c:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 800517e:	6a3a      	ldr	r2, [r7, #32]
 8005180:	697b      	ldr	r3, [r7, #20]
 8005182:	429a      	cmp	r2, r3
 8005184:	d203      	bcs.n	800518e <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8005186:	4a5c      	ldr	r2, [pc, #368]	; (80052f8 <xTaskIncrementTick+0x214>)
 8005188:	697b      	ldr	r3, [r7, #20]
 800518a:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 800518c:	e08b      	b.n	80052a6 <xTaskIncrementTick+0x1c2>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800518e:	69bb      	ldr	r3, [r7, #24]
 8005190:	695b      	ldr	r3, [r3, #20]
 8005192:	613b      	str	r3, [r7, #16]
 8005194:	69bb      	ldr	r3, [r7, #24]
 8005196:	689b      	ldr	r3, [r3, #8]
 8005198:	69ba      	ldr	r2, [r7, #24]
 800519a:	68d2      	ldr	r2, [r2, #12]
 800519c:	609a      	str	r2, [r3, #8]
 800519e:	69bb      	ldr	r3, [r7, #24]
 80051a0:	68db      	ldr	r3, [r3, #12]
 80051a2:	69ba      	ldr	r2, [r7, #24]
 80051a4:	6892      	ldr	r2, [r2, #8]
 80051a6:	605a      	str	r2, [r3, #4]
 80051a8:	693b      	ldr	r3, [r7, #16]
 80051aa:	685a      	ldr	r2, [r3, #4]
 80051ac:	69bb      	ldr	r3, [r7, #24]
 80051ae:	3304      	adds	r3, #4
 80051b0:	429a      	cmp	r2, r3
 80051b2:	d103      	bne.n	80051bc <xTaskIncrementTick+0xd8>
 80051b4:	69bb      	ldr	r3, [r7, #24]
 80051b6:	68da      	ldr	r2, [r3, #12]
 80051b8:	693b      	ldr	r3, [r7, #16]
 80051ba:	605a      	str	r2, [r3, #4]
 80051bc:	69bb      	ldr	r3, [r7, #24]
 80051be:	2200      	movs	r2, #0
 80051c0:	615a      	str	r2, [r3, #20]
 80051c2:	693b      	ldr	r3, [r7, #16]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	1e5a      	subs	r2, r3, #1
 80051c8:	693b      	ldr	r3, [r7, #16]
 80051ca:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80051cc:	69bb      	ldr	r3, [r7, #24]
 80051ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d01e      	beq.n	8005212 <xTaskIncrementTick+0x12e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 80051d4:	69bb      	ldr	r3, [r7, #24]
 80051d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051d8:	60fb      	str	r3, [r7, #12]
 80051da:	69bb      	ldr	r3, [r7, #24]
 80051dc:	69db      	ldr	r3, [r3, #28]
 80051de:	69ba      	ldr	r2, [r7, #24]
 80051e0:	6a12      	ldr	r2, [r2, #32]
 80051e2:	609a      	str	r2, [r3, #8]
 80051e4:	69bb      	ldr	r3, [r7, #24]
 80051e6:	6a1b      	ldr	r3, [r3, #32]
 80051e8:	69ba      	ldr	r2, [r7, #24]
 80051ea:	69d2      	ldr	r2, [r2, #28]
 80051ec:	605a      	str	r2, [r3, #4]
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	685a      	ldr	r2, [r3, #4]
 80051f2:	69bb      	ldr	r3, [r7, #24]
 80051f4:	3318      	adds	r3, #24
 80051f6:	429a      	cmp	r2, r3
 80051f8:	d103      	bne.n	8005202 <xTaskIncrementTick+0x11e>
 80051fa:	69bb      	ldr	r3, [r7, #24]
 80051fc:	6a1a      	ldr	r2, [r3, #32]
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	605a      	str	r2, [r3, #4]
 8005202:	69bb      	ldr	r3, [r7, #24]
 8005204:	2200      	movs	r2, #0
 8005206:	629a      	str	r2, [r3, #40]	; 0x28
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	1e5a      	subs	r2, r3, #1
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8005212:	69bb      	ldr	r3, [r7, #24]
 8005214:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005216:	2201      	movs	r2, #1
 8005218:	409a      	lsls	r2, r3
 800521a:	4b38      	ldr	r3, [pc, #224]	; (80052fc <xTaskIncrementTick+0x218>)
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	4313      	orrs	r3, r2
 8005220:	4a36      	ldr	r2, [pc, #216]	; (80052fc <xTaskIncrementTick+0x218>)
 8005222:	6013      	str	r3, [r2, #0]
 8005224:	69bb      	ldr	r3, [r7, #24]
 8005226:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005228:	4935      	ldr	r1, [pc, #212]	; (8005300 <xTaskIncrementTick+0x21c>)
 800522a:	4613      	mov	r3, r2
 800522c:	009b      	lsls	r3, r3, #2
 800522e:	4413      	add	r3, r2
 8005230:	009b      	lsls	r3, r3, #2
 8005232:	440b      	add	r3, r1
 8005234:	3304      	adds	r3, #4
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	60bb      	str	r3, [r7, #8]
 800523a:	69bb      	ldr	r3, [r7, #24]
 800523c:	68ba      	ldr	r2, [r7, #8]
 800523e:	609a      	str	r2, [r3, #8]
 8005240:	68bb      	ldr	r3, [r7, #8]
 8005242:	689a      	ldr	r2, [r3, #8]
 8005244:	69bb      	ldr	r3, [r7, #24]
 8005246:	60da      	str	r2, [r3, #12]
 8005248:	68bb      	ldr	r3, [r7, #8]
 800524a:	689b      	ldr	r3, [r3, #8]
 800524c:	69ba      	ldr	r2, [r7, #24]
 800524e:	3204      	adds	r2, #4
 8005250:	605a      	str	r2, [r3, #4]
 8005252:	69bb      	ldr	r3, [r7, #24]
 8005254:	1d1a      	adds	r2, r3, #4
 8005256:	68bb      	ldr	r3, [r7, #8]
 8005258:	609a      	str	r2, [r3, #8]
 800525a:	69bb      	ldr	r3, [r7, #24]
 800525c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800525e:	4613      	mov	r3, r2
 8005260:	009b      	lsls	r3, r3, #2
 8005262:	4413      	add	r3, r2
 8005264:	009b      	lsls	r3, r3, #2
 8005266:	4a26      	ldr	r2, [pc, #152]	; (8005300 <xTaskIncrementTick+0x21c>)
 8005268:	441a      	add	r2, r3
 800526a:	69bb      	ldr	r3, [r7, #24]
 800526c:	615a      	str	r2, [r3, #20]
 800526e:	69bb      	ldr	r3, [r7, #24]
 8005270:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005272:	4923      	ldr	r1, [pc, #140]	; (8005300 <xTaskIncrementTick+0x21c>)
 8005274:	4613      	mov	r3, r2
 8005276:	009b      	lsls	r3, r3, #2
 8005278:	4413      	add	r3, r2
 800527a:	009b      	lsls	r3, r3, #2
 800527c:	440b      	add	r3, r1
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	1c59      	adds	r1, r3, #1
 8005282:	481f      	ldr	r0, [pc, #124]	; (8005300 <xTaskIncrementTick+0x21c>)
 8005284:	4613      	mov	r3, r2
 8005286:	009b      	lsls	r3, r3, #2
 8005288:	4413      	add	r3, r2
 800528a:	009b      	lsls	r3, r3, #2
 800528c:	4403      	add	r3, r0
 800528e:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005290:	69bb      	ldr	r3, [r7, #24]
 8005292:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005294:	4b1b      	ldr	r3, [pc, #108]	; (8005304 <xTaskIncrementTick+0x220>)
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800529a:	429a      	cmp	r2, r3
 800529c:	f67f af5d 	bls.w	800515a <xTaskIncrementTick+0x76>
                        {
                            xSwitchRequired = pdTRUE;
 80052a0:	2301      	movs	r3, #1
 80052a2:	627b      	str	r3, [r7, #36]	; 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80052a4:	e759      	b.n	800515a <xTaskIncrementTick+0x76>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80052a6:	4b17      	ldr	r3, [pc, #92]	; (8005304 <xTaskIncrementTick+0x220>)
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052ac:	4914      	ldr	r1, [pc, #80]	; (8005300 <xTaskIncrementTick+0x21c>)
 80052ae:	4613      	mov	r3, r2
 80052b0:	009b      	lsls	r3, r3, #2
 80052b2:	4413      	add	r3, r2
 80052b4:	009b      	lsls	r3, r3, #2
 80052b6:	440b      	add	r3, r1
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	2b01      	cmp	r3, #1
 80052bc:	d901      	bls.n	80052c2 <xTaskIncrementTick+0x1de>
            {
                xSwitchRequired = pdTRUE;
 80052be:	2301      	movs	r3, #1
 80052c0:	627b      	str	r3, [r7, #36]	; 0x24
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 80052c2:	4b11      	ldr	r3, [pc, #68]	; (8005308 <xTaskIncrementTick+0x224>)
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d007      	beq.n	80052da <xTaskIncrementTick+0x1f6>
            {
                xSwitchRequired = pdTRUE;
 80052ca:	2301      	movs	r3, #1
 80052cc:	627b      	str	r3, [r7, #36]	; 0x24
 80052ce:	e004      	b.n	80052da <xTaskIncrementTick+0x1f6>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 80052d0:	4b0e      	ldr	r3, [pc, #56]	; (800530c <xTaskIncrementTick+0x228>)
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	3301      	adds	r3, #1
 80052d6:	4a0d      	ldr	r2, [pc, #52]	; (800530c <xTaskIncrementTick+0x228>)
 80052d8:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 80052da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80052dc:	4618      	mov	r0, r3
 80052de:	3728      	adds	r7, #40	; 0x28
 80052e0:	46bd      	mov	sp, r7
 80052e2:	bd80      	pop	{r7, pc}
 80052e4:	2000026c 	.word	0x2000026c
 80052e8:	20000248 	.word	0x20000248
 80052ec:	200001fc 	.word	0x200001fc
 80052f0:	20000200 	.word	0x20000200
 80052f4:	2000025c 	.word	0x2000025c
 80052f8:	20000264 	.word	0x20000264
 80052fc:	2000024c 	.word	0x2000024c
 8005300:	20000170 	.word	0x20000170
 8005304:	2000016c 	.word	0x2000016c
 8005308:	20000258 	.word	0x20000258
 800530c:	20000254 	.word	0x20000254

08005310 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005310:	b480      	push	{r7}
 8005312:	b087      	sub	sp, #28
 8005314:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005316:	4b27      	ldr	r3, [pc, #156]	; (80053b4 <vTaskSwitchContext+0xa4>)
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	2b00      	cmp	r3, #0
 800531c:	d003      	beq.n	8005326 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 800531e:	4b26      	ldr	r3, [pc, #152]	; (80053b8 <vTaskSwitchContext+0xa8>)
 8005320:	2201      	movs	r2, #1
 8005322:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 8005324:	e03f      	b.n	80053a6 <vTaskSwitchContext+0x96>
        xYieldPending = pdFALSE;
 8005326:	4b24      	ldr	r3, [pc, #144]	; (80053b8 <vTaskSwitchContext+0xa8>)
 8005328:	2200      	movs	r2, #0
 800532a:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800532c:	4b23      	ldr	r3, [pc, #140]	; (80053bc <vTaskSwitchContext+0xac>)
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	fab3 f383 	clz	r3, r3
 8005338:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 800533a:	7afb      	ldrb	r3, [r7, #11]
 800533c:	f1c3 031f 	rsb	r3, r3, #31
 8005340:	617b      	str	r3, [r7, #20]
 8005342:	491f      	ldr	r1, [pc, #124]	; (80053c0 <vTaskSwitchContext+0xb0>)
 8005344:	697a      	ldr	r2, [r7, #20]
 8005346:	4613      	mov	r3, r2
 8005348:	009b      	lsls	r3, r3, #2
 800534a:	4413      	add	r3, r2
 800534c:	009b      	lsls	r3, r3, #2
 800534e:	440b      	add	r3, r1
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	2b00      	cmp	r3, #0
 8005354:	d10a      	bne.n	800536c <vTaskSwitchContext+0x5c>
        __asm volatile
 8005356:	f04f 0350 	mov.w	r3, #80	; 0x50
 800535a:	f383 8811 	msr	BASEPRI, r3
 800535e:	f3bf 8f6f 	isb	sy
 8005362:	f3bf 8f4f 	dsb	sy
 8005366:	607b      	str	r3, [r7, #4]
    }
 8005368:	bf00      	nop
 800536a:	e7fe      	b.n	800536a <vTaskSwitchContext+0x5a>
 800536c:	697a      	ldr	r2, [r7, #20]
 800536e:	4613      	mov	r3, r2
 8005370:	009b      	lsls	r3, r3, #2
 8005372:	4413      	add	r3, r2
 8005374:	009b      	lsls	r3, r3, #2
 8005376:	4a12      	ldr	r2, [pc, #72]	; (80053c0 <vTaskSwitchContext+0xb0>)
 8005378:	4413      	add	r3, r2
 800537a:	613b      	str	r3, [r7, #16]
 800537c:	693b      	ldr	r3, [r7, #16]
 800537e:	685b      	ldr	r3, [r3, #4]
 8005380:	685a      	ldr	r2, [r3, #4]
 8005382:	693b      	ldr	r3, [r7, #16]
 8005384:	605a      	str	r2, [r3, #4]
 8005386:	693b      	ldr	r3, [r7, #16]
 8005388:	685a      	ldr	r2, [r3, #4]
 800538a:	693b      	ldr	r3, [r7, #16]
 800538c:	3308      	adds	r3, #8
 800538e:	429a      	cmp	r2, r3
 8005390:	d104      	bne.n	800539c <vTaskSwitchContext+0x8c>
 8005392:	693b      	ldr	r3, [r7, #16]
 8005394:	685b      	ldr	r3, [r3, #4]
 8005396:	685a      	ldr	r2, [r3, #4]
 8005398:	693b      	ldr	r3, [r7, #16]
 800539a:	605a      	str	r2, [r3, #4]
 800539c:	693b      	ldr	r3, [r7, #16]
 800539e:	685b      	ldr	r3, [r3, #4]
 80053a0:	68db      	ldr	r3, [r3, #12]
 80053a2:	4a08      	ldr	r2, [pc, #32]	; (80053c4 <vTaskSwitchContext+0xb4>)
 80053a4:	6013      	str	r3, [r2, #0]
}
 80053a6:	bf00      	nop
 80053a8:	371c      	adds	r7, #28
 80053aa:	46bd      	mov	sp, r7
 80053ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b0:	4770      	bx	lr
 80053b2:	bf00      	nop
 80053b4:	2000026c 	.word	0x2000026c
 80053b8:	20000258 	.word	0x20000258
 80053bc:	2000024c 	.word	0x2000024c
 80053c0:	20000170 	.word	0x20000170
 80053c4:	2000016c 	.word	0x2000016c

080053c8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 80053c8:	b580      	push	{r7, lr}
 80053ca:	b084      	sub	sp, #16
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	6078      	str	r0, [r7, #4]
 80053d0:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d10a      	bne.n	80053ee <vTaskPlaceOnEventList+0x26>
        __asm volatile
 80053d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053dc:	f383 8811 	msr	BASEPRI, r3
 80053e0:	f3bf 8f6f 	isb	sy
 80053e4:	f3bf 8f4f 	dsb	sy
 80053e8:	60fb      	str	r3, [r7, #12]
    }
 80053ea:	bf00      	nop
 80053ec:	e7fe      	b.n	80053ec <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80053ee:	4b07      	ldr	r3, [pc, #28]	; (800540c <vTaskPlaceOnEventList+0x44>)
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	3318      	adds	r3, #24
 80053f4:	4619      	mov	r1, r3
 80053f6:	6878      	ldr	r0, [r7, #4]
 80053f8:	f7fe fe53 	bl	80040a2 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80053fc:	2101      	movs	r1, #1
 80053fe:	6838      	ldr	r0, [r7, #0]
 8005400:	f000 fa6a 	bl	80058d8 <prvAddCurrentTaskToDelayedList>
}
 8005404:	bf00      	nop
 8005406:	3710      	adds	r7, #16
 8005408:	46bd      	mov	sp, r7
 800540a:	bd80      	pop	{r7, pc}
 800540c:	2000016c 	.word	0x2000016c

08005410 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8005410:	b580      	push	{r7, lr}
 8005412:	b086      	sub	sp, #24
 8005414:	af00      	add	r7, sp, #0
 8005416:	60f8      	str	r0, [r7, #12]
 8005418:	60b9      	str	r1, [r7, #8]
 800541a:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	2b00      	cmp	r3, #0
 8005420:	d10a      	bne.n	8005438 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 8005422:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005426:	f383 8811 	msr	BASEPRI, r3
 800542a:	f3bf 8f6f 	isb	sy
 800542e:	f3bf 8f4f 	dsb	sy
 8005432:	613b      	str	r3, [r7, #16]
    }
 8005434:	bf00      	nop
 8005436:	e7fe      	b.n	8005436 <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	685b      	ldr	r3, [r3, #4]
 800543c:	617b      	str	r3, [r7, #20]
 800543e:	4b16      	ldr	r3, [pc, #88]	; (8005498 <vTaskPlaceOnEventListRestricted+0x88>)
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	697a      	ldr	r2, [r7, #20]
 8005444:	61da      	str	r2, [r3, #28]
 8005446:	4b14      	ldr	r3, [pc, #80]	; (8005498 <vTaskPlaceOnEventListRestricted+0x88>)
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	697a      	ldr	r2, [r7, #20]
 800544c:	6892      	ldr	r2, [r2, #8]
 800544e:	621a      	str	r2, [r3, #32]
 8005450:	4b11      	ldr	r3, [pc, #68]	; (8005498 <vTaskPlaceOnEventListRestricted+0x88>)
 8005452:	681a      	ldr	r2, [r3, #0]
 8005454:	697b      	ldr	r3, [r7, #20]
 8005456:	689b      	ldr	r3, [r3, #8]
 8005458:	3218      	adds	r2, #24
 800545a:	605a      	str	r2, [r3, #4]
 800545c:	4b0e      	ldr	r3, [pc, #56]	; (8005498 <vTaskPlaceOnEventListRestricted+0x88>)
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	f103 0218 	add.w	r2, r3, #24
 8005464:	697b      	ldr	r3, [r7, #20]
 8005466:	609a      	str	r2, [r3, #8]
 8005468:	4b0b      	ldr	r3, [pc, #44]	; (8005498 <vTaskPlaceOnEventListRestricted+0x88>)
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	68fa      	ldr	r2, [r7, #12]
 800546e:	629a      	str	r2, [r3, #40]	; 0x28
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	1c5a      	adds	r2, r3, #1
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	2b00      	cmp	r3, #0
 800547e:	d002      	beq.n	8005486 <vTaskPlaceOnEventListRestricted+0x76>
        {
            xTicksToWait = portMAX_DELAY;
 8005480:	f04f 33ff 	mov.w	r3, #4294967295
 8005484:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005486:	6879      	ldr	r1, [r7, #4]
 8005488:	68b8      	ldr	r0, [r7, #8]
 800548a:	f000 fa25 	bl	80058d8 <prvAddCurrentTaskToDelayedList>
    }
 800548e:	bf00      	nop
 8005490:	3718      	adds	r7, #24
 8005492:	46bd      	mov	sp, r7
 8005494:	bd80      	pop	{r7, pc}
 8005496:	bf00      	nop
 8005498:	2000016c 	.word	0x2000016c

0800549c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800549c:	b480      	push	{r7}
 800549e:	b08b      	sub	sp, #44	; 0x2c
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	68db      	ldr	r3, [r3, #12]
 80054a8:	68db      	ldr	r3, [r3, #12]
 80054aa:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 80054ac:	6a3b      	ldr	r3, [r7, #32]
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d10a      	bne.n	80054c8 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 80054b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054b6:	f383 8811 	msr	BASEPRI, r3
 80054ba:	f3bf 8f6f 	isb	sy
 80054be:	f3bf 8f4f 	dsb	sy
 80054c2:	60fb      	str	r3, [r7, #12]
    }
 80054c4:	bf00      	nop
 80054c6:	e7fe      	b.n	80054c6 <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 80054c8:	6a3b      	ldr	r3, [r7, #32]
 80054ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054cc:	61fb      	str	r3, [r7, #28]
 80054ce:	6a3b      	ldr	r3, [r7, #32]
 80054d0:	69db      	ldr	r3, [r3, #28]
 80054d2:	6a3a      	ldr	r2, [r7, #32]
 80054d4:	6a12      	ldr	r2, [r2, #32]
 80054d6:	609a      	str	r2, [r3, #8]
 80054d8:	6a3b      	ldr	r3, [r7, #32]
 80054da:	6a1b      	ldr	r3, [r3, #32]
 80054dc:	6a3a      	ldr	r2, [r7, #32]
 80054de:	69d2      	ldr	r2, [r2, #28]
 80054e0:	605a      	str	r2, [r3, #4]
 80054e2:	69fb      	ldr	r3, [r7, #28]
 80054e4:	685a      	ldr	r2, [r3, #4]
 80054e6:	6a3b      	ldr	r3, [r7, #32]
 80054e8:	3318      	adds	r3, #24
 80054ea:	429a      	cmp	r2, r3
 80054ec:	d103      	bne.n	80054f6 <xTaskRemoveFromEventList+0x5a>
 80054ee:	6a3b      	ldr	r3, [r7, #32]
 80054f0:	6a1a      	ldr	r2, [r3, #32]
 80054f2:	69fb      	ldr	r3, [r7, #28]
 80054f4:	605a      	str	r2, [r3, #4]
 80054f6:	6a3b      	ldr	r3, [r7, #32]
 80054f8:	2200      	movs	r2, #0
 80054fa:	629a      	str	r2, [r3, #40]	; 0x28
 80054fc:	69fb      	ldr	r3, [r7, #28]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	1e5a      	subs	r2, r3, #1
 8005502:	69fb      	ldr	r3, [r7, #28]
 8005504:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005506:	4b4a      	ldr	r3, [pc, #296]	; (8005630 <xTaskRemoveFromEventList+0x194>)
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	2b00      	cmp	r3, #0
 800550c:	d15e      	bne.n	80055cc <xTaskRemoveFromEventList+0x130>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 800550e:	6a3b      	ldr	r3, [r7, #32]
 8005510:	695b      	ldr	r3, [r3, #20]
 8005512:	617b      	str	r3, [r7, #20]
 8005514:	6a3b      	ldr	r3, [r7, #32]
 8005516:	689b      	ldr	r3, [r3, #8]
 8005518:	6a3a      	ldr	r2, [r7, #32]
 800551a:	68d2      	ldr	r2, [r2, #12]
 800551c:	609a      	str	r2, [r3, #8]
 800551e:	6a3b      	ldr	r3, [r7, #32]
 8005520:	68db      	ldr	r3, [r3, #12]
 8005522:	6a3a      	ldr	r2, [r7, #32]
 8005524:	6892      	ldr	r2, [r2, #8]
 8005526:	605a      	str	r2, [r3, #4]
 8005528:	697b      	ldr	r3, [r7, #20]
 800552a:	685a      	ldr	r2, [r3, #4]
 800552c:	6a3b      	ldr	r3, [r7, #32]
 800552e:	3304      	adds	r3, #4
 8005530:	429a      	cmp	r2, r3
 8005532:	d103      	bne.n	800553c <xTaskRemoveFromEventList+0xa0>
 8005534:	6a3b      	ldr	r3, [r7, #32]
 8005536:	68da      	ldr	r2, [r3, #12]
 8005538:	697b      	ldr	r3, [r7, #20]
 800553a:	605a      	str	r2, [r3, #4]
 800553c:	6a3b      	ldr	r3, [r7, #32]
 800553e:	2200      	movs	r2, #0
 8005540:	615a      	str	r2, [r3, #20]
 8005542:	697b      	ldr	r3, [r7, #20]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	1e5a      	subs	r2, r3, #1
 8005548:	697b      	ldr	r3, [r7, #20]
 800554a:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 800554c:	6a3b      	ldr	r3, [r7, #32]
 800554e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005550:	2201      	movs	r2, #1
 8005552:	409a      	lsls	r2, r3
 8005554:	4b37      	ldr	r3, [pc, #220]	; (8005634 <xTaskRemoveFromEventList+0x198>)
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	4313      	orrs	r3, r2
 800555a:	4a36      	ldr	r2, [pc, #216]	; (8005634 <xTaskRemoveFromEventList+0x198>)
 800555c:	6013      	str	r3, [r2, #0]
 800555e:	6a3b      	ldr	r3, [r7, #32]
 8005560:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005562:	4935      	ldr	r1, [pc, #212]	; (8005638 <xTaskRemoveFromEventList+0x19c>)
 8005564:	4613      	mov	r3, r2
 8005566:	009b      	lsls	r3, r3, #2
 8005568:	4413      	add	r3, r2
 800556a:	009b      	lsls	r3, r3, #2
 800556c:	440b      	add	r3, r1
 800556e:	3304      	adds	r3, #4
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	613b      	str	r3, [r7, #16]
 8005574:	6a3b      	ldr	r3, [r7, #32]
 8005576:	693a      	ldr	r2, [r7, #16]
 8005578:	609a      	str	r2, [r3, #8]
 800557a:	693b      	ldr	r3, [r7, #16]
 800557c:	689a      	ldr	r2, [r3, #8]
 800557e:	6a3b      	ldr	r3, [r7, #32]
 8005580:	60da      	str	r2, [r3, #12]
 8005582:	693b      	ldr	r3, [r7, #16]
 8005584:	689b      	ldr	r3, [r3, #8]
 8005586:	6a3a      	ldr	r2, [r7, #32]
 8005588:	3204      	adds	r2, #4
 800558a:	605a      	str	r2, [r3, #4]
 800558c:	6a3b      	ldr	r3, [r7, #32]
 800558e:	1d1a      	adds	r2, r3, #4
 8005590:	693b      	ldr	r3, [r7, #16]
 8005592:	609a      	str	r2, [r3, #8]
 8005594:	6a3b      	ldr	r3, [r7, #32]
 8005596:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005598:	4613      	mov	r3, r2
 800559a:	009b      	lsls	r3, r3, #2
 800559c:	4413      	add	r3, r2
 800559e:	009b      	lsls	r3, r3, #2
 80055a0:	4a25      	ldr	r2, [pc, #148]	; (8005638 <xTaskRemoveFromEventList+0x19c>)
 80055a2:	441a      	add	r2, r3
 80055a4:	6a3b      	ldr	r3, [r7, #32]
 80055a6:	615a      	str	r2, [r3, #20]
 80055a8:	6a3b      	ldr	r3, [r7, #32]
 80055aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055ac:	4922      	ldr	r1, [pc, #136]	; (8005638 <xTaskRemoveFromEventList+0x19c>)
 80055ae:	4613      	mov	r3, r2
 80055b0:	009b      	lsls	r3, r3, #2
 80055b2:	4413      	add	r3, r2
 80055b4:	009b      	lsls	r3, r3, #2
 80055b6:	440b      	add	r3, r1
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	1c59      	adds	r1, r3, #1
 80055bc:	481e      	ldr	r0, [pc, #120]	; (8005638 <xTaskRemoveFromEventList+0x19c>)
 80055be:	4613      	mov	r3, r2
 80055c0:	009b      	lsls	r3, r3, #2
 80055c2:	4413      	add	r3, r2
 80055c4:	009b      	lsls	r3, r3, #2
 80055c6:	4403      	add	r3, r0
 80055c8:	6019      	str	r1, [r3, #0]
 80055ca:	e01b      	b.n	8005604 <xTaskRemoveFromEventList+0x168>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80055cc:	4b1b      	ldr	r3, [pc, #108]	; (800563c <xTaskRemoveFromEventList+0x1a0>)
 80055ce:	685b      	ldr	r3, [r3, #4]
 80055d0:	61bb      	str	r3, [r7, #24]
 80055d2:	6a3b      	ldr	r3, [r7, #32]
 80055d4:	69ba      	ldr	r2, [r7, #24]
 80055d6:	61da      	str	r2, [r3, #28]
 80055d8:	69bb      	ldr	r3, [r7, #24]
 80055da:	689a      	ldr	r2, [r3, #8]
 80055dc:	6a3b      	ldr	r3, [r7, #32]
 80055de:	621a      	str	r2, [r3, #32]
 80055e0:	69bb      	ldr	r3, [r7, #24]
 80055e2:	689b      	ldr	r3, [r3, #8]
 80055e4:	6a3a      	ldr	r2, [r7, #32]
 80055e6:	3218      	adds	r2, #24
 80055e8:	605a      	str	r2, [r3, #4]
 80055ea:	6a3b      	ldr	r3, [r7, #32]
 80055ec:	f103 0218 	add.w	r2, r3, #24
 80055f0:	69bb      	ldr	r3, [r7, #24]
 80055f2:	609a      	str	r2, [r3, #8]
 80055f4:	6a3b      	ldr	r3, [r7, #32]
 80055f6:	4a11      	ldr	r2, [pc, #68]	; (800563c <xTaskRemoveFromEventList+0x1a0>)
 80055f8:	629a      	str	r2, [r3, #40]	; 0x28
 80055fa:	4b10      	ldr	r3, [pc, #64]	; (800563c <xTaskRemoveFromEventList+0x1a0>)
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	3301      	adds	r3, #1
 8005600:	4a0e      	ldr	r2, [pc, #56]	; (800563c <xTaskRemoveFromEventList+0x1a0>)
 8005602:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005604:	6a3b      	ldr	r3, [r7, #32]
 8005606:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005608:	4b0d      	ldr	r3, [pc, #52]	; (8005640 <xTaskRemoveFromEventList+0x1a4>)
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800560e:	429a      	cmp	r2, r3
 8005610:	d905      	bls.n	800561e <xTaskRemoveFromEventList+0x182>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8005612:	2301      	movs	r3, #1
 8005614:	627b      	str	r3, [r7, #36]	; 0x24

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8005616:	4b0b      	ldr	r3, [pc, #44]	; (8005644 <xTaskRemoveFromEventList+0x1a8>)
 8005618:	2201      	movs	r2, #1
 800561a:	601a      	str	r2, [r3, #0]
 800561c:	e001      	b.n	8005622 <xTaskRemoveFromEventList+0x186>
    }
    else
    {
        xReturn = pdFALSE;
 800561e:	2300      	movs	r3, #0
 8005620:	627b      	str	r3, [r7, #36]	; 0x24
    }

    return xReturn;
 8005622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005624:	4618      	mov	r0, r3
 8005626:	372c      	adds	r7, #44	; 0x2c
 8005628:	46bd      	mov	sp, r7
 800562a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800562e:	4770      	bx	lr
 8005630:	2000026c 	.word	0x2000026c
 8005634:	2000024c 	.word	0x2000024c
 8005638:	20000170 	.word	0x20000170
 800563c:	20000204 	.word	0x20000204
 8005640:	2000016c 	.word	0x2000016c
 8005644:	20000258 	.word	0x20000258

08005648 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005648:	b480      	push	{r7}
 800564a:	b083      	sub	sp, #12
 800564c:	af00      	add	r7, sp, #0
 800564e:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005650:	4b06      	ldr	r3, [pc, #24]	; (800566c <vTaskInternalSetTimeOutState+0x24>)
 8005652:	681a      	ldr	r2, [r3, #0]
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8005658:	4b05      	ldr	r3, [pc, #20]	; (8005670 <vTaskInternalSetTimeOutState+0x28>)
 800565a:	681a      	ldr	r2, [r3, #0]
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	605a      	str	r2, [r3, #4]
}
 8005660:	bf00      	nop
 8005662:	370c      	adds	r7, #12
 8005664:	46bd      	mov	sp, r7
 8005666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566a:	4770      	bx	lr
 800566c:	2000025c 	.word	0x2000025c
 8005670:	20000248 	.word	0x20000248

08005674 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8005674:	b580      	push	{r7, lr}
 8005676:	b088      	sub	sp, #32
 8005678:	af00      	add	r7, sp, #0
 800567a:	6078      	str	r0, [r7, #4]
 800567c:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	2b00      	cmp	r3, #0
 8005682:	d10a      	bne.n	800569a <xTaskCheckForTimeOut+0x26>
        __asm volatile
 8005684:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005688:	f383 8811 	msr	BASEPRI, r3
 800568c:	f3bf 8f6f 	isb	sy
 8005690:	f3bf 8f4f 	dsb	sy
 8005694:	613b      	str	r3, [r7, #16]
    }
 8005696:	bf00      	nop
 8005698:	e7fe      	b.n	8005698 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 800569a:	683b      	ldr	r3, [r7, #0]
 800569c:	2b00      	cmp	r3, #0
 800569e:	d10a      	bne.n	80056b6 <xTaskCheckForTimeOut+0x42>
        __asm volatile
 80056a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056a4:	f383 8811 	msr	BASEPRI, r3
 80056a8:	f3bf 8f6f 	isb	sy
 80056ac:	f3bf 8f4f 	dsb	sy
 80056b0:	60fb      	str	r3, [r7, #12]
    }
 80056b2:	bf00      	nop
 80056b4:	e7fe      	b.n	80056b4 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 80056b6:	f000 fd37 	bl	8006128 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 80056ba:	4b1f      	ldr	r3, [pc, #124]	; (8005738 <xTaskCheckForTimeOut+0xc4>)
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	685b      	ldr	r3, [r3, #4]
 80056c4:	69ba      	ldr	r2, [r7, #24]
 80056c6:	1ad3      	subs	r3, r2, r3
 80056c8:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 80056ca:	683b      	ldr	r3, [r7, #0]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056d2:	d102      	bne.n	80056da <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 80056d4:	2300      	movs	r3, #0
 80056d6:	61fb      	str	r3, [r7, #28]
 80056d8:	e026      	b.n	8005728 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681a      	ldr	r2, [r3, #0]
 80056de:	4b17      	ldr	r3, [pc, #92]	; (800573c <xTaskCheckForTimeOut+0xc8>)
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	429a      	cmp	r2, r3
 80056e4:	d00a      	beq.n	80056fc <xTaskCheckForTimeOut+0x88>
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	685b      	ldr	r3, [r3, #4]
 80056ea:	69ba      	ldr	r2, [r7, #24]
 80056ec:	429a      	cmp	r2, r3
 80056ee:	d305      	bcc.n	80056fc <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 80056f0:	2301      	movs	r3, #1
 80056f2:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 80056f4:	683b      	ldr	r3, [r7, #0]
 80056f6:	2200      	movs	r2, #0
 80056f8:	601a      	str	r2, [r3, #0]
 80056fa:	e015      	b.n	8005728 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80056fc:	683b      	ldr	r3, [r7, #0]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	697a      	ldr	r2, [r7, #20]
 8005702:	429a      	cmp	r2, r3
 8005704:	d20b      	bcs.n	800571e <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8005706:	683b      	ldr	r3, [r7, #0]
 8005708:	681a      	ldr	r2, [r3, #0]
 800570a:	697b      	ldr	r3, [r7, #20]
 800570c:	1ad2      	subs	r2, r2, r3
 800570e:	683b      	ldr	r3, [r7, #0]
 8005710:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8005712:	6878      	ldr	r0, [r7, #4]
 8005714:	f7ff ff98 	bl	8005648 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8005718:	2300      	movs	r3, #0
 800571a:	61fb      	str	r3, [r7, #28]
 800571c:	e004      	b.n	8005728 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 800571e:	683b      	ldr	r3, [r7, #0]
 8005720:	2200      	movs	r2, #0
 8005722:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8005724:	2301      	movs	r3, #1
 8005726:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8005728:	f000 fd2e 	bl	8006188 <vPortExitCritical>

    return xReturn;
 800572c:	69fb      	ldr	r3, [r7, #28]
}
 800572e:	4618      	mov	r0, r3
 8005730:	3720      	adds	r7, #32
 8005732:	46bd      	mov	sp, r7
 8005734:	bd80      	pop	{r7, pc}
 8005736:	bf00      	nop
 8005738:	20000248 	.word	0x20000248
 800573c:	2000025c 	.word	0x2000025c

08005740 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005740:	b480      	push	{r7}
 8005742:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8005744:	4b03      	ldr	r3, [pc, #12]	; (8005754 <vTaskMissedYield+0x14>)
 8005746:	2201      	movs	r2, #1
 8005748:	601a      	str	r2, [r3, #0]
}
 800574a:	bf00      	nop
 800574c:	46bd      	mov	sp, r7
 800574e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005752:	4770      	bx	lr
 8005754:	20000258 	.word	0x20000258

08005758 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005758:	b580      	push	{r7, lr}
 800575a:	b082      	sub	sp, #8
 800575c:	af00      	add	r7, sp, #0
 800575e:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8005760:	f000 f842 	bl	80057e8 <prvCheckTasksWaitingTermination>
 8005764:	e7fc      	b.n	8005760 <prvIdleTask+0x8>
	...

08005768 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005768:	b580      	push	{r7, lr}
 800576a:	b082      	sub	sp, #8
 800576c:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800576e:	2300      	movs	r3, #0
 8005770:	607b      	str	r3, [r7, #4]
 8005772:	e00c      	b.n	800578e <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005774:	687a      	ldr	r2, [r7, #4]
 8005776:	4613      	mov	r3, r2
 8005778:	009b      	lsls	r3, r3, #2
 800577a:	4413      	add	r3, r2
 800577c:	009b      	lsls	r3, r3, #2
 800577e:	4a12      	ldr	r2, [pc, #72]	; (80057c8 <prvInitialiseTaskLists+0x60>)
 8005780:	4413      	add	r3, r2
 8005782:	4618      	mov	r0, r3
 8005784:	f7fe fc3c 	bl	8004000 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	3301      	adds	r3, #1
 800578c:	607b      	str	r3, [r7, #4]
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	2b04      	cmp	r3, #4
 8005792:	d9ef      	bls.n	8005774 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8005794:	480d      	ldr	r0, [pc, #52]	; (80057cc <prvInitialiseTaskLists+0x64>)
 8005796:	f7fe fc33 	bl	8004000 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 800579a:	480d      	ldr	r0, [pc, #52]	; (80057d0 <prvInitialiseTaskLists+0x68>)
 800579c:	f7fe fc30 	bl	8004000 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 80057a0:	480c      	ldr	r0, [pc, #48]	; (80057d4 <prvInitialiseTaskLists+0x6c>)
 80057a2:	f7fe fc2d 	bl	8004000 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 80057a6:	480c      	ldr	r0, [pc, #48]	; (80057d8 <prvInitialiseTaskLists+0x70>)
 80057a8:	f7fe fc2a 	bl	8004000 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 80057ac:	480b      	ldr	r0, [pc, #44]	; (80057dc <prvInitialiseTaskLists+0x74>)
 80057ae:	f7fe fc27 	bl	8004000 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 80057b2:	4b0b      	ldr	r3, [pc, #44]	; (80057e0 <prvInitialiseTaskLists+0x78>)
 80057b4:	4a05      	ldr	r2, [pc, #20]	; (80057cc <prvInitialiseTaskLists+0x64>)
 80057b6:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80057b8:	4b0a      	ldr	r3, [pc, #40]	; (80057e4 <prvInitialiseTaskLists+0x7c>)
 80057ba:	4a05      	ldr	r2, [pc, #20]	; (80057d0 <prvInitialiseTaskLists+0x68>)
 80057bc:	601a      	str	r2, [r3, #0]
}
 80057be:	bf00      	nop
 80057c0:	3708      	adds	r7, #8
 80057c2:	46bd      	mov	sp, r7
 80057c4:	bd80      	pop	{r7, pc}
 80057c6:	bf00      	nop
 80057c8:	20000170 	.word	0x20000170
 80057cc:	200001d4 	.word	0x200001d4
 80057d0:	200001e8 	.word	0x200001e8
 80057d4:	20000204 	.word	0x20000204
 80057d8:	20000218 	.word	0x20000218
 80057dc:	20000230 	.word	0x20000230
 80057e0:	200001fc 	.word	0x200001fc
 80057e4:	20000200 	.word	0x20000200

080057e8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80057e8:	b580      	push	{r7, lr}
 80057ea:	b082      	sub	sp, #8
 80057ec:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80057ee:	e019      	b.n	8005824 <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 80057f0:	f000 fc9a 	bl	8006128 <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80057f4:	4b10      	ldr	r3, [pc, #64]	; (8005838 <prvCheckTasksWaitingTermination+0x50>)
 80057f6:	68db      	ldr	r3, [r3, #12]
 80057f8:	68db      	ldr	r3, [r3, #12]
 80057fa:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	3304      	adds	r3, #4
 8005800:	4618      	mov	r0, r3
 8005802:	f7fe fc87 	bl	8004114 <uxListRemove>
                --uxCurrentNumberOfTasks;
 8005806:	4b0d      	ldr	r3, [pc, #52]	; (800583c <prvCheckTasksWaitingTermination+0x54>)
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	3b01      	subs	r3, #1
 800580c:	4a0b      	ldr	r2, [pc, #44]	; (800583c <prvCheckTasksWaitingTermination+0x54>)
 800580e:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 8005810:	4b0b      	ldr	r3, [pc, #44]	; (8005840 <prvCheckTasksWaitingTermination+0x58>)
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	3b01      	subs	r3, #1
 8005816:	4a0a      	ldr	r2, [pc, #40]	; (8005840 <prvCheckTasksWaitingTermination+0x58>)
 8005818:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 800581a:	f000 fcb5 	bl	8006188 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 800581e:	6878      	ldr	r0, [r7, #4]
 8005820:	f000 f810 	bl	8005844 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005824:	4b06      	ldr	r3, [pc, #24]	; (8005840 <prvCheckTasksWaitingTermination+0x58>)
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	2b00      	cmp	r3, #0
 800582a:	d1e1      	bne.n	80057f0 <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 800582c:	bf00      	nop
 800582e:	bf00      	nop
 8005830:	3708      	adds	r7, #8
 8005832:	46bd      	mov	sp, r7
 8005834:	bd80      	pop	{r7, pc}
 8005836:	bf00      	nop
 8005838:	20000218 	.word	0x20000218
 800583c:	20000244 	.word	0x20000244
 8005840:	2000022c 	.word	0x2000022c

08005844 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8005844:	b580      	push	{r7, lr}
 8005846:	b082      	sub	sp, #8
 8005848:	af00      	add	r7, sp, #0
 800584a:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005850:	4618      	mov	r0, r3
 8005852:	f000 fe45 	bl	80064e0 <vPortFree>
            vPortFree( pxTCB );
 8005856:	6878      	ldr	r0, [r7, #4]
 8005858:	f000 fe42 	bl	80064e0 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 800585c:	bf00      	nop
 800585e:	3708      	adds	r7, #8
 8005860:	46bd      	mov	sp, r7
 8005862:	bd80      	pop	{r7, pc}

08005864 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005864:	b480      	push	{r7}
 8005866:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005868:	4b0a      	ldr	r3, [pc, #40]	; (8005894 <prvResetNextTaskUnblockTime+0x30>)
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	2b00      	cmp	r3, #0
 8005870:	d104      	bne.n	800587c <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8005872:	4b09      	ldr	r3, [pc, #36]	; (8005898 <prvResetNextTaskUnblockTime+0x34>)
 8005874:	f04f 32ff 	mov.w	r2, #4294967295
 8005878:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 800587a:	e005      	b.n	8005888 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 800587c:	4b05      	ldr	r3, [pc, #20]	; (8005894 <prvResetNextTaskUnblockTime+0x30>)
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	68db      	ldr	r3, [r3, #12]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	4a04      	ldr	r2, [pc, #16]	; (8005898 <prvResetNextTaskUnblockTime+0x34>)
 8005886:	6013      	str	r3, [r2, #0]
}
 8005888:	bf00      	nop
 800588a:	46bd      	mov	sp, r7
 800588c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005890:	4770      	bx	lr
 8005892:	bf00      	nop
 8005894:	200001fc 	.word	0x200001fc
 8005898:	20000264 	.word	0x20000264

0800589c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 800589c:	b480      	push	{r7}
 800589e:	b083      	sub	sp, #12
 80058a0:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 80058a2:	4b0b      	ldr	r3, [pc, #44]	; (80058d0 <xTaskGetSchedulerState+0x34>)
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d102      	bne.n	80058b0 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 80058aa:	2301      	movs	r3, #1
 80058ac:	607b      	str	r3, [r7, #4]
 80058ae:	e008      	b.n	80058c2 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80058b0:	4b08      	ldr	r3, [pc, #32]	; (80058d4 <xTaskGetSchedulerState+0x38>)
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d102      	bne.n	80058be <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 80058b8:	2302      	movs	r3, #2
 80058ba:	607b      	str	r3, [r7, #4]
 80058bc:	e001      	b.n	80058c2 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 80058be:	2300      	movs	r3, #0
 80058c0:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 80058c2:	687b      	ldr	r3, [r7, #4]
    }
 80058c4:	4618      	mov	r0, r3
 80058c6:	370c      	adds	r7, #12
 80058c8:	46bd      	mov	sp, r7
 80058ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ce:	4770      	bx	lr
 80058d0:	20000250 	.word	0x20000250
 80058d4:	2000026c 	.word	0x2000026c

080058d8 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 80058d8:	b580      	push	{r7, lr}
 80058da:	b086      	sub	sp, #24
 80058dc:	af00      	add	r7, sp, #0
 80058de:	6078      	str	r0, [r7, #4]
 80058e0:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 80058e2:	4b36      	ldr	r3, [pc, #216]	; (80059bc <prvAddCurrentTaskToDelayedList+0xe4>)
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80058e8:	4b35      	ldr	r3, [pc, #212]	; (80059c0 <prvAddCurrentTaskToDelayedList+0xe8>)
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	3304      	adds	r3, #4
 80058ee:	4618      	mov	r0, r3
 80058f0:	f7fe fc10 	bl	8004114 <uxListRemove>
 80058f4:	4603      	mov	r3, r0
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d10b      	bne.n	8005912 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80058fa:	4b31      	ldr	r3, [pc, #196]	; (80059c0 <prvAddCurrentTaskToDelayedList+0xe8>)
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005900:	2201      	movs	r2, #1
 8005902:	fa02 f303 	lsl.w	r3, r2, r3
 8005906:	43da      	mvns	r2, r3
 8005908:	4b2e      	ldr	r3, [pc, #184]	; (80059c4 <prvAddCurrentTaskToDelayedList+0xec>)
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	4013      	ands	r3, r2
 800590e:	4a2d      	ldr	r2, [pc, #180]	; (80059c4 <prvAddCurrentTaskToDelayedList+0xec>)
 8005910:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005918:	d124      	bne.n	8005964 <prvAddCurrentTaskToDelayedList+0x8c>
 800591a:	683b      	ldr	r3, [r7, #0]
 800591c:	2b00      	cmp	r3, #0
 800591e:	d021      	beq.n	8005964 <prvAddCurrentTaskToDelayedList+0x8c>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005920:	4b29      	ldr	r3, [pc, #164]	; (80059c8 <prvAddCurrentTaskToDelayedList+0xf0>)
 8005922:	685b      	ldr	r3, [r3, #4]
 8005924:	613b      	str	r3, [r7, #16]
 8005926:	4b26      	ldr	r3, [pc, #152]	; (80059c0 <prvAddCurrentTaskToDelayedList+0xe8>)
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	693a      	ldr	r2, [r7, #16]
 800592c:	609a      	str	r2, [r3, #8]
 800592e:	4b24      	ldr	r3, [pc, #144]	; (80059c0 <prvAddCurrentTaskToDelayedList+0xe8>)
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	693a      	ldr	r2, [r7, #16]
 8005934:	6892      	ldr	r2, [r2, #8]
 8005936:	60da      	str	r2, [r3, #12]
 8005938:	4b21      	ldr	r3, [pc, #132]	; (80059c0 <prvAddCurrentTaskToDelayedList+0xe8>)
 800593a:	681a      	ldr	r2, [r3, #0]
 800593c:	693b      	ldr	r3, [r7, #16]
 800593e:	689b      	ldr	r3, [r3, #8]
 8005940:	3204      	adds	r2, #4
 8005942:	605a      	str	r2, [r3, #4]
 8005944:	4b1e      	ldr	r3, [pc, #120]	; (80059c0 <prvAddCurrentTaskToDelayedList+0xe8>)
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	1d1a      	adds	r2, r3, #4
 800594a:	693b      	ldr	r3, [r7, #16]
 800594c:	609a      	str	r2, [r3, #8]
 800594e:	4b1c      	ldr	r3, [pc, #112]	; (80059c0 <prvAddCurrentTaskToDelayedList+0xe8>)
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	4a1d      	ldr	r2, [pc, #116]	; (80059c8 <prvAddCurrentTaskToDelayedList+0xf0>)
 8005954:	615a      	str	r2, [r3, #20]
 8005956:	4b1c      	ldr	r3, [pc, #112]	; (80059c8 <prvAddCurrentTaskToDelayedList+0xf0>)
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	3301      	adds	r3, #1
 800595c:	4a1a      	ldr	r2, [pc, #104]	; (80059c8 <prvAddCurrentTaskToDelayedList+0xf0>)
 800595e:	6013      	str	r3, [r2, #0]
 8005960:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 8005962:	e026      	b.n	80059b2 <prvAddCurrentTaskToDelayedList+0xda>
            xTimeToWake = xConstTickCount + xTicksToWait;
 8005964:	697a      	ldr	r2, [r7, #20]
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	4413      	add	r3, r2
 800596a:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800596c:	4b14      	ldr	r3, [pc, #80]	; (80059c0 <prvAddCurrentTaskToDelayedList+0xe8>)
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	68fa      	ldr	r2, [r7, #12]
 8005972:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 8005974:	68fa      	ldr	r2, [r7, #12]
 8005976:	697b      	ldr	r3, [r7, #20]
 8005978:	429a      	cmp	r2, r3
 800597a:	d209      	bcs.n	8005990 <prvAddCurrentTaskToDelayedList+0xb8>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800597c:	4b13      	ldr	r3, [pc, #76]	; (80059cc <prvAddCurrentTaskToDelayedList+0xf4>)
 800597e:	681a      	ldr	r2, [r3, #0]
 8005980:	4b0f      	ldr	r3, [pc, #60]	; (80059c0 <prvAddCurrentTaskToDelayedList+0xe8>)
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	3304      	adds	r3, #4
 8005986:	4619      	mov	r1, r3
 8005988:	4610      	mov	r0, r2
 800598a:	f7fe fb8a 	bl	80040a2 <vListInsert>
}
 800598e:	e010      	b.n	80059b2 <prvAddCurrentTaskToDelayedList+0xda>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005990:	4b0f      	ldr	r3, [pc, #60]	; (80059d0 <prvAddCurrentTaskToDelayedList+0xf8>)
 8005992:	681a      	ldr	r2, [r3, #0]
 8005994:	4b0a      	ldr	r3, [pc, #40]	; (80059c0 <prvAddCurrentTaskToDelayedList+0xe8>)
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	3304      	adds	r3, #4
 800599a:	4619      	mov	r1, r3
 800599c:	4610      	mov	r0, r2
 800599e:	f7fe fb80 	bl	80040a2 <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 80059a2:	4b0c      	ldr	r3, [pc, #48]	; (80059d4 <prvAddCurrentTaskToDelayedList+0xfc>)
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	68fa      	ldr	r2, [r7, #12]
 80059a8:	429a      	cmp	r2, r3
 80059aa:	d202      	bcs.n	80059b2 <prvAddCurrentTaskToDelayedList+0xda>
                    xNextTaskUnblockTime = xTimeToWake;
 80059ac:	4a09      	ldr	r2, [pc, #36]	; (80059d4 <prvAddCurrentTaskToDelayedList+0xfc>)
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	6013      	str	r3, [r2, #0]
}
 80059b2:	bf00      	nop
 80059b4:	3718      	adds	r7, #24
 80059b6:	46bd      	mov	sp, r7
 80059b8:	bd80      	pop	{r7, pc}
 80059ba:	bf00      	nop
 80059bc:	20000248 	.word	0x20000248
 80059c0:	2000016c 	.word	0x2000016c
 80059c4:	2000024c 	.word	0x2000024c
 80059c8:	20000230 	.word	0x20000230
 80059cc:	20000200 	.word	0x20000200
 80059d0:	200001fc 	.word	0x200001fc
 80059d4:	20000264 	.word	0x20000264

080059d8 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 80059d8:	b580      	push	{r7, lr}
 80059da:	b084      	sub	sp, #16
 80059dc:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 80059de:	2300      	movs	r3, #0
 80059e0:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 80059e2:	f000 fa47 	bl	8005e74 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 80059e6:	4b11      	ldr	r3, [pc, #68]	; (8005a2c <xTimerCreateTimerTask+0x54>)
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d00a      	beq.n	8005a04 <xTimerCreateTimerTask+0x2c>
                    xReturn = pdPASS;
                }
            }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
            {
                xReturn = xTaskCreate( prvTimerTask,
 80059ee:	4b10      	ldr	r3, [pc, #64]	; (8005a30 <xTimerCreateTimerTask+0x58>)
 80059f0:	9301      	str	r3, [sp, #4]
 80059f2:	2303      	movs	r3, #3
 80059f4:	9300      	str	r3, [sp, #0]
 80059f6:	2300      	movs	r3, #0
 80059f8:	2280      	movs	r2, #128	; 0x80
 80059fa:	490e      	ldr	r1, [pc, #56]	; (8005a34 <xTimerCreateTimerTask+0x5c>)
 80059fc:	480e      	ldr	r0, [pc, #56]	; (8005a38 <xTimerCreateTimerTask+0x60>)
 80059fe:	f7fe fef7 	bl	80047f0 <xTaskCreate>
 8005a02:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d10a      	bne.n	8005a20 <xTimerCreateTimerTask+0x48>
        __asm volatile
 8005a0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a0e:	f383 8811 	msr	BASEPRI, r3
 8005a12:	f3bf 8f6f 	isb	sy
 8005a16:	f3bf 8f4f 	dsb	sy
 8005a1a:	603b      	str	r3, [r7, #0]
    }
 8005a1c:	bf00      	nop
 8005a1e:	e7fe      	b.n	8005a1e <xTimerCreateTimerTask+0x46>
        return xReturn;
 8005a20:	687b      	ldr	r3, [r7, #4]
    }
 8005a22:	4618      	mov	r0, r3
 8005a24:	3708      	adds	r7, #8
 8005a26:	46bd      	mov	sp, r7
 8005a28:	bd80      	pop	{r7, pc}
 8005a2a:	bf00      	nop
 8005a2c:	200002a0 	.word	0x200002a0
 8005a30:	200002a4 	.word	0x200002a4
 8005a34:	080067c0 	.word	0x080067c0
 8005a38:	08005ae1 	.word	0x08005ae1

08005a3c <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 8005a3c:	b580      	push	{r7, lr}
 8005a3e:	b084      	sub	sp, #16
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	60f8      	str	r0, [r7, #12]
 8005a44:	60b9      	str	r1, [r7, #8]
 8005a46:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8005a48:	e008      	b.n	8005a5c <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	699b      	ldr	r3, [r3, #24]
 8005a4e:	68ba      	ldr	r2, [r7, #8]
 8005a50:	4413      	add	r3, r2
 8005a52:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	6a1b      	ldr	r3, [r3, #32]
 8005a58:	68f8      	ldr	r0, [r7, #12]
 8005a5a:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	699a      	ldr	r2, [r3, #24]
 8005a60:	68bb      	ldr	r3, [r7, #8]
 8005a62:	18d1      	adds	r1, r2, r3
 8005a64:	68bb      	ldr	r3, [r7, #8]
 8005a66:	687a      	ldr	r2, [r7, #4]
 8005a68:	68f8      	ldr	r0, [r7, #12]
 8005a6a:	f000 f8dd 	bl	8005c28 <prvInsertTimerInActiveList>
 8005a6e:	4603      	mov	r3, r0
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d1ea      	bne.n	8005a4a <prvReloadTimer+0xe>
        }
    }
 8005a74:	bf00      	nop
 8005a76:	bf00      	nop
 8005a78:	3710      	adds	r7, #16
 8005a7a:	46bd      	mov	sp, r7
 8005a7c:	bd80      	pop	{r7, pc}
	...

08005a80 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8005a80:	b580      	push	{r7, lr}
 8005a82:	b084      	sub	sp, #16
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	6078      	str	r0, [r7, #4]
 8005a88:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005a8a:	4b14      	ldr	r3, [pc, #80]	; (8005adc <prvProcessExpiredTimer+0x5c>)
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	68db      	ldr	r3, [r3, #12]
 8005a90:	68db      	ldr	r3, [r3, #12]
 8005a92:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	3304      	adds	r3, #4
 8005a98:	4618      	mov	r0, r3
 8005a9a:	f7fe fb3b 	bl	8004114 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005aa4:	f003 0304 	and.w	r3, r3, #4
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d005      	beq.n	8005ab8 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 8005aac:	683a      	ldr	r2, [r7, #0]
 8005aae:	6879      	ldr	r1, [r7, #4]
 8005ab0:	68f8      	ldr	r0, [r7, #12]
 8005ab2:	f7ff ffc3 	bl	8005a3c <prvReloadTimer>
 8005ab6:	e008      	b.n	8005aca <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005abe:	f023 0301 	bic.w	r3, r3, #1
 8005ac2:	b2da      	uxtb	r2, r3
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	6a1b      	ldr	r3, [r3, #32]
 8005ace:	68f8      	ldr	r0, [r7, #12]
 8005ad0:	4798      	blx	r3
    }
 8005ad2:	bf00      	nop
 8005ad4:	3710      	adds	r7, #16
 8005ad6:	46bd      	mov	sp, r7
 8005ad8:	bd80      	pop	{r7, pc}
 8005ada:	bf00      	nop
 8005adc:	20000298 	.word	0x20000298

08005ae0 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8005ae0:	b580      	push	{r7, lr}
 8005ae2:	b084      	sub	sp, #16
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005ae8:	f107 0308 	add.w	r3, r7, #8
 8005aec:	4618      	mov	r0, r3
 8005aee:	f000 f857 	bl	8005ba0 <prvGetNextExpireTime>
 8005af2:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005af4:	68bb      	ldr	r3, [r7, #8]
 8005af6:	4619      	mov	r1, r3
 8005af8:	68f8      	ldr	r0, [r7, #12]
 8005afa:	f000 f803 	bl	8005b04 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8005afe:	f000 f8d5 	bl	8005cac <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005b02:	e7f1      	b.n	8005ae8 <prvTimerTask+0x8>

08005b04 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8005b04:	b580      	push	{r7, lr}
 8005b06:	b084      	sub	sp, #16
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	6078      	str	r0, [r7, #4]
 8005b0c:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8005b0e:	f7ff f9c3 	bl	8004e98 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005b12:	f107 0308 	add.w	r3, r7, #8
 8005b16:	4618      	mov	r0, r3
 8005b18:	f000 f866 	bl	8005be8 <prvSampleTimeNow>
 8005b1c:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8005b1e:	68bb      	ldr	r3, [r7, #8]
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d130      	bne.n	8005b86 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005b24:	683b      	ldr	r3, [r7, #0]
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d10a      	bne.n	8005b40 <prvProcessTimerOrBlockTask+0x3c>
 8005b2a:	687a      	ldr	r2, [r7, #4]
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	429a      	cmp	r2, r3
 8005b30:	d806      	bhi.n	8005b40 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8005b32:	f7ff f9bf 	bl	8004eb4 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005b36:	68f9      	ldr	r1, [r7, #12]
 8005b38:	6878      	ldr	r0, [r7, #4]
 8005b3a:	f7ff ffa1 	bl	8005a80 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8005b3e:	e024      	b.n	8005b8a <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8005b40:	683b      	ldr	r3, [r7, #0]
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d008      	beq.n	8005b58 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005b46:	4b13      	ldr	r3, [pc, #76]	; (8005b94 <prvProcessTimerOrBlockTask+0x90>)
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d101      	bne.n	8005b54 <prvProcessTimerOrBlockTask+0x50>
 8005b50:	2301      	movs	r3, #1
 8005b52:	e000      	b.n	8005b56 <prvProcessTimerOrBlockTask+0x52>
 8005b54:	2300      	movs	r3, #0
 8005b56:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005b58:	4b0f      	ldr	r3, [pc, #60]	; (8005b98 <prvProcessTimerOrBlockTask+0x94>)
 8005b5a:	6818      	ldr	r0, [r3, #0]
 8005b5c:	687a      	ldr	r2, [r7, #4]
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	1ad3      	subs	r3, r2, r3
 8005b62:	683a      	ldr	r2, [r7, #0]
 8005b64:	4619      	mov	r1, r3
 8005b66:	f7fe fe0f 	bl	8004788 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8005b6a:	f7ff f9a3 	bl	8004eb4 <xTaskResumeAll>
 8005b6e:	4603      	mov	r3, r0
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d10a      	bne.n	8005b8a <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8005b74:	4b09      	ldr	r3, [pc, #36]	; (8005b9c <prvProcessTimerOrBlockTask+0x98>)
 8005b76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b7a:	601a      	str	r2, [r3, #0]
 8005b7c:	f3bf 8f4f 	dsb	sy
 8005b80:	f3bf 8f6f 	isb	sy
    }
 8005b84:	e001      	b.n	8005b8a <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8005b86:	f7ff f995 	bl	8004eb4 <xTaskResumeAll>
    }
 8005b8a:	bf00      	nop
 8005b8c:	3710      	adds	r7, #16
 8005b8e:	46bd      	mov	sp, r7
 8005b90:	bd80      	pop	{r7, pc}
 8005b92:	bf00      	nop
 8005b94:	2000029c 	.word	0x2000029c
 8005b98:	200002a0 	.word	0x200002a0
 8005b9c:	e000ed04 	.word	0xe000ed04

08005ba0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8005ba0:	b480      	push	{r7}
 8005ba2:	b085      	sub	sp, #20
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005ba8:	4b0e      	ldr	r3, [pc, #56]	; (8005be4 <prvGetNextExpireTime+0x44>)
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d101      	bne.n	8005bb6 <prvGetNextExpireTime+0x16>
 8005bb2:	2201      	movs	r2, #1
 8005bb4:	e000      	b.n	8005bb8 <prvGetNextExpireTime+0x18>
 8005bb6:	2200      	movs	r2, #0
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d105      	bne.n	8005bd0 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005bc4:	4b07      	ldr	r3, [pc, #28]	; (8005be4 <prvGetNextExpireTime+0x44>)
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	68db      	ldr	r3, [r3, #12]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	60fb      	str	r3, [r7, #12]
 8005bce:	e001      	b.n	8005bd4 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8005bd0:	2300      	movs	r3, #0
 8005bd2:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8005bd4:	68fb      	ldr	r3, [r7, #12]
    }
 8005bd6:	4618      	mov	r0, r3
 8005bd8:	3714      	adds	r7, #20
 8005bda:	46bd      	mov	sp, r7
 8005bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be0:	4770      	bx	lr
 8005be2:	bf00      	nop
 8005be4:	20000298 	.word	0x20000298

08005be8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8005be8:	b580      	push	{r7, lr}
 8005bea:	b084      	sub	sp, #16
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8005bf0:	f7ff fa5c 	bl	80050ac <xTaskGetTickCount>
 8005bf4:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8005bf6:	4b0b      	ldr	r3, [pc, #44]	; (8005c24 <prvSampleTimeNow+0x3c>)
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	68fa      	ldr	r2, [r7, #12]
 8005bfc:	429a      	cmp	r2, r3
 8005bfe:	d205      	bcs.n	8005c0c <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8005c00:	f000 f912 	bl	8005e28 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	2201      	movs	r2, #1
 8005c08:	601a      	str	r2, [r3, #0]
 8005c0a:	e002      	b.n	8005c12 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	2200      	movs	r2, #0
 8005c10:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8005c12:	4a04      	ldr	r2, [pc, #16]	; (8005c24 <prvSampleTimeNow+0x3c>)
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8005c18:	68fb      	ldr	r3, [r7, #12]
    }
 8005c1a:	4618      	mov	r0, r3
 8005c1c:	3710      	adds	r7, #16
 8005c1e:	46bd      	mov	sp, r7
 8005c20:	bd80      	pop	{r7, pc}
 8005c22:	bf00      	nop
 8005c24:	200002a8 	.word	0x200002a8

08005c28 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8005c28:	b580      	push	{r7, lr}
 8005c2a:	b086      	sub	sp, #24
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	60f8      	str	r0, [r7, #12]
 8005c30:	60b9      	str	r1, [r7, #8]
 8005c32:	607a      	str	r2, [r7, #4]
 8005c34:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8005c36:	2300      	movs	r3, #0
 8005c38:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	68ba      	ldr	r2, [r7, #8]
 8005c3e:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	68fa      	ldr	r2, [r7, #12]
 8005c44:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8005c46:	68ba      	ldr	r2, [r7, #8]
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	429a      	cmp	r2, r3
 8005c4c:	d812      	bhi.n	8005c74 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005c4e:	687a      	ldr	r2, [r7, #4]
 8005c50:	683b      	ldr	r3, [r7, #0]
 8005c52:	1ad2      	subs	r2, r2, r3
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	699b      	ldr	r3, [r3, #24]
 8005c58:	429a      	cmp	r2, r3
 8005c5a:	d302      	bcc.n	8005c62 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8005c5c:	2301      	movs	r3, #1
 8005c5e:	617b      	str	r3, [r7, #20]
 8005c60:	e01b      	b.n	8005c9a <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005c62:	4b10      	ldr	r3, [pc, #64]	; (8005ca4 <prvInsertTimerInActiveList+0x7c>)
 8005c64:	681a      	ldr	r2, [r3, #0]
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	3304      	adds	r3, #4
 8005c6a:	4619      	mov	r1, r3
 8005c6c:	4610      	mov	r0, r2
 8005c6e:	f7fe fa18 	bl	80040a2 <vListInsert>
 8005c72:	e012      	b.n	8005c9a <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005c74:	687a      	ldr	r2, [r7, #4]
 8005c76:	683b      	ldr	r3, [r7, #0]
 8005c78:	429a      	cmp	r2, r3
 8005c7a:	d206      	bcs.n	8005c8a <prvInsertTimerInActiveList+0x62>
 8005c7c:	68ba      	ldr	r2, [r7, #8]
 8005c7e:	683b      	ldr	r3, [r7, #0]
 8005c80:	429a      	cmp	r2, r3
 8005c82:	d302      	bcc.n	8005c8a <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8005c84:	2301      	movs	r3, #1
 8005c86:	617b      	str	r3, [r7, #20]
 8005c88:	e007      	b.n	8005c9a <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005c8a:	4b07      	ldr	r3, [pc, #28]	; (8005ca8 <prvInsertTimerInActiveList+0x80>)
 8005c8c:	681a      	ldr	r2, [r3, #0]
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	3304      	adds	r3, #4
 8005c92:	4619      	mov	r1, r3
 8005c94:	4610      	mov	r0, r2
 8005c96:	f7fe fa04 	bl	80040a2 <vListInsert>
            }
        }

        return xProcessTimerNow;
 8005c9a:	697b      	ldr	r3, [r7, #20]
    }
 8005c9c:	4618      	mov	r0, r3
 8005c9e:	3718      	adds	r7, #24
 8005ca0:	46bd      	mov	sp, r7
 8005ca2:	bd80      	pop	{r7, pc}
 8005ca4:	2000029c 	.word	0x2000029c
 8005ca8:	20000298 	.word	0x20000298

08005cac <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8005cac:	b580      	push	{r7, lr}
 8005cae:	b088      	sub	sp, #32
 8005cb0:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005cb2:	e0a6      	b.n	8005e02 <prvProcessReceivedCommands+0x156>
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005cb4:	68bb      	ldr	r3, [r7, #8]
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	f2c0 80a3 	blt.w	8005e02 <prvProcessReceivedCommands+0x156>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005cbc:	693b      	ldr	r3, [r7, #16]
 8005cbe:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005cc0:	69fb      	ldr	r3, [r7, #28]
 8005cc2:	695b      	ldr	r3, [r3, #20]
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d004      	beq.n	8005cd2 <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005cc8:	69fb      	ldr	r3, [r7, #28]
 8005cca:	3304      	adds	r3, #4
 8005ccc:	4618      	mov	r0, r3
 8005cce:	f7fe fa21 	bl	8004114 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005cd2:	1d3b      	adds	r3, r7, #4
 8005cd4:	4618      	mov	r0, r3
 8005cd6:	f7ff ff87 	bl	8005be8 <prvSampleTimeNow>
 8005cda:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 8005cdc:	68bb      	ldr	r3, [r7, #8]
 8005cde:	3b01      	subs	r3, #1
 8005ce0:	2b08      	cmp	r3, #8
 8005ce2:	f200 808d 	bhi.w	8005e00 <prvProcessReceivedCommands+0x154>
 8005ce6:	a201      	add	r2, pc, #4	; (adr r2, 8005cec <prvProcessReceivedCommands+0x40>)
 8005ce8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cec:	08005d11 	.word	0x08005d11
 8005cf0:	08005d11 	.word	0x08005d11
 8005cf4:	08005d79 	.word	0x08005d79
 8005cf8:	08005d8d 	.word	0x08005d8d
 8005cfc:	08005dd7 	.word	0x08005dd7
 8005d00:	08005d11 	.word	0x08005d11
 8005d04:	08005d11 	.word	0x08005d11
 8005d08:	08005d79 	.word	0x08005d79
 8005d0c:	08005d8d 	.word	0x08005d8d
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005d10:	69fb      	ldr	r3, [r7, #28]
 8005d12:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005d16:	f043 0301 	orr.w	r3, r3, #1
 8005d1a:	b2da      	uxtb	r2, r3
 8005d1c:	69fb      	ldr	r3, [r7, #28]
 8005d1e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005d22:	68fa      	ldr	r2, [r7, #12]
 8005d24:	69fb      	ldr	r3, [r7, #28]
 8005d26:	699b      	ldr	r3, [r3, #24]
 8005d28:	18d1      	adds	r1, r2, r3
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	69ba      	ldr	r2, [r7, #24]
 8005d2e:	69f8      	ldr	r0, [r7, #28]
 8005d30:	f7ff ff7a 	bl	8005c28 <prvInsertTimerInActiveList>
 8005d34:	4603      	mov	r3, r0
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d063      	beq.n	8005e02 <prvProcessReceivedCommands+0x156>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005d3a:	69fb      	ldr	r3, [r7, #28]
 8005d3c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005d40:	f003 0304 	and.w	r3, r3, #4
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d009      	beq.n	8005d5c <prvProcessReceivedCommands+0xb0>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 8005d48:	68fa      	ldr	r2, [r7, #12]
 8005d4a:	69fb      	ldr	r3, [r7, #28]
 8005d4c:	699b      	ldr	r3, [r3, #24]
 8005d4e:	4413      	add	r3, r2
 8005d50:	69ba      	ldr	r2, [r7, #24]
 8005d52:	4619      	mov	r1, r3
 8005d54:	69f8      	ldr	r0, [r7, #28]
 8005d56:	f7ff fe71 	bl	8005a3c <prvReloadTimer>
 8005d5a:	e008      	b.n	8005d6e <prvProcessReceivedCommands+0xc2>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8005d5c:	69fb      	ldr	r3, [r7, #28]
 8005d5e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005d62:	f023 0301 	bic.w	r3, r3, #1
 8005d66:	b2da      	uxtb	r2, r3
 8005d68:	69fb      	ldr	r3, [r7, #28]
 8005d6a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005d6e:	69fb      	ldr	r3, [r7, #28]
 8005d70:	6a1b      	ldr	r3, [r3, #32]
 8005d72:	69f8      	ldr	r0, [r7, #28]
 8005d74:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 8005d76:	e044      	b.n	8005e02 <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8005d78:	69fb      	ldr	r3, [r7, #28]
 8005d7a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005d7e:	f023 0301 	bic.w	r3, r3, #1
 8005d82:	b2da      	uxtb	r2, r3
 8005d84:	69fb      	ldr	r3, [r7, #28]
 8005d86:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
                        break;
 8005d8a:	e03a      	b.n	8005e02 <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005d8c:	69fb      	ldr	r3, [r7, #28]
 8005d8e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005d92:	f043 0301 	orr.w	r3, r3, #1
 8005d96:	b2da      	uxtb	r2, r3
 8005d98:	69fb      	ldr	r3, [r7, #28]
 8005d9a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005d9e:	68fa      	ldr	r2, [r7, #12]
 8005da0:	69fb      	ldr	r3, [r7, #28]
 8005da2:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005da4:	69fb      	ldr	r3, [r7, #28]
 8005da6:	699b      	ldr	r3, [r3, #24]
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d10a      	bne.n	8005dc2 <prvProcessReceivedCommands+0x116>
        __asm volatile
 8005dac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005db0:	f383 8811 	msr	BASEPRI, r3
 8005db4:	f3bf 8f6f 	isb	sy
 8005db8:	f3bf 8f4f 	dsb	sy
 8005dbc:	617b      	str	r3, [r7, #20]
    }
 8005dbe:	bf00      	nop
 8005dc0:	e7fe      	b.n	8005dc0 <prvProcessReceivedCommands+0x114>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005dc2:	69fb      	ldr	r3, [r7, #28]
 8005dc4:	699a      	ldr	r2, [r3, #24]
 8005dc6:	69bb      	ldr	r3, [r7, #24]
 8005dc8:	18d1      	adds	r1, r2, r3
 8005dca:	69bb      	ldr	r3, [r7, #24]
 8005dcc:	69ba      	ldr	r2, [r7, #24]
 8005dce:	69f8      	ldr	r0, [r7, #28]
 8005dd0:	f7ff ff2a 	bl	8005c28 <prvInsertTimerInActiveList>
                        break;
 8005dd4:	e015      	b.n	8005e02 <prvProcessReceivedCommands+0x156>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8005dd6:	69fb      	ldr	r3, [r7, #28]
 8005dd8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005ddc:	f003 0302 	and.w	r3, r3, #2
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d103      	bne.n	8005dec <prvProcessReceivedCommands+0x140>
                            {
                                vPortFree( pxTimer );
 8005de4:	69f8      	ldr	r0, [r7, #28]
 8005de6:	f000 fb7b 	bl	80064e0 <vPortFree>
 8005dea:	e00a      	b.n	8005e02 <prvProcessReceivedCommands+0x156>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8005dec:	69fb      	ldr	r3, [r7, #28]
 8005dee:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005df2:	f023 0301 	bic.w	r3, r3, #1
 8005df6:	b2da      	uxtb	r2, r3
 8005df8:	69fb      	ldr	r3, [r7, #28]
 8005dfa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8005dfe:	e000      	b.n	8005e02 <prvProcessReceivedCommands+0x156>

                    default:
                        /* Don't expect to get here. */
                        break;
 8005e00:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005e02:	4b08      	ldr	r3, [pc, #32]	; (8005e24 <prvProcessReceivedCommands+0x178>)
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	f107 0108 	add.w	r1, r7, #8
 8005e0a:	2200      	movs	r2, #0
 8005e0c:	4618      	mov	r0, r3
 8005e0e:	f7fe fb4d 	bl	80044ac <xQueueReceive>
 8005e12:	4603      	mov	r3, r0
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	f47f af4d 	bne.w	8005cb4 <prvProcessReceivedCommands+0x8>
                }
            }
        }
    }
 8005e1a:	bf00      	nop
 8005e1c:	bf00      	nop
 8005e1e:	3720      	adds	r7, #32
 8005e20:	46bd      	mov	sp, r7
 8005e22:	bd80      	pop	{r7, pc}
 8005e24:	200002a0 	.word	0x200002a0

08005e28 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8005e28:	b580      	push	{r7, lr}
 8005e2a:	b082      	sub	sp, #8
 8005e2c:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005e2e:	e009      	b.n	8005e44 <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005e30:	4b0e      	ldr	r3, [pc, #56]	; (8005e6c <prvSwitchTimerLists+0x44>)
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	68db      	ldr	r3, [r3, #12]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 8005e3a:	f04f 31ff 	mov.w	r1, #4294967295
 8005e3e:	6838      	ldr	r0, [r7, #0]
 8005e40:	f7ff fe1e 	bl	8005a80 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005e44:	4b09      	ldr	r3, [pc, #36]	; (8005e6c <prvSwitchTimerLists+0x44>)
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d1f0      	bne.n	8005e30 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 8005e4e:	4b07      	ldr	r3, [pc, #28]	; (8005e6c <prvSwitchTimerLists+0x44>)
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 8005e54:	4b06      	ldr	r3, [pc, #24]	; (8005e70 <prvSwitchTimerLists+0x48>)
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	4a04      	ldr	r2, [pc, #16]	; (8005e6c <prvSwitchTimerLists+0x44>)
 8005e5a:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8005e5c:	4a04      	ldr	r2, [pc, #16]	; (8005e70 <prvSwitchTimerLists+0x48>)
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	6013      	str	r3, [r2, #0]
    }
 8005e62:	bf00      	nop
 8005e64:	3708      	adds	r7, #8
 8005e66:	46bd      	mov	sp, r7
 8005e68:	bd80      	pop	{r7, pc}
 8005e6a:	bf00      	nop
 8005e6c:	20000298 	.word	0x20000298
 8005e70:	2000029c 	.word	0x2000029c

08005e74 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8005e74:	b580      	push	{r7, lr}
 8005e76:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8005e78:	f000 f956 	bl	8006128 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8005e7c:	4b0d      	ldr	r3, [pc, #52]	; (8005eb4 <prvCheckForValidListAndQueue+0x40>)
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d113      	bne.n	8005eac <prvCheckForValidListAndQueue+0x38>
            {
                vListInitialise( &xActiveTimerList1 );
 8005e84:	480c      	ldr	r0, [pc, #48]	; (8005eb8 <prvCheckForValidListAndQueue+0x44>)
 8005e86:	f7fe f8bb 	bl	8004000 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8005e8a:	480c      	ldr	r0, [pc, #48]	; (8005ebc <prvCheckForValidListAndQueue+0x48>)
 8005e8c:	f7fe f8b8 	bl	8004000 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8005e90:	4b0b      	ldr	r3, [pc, #44]	; (8005ec0 <prvCheckForValidListAndQueue+0x4c>)
 8005e92:	4a09      	ldr	r2, [pc, #36]	; (8005eb8 <prvCheckForValidListAndQueue+0x44>)
 8005e94:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8005e96:	4b0b      	ldr	r3, [pc, #44]	; (8005ec4 <prvCheckForValidListAndQueue+0x50>)
 8005e98:	4a08      	ldr	r2, [pc, #32]	; (8005ebc <prvCheckForValidListAndQueue+0x48>)
 8005e9a:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8005e9c:	2200      	movs	r2, #0
 8005e9e:	210c      	movs	r1, #12
 8005ea0:	2005      	movs	r0, #5
 8005ea2:	f7fe f9f1 	bl	8004288 <xQueueGenericCreate>
 8005ea6:	4603      	mov	r3, r0
 8005ea8:	4a02      	ldr	r2, [pc, #8]	; (8005eb4 <prvCheckForValidListAndQueue+0x40>)
 8005eaa:	6013      	str	r3, [r2, #0]
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8005eac:	f000 f96c 	bl	8006188 <vPortExitCritical>
    }
 8005eb0:	bf00      	nop
 8005eb2:	bd80      	pop	{r7, pc}
 8005eb4:	200002a0 	.word	0x200002a0
 8005eb8:	20000270 	.word	0x20000270
 8005ebc:	20000284 	.word	0x20000284
 8005ec0:	20000298 	.word	0x20000298
 8005ec4:	2000029c 	.word	0x2000029c

08005ec8 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8005ec8:	b480      	push	{r7}
 8005eca:	b085      	sub	sp, #20
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	60f8      	str	r0, [r7, #12]
 8005ed0:	60b9      	str	r1, [r7, #8]
 8005ed2:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	3b04      	subs	r3, #4
 8005ed8:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005ee0:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	3b04      	subs	r3, #4
 8005ee6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8005ee8:	68bb      	ldr	r3, [r7, #8]
 8005eea:	f023 0201 	bic.w	r2, r3, #1
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	3b04      	subs	r3, #4
 8005ef6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8005ef8:	4a0c      	ldr	r2, [pc, #48]	; (8005f2c <pxPortInitialiseStack+0x64>)
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	3b14      	subs	r3, #20
 8005f02:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8005f04:	687a      	ldr	r2, [r7, #4]
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	3b04      	subs	r3, #4
 8005f0e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	f06f 0202 	mvn.w	r2, #2
 8005f16:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	3b20      	subs	r3, #32
 8005f1c:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8005f1e:	68fb      	ldr	r3, [r7, #12]
}
 8005f20:	4618      	mov	r0, r3
 8005f22:	3714      	adds	r7, #20
 8005f24:	46bd      	mov	sp, r7
 8005f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2a:	4770      	bx	lr
 8005f2c:	08005f31 	.word	0x08005f31

08005f30 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005f30:	b480      	push	{r7}
 8005f32:	b085      	sub	sp, #20
 8005f34:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8005f36:	2300      	movs	r3, #0
 8005f38:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8005f3a:	4b12      	ldr	r3, [pc, #72]	; (8005f84 <prvTaskExitError+0x54>)
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f42:	d00a      	beq.n	8005f5a <prvTaskExitError+0x2a>
        __asm volatile
 8005f44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f48:	f383 8811 	msr	BASEPRI, r3
 8005f4c:	f3bf 8f6f 	isb	sy
 8005f50:	f3bf 8f4f 	dsb	sy
 8005f54:	60fb      	str	r3, [r7, #12]
    }
 8005f56:	bf00      	nop
 8005f58:	e7fe      	b.n	8005f58 <prvTaskExitError+0x28>
        __asm volatile
 8005f5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f5e:	f383 8811 	msr	BASEPRI, r3
 8005f62:	f3bf 8f6f 	isb	sy
 8005f66:	f3bf 8f4f 	dsb	sy
 8005f6a:	60bb      	str	r3, [r7, #8]
    }
 8005f6c:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8005f6e:	bf00      	nop
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d0fc      	beq.n	8005f70 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8005f76:	bf00      	nop
 8005f78:	bf00      	nop
 8005f7a:	3714      	adds	r7, #20
 8005f7c:	46bd      	mov	sp, r7
 8005f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f82:	4770      	bx	lr
 8005f84:	20000010 	.word	0x20000010
	...

08005f90 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8005f90:	4b07      	ldr	r3, [pc, #28]	; (8005fb0 <pxCurrentTCBConst2>)
 8005f92:	6819      	ldr	r1, [r3, #0]
 8005f94:	6808      	ldr	r0, [r1, #0]
 8005f96:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f9a:	f380 8809 	msr	PSP, r0
 8005f9e:	f3bf 8f6f 	isb	sy
 8005fa2:	f04f 0000 	mov.w	r0, #0
 8005fa6:	f380 8811 	msr	BASEPRI, r0
 8005faa:	4770      	bx	lr
 8005fac:	f3af 8000 	nop.w

08005fb0 <pxCurrentTCBConst2>:
 8005fb0:	2000016c 	.word	0x2000016c
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8005fb4:	bf00      	nop
 8005fb6:	bf00      	nop

08005fb8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8005fb8:	4808      	ldr	r0, [pc, #32]	; (8005fdc <prvPortStartFirstTask+0x24>)
 8005fba:	6800      	ldr	r0, [r0, #0]
 8005fbc:	6800      	ldr	r0, [r0, #0]
 8005fbe:	f380 8808 	msr	MSP, r0
 8005fc2:	f04f 0000 	mov.w	r0, #0
 8005fc6:	f380 8814 	msr	CONTROL, r0
 8005fca:	b662      	cpsie	i
 8005fcc:	b661      	cpsie	f
 8005fce:	f3bf 8f4f 	dsb	sy
 8005fd2:	f3bf 8f6f 	isb	sy
 8005fd6:	df00      	svc	0
 8005fd8:	bf00      	nop
 8005fda:	0000      	.short	0x0000
 8005fdc:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8005fe0:	bf00      	nop
 8005fe2:	bf00      	nop

08005fe4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005fe4:	b580      	push	{r7, lr}
 8005fe6:	b086      	sub	sp, #24
 8005fe8:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005fea:	4b46      	ldr	r3, [pc, #280]	; (8006104 <xPortStartScheduler+0x120>)
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	4a46      	ldr	r2, [pc, #280]	; (8006108 <xPortStartScheduler+0x124>)
 8005ff0:	4293      	cmp	r3, r2
 8005ff2:	d10a      	bne.n	800600a <xPortStartScheduler+0x26>
        __asm volatile
 8005ff4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ff8:	f383 8811 	msr	BASEPRI, r3
 8005ffc:	f3bf 8f6f 	isb	sy
 8006000:	f3bf 8f4f 	dsb	sy
 8006004:	613b      	str	r3, [r7, #16]
    }
 8006006:	bf00      	nop
 8006008:	e7fe      	b.n	8006008 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800600a:	4b3e      	ldr	r3, [pc, #248]	; (8006104 <xPortStartScheduler+0x120>)
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	4a3f      	ldr	r2, [pc, #252]	; (800610c <xPortStartScheduler+0x128>)
 8006010:	4293      	cmp	r3, r2
 8006012:	d10a      	bne.n	800602a <xPortStartScheduler+0x46>
        __asm volatile
 8006014:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006018:	f383 8811 	msr	BASEPRI, r3
 800601c:	f3bf 8f6f 	isb	sy
 8006020:	f3bf 8f4f 	dsb	sy
 8006024:	60fb      	str	r3, [r7, #12]
    }
 8006026:	bf00      	nop
 8006028:	e7fe      	b.n	8006028 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint32_t ulOriginalPriority;
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800602a:	4b39      	ldr	r3, [pc, #228]	; (8006110 <xPortStartScheduler+0x12c>)
 800602c:	617b      	str	r3, [r7, #20]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ulOriginalPriority = *pucFirstUserPriorityRegister;
 800602e:	697b      	ldr	r3, [r7, #20]
 8006030:	781b      	ldrb	r3, [r3, #0]
 8006032:	b2db      	uxtb	r3, r3
 8006034:	607b      	str	r3, [r7, #4]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006036:	697b      	ldr	r3, [r7, #20]
 8006038:	22ff      	movs	r2, #255	; 0xff
 800603a:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800603c:	697b      	ldr	r3, [r7, #20]
 800603e:	781b      	ldrb	r3, [r3, #0]
 8006040:	b2db      	uxtb	r3, r3
 8006042:	70fb      	strb	r3, [r7, #3]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006044:	78fb      	ldrb	r3, [r7, #3]
 8006046:	b2db      	uxtb	r3, r3
 8006048:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800604c:	b2da      	uxtb	r2, r3
 800604e:	4b31      	ldr	r3, [pc, #196]	; (8006114 <xPortStartScheduler+0x130>)
 8006050:	701a      	strb	r2, [r3, #0]

        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */
        ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006052:	4b31      	ldr	r3, [pc, #196]	; (8006118 <xPortStartScheduler+0x134>)
 8006054:	2207      	movs	r2, #7
 8006056:	601a      	str	r2, [r3, #0]

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006058:	e009      	b.n	800606e <xPortStartScheduler+0x8a>
        {
            ulMaxPRIGROUPValue--;
 800605a:	4b2f      	ldr	r3, [pc, #188]	; (8006118 <xPortStartScheduler+0x134>)
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	3b01      	subs	r3, #1
 8006060:	4a2d      	ldr	r2, [pc, #180]	; (8006118 <xPortStartScheduler+0x134>)
 8006062:	6013      	str	r3, [r2, #0]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006064:	78fb      	ldrb	r3, [r7, #3]
 8006066:	b2db      	uxtb	r3, r3
 8006068:	005b      	lsls	r3, r3, #1
 800606a:	b2db      	uxtb	r3, r3
 800606c:	70fb      	strb	r3, [r7, #3]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800606e:	78fb      	ldrb	r3, [r7, #3]
 8006070:	b2db      	uxtb	r3, r3
 8006072:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006076:	2b80      	cmp	r3, #128	; 0x80
 8006078:	d0ef      	beq.n	800605a <xPortStartScheduler+0x76>
        #ifdef configPRIO_BITS
        {
            /* Check the FreeRTOS configuration that defines the number of
             * priority bits matches the number of priority bits actually queried
             * from the hardware. */
            configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800607a:	4b27      	ldr	r3, [pc, #156]	; (8006118 <xPortStartScheduler+0x134>)
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	f1c3 0307 	rsb	r3, r3, #7
 8006082:	2b04      	cmp	r3, #4
 8006084:	d00a      	beq.n	800609c <xPortStartScheduler+0xb8>
        __asm volatile
 8006086:	f04f 0350 	mov.w	r3, #80	; 0x50
 800608a:	f383 8811 	msr	BASEPRI, r3
 800608e:	f3bf 8f6f 	isb	sy
 8006092:	f3bf 8f4f 	dsb	sy
 8006096:	60bb      	str	r3, [r7, #8]
    }
 8006098:	bf00      	nop
 800609a:	e7fe      	b.n	800609a <xPortStartScheduler+0xb6>
        }
        #endif

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800609c:	4b1e      	ldr	r3, [pc, #120]	; (8006118 <xPortStartScheduler+0x134>)
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	021b      	lsls	r3, r3, #8
 80060a2:	4a1d      	ldr	r2, [pc, #116]	; (8006118 <xPortStartScheduler+0x134>)
 80060a4:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80060a6:	4b1c      	ldr	r3, [pc, #112]	; (8006118 <xPortStartScheduler+0x134>)
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80060ae:	4a1a      	ldr	r2, [pc, #104]	; (8006118 <xPortStartScheduler+0x134>)
 80060b0:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ulOriginalPriority;
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	b2da      	uxtb	r2, r3
 80060b6:	697b      	ldr	r3, [r7, #20]
 80060b8:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 80060ba:	4b18      	ldr	r3, [pc, #96]	; (800611c <xPortStartScheduler+0x138>)
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	4a17      	ldr	r2, [pc, #92]	; (800611c <xPortStartScheduler+0x138>)
 80060c0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80060c4:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 80060c6:	4b15      	ldr	r3, [pc, #84]	; (800611c <xPortStartScheduler+0x138>)
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	4a14      	ldr	r2, [pc, #80]	; (800611c <xPortStartScheduler+0x138>)
 80060cc:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80060d0:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 80060d2:	f000 f8db 	bl	800628c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 80060d6:	4b12      	ldr	r3, [pc, #72]	; (8006120 <xPortStartScheduler+0x13c>)
 80060d8:	2200      	movs	r2, #0
 80060da:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 80060dc:	f000 f8fa 	bl	80062d4 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80060e0:	4b10      	ldr	r3, [pc, #64]	; (8006124 <xPortStartScheduler+0x140>)
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	4a0f      	ldr	r2, [pc, #60]	; (8006124 <xPortStartScheduler+0x140>)
 80060e6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80060ea:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 80060ec:	f7ff ff64 	bl	8005fb8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 80060f0:	f7ff f90e 	bl	8005310 <vTaskSwitchContext>
    prvTaskExitError();
 80060f4:	f7ff ff1c 	bl	8005f30 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 80060f8:	2300      	movs	r3, #0
}
 80060fa:	4618      	mov	r0, r3
 80060fc:	3718      	adds	r7, #24
 80060fe:	46bd      	mov	sp, r7
 8006100:	bd80      	pop	{r7, pc}
 8006102:	bf00      	nop
 8006104:	e000ed00 	.word	0xe000ed00
 8006108:	410fc271 	.word	0x410fc271
 800610c:	410fc270 	.word	0x410fc270
 8006110:	e000e400 	.word	0xe000e400
 8006114:	200002ac 	.word	0x200002ac
 8006118:	200002b0 	.word	0x200002b0
 800611c:	e000ed20 	.word	0xe000ed20
 8006120:	20000010 	.word	0x20000010
 8006124:	e000ef34 	.word	0xe000ef34

08006128 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006128:	b480      	push	{r7}
 800612a:	b083      	sub	sp, #12
 800612c:	af00      	add	r7, sp, #0
        __asm volatile
 800612e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006132:	f383 8811 	msr	BASEPRI, r3
 8006136:	f3bf 8f6f 	isb	sy
 800613a:	f3bf 8f4f 	dsb	sy
 800613e:	607b      	str	r3, [r7, #4]
    }
 8006140:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8006142:	4b0f      	ldr	r3, [pc, #60]	; (8006180 <vPortEnterCritical+0x58>)
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	3301      	adds	r3, #1
 8006148:	4a0d      	ldr	r2, [pc, #52]	; (8006180 <vPortEnterCritical+0x58>)
 800614a:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 800614c:	4b0c      	ldr	r3, [pc, #48]	; (8006180 <vPortEnterCritical+0x58>)
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	2b01      	cmp	r3, #1
 8006152:	d10f      	bne.n	8006174 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006154:	4b0b      	ldr	r3, [pc, #44]	; (8006184 <vPortEnterCritical+0x5c>)
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	b2db      	uxtb	r3, r3
 800615a:	2b00      	cmp	r3, #0
 800615c:	d00a      	beq.n	8006174 <vPortEnterCritical+0x4c>
        __asm volatile
 800615e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006162:	f383 8811 	msr	BASEPRI, r3
 8006166:	f3bf 8f6f 	isb	sy
 800616a:	f3bf 8f4f 	dsb	sy
 800616e:	603b      	str	r3, [r7, #0]
    }
 8006170:	bf00      	nop
 8006172:	e7fe      	b.n	8006172 <vPortEnterCritical+0x4a>
    }
}
 8006174:	bf00      	nop
 8006176:	370c      	adds	r7, #12
 8006178:	46bd      	mov	sp, r7
 800617a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800617e:	4770      	bx	lr
 8006180:	20000010 	.word	0x20000010
 8006184:	e000ed04 	.word	0xe000ed04

08006188 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006188:	b480      	push	{r7}
 800618a:	b083      	sub	sp, #12
 800618c:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 800618e:	4b12      	ldr	r3, [pc, #72]	; (80061d8 <vPortExitCritical+0x50>)
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	2b00      	cmp	r3, #0
 8006194:	d10a      	bne.n	80061ac <vPortExitCritical+0x24>
        __asm volatile
 8006196:	f04f 0350 	mov.w	r3, #80	; 0x50
 800619a:	f383 8811 	msr	BASEPRI, r3
 800619e:	f3bf 8f6f 	isb	sy
 80061a2:	f3bf 8f4f 	dsb	sy
 80061a6:	607b      	str	r3, [r7, #4]
    }
 80061a8:	bf00      	nop
 80061aa:	e7fe      	b.n	80061aa <vPortExitCritical+0x22>
    uxCriticalNesting--;
 80061ac:	4b0a      	ldr	r3, [pc, #40]	; (80061d8 <vPortExitCritical+0x50>)
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	3b01      	subs	r3, #1
 80061b2:	4a09      	ldr	r2, [pc, #36]	; (80061d8 <vPortExitCritical+0x50>)
 80061b4:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 80061b6:	4b08      	ldr	r3, [pc, #32]	; (80061d8 <vPortExitCritical+0x50>)
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d105      	bne.n	80061ca <vPortExitCritical+0x42>
 80061be:	2300      	movs	r3, #0
 80061c0:	603b      	str	r3, [r7, #0]
        __asm volatile
 80061c2:	683b      	ldr	r3, [r7, #0]
 80061c4:	f383 8811 	msr	BASEPRI, r3
    }
 80061c8:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 80061ca:	bf00      	nop
 80061cc:	370c      	adds	r7, #12
 80061ce:	46bd      	mov	sp, r7
 80061d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d4:	4770      	bx	lr
 80061d6:	bf00      	nop
 80061d8:	20000010 	.word	0x20000010
 80061dc:	00000000 	.word	0x00000000

080061e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 80061e0:	f3ef 8009 	mrs	r0, PSP
 80061e4:	f3bf 8f6f 	isb	sy
 80061e8:	4b15      	ldr	r3, [pc, #84]	; (8006240 <pxCurrentTCBConst>)
 80061ea:	681a      	ldr	r2, [r3, #0]
 80061ec:	f01e 0f10 	tst.w	lr, #16
 80061f0:	bf08      	it	eq
 80061f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80061f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061fa:	6010      	str	r0, [r2, #0]
 80061fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006200:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006204:	f380 8811 	msr	BASEPRI, r0
 8006208:	f3bf 8f4f 	dsb	sy
 800620c:	f3bf 8f6f 	isb	sy
 8006210:	f7ff f87e 	bl	8005310 <vTaskSwitchContext>
 8006214:	f04f 0000 	mov.w	r0, #0
 8006218:	f380 8811 	msr	BASEPRI, r0
 800621c:	bc09      	pop	{r0, r3}
 800621e:	6819      	ldr	r1, [r3, #0]
 8006220:	6808      	ldr	r0, [r1, #0]
 8006222:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006226:	f01e 0f10 	tst.w	lr, #16
 800622a:	bf08      	it	eq
 800622c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006230:	f380 8809 	msr	PSP, r0
 8006234:	f3bf 8f6f 	isb	sy
 8006238:	4770      	bx	lr
 800623a:	bf00      	nop
 800623c:	f3af 8000 	nop.w

08006240 <pxCurrentTCBConst>:
 8006240:	2000016c 	.word	0x2000016c
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8006244:	bf00      	nop
 8006246:	bf00      	nop

08006248 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006248:	b580      	push	{r7, lr}
 800624a:	b082      	sub	sp, #8
 800624c:	af00      	add	r7, sp, #0
        __asm volatile
 800624e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006252:	f383 8811 	msr	BASEPRI, r3
 8006256:	f3bf 8f6f 	isb	sy
 800625a:	f3bf 8f4f 	dsb	sy
 800625e:	607b      	str	r3, [r7, #4]
    }
 8006260:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8006262:	f7fe ff3f 	bl	80050e4 <xTaskIncrementTick>
 8006266:	4603      	mov	r3, r0
 8006268:	2b00      	cmp	r3, #0
 800626a:	d003      	beq.n	8006274 <SysTick_Handler+0x2c>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800626c:	4b06      	ldr	r3, [pc, #24]	; (8006288 <SysTick_Handler+0x40>)
 800626e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006272:	601a      	str	r2, [r3, #0]
 8006274:	2300      	movs	r3, #0
 8006276:	603b      	str	r3, [r7, #0]
        __asm volatile
 8006278:	683b      	ldr	r3, [r7, #0]
 800627a:	f383 8811 	msr	BASEPRI, r3
    }
 800627e:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 8006280:	bf00      	nop
 8006282:	3708      	adds	r7, #8
 8006284:	46bd      	mov	sp, r7
 8006286:	bd80      	pop	{r7, pc}
 8006288:	e000ed04 	.word	0xe000ed04

0800628c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800628c:	b480      	push	{r7}
 800628e:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006290:	4b0b      	ldr	r3, [pc, #44]	; (80062c0 <vPortSetupTimerInterrupt+0x34>)
 8006292:	2200      	movs	r2, #0
 8006294:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006296:	4b0b      	ldr	r3, [pc, #44]	; (80062c4 <vPortSetupTimerInterrupt+0x38>)
 8006298:	2200      	movs	r2, #0
 800629a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800629c:	4b0a      	ldr	r3, [pc, #40]	; (80062c8 <vPortSetupTimerInterrupt+0x3c>)
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	4a0a      	ldr	r2, [pc, #40]	; (80062cc <vPortSetupTimerInterrupt+0x40>)
 80062a2:	fba2 2303 	umull	r2, r3, r2, r3
 80062a6:	099b      	lsrs	r3, r3, #6
 80062a8:	4a09      	ldr	r2, [pc, #36]	; (80062d0 <vPortSetupTimerInterrupt+0x44>)
 80062aa:	3b01      	subs	r3, #1
 80062ac:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80062ae:	4b04      	ldr	r3, [pc, #16]	; (80062c0 <vPortSetupTimerInterrupt+0x34>)
 80062b0:	2207      	movs	r2, #7
 80062b2:	601a      	str	r2, [r3, #0]
}
 80062b4:	bf00      	nop
 80062b6:	46bd      	mov	sp, r7
 80062b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062bc:	4770      	bx	lr
 80062be:	bf00      	nop
 80062c0:	e000e010 	.word	0xe000e010
 80062c4:	e000e018 	.word	0xe000e018
 80062c8:	20000000 	.word	0x20000000
 80062cc:	10624dd3 	.word	0x10624dd3
 80062d0:	e000e014 	.word	0xe000e014

080062d4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 80062d4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80062e4 <vPortEnableVFP+0x10>
 80062d8:	6801      	ldr	r1, [r0, #0]
 80062da:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80062de:	6001      	str	r1, [r0, #0]
 80062e0:	4770      	bx	lr
 80062e2:	0000      	.short	0x0000
 80062e4:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 80062e8:	bf00      	nop
 80062ea:	bf00      	nop

080062ec <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 80062ec:	b480      	push	{r7}
 80062ee:	b085      	sub	sp, #20
 80062f0:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 80062f2:	f3ef 8305 	mrs	r3, IPSR
 80062f6:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	2b0f      	cmp	r3, #15
 80062fc:	d914      	bls.n	8006328 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80062fe:	4a17      	ldr	r2, [pc, #92]	; (800635c <vPortValidateInterruptPriority+0x70>)
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	4413      	add	r3, r2
 8006304:	781b      	ldrb	r3, [r3, #0]
 8006306:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006308:	4b15      	ldr	r3, [pc, #84]	; (8006360 <vPortValidateInterruptPriority+0x74>)
 800630a:	781b      	ldrb	r3, [r3, #0]
 800630c:	7afa      	ldrb	r2, [r7, #11]
 800630e:	429a      	cmp	r2, r3
 8006310:	d20a      	bcs.n	8006328 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 8006312:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006316:	f383 8811 	msr	BASEPRI, r3
 800631a:	f3bf 8f6f 	isb	sy
 800631e:	f3bf 8f4f 	dsb	sy
 8006322:	607b      	str	r3, [r7, #4]
    }
 8006324:	bf00      	nop
 8006326:	e7fe      	b.n	8006326 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006328:	4b0e      	ldr	r3, [pc, #56]	; (8006364 <vPortValidateInterruptPriority+0x78>)
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006330:	4b0d      	ldr	r3, [pc, #52]	; (8006368 <vPortValidateInterruptPriority+0x7c>)
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	429a      	cmp	r2, r3
 8006336:	d90a      	bls.n	800634e <vPortValidateInterruptPriority+0x62>
        __asm volatile
 8006338:	f04f 0350 	mov.w	r3, #80	; 0x50
 800633c:	f383 8811 	msr	BASEPRI, r3
 8006340:	f3bf 8f6f 	isb	sy
 8006344:	f3bf 8f4f 	dsb	sy
 8006348:	603b      	str	r3, [r7, #0]
    }
 800634a:	bf00      	nop
 800634c:	e7fe      	b.n	800634c <vPortValidateInterruptPriority+0x60>
    }
 800634e:	bf00      	nop
 8006350:	3714      	adds	r7, #20
 8006352:	46bd      	mov	sp, r7
 8006354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006358:	4770      	bx	lr
 800635a:	bf00      	nop
 800635c:	e000e3f0 	.word	0xe000e3f0
 8006360:	200002ac 	.word	0x200002ac
 8006364:	e000ed0c 	.word	0xe000ed0c
 8006368:	200002b0 	.word	0x200002b0

0800636c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800636c:	b580      	push	{r7, lr}
 800636e:	b08a      	sub	sp, #40	; 0x28
 8006370:	af00      	add	r7, sp, #0
 8006372:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 8006374:	2300      	movs	r3, #0
 8006376:	61fb      	str	r3, [r7, #28]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 8006378:	f7fe fd8e 	bl	8004e98 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 800637c:	4b53      	ldr	r3, [pc, #332]	; (80064cc <pvPortMalloc+0x160>)
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	2b00      	cmp	r3, #0
 8006382:	d101      	bne.n	8006388 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8006384:	f000 f908 	bl	8006598 <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	2b00      	cmp	r3, #0
 800638c:	d012      	beq.n	80063b4 <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 800638e:	2208      	movs	r2, #8
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	f003 0307 	and.w	r3, r3, #7
 8006396:	1ad3      	subs	r3, r2, r3
 8006398:	3308      	adds	r3, #8
 800639a:	61bb      	str	r3, [r7, #24]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 800639c:	69bb      	ldr	r3, [r7, #24]
 800639e:	43db      	mvns	r3, r3
 80063a0:	687a      	ldr	r2, [r7, #4]
 80063a2:	429a      	cmp	r2, r3
 80063a4:	d804      	bhi.n	80063b0 <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 80063a6:	687a      	ldr	r2, [r7, #4]
 80063a8:	69bb      	ldr	r3, [r7, #24]
 80063aa:	4413      	add	r3, r2
 80063ac:	607b      	str	r3, [r7, #4]
 80063ae:	e001      	b.n	80063b4 <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 80063b0:	2300      	movs	r3, #0
 80063b2:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	db70      	blt.n	800649c <pvPortMalloc+0x130>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d06d      	beq.n	800649c <pvPortMalloc+0x130>
 80063c0:	4b43      	ldr	r3, [pc, #268]	; (80064d0 <pvPortMalloc+0x164>)
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	687a      	ldr	r2, [r7, #4]
 80063c6:	429a      	cmp	r2, r3
 80063c8:	d868      	bhi.n	800649c <pvPortMalloc+0x130>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 80063ca:	4b42      	ldr	r3, [pc, #264]	; (80064d4 <pvPortMalloc+0x168>)
 80063cc:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 80063ce:	4b41      	ldr	r3, [pc, #260]	; (80064d4 <pvPortMalloc+0x168>)
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80063d4:	e004      	b.n	80063e0 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 80063d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063d8:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 80063da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80063e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063e2:	685b      	ldr	r3, [r3, #4]
 80063e4:	687a      	ldr	r2, [r7, #4]
 80063e6:	429a      	cmp	r2, r3
 80063e8:	d903      	bls.n	80063f2 <pvPortMalloc+0x86>
 80063ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d1f1      	bne.n	80063d6 <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 80063f2:	4b36      	ldr	r3, [pc, #216]	; (80064cc <pvPortMalloc+0x160>)
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80063f8:	429a      	cmp	r2, r3
 80063fa:	d04f      	beq.n	800649c <pvPortMalloc+0x130>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80063fc:	6a3b      	ldr	r3, [r7, #32]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	2208      	movs	r2, #8
 8006402:	4413      	add	r3, r2
 8006404:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006408:	681a      	ldr	r2, [r3, #0]
 800640a:	6a3b      	ldr	r3, [r7, #32]
 800640c:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800640e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006410:	685a      	ldr	r2, [r3, #4]
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	1ad2      	subs	r2, r2, r3
 8006416:	2308      	movs	r3, #8
 8006418:	005b      	lsls	r3, r3, #1
 800641a:	429a      	cmp	r2, r3
 800641c:	d91f      	bls.n	800645e <pvPortMalloc+0xf2>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800641e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	4413      	add	r3, r2
 8006424:	617b      	str	r3, [r7, #20]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006426:	697b      	ldr	r3, [r7, #20]
 8006428:	f003 0307 	and.w	r3, r3, #7
 800642c:	2b00      	cmp	r3, #0
 800642e:	d00a      	beq.n	8006446 <pvPortMalloc+0xda>
        __asm volatile
 8006430:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006434:	f383 8811 	msr	BASEPRI, r3
 8006438:	f3bf 8f6f 	isb	sy
 800643c:	f3bf 8f4f 	dsb	sy
 8006440:	613b      	str	r3, [r7, #16]
    }
 8006442:	bf00      	nop
 8006444:	e7fe      	b.n	8006444 <pvPortMalloc+0xd8>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006448:	685a      	ldr	r2, [r3, #4]
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	1ad2      	subs	r2, r2, r3
 800644e:	697b      	ldr	r3, [r7, #20]
 8006450:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8006452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006454:	687a      	ldr	r2, [r7, #4]
 8006456:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006458:	6978      	ldr	r0, [r7, #20]
 800645a:	f000 f8f9 	bl	8006650 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 800645e:	4b1c      	ldr	r3, [pc, #112]	; (80064d0 <pvPortMalloc+0x164>)
 8006460:	681a      	ldr	r2, [r3, #0]
 8006462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006464:	685b      	ldr	r3, [r3, #4]
 8006466:	1ad3      	subs	r3, r2, r3
 8006468:	4a19      	ldr	r2, [pc, #100]	; (80064d0 <pvPortMalloc+0x164>)
 800646a:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800646c:	4b18      	ldr	r3, [pc, #96]	; (80064d0 <pvPortMalloc+0x164>)
 800646e:	681a      	ldr	r2, [r3, #0]
 8006470:	4b19      	ldr	r3, [pc, #100]	; (80064d8 <pvPortMalloc+0x16c>)
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	429a      	cmp	r2, r3
 8006476:	d203      	bcs.n	8006480 <pvPortMalloc+0x114>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006478:	4b15      	ldr	r3, [pc, #84]	; (80064d0 <pvPortMalloc+0x164>)
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	4a16      	ldr	r2, [pc, #88]	; (80064d8 <pvPortMalloc+0x16c>)
 800647e:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 8006480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006482:	685b      	ldr	r3, [r3, #4]
 8006484:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8006488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800648a:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 800648c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800648e:	2200      	movs	r2, #0
 8006490:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8006492:	4b12      	ldr	r3, [pc, #72]	; (80064dc <pvPortMalloc+0x170>)
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	3301      	adds	r3, #1
 8006498:	4a10      	ldr	r2, [pc, #64]	; (80064dc <pvPortMalloc+0x170>)
 800649a:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 800649c:	f7fe fd0a 	bl	8004eb4 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80064a0:	69fb      	ldr	r3, [r7, #28]
 80064a2:	f003 0307 	and.w	r3, r3, #7
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d00a      	beq.n	80064c0 <pvPortMalloc+0x154>
        __asm volatile
 80064aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064ae:	f383 8811 	msr	BASEPRI, r3
 80064b2:	f3bf 8f6f 	isb	sy
 80064b6:	f3bf 8f4f 	dsb	sy
 80064ba:	60fb      	str	r3, [r7, #12]
    }
 80064bc:	bf00      	nop
 80064be:	e7fe      	b.n	80064be <pvPortMalloc+0x152>
    return pvReturn;
 80064c0:	69fb      	ldr	r3, [r7, #28]
}
 80064c2:	4618      	mov	r0, r3
 80064c4:	3728      	adds	r7, #40	; 0x28
 80064c6:	46bd      	mov	sp, r7
 80064c8:	bd80      	pop	{r7, pc}
 80064ca:	bf00      	nop
 80064cc:	2001e2bc 	.word	0x2001e2bc
 80064d0:	2001e2c0 	.word	0x2001e2c0
 80064d4:	2001e2b4 	.word	0x2001e2b4
 80064d8:	2001e2c4 	.word	0x2001e2c4
 80064dc:	2001e2c8 	.word	0x2001e2c8

080064e0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 80064e0:	b580      	push	{r7, lr}
 80064e2:	b086      	sub	sp, #24
 80064e4:	af00      	add	r7, sp, #0
 80064e6:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d049      	beq.n	8006586 <vPortFree+0xa6>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 80064f2:	2308      	movs	r3, #8
 80064f4:	425b      	negs	r3, r3
 80064f6:	697a      	ldr	r2, [r7, #20]
 80064f8:	4413      	add	r3, r2
 80064fa:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 80064fc:	697b      	ldr	r3, [r7, #20]
 80064fe:	613b      	str	r3, [r7, #16]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 8006500:	693b      	ldr	r3, [r7, #16]
 8006502:	685b      	ldr	r3, [r3, #4]
 8006504:	2b00      	cmp	r3, #0
 8006506:	db0a      	blt.n	800651e <vPortFree+0x3e>
        __asm volatile
 8006508:	f04f 0350 	mov.w	r3, #80	; 0x50
 800650c:	f383 8811 	msr	BASEPRI, r3
 8006510:	f3bf 8f6f 	isb	sy
 8006514:	f3bf 8f4f 	dsb	sy
 8006518:	60fb      	str	r3, [r7, #12]
    }
 800651a:	bf00      	nop
 800651c:	e7fe      	b.n	800651c <vPortFree+0x3c>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 800651e:	693b      	ldr	r3, [r7, #16]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	2b00      	cmp	r3, #0
 8006524:	d00a      	beq.n	800653c <vPortFree+0x5c>
        __asm volatile
 8006526:	f04f 0350 	mov.w	r3, #80	; 0x50
 800652a:	f383 8811 	msr	BASEPRI, r3
 800652e:	f3bf 8f6f 	isb	sy
 8006532:	f3bf 8f4f 	dsb	sy
 8006536:	60bb      	str	r3, [r7, #8]
    }
 8006538:	bf00      	nop
 800653a:	e7fe      	b.n	800653a <vPortFree+0x5a>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 800653c:	693b      	ldr	r3, [r7, #16]
 800653e:	685b      	ldr	r3, [r3, #4]
 8006540:	0fdb      	lsrs	r3, r3, #31
 8006542:	f003 0301 	and.w	r3, r3, #1
 8006546:	b2db      	uxtb	r3, r3
 8006548:	2b00      	cmp	r3, #0
 800654a:	d01c      	beq.n	8006586 <vPortFree+0xa6>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 800654c:	693b      	ldr	r3, [r7, #16]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	2b00      	cmp	r3, #0
 8006552:	d118      	bne.n	8006586 <vPortFree+0xa6>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 8006554:	693b      	ldr	r3, [r7, #16]
 8006556:	685b      	ldr	r3, [r3, #4]
 8006558:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800655c:	693b      	ldr	r3, [r7, #16]
 800655e:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 8006560:	f7fe fc9a 	bl	8004e98 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8006564:	693b      	ldr	r3, [r7, #16]
 8006566:	685a      	ldr	r2, [r3, #4]
 8006568:	4b09      	ldr	r3, [pc, #36]	; (8006590 <vPortFree+0xb0>)
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	4413      	add	r3, r2
 800656e:	4a08      	ldr	r2, [pc, #32]	; (8006590 <vPortFree+0xb0>)
 8006570:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006572:	6938      	ldr	r0, [r7, #16]
 8006574:	f000 f86c 	bl	8006650 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8006578:	4b06      	ldr	r3, [pc, #24]	; (8006594 <vPortFree+0xb4>)
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	3301      	adds	r3, #1
 800657e:	4a05      	ldr	r2, [pc, #20]	; (8006594 <vPortFree+0xb4>)
 8006580:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8006582:	f7fe fc97 	bl	8004eb4 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8006586:	bf00      	nop
 8006588:	3718      	adds	r7, #24
 800658a:	46bd      	mov	sp, r7
 800658c:	bd80      	pop	{r7, pc}
 800658e:	bf00      	nop
 8006590:	2001e2c0 	.word	0x2001e2c0
 8006594:	2001e2cc 	.word	0x2001e2cc

08006598 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8006598:	b480      	push	{r7}
 800659a:	b085      	sub	sp, #20
 800659c:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800659e:	f44f 33f0 	mov.w	r3, #122880	; 0x1e000
 80065a2:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 80065a4:	4b25      	ldr	r3, [pc, #148]	; (800663c <prvHeapInit+0xa4>)
 80065a6:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	f003 0307 	and.w	r3, r3, #7
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d00c      	beq.n	80065cc <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	3307      	adds	r3, #7
 80065b6:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	f023 0307 	bic.w	r3, r3, #7
 80065be:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 80065c0:	68ba      	ldr	r2, [r7, #8]
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	1ad3      	subs	r3, r2, r3
 80065c6:	4a1d      	ldr	r2, [pc, #116]	; (800663c <prvHeapInit+0xa4>)
 80065c8:	4413      	add	r3, r2
 80065ca:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80065d0:	4a1b      	ldr	r2, [pc, #108]	; (8006640 <prvHeapInit+0xa8>)
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 80065d6:	4b1a      	ldr	r3, [pc, #104]	; (8006640 <prvHeapInit+0xa8>)
 80065d8:	2200      	movs	r2, #0
 80065da:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	68ba      	ldr	r2, [r7, #8]
 80065e0:	4413      	add	r3, r2
 80065e2:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 80065e4:	2208      	movs	r2, #8
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	1a9b      	subs	r3, r3, r2
 80065ea:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	f023 0307 	bic.w	r3, r3, #7
 80065f2:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	4a13      	ldr	r2, [pc, #76]	; (8006644 <prvHeapInit+0xac>)
 80065f8:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 80065fa:	4b12      	ldr	r3, [pc, #72]	; (8006644 <prvHeapInit+0xac>)
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	2200      	movs	r2, #0
 8006600:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8006602:	4b10      	ldr	r3, [pc, #64]	; (8006644 <prvHeapInit+0xac>)
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	2200      	movs	r2, #0
 8006608:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 800660e:	683b      	ldr	r3, [r7, #0]
 8006610:	68fa      	ldr	r2, [r7, #12]
 8006612:	1ad2      	subs	r2, r2, r3
 8006614:	683b      	ldr	r3, [r7, #0]
 8006616:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006618:	4b0a      	ldr	r3, [pc, #40]	; (8006644 <prvHeapInit+0xac>)
 800661a:	681a      	ldr	r2, [r3, #0]
 800661c:	683b      	ldr	r3, [r7, #0]
 800661e:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006620:	683b      	ldr	r3, [r7, #0]
 8006622:	685b      	ldr	r3, [r3, #4]
 8006624:	4a08      	ldr	r2, [pc, #32]	; (8006648 <prvHeapInit+0xb0>)
 8006626:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006628:	683b      	ldr	r3, [r7, #0]
 800662a:	685b      	ldr	r3, [r3, #4]
 800662c:	4a07      	ldr	r2, [pc, #28]	; (800664c <prvHeapInit+0xb4>)
 800662e:	6013      	str	r3, [r2, #0]
}
 8006630:	bf00      	nop
 8006632:	3714      	adds	r7, #20
 8006634:	46bd      	mov	sp, r7
 8006636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800663a:	4770      	bx	lr
 800663c:	200002b4 	.word	0x200002b4
 8006640:	2001e2b4 	.word	0x2001e2b4
 8006644:	2001e2bc 	.word	0x2001e2bc
 8006648:	2001e2c4 	.word	0x2001e2c4
 800664c:	2001e2c0 	.word	0x2001e2c0

08006650 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8006650:	b480      	push	{r7}
 8006652:	b085      	sub	sp, #20
 8006654:	af00      	add	r7, sp, #0
 8006656:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006658:	4b28      	ldr	r3, [pc, #160]	; (80066fc <prvInsertBlockIntoFreeList+0xac>)
 800665a:	60fb      	str	r3, [r7, #12]
 800665c:	e002      	b.n	8006664 <prvInsertBlockIntoFreeList+0x14>
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	60fb      	str	r3, [r7, #12]
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	687a      	ldr	r2, [r7, #4]
 800666a:	429a      	cmp	r2, r3
 800666c:	d8f7      	bhi.n	800665e <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	685b      	ldr	r3, [r3, #4]
 8006676:	68ba      	ldr	r2, [r7, #8]
 8006678:	4413      	add	r3, r2
 800667a:	687a      	ldr	r2, [r7, #4]
 800667c:	429a      	cmp	r2, r3
 800667e:	d108      	bne.n	8006692 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	685a      	ldr	r2, [r3, #4]
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	685b      	ldr	r3, [r3, #4]
 8006688:	441a      	add	r2, r3
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	685b      	ldr	r3, [r3, #4]
 800669a:	68ba      	ldr	r2, [r7, #8]
 800669c:	441a      	add	r2, r3
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	429a      	cmp	r2, r3
 80066a4:	d118      	bne.n	80066d8 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	681a      	ldr	r2, [r3, #0]
 80066aa:	4b15      	ldr	r3, [pc, #84]	; (8006700 <prvInsertBlockIntoFreeList+0xb0>)
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	429a      	cmp	r2, r3
 80066b0:	d00d      	beq.n	80066ce <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	685a      	ldr	r2, [r3, #4]
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	685b      	ldr	r3, [r3, #4]
 80066bc:	441a      	add	r2, r3
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	681a      	ldr	r2, [r3, #0]
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	601a      	str	r2, [r3, #0]
 80066cc:	e008      	b.n	80066e0 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80066ce:	4b0c      	ldr	r3, [pc, #48]	; (8006700 <prvInsertBlockIntoFreeList+0xb0>)
 80066d0:	681a      	ldr	r2, [r3, #0]
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	601a      	str	r2, [r3, #0]
 80066d6:	e003      	b.n	80066e0 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	681a      	ldr	r2, [r3, #0]
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 80066e0:	68fa      	ldr	r2, [r7, #12]
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	429a      	cmp	r2, r3
 80066e6:	d002      	beq.n	80066ee <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	687a      	ldr	r2, [r7, #4]
 80066ec:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80066ee:	bf00      	nop
 80066f0:	3714      	adds	r7, #20
 80066f2:	46bd      	mov	sp, r7
 80066f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f8:	4770      	bx	lr
 80066fa:	bf00      	nop
 80066fc:	2001e2b4 	.word	0x2001e2b4
 8006700:	2001e2bc 	.word	0x2001e2bc

08006704 <memset>:
 8006704:	4402      	add	r2, r0
 8006706:	4603      	mov	r3, r0
 8006708:	4293      	cmp	r3, r2
 800670a:	d100      	bne.n	800670e <memset+0xa>
 800670c:	4770      	bx	lr
 800670e:	f803 1b01 	strb.w	r1, [r3], #1
 8006712:	e7f9      	b.n	8006708 <memset+0x4>

08006714 <__libc_init_array>:
 8006714:	b570      	push	{r4, r5, r6, lr}
 8006716:	4d0d      	ldr	r5, [pc, #52]	; (800674c <__libc_init_array+0x38>)
 8006718:	4c0d      	ldr	r4, [pc, #52]	; (8006750 <__libc_init_array+0x3c>)
 800671a:	1b64      	subs	r4, r4, r5
 800671c:	10a4      	asrs	r4, r4, #2
 800671e:	2600      	movs	r6, #0
 8006720:	42a6      	cmp	r6, r4
 8006722:	d109      	bne.n	8006738 <__libc_init_array+0x24>
 8006724:	4d0b      	ldr	r5, [pc, #44]	; (8006754 <__libc_init_array+0x40>)
 8006726:	4c0c      	ldr	r4, [pc, #48]	; (8006758 <__libc_init_array+0x44>)
 8006728:	f000 f826 	bl	8006778 <_init>
 800672c:	1b64      	subs	r4, r4, r5
 800672e:	10a4      	asrs	r4, r4, #2
 8006730:	2600      	movs	r6, #0
 8006732:	42a6      	cmp	r6, r4
 8006734:	d105      	bne.n	8006742 <__libc_init_array+0x2e>
 8006736:	bd70      	pop	{r4, r5, r6, pc}
 8006738:	f855 3b04 	ldr.w	r3, [r5], #4
 800673c:	4798      	blx	r3
 800673e:	3601      	adds	r6, #1
 8006740:	e7ee      	b.n	8006720 <__libc_init_array+0xc>
 8006742:	f855 3b04 	ldr.w	r3, [r5], #4
 8006746:	4798      	blx	r3
 8006748:	3601      	adds	r6, #1
 800674a:	e7f2      	b.n	8006732 <__libc_init_array+0x1e>
 800674c:	08006840 	.word	0x08006840
 8006750:	08006840 	.word	0x08006840
 8006754:	08006840 	.word	0x08006840
 8006758:	08006844 	.word	0x08006844

0800675c <memcpy>:
 800675c:	440a      	add	r2, r1
 800675e:	4291      	cmp	r1, r2
 8006760:	f100 33ff 	add.w	r3, r0, #4294967295
 8006764:	d100      	bne.n	8006768 <memcpy+0xc>
 8006766:	4770      	bx	lr
 8006768:	b510      	push	{r4, lr}
 800676a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800676e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006772:	4291      	cmp	r1, r2
 8006774:	d1f9      	bne.n	800676a <memcpy+0xe>
 8006776:	bd10      	pop	{r4, pc}

08006778 <_init>:
 8006778:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800677a:	bf00      	nop
 800677c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800677e:	bc08      	pop	{r3}
 8006780:	469e      	mov	lr, r3
 8006782:	4770      	bx	lr

08006784 <_fini>:
 8006784:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006786:	bf00      	nop
 8006788:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800678a:	bc08      	pop	{r3}
 800678c:	469e      	mov	lr, r3
 800678e:	4770      	bx	lr
