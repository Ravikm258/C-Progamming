
RTOS_mutex.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006ab0  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000019c  08006c70  08006c70  00016c70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006e0c  08006e0c  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  08006e0c  08006e0c  00016e0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006e14  08006e14  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006e14  08006e14  00016e14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006e18  08006e18  00016e18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08006e1c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0001e268  20000014  08006e30  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2001e27c  08006e30  0002e27c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY
 13 .debug_info   00017596  00000000  00000000  00020087  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003197  00000000  00000000  0003761d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001410  00000000  00000000  0003a7b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000fa9  00000000  00000000  0003bbc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002b9fd  00000000  00000000  0003cb71  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00018391  00000000  00000000  0006856e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    001108b1  00000000  00000000  000808ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005408  00000000  00000000  001911b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000050  00000000  00000000  001965b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000014 	.word	0x20000014
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08006c58 	.word	0x08006c58

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000018 	.word	0x20000018
 80001fc:	08006c58 	.word	0x08006c58

08000200 <strlen>:
 8000200:	4603      	mov	r3, r0
 8000202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000206:	2a00      	cmp	r2, #0
 8000208:	d1fb      	bne.n	8000202 <strlen+0x2>
 800020a:	1a18      	subs	r0, r3, r0
 800020c:	3801      	subs	r0, #1
 800020e:	4770      	bx	lr

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295
 8000220:	f04f 30ff 	movne.w	r0, #4294967295
 8000224:	f000 b970 	b.w	8000508 <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9e08      	ldr	r6, [sp, #32]
 8000246:	460d      	mov	r5, r1
 8000248:	4604      	mov	r4, r0
 800024a:	460f      	mov	r7, r1
 800024c:	2b00      	cmp	r3, #0
 800024e:	d14a      	bne.n	80002e6 <__udivmoddi4+0xa6>
 8000250:	428a      	cmp	r2, r1
 8000252:	4694      	mov	ip, r2
 8000254:	d965      	bls.n	8000322 <__udivmoddi4+0xe2>
 8000256:	fab2 f382 	clz	r3, r2
 800025a:	b143      	cbz	r3, 800026e <__udivmoddi4+0x2e>
 800025c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000260:	f1c3 0220 	rsb	r2, r3, #32
 8000264:	409f      	lsls	r7, r3
 8000266:	fa20 f202 	lsr.w	r2, r0, r2
 800026a:	4317      	orrs	r7, r2
 800026c:	409c      	lsls	r4, r3
 800026e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000272:	fa1f f58c 	uxth.w	r5, ip
 8000276:	fbb7 f1fe 	udiv	r1, r7, lr
 800027a:	0c22      	lsrs	r2, r4, #16
 800027c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000280:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000284:	fb01 f005 	mul.w	r0, r1, r5
 8000288:	4290      	cmp	r0, r2
 800028a:	d90a      	bls.n	80002a2 <__udivmoddi4+0x62>
 800028c:	eb1c 0202 	adds.w	r2, ip, r2
 8000290:	f101 37ff 	add.w	r7, r1, #4294967295
 8000294:	f080 811c 	bcs.w	80004d0 <__udivmoddi4+0x290>
 8000298:	4290      	cmp	r0, r2
 800029a:	f240 8119 	bls.w	80004d0 <__udivmoddi4+0x290>
 800029e:	3902      	subs	r1, #2
 80002a0:	4462      	add	r2, ip
 80002a2:	1a12      	subs	r2, r2, r0
 80002a4:	b2a4      	uxth	r4, r4
 80002a6:	fbb2 f0fe 	udiv	r0, r2, lr
 80002aa:	fb0e 2210 	mls	r2, lr, r0, r2
 80002ae:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002b2:	fb00 f505 	mul.w	r5, r0, r5
 80002b6:	42a5      	cmp	r5, r4
 80002b8:	d90a      	bls.n	80002d0 <__udivmoddi4+0x90>
 80002ba:	eb1c 0404 	adds.w	r4, ip, r4
 80002be:	f100 32ff 	add.w	r2, r0, #4294967295
 80002c2:	f080 8107 	bcs.w	80004d4 <__udivmoddi4+0x294>
 80002c6:	42a5      	cmp	r5, r4
 80002c8:	f240 8104 	bls.w	80004d4 <__udivmoddi4+0x294>
 80002cc:	4464      	add	r4, ip
 80002ce:	3802      	subs	r0, #2
 80002d0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002d4:	1b64      	subs	r4, r4, r5
 80002d6:	2100      	movs	r1, #0
 80002d8:	b11e      	cbz	r6, 80002e2 <__udivmoddi4+0xa2>
 80002da:	40dc      	lsrs	r4, r3
 80002dc:	2300      	movs	r3, #0
 80002de:	e9c6 4300 	strd	r4, r3, [r6]
 80002e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d908      	bls.n	80002fc <__udivmoddi4+0xbc>
 80002ea:	2e00      	cmp	r6, #0
 80002ec:	f000 80ed 	beq.w	80004ca <__udivmoddi4+0x28a>
 80002f0:	2100      	movs	r1, #0
 80002f2:	e9c6 0500 	strd	r0, r5, [r6]
 80002f6:	4608      	mov	r0, r1
 80002f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fc:	fab3 f183 	clz	r1, r3
 8000300:	2900      	cmp	r1, #0
 8000302:	d149      	bne.n	8000398 <__udivmoddi4+0x158>
 8000304:	42ab      	cmp	r3, r5
 8000306:	d302      	bcc.n	800030e <__udivmoddi4+0xce>
 8000308:	4282      	cmp	r2, r0
 800030a:	f200 80f8 	bhi.w	80004fe <__udivmoddi4+0x2be>
 800030e:	1a84      	subs	r4, r0, r2
 8000310:	eb65 0203 	sbc.w	r2, r5, r3
 8000314:	2001      	movs	r0, #1
 8000316:	4617      	mov	r7, r2
 8000318:	2e00      	cmp	r6, #0
 800031a:	d0e2      	beq.n	80002e2 <__udivmoddi4+0xa2>
 800031c:	e9c6 4700 	strd	r4, r7, [r6]
 8000320:	e7df      	b.n	80002e2 <__udivmoddi4+0xa2>
 8000322:	b902      	cbnz	r2, 8000326 <__udivmoddi4+0xe6>
 8000324:	deff      	udf	#255	; 0xff
 8000326:	fab2 f382 	clz	r3, r2
 800032a:	2b00      	cmp	r3, #0
 800032c:	f040 8090 	bne.w	8000450 <__udivmoddi4+0x210>
 8000330:	1a8a      	subs	r2, r1, r2
 8000332:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000336:	fa1f fe8c 	uxth.w	lr, ip
 800033a:	2101      	movs	r1, #1
 800033c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000340:	fb07 2015 	mls	r0, r7, r5, r2
 8000344:	0c22      	lsrs	r2, r4, #16
 8000346:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800034a:	fb0e f005 	mul.w	r0, lr, r5
 800034e:	4290      	cmp	r0, r2
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x124>
 8000352:	eb1c 0202 	adds.w	r2, ip, r2
 8000356:	f105 38ff 	add.w	r8, r5, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x122>
 800035c:	4290      	cmp	r0, r2
 800035e:	f200 80cb 	bhi.w	80004f8 <__udivmoddi4+0x2b8>
 8000362:	4645      	mov	r5, r8
 8000364:	1a12      	subs	r2, r2, r0
 8000366:	b2a4      	uxth	r4, r4
 8000368:	fbb2 f0f7 	udiv	r0, r2, r7
 800036c:	fb07 2210 	mls	r2, r7, r0, r2
 8000370:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000374:	fb0e fe00 	mul.w	lr, lr, r0
 8000378:	45a6      	cmp	lr, r4
 800037a:	d908      	bls.n	800038e <__udivmoddi4+0x14e>
 800037c:	eb1c 0404 	adds.w	r4, ip, r4
 8000380:	f100 32ff 	add.w	r2, r0, #4294967295
 8000384:	d202      	bcs.n	800038c <__udivmoddi4+0x14c>
 8000386:	45a6      	cmp	lr, r4
 8000388:	f200 80bb 	bhi.w	8000502 <__udivmoddi4+0x2c2>
 800038c:	4610      	mov	r0, r2
 800038e:	eba4 040e 	sub.w	r4, r4, lr
 8000392:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000396:	e79f      	b.n	80002d8 <__udivmoddi4+0x98>
 8000398:	f1c1 0720 	rsb	r7, r1, #32
 800039c:	408b      	lsls	r3, r1
 800039e:	fa22 fc07 	lsr.w	ip, r2, r7
 80003a2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003a6:	fa05 f401 	lsl.w	r4, r5, r1
 80003aa:	fa20 f307 	lsr.w	r3, r0, r7
 80003ae:	40fd      	lsrs	r5, r7
 80003b0:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003b4:	4323      	orrs	r3, r4
 80003b6:	fbb5 f8f9 	udiv	r8, r5, r9
 80003ba:	fa1f fe8c 	uxth.w	lr, ip
 80003be:	fb09 5518 	mls	r5, r9, r8, r5
 80003c2:	0c1c      	lsrs	r4, r3, #16
 80003c4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003c8:	fb08 f50e 	mul.w	r5, r8, lr
 80003cc:	42a5      	cmp	r5, r4
 80003ce:	fa02 f201 	lsl.w	r2, r2, r1
 80003d2:	fa00 f001 	lsl.w	r0, r0, r1
 80003d6:	d90b      	bls.n	80003f0 <__udivmoddi4+0x1b0>
 80003d8:	eb1c 0404 	adds.w	r4, ip, r4
 80003dc:	f108 3aff 	add.w	sl, r8, #4294967295
 80003e0:	f080 8088 	bcs.w	80004f4 <__udivmoddi4+0x2b4>
 80003e4:	42a5      	cmp	r5, r4
 80003e6:	f240 8085 	bls.w	80004f4 <__udivmoddi4+0x2b4>
 80003ea:	f1a8 0802 	sub.w	r8, r8, #2
 80003ee:	4464      	add	r4, ip
 80003f0:	1b64      	subs	r4, r4, r5
 80003f2:	b29d      	uxth	r5, r3
 80003f4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003f8:	fb09 4413 	mls	r4, r9, r3, r4
 80003fc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000400:	fb03 fe0e 	mul.w	lr, r3, lr
 8000404:	45a6      	cmp	lr, r4
 8000406:	d908      	bls.n	800041a <__udivmoddi4+0x1da>
 8000408:	eb1c 0404 	adds.w	r4, ip, r4
 800040c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000410:	d26c      	bcs.n	80004ec <__udivmoddi4+0x2ac>
 8000412:	45a6      	cmp	lr, r4
 8000414:	d96a      	bls.n	80004ec <__udivmoddi4+0x2ac>
 8000416:	3b02      	subs	r3, #2
 8000418:	4464      	add	r4, ip
 800041a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800041e:	fba3 9502 	umull	r9, r5, r3, r2
 8000422:	eba4 040e 	sub.w	r4, r4, lr
 8000426:	42ac      	cmp	r4, r5
 8000428:	46c8      	mov	r8, r9
 800042a:	46ae      	mov	lr, r5
 800042c:	d356      	bcc.n	80004dc <__udivmoddi4+0x29c>
 800042e:	d053      	beq.n	80004d8 <__udivmoddi4+0x298>
 8000430:	b156      	cbz	r6, 8000448 <__udivmoddi4+0x208>
 8000432:	ebb0 0208 	subs.w	r2, r0, r8
 8000436:	eb64 040e 	sbc.w	r4, r4, lr
 800043a:	fa04 f707 	lsl.w	r7, r4, r7
 800043e:	40ca      	lsrs	r2, r1
 8000440:	40cc      	lsrs	r4, r1
 8000442:	4317      	orrs	r7, r2
 8000444:	e9c6 7400 	strd	r7, r4, [r6]
 8000448:	4618      	mov	r0, r3
 800044a:	2100      	movs	r1, #0
 800044c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000450:	f1c3 0120 	rsb	r1, r3, #32
 8000454:	fa02 fc03 	lsl.w	ip, r2, r3
 8000458:	fa20 f201 	lsr.w	r2, r0, r1
 800045c:	fa25 f101 	lsr.w	r1, r5, r1
 8000460:	409d      	lsls	r5, r3
 8000462:	432a      	orrs	r2, r5
 8000464:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000470:	fb07 1510 	mls	r5, r7, r0, r1
 8000474:	0c11      	lsrs	r1, r2, #16
 8000476:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800047a:	fb00 f50e 	mul.w	r5, r0, lr
 800047e:	428d      	cmp	r5, r1
 8000480:	fa04 f403 	lsl.w	r4, r4, r3
 8000484:	d908      	bls.n	8000498 <__udivmoddi4+0x258>
 8000486:	eb1c 0101 	adds.w	r1, ip, r1
 800048a:	f100 38ff 	add.w	r8, r0, #4294967295
 800048e:	d22f      	bcs.n	80004f0 <__udivmoddi4+0x2b0>
 8000490:	428d      	cmp	r5, r1
 8000492:	d92d      	bls.n	80004f0 <__udivmoddi4+0x2b0>
 8000494:	3802      	subs	r0, #2
 8000496:	4461      	add	r1, ip
 8000498:	1b49      	subs	r1, r1, r5
 800049a:	b292      	uxth	r2, r2
 800049c:	fbb1 f5f7 	udiv	r5, r1, r7
 80004a0:	fb07 1115 	mls	r1, r7, r5, r1
 80004a4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004a8:	fb05 f10e 	mul.w	r1, r5, lr
 80004ac:	4291      	cmp	r1, r2
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x282>
 80004b0:	eb1c 0202 	adds.w	r2, ip, r2
 80004b4:	f105 38ff 	add.w	r8, r5, #4294967295
 80004b8:	d216      	bcs.n	80004e8 <__udivmoddi4+0x2a8>
 80004ba:	4291      	cmp	r1, r2
 80004bc:	d914      	bls.n	80004e8 <__udivmoddi4+0x2a8>
 80004be:	3d02      	subs	r5, #2
 80004c0:	4462      	add	r2, ip
 80004c2:	1a52      	subs	r2, r2, r1
 80004c4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004c8:	e738      	b.n	800033c <__udivmoddi4+0xfc>
 80004ca:	4631      	mov	r1, r6
 80004cc:	4630      	mov	r0, r6
 80004ce:	e708      	b.n	80002e2 <__udivmoddi4+0xa2>
 80004d0:	4639      	mov	r1, r7
 80004d2:	e6e6      	b.n	80002a2 <__udivmoddi4+0x62>
 80004d4:	4610      	mov	r0, r2
 80004d6:	e6fb      	b.n	80002d0 <__udivmoddi4+0x90>
 80004d8:	4548      	cmp	r0, r9
 80004da:	d2a9      	bcs.n	8000430 <__udivmoddi4+0x1f0>
 80004dc:	ebb9 0802 	subs.w	r8, r9, r2
 80004e0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004e4:	3b01      	subs	r3, #1
 80004e6:	e7a3      	b.n	8000430 <__udivmoddi4+0x1f0>
 80004e8:	4645      	mov	r5, r8
 80004ea:	e7ea      	b.n	80004c2 <__udivmoddi4+0x282>
 80004ec:	462b      	mov	r3, r5
 80004ee:	e794      	b.n	800041a <__udivmoddi4+0x1da>
 80004f0:	4640      	mov	r0, r8
 80004f2:	e7d1      	b.n	8000498 <__udivmoddi4+0x258>
 80004f4:	46d0      	mov	r8, sl
 80004f6:	e77b      	b.n	80003f0 <__udivmoddi4+0x1b0>
 80004f8:	3d02      	subs	r5, #2
 80004fa:	4462      	add	r2, ip
 80004fc:	e732      	b.n	8000364 <__udivmoddi4+0x124>
 80004fe:	4608      	mov	r0, r1
 8000500:	e70a      	b.n	8000318 <__udivmoddi4+0xd8>
 8000502:	4464      	add	r4, ip
 8000504:	3802      	subs	r0, #2
 8000506:	e742      	b.n	800038e <__udivmoddi4+0x14e>

08000508 <__aeabi_idiv0>:
 8000508:	4770      	bx	lr
 800050a:	bf00      	nop

0800050c <send_uart>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void send_uart(char *data)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	b082      	sub	sp, #8
 8000510:	af00      	add	r7, sp, #0
 8000512:	6078      	str	r0, [r7, #4]
	xSemaphoreTake(mutex,portMAX_DELAY);
 8000514:	4b10      	ldr	r3, [pc, #64]	; (8000558 <send_uart+0x4c>)
 8000516:	681b      	ldr	r3, [r3, #0]
 8000518:	f04f 31ff 	mov.w	r1, #4294967295
 800051c:	4618      	mov	r0, r3
 800051e:	f004 f92b 	bl	8004778 <xQueueSemaphoreTake>

	HAL_Delay(5000);
 8000522:	f241 3088 	movw	r0, #5000	; 0x1388
 8000526:	f000 fc37 	bl	8000d98 <HAL_Delay>

	HAL_UART_Transmit(&hlpuart1, (uint8_t*)data, strlen(data), portMAX_DELAY);
 800052a:	6878      	ldr	r0, [r7, #4]
 800052c:	f7ff fe68 	bl	8000200 <strlen>
 8000530:	4603      	mov	r3, r0
 8000532:	b29a      	uxth	r2, r3
 8000534:	f04f 33ff 	mov.w	r3, #4294967295
 8000538:	6879      	ldr	r1, [r7, #4]
 800053a:	4808      	ldr	r0, [pc, #32]	; (800055c <send_uart+0x50>)
 800053c:	f002 fed6 	bl	80032ec <HAL_UART_Transmit>

	xSemaphoreGive(mutex);
 8000540:	4b05      	ldr	r3, [pc, #20]	; (8000558 <send_uart+0x4c>)
 8000542:	6818      	ldr	r0, [r3, #0]
 8000544:	2300      	movs	r3, #0
 8000546:	2200      	movs	r2, #0
 8000548:	2100      	movs	r1, #0
 800054a:	f003 ff37 	bl	80043bc <xQueueGenericSend>
}
 800054e:	bf00      	nop
 8000550:	3708      	adds	r7, #8
 8000552:	46bd      	mov	sp, r7
 8000554:	bd80      	pop	{r7, pc}
 8000556:	bf00      	nop
 8000558:	200000c4 	.word	0x200000c4
 800055c:	20000030 	.word	0x20000030

08000560 <HPT_Task>:
void HPT_Task(void *params)
{
 8000560:	b5b0      	push	{r4, r5, r7, lr}
 8000562:	b09a      	sub	sp, #104	; 0x68
 8000564:	af00      	add	r7, sp, #0
 8000566:	6078      	str	r0, [r7, #4]
	char tosend[] = "\n\rsending IN HPT task\n\r";
 8000568:	4b1d      	ldr	r3, [pc, #116]	; (80005e0 <HPT_Task+0x80>)
 800056a:	f107 0450 	add.w	r4, r7, #80	; 0x50
 800056e:	461d      	mov	r5, r3
 8000570:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000572:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000574:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000578:	e884 0003 	stmia.w	r4, {r0, r1}
	while(1)
	{
		uint8_t pData[] = "\n\rEntered HPT task waiting for semaphore\n\r";
 800057c:	4b19      	ldr	r3, [pc, #100]	; (80005e4 <HPT_Task+0x84>)
 800057e:	f107 040c 	add.w	r4, r7, #12
 8000582:	461d      	mov	r5, r3
 8000584:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000586:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000588:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800058a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800058c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000590:	c403      	stmia	r4!, {r0, r1}
 8000592:	8022      	strh	r2, [r4, #0]
 8000594:	3402      	adds	r4, #2
 8000596:	0c13      	lsrs	r3, r2, #16
 8000598:	7023      	strb	r3, [r4, #0]
		HAL_UART_Transmit(&hlpuart1, pData, sizeof(pData), 100);
 800059a:	f107 010c 	add.w	r1, r7, #12
 800059e:	2364      	movs	r3, #100	; 0x64
 80005a0:	222b      	movs	r2, #43	; 0x2b
 80005a2:	4811      	ldr	r0, [pc, #68]	; (80005e8 <HPT_Task+0x88>)
 80005a4:	f002 fea2 	bl	80032ec <HAL_UART_Transmit>

		send_uart(tosend);
 80005a8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80005ac:	4618      	mov	r0, r3
 80005ae:	f7ff ffad 	bl	800050c <send_uart>

		uint8_t pData1[] = "\n\rLeaving HPT task\n\r";
 80005b2:	4b0e      	ldr	r3, [pc, #56]	; (80005ec <HPT_Task+0x8c>)
 80005b4:	f107 0438 	add.w	r4, r7, #56	; 0x38
 80005b8:	461d      	mov	r5, r3
 80005ba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005bc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005be:	e895 0003 	ldmia.w	r5, {r0, r1}
 80005c2:	6020      	str	r0, [r4, #0]
 80005c4:	3404      	adds	r4, #4
 80005c6:	7021      	strb	r1, [r4, #0]
		HAL_UART_Transmit(&hlpuart1, pData1, sizeof(pData1), 100);
 80005c8:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80005cc:	2364      	movs	r3, #100	; 0x64
 80005ce:	2215      	movs	r2, #21
 80005d0:	4805      	ldr	r0, [pc, #20]	; (80005e8 <HPT_Task+0x88>)
 80005d2:	f002 fe8b 	bl	80032ec <HAL_UART_Transmit>

		vTaskDelay(pdMS_TO_TICKS(750));
 80005d6:	f240 20ee 	movw	r0, #750	; 0x2ee
 80005da:	f004 fc85 	bl	8004ee8 <vTaskDelay>
	{
 80005de:	e7cd      	b.n	800057c <HPT_Task+0x1c>
 80005e0:	08006c70 	.word	0x08006c70
 80005e4:	08006c88 	.word	0x08006c88
 80005e8:	20000030 	.word	0x20000030
 80005ec:	08006cb4 	.word	0x08006cb4

080005f0 <MPT_Task>:
	}
}

void MPT_Task(void *params)
{
 80005f0:	b5b0      	push	{r4, r5, r7, lr}
 80005f2:	b08e      	sub	sp, #56	; 0x38
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	6078      	str	r0, [r7, #4]
	char tosend[] = "\n\r********* sending IN MPT task **********\n\r";
 80005f8:	4b0b      	ldr	r3, [pc, #44]	; (8000628 <MPT_Task+0x38>)
 80005fa:	f107 0408 	add.w	r4, r7, #8
 80005fe:	461d      	mov	r5, r3
 8000600:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000602:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000604:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000606:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000608:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800060c:	c407      	stmia	r4!, {r0, r1, r2}
 800060e:	7023      	strb	r3, [r4, #0]
	while(1)
	{

		HAL_UART_Transmit(&hlpuart1, (uint8_t*)tosend, sizeof(tosend), 100);
 8000610:	f107 0108 	add.w	r1, r7, #8
 8000614:	2364      	movs	r3, #100	; 0x64
 8000616:	222d      	movs	r2, #45	; 0x2d
 8000618:	4804      	ldr	r0, [pc, #16]	; (800062c <MPT_Task+0x3c>)
 800061a:	f002 fe67 	bl	80032ec <HAL_UART_Transmit>

		vTaskDelay(pdMS_TO_TICKS(2000));
 800061e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000622:	f004 fc61 	bl	8004ee8 <vTaskDelay>
		HAL_UART_Transmit(&hlpuart1, (uint8_t*)tosend, sizeof(tosend), 100);
 8000626:	e7f3      	b.n	8000610 <MPT_Task+0x20>
 8000628:	08006ccc 	.word	0x08006ccc
 800062c:	20000030 	.word	0x20000030

08000630 <LPT_Task>:
	}
}

void LPT_Task(void *params)
{
 8000630:	b5b0      	push	{r4, r5, r7, lr}
 8000632:	b09a      	sub	sp, #104	; 0x68
 8000634:	af00      	add	r7, sp, #0
 8000636:	6078      	str	r0, [r7, #4]
	char tosend[] = "\n\rsendingIN LPT task\n\r";
 8000638:	4b1f      	ldr	r3, [pc, #124]	; (80006b8 <LPT_Task+0x88>)
 800063a:	f107 0450 	add.w	r4, r7, #80	; 0x50
 800063e:	461d      	mov	r5, r3
 8000640:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000642:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000644:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000648:	6020      	str	r0, [r4, #0]
 800064a:	3404      	adds	r4, #4
 800064c:	8021      	strh	r1, [r4, #0]
 800064e:	3402      	adds	r4, #2
 8000650:	0c0b      	lsrs	r3, r1, #16
 8000652:	7023      	strb	r3, [r4, #0]
	while(1)
	{
		uint8_t pData[] = "\n\rEntered LPT task waiting for semaphore\n\r";
 8000654:	4b19      	ldr	r3, [pc, #100]	; (80006bc <LPT_Task+0x8c>)
 8000656:	f107 040c 	add.w	r4, r7, #12
 800065a:	461d      	mov	r5, r3
 800065c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800065e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000660:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000662:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000664:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000668:	c403      	stmia	r4!, {r0, r1}
 800066a:	8022      	strh	r2, [r4, #0]
 800066c:	3402      	adds	r4, #2
 800066e:	0c13      	lsrs	r3, r2, #16
 8000670:	7023      	strb	r3, [r4, #0]
		HAL_UART_Transmit(&hlpuart1, pData, sizeof(pData), 100);
 8000672:	f107 010c 	add.w	r1, r7, #12
 8000676:	2364      	movs	r3, #100	; 0x64
 8000678:	222b      	movs	r2, #43	; 0x2b
 800067a:	4811      	ldr	r0, [pc, #68]	; (80006c0 <LPT_Task+0x90>)
 800067c:	f002 fe36 	bl	80032ec <HAL_UART_Transmit>

		send_uart(tosend);
 8000680:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000684:	4618      	mov	r0, r3
 8000686:	f7ff ff41 	bl	800050c <send_uart>

		uint8_t pData1[] = "\n\rLeaving LPT task\n\r";
 800068a:	4b0e      	ldr	r3, [pc, #56]	; (80006c4 <LPT_Task+0x94>)
 800068c:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8000690:	461d      	mov	r5, r3
 8000692:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000694:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000696:	e895 0003 	ldmia.w	r5, {r0, r1}
 800069a:	6020      	str	r0, [r4, #0]
 800069c:	3404      	adds	r4, #4
 800069e:	7021      	strb	r1, [r4, #0]
		HAL_UART_Transmit(&hlpuart1, pData1, sizeof(pData1), 100);
 80006a0:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80006a4:	2364      	movs	r3, #100	; 0x64
 80006a6:	2215      	movs	r2, #21
 80006a8:	4805      	ldr	r0, [pc, #20]	; (80006c0 <LPT_Task+0x90>)
 80006aa:	f002 fe1f 	bl	80032ec <HAL_UART_Transmit>

		vTaskDelay(pdMS_TO_TICKS(1000));
 80006ae:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80006b2:	f004 fc19 	bl	8004ee8 <vTaskDelay>
	{
 80006b6:	e7cd      	b.n	8000654 <LPT_Task+0x24>
 80006b8:	08006cfc 	.word	0x08006cfc
 80006bc:	08006d14 	.word	0x08006d14
 80006c0:	20000030 	.word	0x20000030
 80006c4:	08006d40 	.word	0x08006d40

080006c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006c8:	b5b0      	push	{r4, r5, r7, lr}
 80006ca:	b08a      	sub	sp, #40	; 0x28
 80006cc:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006ce:	f000 fb2a 	bl	8000d26 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006d2:	f000 f859 	bl	8000788 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006d6:	f000 f8eb 	bl	80008b0 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 80006da:	f000 f89d 	bl	8000818 <MX_LPUART1_UART_Init>
  /* USER CODE BEGIN 2 */
  mutex = xSemaphoreCreateMutex();
 80006de:	2001      	movs	r0, #1
 80006e0:	f003 fe53 	bl	800438a <xQueueCreateMutex>
 80006e4:	4603      	mov	r3, r0
 80006e6:	4a1f      	ldr	r2, [pc, #124]	; (8000764 <main+0x9c>)
 80006e8:	6013      	str	r3, [r2, #0]
  if(mutex != NULL)
 80006ea:	4b1e      	ldr	r3, [pc, #120]	; (8000764 <main+0x9c>)
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d027      	beq.n	8000742 <main+0x7a>
  {
	  xSemaphoreGive(mutex);
 80006f2:	4b1c      	ldr	r3, [pc, #112]	; (8000764 <main+0x9c>)
 80006f4:	6818      	ldr	r0, [r3, #0]
 80006f6:	2300      	movs	r3, #0
 80006f8:	2200      	movs	r2, #0
 80006fa:	2100      	movs	r1, #0
 80006fc:	f003 fe5e 	bl	80043bc <xQueueGenericSend>
	  xTaskCreate(HPT_Task, "task1", 128, NULL, 3, NULL);
 8000700:	2300      	movs	r3, #0
 8000702:	9301      	str	r3, [sp, #4]
 8000704:	2303      	movs	r3, #3
 8000706:	9300      	str	r3, [sp, #0]
 8000708:	2300      	movs	r3, #0
 800070a:	2280      	movs	r2, #128	; 0x80
 800070c:	4916      	ldr	r1, [pc, #88]	; (8000768 <main+0xa0>)
 800070e:	4817      	ldr	r0, [pc, #92]	; (800076c <main+0xa4>)
 8000710:	f004 fa8c 	bl	8004c2c <xTaskCreate>
	  xTaskCreate(MPT_Task, "task2", 128, NULL, 2, NULL);
 8000714:	2300      	movs	r3, #0
 8000716:	9301      	str	r3, [sp, #4]
 8000718:	2302      	movs	r3, #2
 800071a:	9300      	str	r3, [sp, #0]
 800071c:	2300      	movs	r3, #0
 800071e:	2280      	movs	r2, #128	; 0x80
 8000720:	4913      	ldr	r1, [pc, #76]	; (8000770 <main+0xa8>)
 8000722:	4814      	ldr	r0, [pc, #80]	; (8000774 <main+0xac>)
 8000724:	f004 fa82 	bl	8004c2c <xTaskCreate>
	  xTaskCreate(LPT_Task, "task3", 128, NULL, 1, NULL);
 8000728:	2300      	movs	r3, #0
 800072a:	9301      	str	r3, [sp, #4]
 800072c:	2301      	movs	r3, #1
 800072e:	9300      	str	r3, [sp, #0]
 8000730:	2300      	movs	r3, #0
 8000732:	2280      	movs	r2, #128	; 0x80
 8000734:	4910      	ldr	r1, [pc, #64]	; (8000778 <main+0xb0>)
 8000736:	4811      	ldr	r0, [pc, #68]	; (800077c <main+0xb4>)
 8000738:	f004 fa78 	bl	8004c2c <xTaskCreate>

	  vTaskStartScheduler();
 800073c:	f004 fc08 	bl	8004f50 <vTaskStartScheduler>
 8000740:	e00e      	b.n	8000760 <main+0x98>
  }
  else
  {
	  uint8_t str[]= "failed to create mutex\n\r";
 8000742:	4b0f      	ldr	r3, [pc, #60]	; (8000780 <main+0xb8>)
 8000744:	1d3c      	adds	r4, r7, #4
 8000746:	461d      	mov	r5, r3
 8000748:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800074a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800074c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000750:	c403      	stmia	r4!, {r0, r1}
 8000752:	7022      	strb	r2, [r4, #0]
	  HAL_UART_Transmit(&hlpuart1, str, sizeof(str), 100);
 8000754:	1d39      	adds	r1, r7, #4
 8000756:	2364      	movs	r3, #100	; 0x64
 8000758:	2219      	movs	r2, #25
 800075a:	480a      	ldr	r0, [pc, #40]	; (8000784 <main+0xbc>)
 800075c:	f002 fdc6 	bl	80032ec <HAL_UART_Transmit>
  }
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000760:	e7fe      	b.n	8000760 <main+0x98>
 8000762:	bf00      	nop
 8000764:	200000c4 	.word	0x200000c4
 8000768:	08006d58 	.word	0x08006d58
 800076c:	08000561 	.word	0x08000561
 8000770:	08006d60 	.word	0x08006d60
 8000774:	080005f1 	.word	0x080005f1
 8000778:	08006d68 	.word	0x08006d68
 800077c:	08000631 	.word	0x08000631
 8000780:	08006d70 	.word	0x08006d70
 8000784:	20000030 	.word	0x20000030

08000788 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b096      	sub	sp, #88	; 0x58
 800078c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800078e:	f107 0314 	add.w	r3, r7, #20
 8000792:	2244      	movs	r2, #68	; 0x44
 8000794:	2100      	movs	r1, #0
 8000796:	4618      	mov	r0, r3
 8000798:	f006 fa24 	bl	8006be4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800079c:	463b      	mov	r3, r7
 800079e:	2200      	movs	r2, #0
 80007a0:	601a      	str	r2, [r3, #0]
 80007a2:	605a      	str	r2, [r3, #4]
 80007a4:	609a      	str	r2, [r3, #8]
 80007a6:	60da      	str	r2, [r3, #12]
 80007a8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80007aa:	f44f 7000 	mov.w	r0, #512	; 0x200
 80007ae:	f000 fdc3 	bl	8001338 <HAL_PWREx_ControlVoltageScaling>
 80007b2:	4603      	mov	r3, r0
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d001      	beq.n	80007bc <SystemClock_Config+0x34>
  {
    Error_Handler();
 80007b8:	f000 f962 	bl	8000a80 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80007bc:	2310      	movs	r3, #16
 80007be:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80007c0:	2301      	movs	r3, #1
 80007c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80007c4:	2300      	movs	r3, #0
 80007c6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80007c8:	2360      	movs	r3, #96	; 0x60
 80007ca:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80007cc:	2300      	movs	r3, #0
 80007ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007d0:	f107 0314 	add.w	r3, r7, #20
 80007d4:	4618      	mov	r0, r3
 80007d6:	f000 fe63 	bl	80014a0 <HAL_RCC_OscConfig>
 80007da:	4603      	mov	r3, r0
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d001      	beq.n	80007e4 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 80007e0:	f000 f94e 	bl	8000a80 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007e4:	230f      	movs	r3, #15
 80007e6:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80007e8:	2300      	movs	r3, #0
 80007ea:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007ec:	2300      	movs	r3, #0
 80007ee:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80007f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80007f4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007f6:	2300      	movs	r3, #0
 80007f8:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80007fa:	463b      	mov	r3, r7
 80007fc:	2100      	movs	r1, #0
 80007fe:	4618      	mov	r0, r3
 8000800:	f001 fa68 	bl	8001cd4 <HAL_RCC_ClockConfig>
 8000804:	4603      	mov	r3, r0
 8000806:	2b00      	cmp	r3, #0
 8000808:	d001      	beq.n	800080e <SystemClock_Config+0x86>
  {
    Error_Handler();
 800080a:	f000 f939 	bl	8000a80 <Error_Handler>
  }
}
 800080e:	bf00      	nop
 8000810:	3758      	adds	r7, #88	; 0x58
 8000812:	46bd      	mov	sp, r7
 8000814:	bd80      	pop	{r7, pc}
	...

08000818 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 800081c:	4b22      	ldr	r3, [pc, #136]	; (80008a8 <MX_LPUART1_UART_Init+0x90>)
 800081e:	4a23      	ldr	r2, [pc, #140]	; (80008ac <MX_LPUART1_UART_Init+0x94>)
 8000820:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8000822:	4b21      	ldr	r3, [pc, #132]	; (80008a8 <MX_LPUART1_UART_Init+0x90>)
 8000824:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000828:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800082a:	4b1f      	ldr	r3, [pc, #124]	; (80008a8 <MX_LPUART1_UART_Init+0x90>)
 800082c:	2200      	movs	r2, #0
 800082e:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000830:	4b1d      	ldr	r3, [pc, #116]	; (80008a8 <MX_LPUART1_UART_Init+0x90>)
 8000832:	2200      	movs	r2, #0
 8000834:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000836:	4b1c      	ldr	r3, [pc, #112]	; (80008a8 <MX_LPUART1_UART_Init+0x90>)
 8000838:	2200      	movs	r2, #0
 800083a:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 800083c:	4b1a      	ldr	r3, [pc, #104]	; (80008a8 <MX_LPUART1_UART_Init+0x90>)
 800083e:	220c      	movs	r2, #12
 8000840:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000842:	4b19      	ldr	r3, [pc, #100]	; (80008a8 <MX_LPUART1_UART_Init+0x90>)
 8000844:	2200      	movs	r2, #0
 8000846:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000848:	4b17      	ldr	r3, [pc, #92]	; (80008a8 <MX_LPUART1_UART_Init+0x90>)
 800084a:	2200      	movs	r2, #0
 800084c:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800084e:	4b16      	ldr	r3, [pc, #88]	; (80008a8 <MX_LPUART1_UART_Init+0x90>)
 8000850:	2200      	movs	r2, #0
 8000852:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000854:	4b14      	ldr	r3, [pc, #80]	; (80008a8 <MX_LPUART1_UART_Init+0x90>)
 8000856:	2200      	movs	r2, #0
 8000858:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 800085a:	4b13      	ldr	r3, [pc, #76]	; (80008a8 <MX_LPUART1_UART_Init+0x90>)
 800085c:	2200      	movs	r2, #0
 800085e:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000860:	4811      	ldr	r0, [pc, #68]	; (80008a8 <MX_LPUART1_UART_Init+0x90>)
 8000862:	f002 fcf3 	bl	800324c <HAL_UART_Init>
 8000866:	4603      	mov	r3, r0
 8000868:	2b00      	cmp	r3, #0
 800086a:	d001      	beq.n	8000870 <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 800086c:	f000 f908 	bl	8000a80 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000870:	2100      	movs	r1, #0
 8000872:	480d      	ldr	r0, [pc, #52]	; (80008a8 <MX_LPUART1_UART_Init+0x90>)
 8000874:	f003 fb18 	bl	8003ea8 <HAL_UARTEx_SetTxFifoThreshold>
 8000878:	4603      	mov	r3, r0
 800087a:	2b00      	cmp	r3, #0
 800087c:	d001      	beq.n	8000882 <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 800087e:	f000 f8ff 	bl	8000a80 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000882:	2100      	movs	r1, #0
 8000884:	4808      	ldr	r0, [pc, #32]	; (80008a8 <MX_LPUART1_UART_Init+0x90>)
 8000886:	f003 fb4d 	bl	8003f24 <HAL_UARTEx_SetRxFifoThreshold>
 800088a:	4603      	mov	r3, r0
 800088c:	2b00      	cmp	r3, #0
 800088e:	d001      	beq.n	8000894 <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000890:	f000 f8f6 	bl	8000a80 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000894:	4804      	ldr	r0, [pc, #16]	; (80008a8 <MX_LPUART1_UART_Init+0x90>)
 8000896:	f003 face 	bl	8003e36 <HAL_UARTEx_DisableFifoMode>
 800089a:	4603      	mov	r3, r0
 800089c:	2b00      	cmp	r3, #0
 800089e:	d001      	beq.n	80008a4 <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 80008a0:	f000 f8ee 	bl	8000a80 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80008a4:	bf00      	nop
 80008a6:	bd80      	pop	{r7, pc}
 80008a8:	20000030 	.word	0x20000030
 80008ac:	40008000 	.word	0x40008000

080008b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b08c      	sub	sp, #48	; 0x30
 80008b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008b6:	f107 031c 	add.w	r3, r7, #28
 80008ba:	2200      	movs	r2, #0
 80008bc:	601a      	str	r2, [r3, #0]
 80008be:	605a      	str	r2, [r3, #4]
 80008c0:	609a      	str	r2, [r3, #8]
 80008c2:	60da      	str	r2, [r3, #12]
 80008c4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008c6:	4b60      	ldr	r3, [pc, #384]	; (8000a48 <MX_GPIO_Init+0x198>)
 80008c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008ca:	4a5f      	ldr	r2, [pc, #380]	; (8000a48 <MX_GPIO_Init+0x198>)
 80008cc:	f043 0304 	orr.w	r3, r3, #4
 80008d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008d2:	4b5d      	ldr	r3, [pc, #372]	; (8000a48 <MX_GPIO_Init+0x198>)
 80008d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008d6:	f003 0304 	and.w	r3, r3, #4
 80008da:	61bb      	str	r3, [r7, #24]
 80008dc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008de:	4b5a      	ldr	r3, [pc, #360]	; (8000a48 <MX_GPIO_Init+0x198>)
 80008e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008e2:	4a59      	ldr	r2, [pc, #356]	; (8000a48 <MX_GPIO_Init+0x198>)
 80008e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008ea:	4b57      	ldr	r3, [pc, #348]	; (8000a48 <MX_GPIO_Init+0x198>)
 80008ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008f2:	617b      	str	r3, [r7, #20]
 80008f4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008f6:	4b54      	ldr	r3, [pc, #336]	; (8000a48 <MX_GPIO_Init+0x198>)
 80008f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008fa:	4a53      	ldr	r2, [pc, #332]	; (8000a48 <MX_GPIO_Init+0x198>)
 80008fc:	f043 0302 	orr.w	r3, r3, #2
 8000900:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000902:	4b51      	ldr	r3, [pc, #324]	; (8000a48 <MX_GPIO_Init+0x198>)
 8000904:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000906:	f003 0302 	and.w	r3, r3, #2
 800090a:	613b      	str	r3, [r7, #16]
 800090c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800090e:	4b4e      	ldr	r3, [pc, #312]	; (8000a48 <MX_GPIO_Init+0x198>)
 8000910:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000912:	4a4d      	ldr	r2, [pc, #308]	; (8000a48 <MX_GPIO_Init+0x198>)
 8000914:	f043 0308 	orr.w	r3, r3, #8
 8000918:	64d3      	str	r3, [r2, #76]	; 0x4c
 800091a:	4b4b      	ldr	r3, [pc, #300]	; (8000a48 <MX_GPIO_Init+0x198>)
 800091c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800091e:	f003 0308 	and.w	r3, r3, #8
 8000922:	60fb      	str	r3, [r7, #12]
 8000924:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000926:	4b48      	ldr	r3, [pc, #288]	; (8000a48 <MX_GPIO_Init+0x198>)
 8000928:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800092a:	4a47      	ldr	r2, [pc, #284]	; (8000a48 <MX_GPIO_Init+0x198>)
 800092c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000930:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000932:	4b45      	ldr	r3, [pc, #276]	; (8000a48 <MX_GPIO_Init+0x198>)
 8000934:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000936:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800093a:	60bb      	str	r3, [r7, #8]
 800093c:	68bb      	ldr	r3, [r7, #8]
  HAL_PWREx_EnableVddIO2();
 800093e:	f000 fd9f 	bl	8001480 <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000942:	4b41      	ldr	r3, [pc, #260]	; (8000a48 <MX_GPIO_Init+0x198>)
 8000944:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000946:	4a40      	ldr	r2, [pc, #256]	; (8000a48 <MX_GPIO_Init+0x198>)
 8000948:	f043 0301 	orr.w	r3, r3, #1
 800094c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800094e:	4b3e      	ldr	r3, [pc, #248]	; (8000a48 <MX_GPIO_Init+0x198>)
 8000950:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000952:	f003 0301 	and.w	r3, r3, #1
 8000956:	607b      	str	r3, [r7, #4]
 8000958:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800095a:	2200      	movs	r2, #0
 800095c:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 8000960:	483a      	ldr	r0, [pc, #232]	; (8000a4c <MX_GPIO_Init+0x19c>)
 8000962:	f000 fcb1 	bl	80012c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000966:	2200      	movs	r2, #0
 8000968:	2140      	movs	r1, #64	; 0x40
 800096a:	4839      	ldr	r0, [pc, #228]	; (8000a50 <MX_GPIO_Init+0x1a0>)
 800096c:	f000 fcac 	bl	80012c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000970:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000974:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000976:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800097a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097c:	2300      	movs	r3, #0
 800097e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000980:	f107 031c 	add.w	r3, r7, #28
 8000984:	4619      	mov	r1, r3
 8000986:	4833      	ldr	r0, [pc, #204]	; (8000a54 <MX_GPIO_Init+0x1a4>)
 8000988:	f000 fb0c 	bl	8000fa4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 800098c:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 8000990:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000992:	2301      	movs	r3, #1
 8000994:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000996:	2300      	movs	r3, #0
 8000998:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800099a:	2300      	movs	r3, #0
 800099c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800099e:	f107 031c 	add.w	r3, r7, #28
 80009a2:	4619      	mov	r1, r3
 80009a4:	4829      	ldr	r0, [pc, #164]	; (8000a4c <MX_GPIO_Init+0x19c>)
 80009a6:	f000 fafd 	bl	8000fa4 <HAL_GPIO_Init>

  /*Configure GPIO pins : STLK_RX_Pin STLK_TX_Pin */
  GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80009aa:	f44f 7340 	mov.w	r3, #768	; 0x300
 80009ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009b0:	2302      	movs	r3, #2
 80009b2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b4:	2300      	movs	r3, #0
 80009b6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009b8:	2303      	movs	r3, #3
 80009ba:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80009bc:	2307      	movs	r3, #7
 80009be:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009c0:	f107 031c 	add.w	r3, r7, #28
 80009c4:	4619      	mov	r1, r3
 80009c6:	4824      	ldr	r0, [pc, #144]	; (8000a58 <MX_GPIO_Init+0x1a8>)
 80009c8:	f000 faec 	bl	8000fa4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80009cc:	2320      	movs	r3, #32
 80009ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009d0:	2300      	movs	r3, #0
 80009d2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d4:	2300      	movs	r3, #0
 80009d6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80009d8:	f107 031c 	add.w	r3, r7, #28
 80009dc:	4619      	mov	r1, r3
 80009de:	481c      	ldr	r0, [pc, #112]	; (8000a50 <MX_GPIO_Init+0x1a0>)
 80009e0:	f000 fae0 	bl	8000fa4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80009e4:	2340      	movs	r3, #64	; 0x40
 80009e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009e8:	2301      	movs	r3, #1
 80009ea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ec:	2300      	movs	r3, #0
 80009ee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009f0:	2300      	movs	r3, #0
 80009f2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80009f4:	f107 031c 	add.w	r3, r7, #28
 80009f8:	4619      	mov	r1, r3
 80009fa:	4815      	ldr	r0, [pc, #84]	; (8000a50 <MX_GPIO_Init+0x1a0>)
 80009fc:	f000 fad2 	bl	8000fa4 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000a00:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000a04:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a06:	2302      	movs	r3, #2
 8000a08:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a0e:	2303      	movs	r3, #3
 8000a10:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000a12:	230a      	movs	r3, #10
 8000a14:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a16:	f107 031c 	add.w	r3, r7, #28
 8000a1a:	4619      	mov	r1, r3
 8000a1c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a20:	f000 fac0 	bl	8000fa4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000a24:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000a28:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000a32:	f107 031c 	add.w	r3, r7, #28
 8000a36:	4619      	mov	r1, r3
 8000a38:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a3c:	f000 fab2 	bl	8000fa4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a40:	bf00      	nop
 8000a42:	3730      	adds	r7, #48	; 0x30
 8000a44:	46bd      	mov	sp, r7
 8000a46:	bd80      	pop	{r7, pc}
 8000a48:	40021000 	.word	0x40021000
 8000a4c:	48000400 	.word	0x48000400
 8000a50:	48001800 	.word	0x48001800
 8000a54:	48000800 	.word	0x48000800
 8000a58:	48000c00 	.word	0x48000c00

08000a5c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b082      	sub	sp, #8
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	4a04      	ldr	r2, [pc, #16]	; (8000a7c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000a6a:	4293      	cmp	r3, r2
 8000a6c:	d101      	bne.n	8000a72 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000a6e:	f000 f973 	bl	8000d58 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000a72:	bf00      	nop
 8000a74:	3708      	adds	r7, #8
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bd80      	pop	{r7, pc}
 8000a7a:	bf00      	nop
 8000a7c:	40012c00 	.word	0x40012c00

08000a80 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a80:	b480      	push	{r7}
 8000a82:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a84:	b672      	cpsid	i
}
 8000a86:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a88:	e7fe      	b.n	8000a88 <Error_Handler+0x8>
	...

08000a8c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	b083      	sub	sp, #12
 8000a90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a92:	4b0f      	ldr	r3, [pc, #60]	; (8000ad0 <HAL_MspInit+0x44>)
 8000a94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a96:	4a0e      	ldr	r2, [pc, #56]	; (8000ad0 <HAL_MspInit+0x44>)
 8000a98:	f043 0301 	orr.w	r3, r3, #1
 8000a9c:	6613      	str	r3, [r2, #96]	; 0x60
 8000a9e:	4b0c      	ldr	r3, [pc, #48]	; (8000ad0 <HAL_MspInit+0x44>)
 8000aa0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000aa2:	f003 0301 	and.w	r3, r3, #1
 8000aa6:	607b      	str	r3, [r7, #4]
 8000aa8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000aaa:	4b09      	ldr	r3, [pc, #36]	; (8000ad0 <HAL_MspInit+0x44>)
 8000aac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000aae:	4a08      	ldr	r2, [pc, #32]	; (8000ad0 <HAL_MspInit+0x44>)
 8000ab0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ab4:	6593      	str	r3, [r2, #88]	; 0x58
 8000ab6:	4b06      	ldr	r3, [pc, #24]	; (8000ad0 <HAL_MspInit+0x44>)
 8000ab8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000aba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000abe:	603b      	str	r3, [r7, #0]
 8000ac0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ac2:	bf00      	nop
 8000ac4:	370c      	adds	r7, #12
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000acc:	4770      	bx	lr
 8000ace:	bf00      	nop
 8000ad0:	40021000 	.word	0x40021000

08000ad4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b0ae      	sub	sp, #184	; 0xb8
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000adc:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	601a      	str	r2, [r3, #0]
 8000ae4:	605a      	str	r2, [r3, #4]
 8000ae6:	609a      	str	r2, [r3, #8]
 8000ae8:	60da      	str	r2, [r3, #12]
 8000aea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000aec:	f107 0310 	add.w	r3, r7, #16
 8000af0:	2294      	movs	r2, #148	; 0x94
 8000af2:	2100      	movs	r1, #0
 8000af4:	4618      	mov	r0, r3
 8000af6:	f006 f875 	bl	8006be4 <memset>
  if(huart->Instance==LPUART1)
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	4a22      	ldr	r2, [pc, #136]	; (8000b88 <HAL_UART_MspInit+0xb4>)
 8000b00:	4293      	cmp	r3, r2
 8000b02:	d13d      	bne.n	8000b80 <HAL_UART_MspInit+0xac>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000b04:	2320      	movs	r3, #32
 8000b06:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b0c:	f107 0310 	add.w	r3, r7, #16
 8000b10:	4618      	mov	r0, r3
 8000b12:	f001 fbcf 	bl	80022b4 <HAL_RCCEx_PeriphCLKConfig>
 8000b16:	4603      	mov	r3, r0
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d001      	beq.n	8000b20 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000b1c:	f7ff ffb0 	bl	8000a80 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000b20:	4b1a      	ldr	r3, [pc, #104]	; (8000b8c <HAL_UART_MspInit+0xb8>)
 8000b22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000b24:	4a19      	ldr	r2, [pc, #100]	; (8000b8c <HAL_UART_MspInit+0xb8>)
 8000b26:	f043 0301 	orr.w	r3, r3, #1
 8000b2a:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000b2c:	4b17      	ldr	r3, [pc, #92]	; (8000b8c <HAL_UART_MspInit+0xb8>)
 8000b2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000b30:	f003 0301 	and.w	r3, r3, #1
 8000b34:	60fb      	str	r3, [r7, #12]
 8000b36:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b38:	4b14      	ldr	r3, [pc, #80]	; (8000b8c <HAL_UART_MspInit+0xb8>)
 8000b3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b3c:	4a13      	ldr	r2, [pc, #76]	; (8000b8c <HAL_UART_MspInit+0xb8>)
 8000b3e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b42:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b44:	4b11      	ldr	r3, [pc, #68]	; (8000b8c <HAL_UART_MspInit+0xb8>)
 8000b46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b4c:	60bb      	str	r3, [r7, #8]
 8000b4e:	68bb      	ldr	r3, [r7, #8]
    HAL_PWREx_EnableVddIO2();
 8000b50:	f000 fc96 	bl	8001480 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_TX_Pin|STLINK_RX_Pin;
 8000b54:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000b58:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b5c:	2302      	movs	r3, #2
 8000b5e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b62:	2300      	movs	r3, #0
 8000b64:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b68:	2303      	movs	r3, #3
 8000b6a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8000b6e:	2308      	movs	r3, #8
 8000b70:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000b74:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000b78:	4619      	mov	r1, r3
 8000b7a:	4805      	ldr	r0, [pc, #20]	; (8000b90 <HAL_UART_MspInit+0xbc>)
 8000b7c:	f000 fa12 	bl	8000fa4 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8000b80:	bf00      	nop
 8000b82:	37b8      	adds	r7, #184	; 0xb8
 8000b84:	46bd      	mov	sp, r7
 8000b86:	bd80      	pop	{r7, pc}
 8000b88:	40008000 	.word	0x40008000
 8000b8c:	40021000 	.word	0x40021000
 8000b90:	48001800 	.word	0x48001800

08000b94 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b08c      	sub	sp, #48	; 0x30
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000ba2:	4b2e      	ldr	r3, [pc, #184]	; (8000c5c <HAL_InitTick+0xc8>)
 8000ba4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ba6:	4a2d      	ldr	r2, [pc, #180]	; (8000c5c <HAL_InitTick+0xc8>)
 8000ba8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000bac:	6613      	str	r3, [r2, #96]	; 0x60
 8000bae:	4b2b      	ldr	r3, [pc, #172]	; (8000c5c <HAL_InitTick+0xc8>)
 8000bb0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000bb2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000bb6:	60bb      	str	r3, [r7, #8]
 8000bb8:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000bba:	f107 020c 	add.w	r2, r7, #12
 8000bbe:	f107 0310 	add.w	r3, r7, #16
 8000bc2:	4611      	mov	r1, r2
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	f001 fa83 	bl	80020d0 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000bca:	f001 fa6b 	bl	80020a4 <HAL_RCC_GetPCLK2Freq>
 8000bce:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000bd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000bd2:	4a23      	ldr	r2, [pc, #140]	; (8000c60 <HAL_InitTick+0xcc>)
 8000bd4:	fba2 2303 	umull	r2, r3, r2, r3
 8000bd8:	0c9b      	lsrs	r3, r3, #18
 8000bda:	3b01      	subs	r3, #1
 8000bdc:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000bde:	4b21      	ldr	r3, [pc, #132]	; (8000c64 <HAL_InitTick+0xd0>)
 8000be0:	4a21      	ldr	r2, [pc, #132]	; (8000c68 <HAL_InitTick+0xd4>)
 8000be2:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000be4:	4b1f      	ldr	r3, [pc, #124]	; (8000c64 <HAL_InitTick+0xd0>)
 8000be6:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000bea:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000bec:	4a1d      	ldr	r2, [pc, #116]	; (8000c64 <HAL_InitTick+0xd0>)
 8000bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bf0:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000bf2:	4b1c      	ldr	r3, [pc, #112]	; (8000c64 <HAL_InitTick+0xd0>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bf8:	4b1a      	ldr	r3, [pc, #104]	; (8000c64 <HAL_InitTick+0xd0>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bfe:	4b19      	ldr	r3, [pc, #100]	; (8000c64 <HAL_InitTick+0xd0>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000c04:	4817      	ldr	r0, [pc, #92]	; (8000c64 <HAL_InitTick+0xd0>)
 8000c06:	f002 f86d 	bl	8002ce4 <HAL_TIM_Base_Init>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8000c10:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d11b      	bne.n	8000c50 <HAL_InitTick+0xbc>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000c18:	4812      	ldr	r0, [pc, #72]	; (8000c64 <HAL_InitTick+0xd0>)
 8000c1a:	f002 f8c5 	bl	8002da8 <HAL_TIM_Base_Start_IT>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8000c24:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d111      	bne.n	8000c50 <HAL_InitTick+0xbc>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000c2c:	2019      	movs	r0, #25
 8000c2e:	f000 f9ab 	bl	8000f88 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	2b0f      	cmp	r3, #15
 8000c36:	d808      	bhi.n	8000c4a <HAL_InitTick+0xb6>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 8000c38:	2200      	movs	r2, #0
 8000c3a:	6879      	ldr	r1, [r7, #4]
 8000c3c:	2019      	movs	r0, #25
 8000c3e:	f000 f987 	bl	8000f50 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c42:	4a0a      	ldr	r2, [pc, #40]	; (8000c6c <HAL_InitTick+0xd8>)
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	6013      	str	r3, [r2, #0]
 8000c48:	e002      	b.n	8000c50 <HAL_InitTick+0xbc>
      }
      else
      {
        status = HAL_ERROR;
 8000c4a:	2301      	movs	r3, #1
 8000c4c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000c50:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000c54:	4618      	mov	r0, r3
 8000c56:	3730      	adds	r7, #48	; 0x30
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	bd80      	pop	{r7, pc}
 8000c5c:	40021000 	.word	0x40021000
 8000c60:	431bde83 	.word	0x431bde83
 8000c64:	200000c8 	.word	0x200000c8
 8000c68:	40012c00 	.word	0x40012c00
 8000c6c:	20000004 	.word	0x20000004

08000c70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c70:	b480      	push	{r7}
 8000c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c74:	e7fe      	b.n	8000c74 <NMI_Handler+0x4>

08000c76 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c76:	b480      	push	{r7}
 8000c78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c7a:	e7fe      	b.n	8000c7a <HardFault_Handler+0x4>

08000c7c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c80:	e7fe      	b.n	8000c80 <MemManage_Handler+0x4>

08000c82 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c82:	b480      	push	{r7}
 8000c84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c86:	e7fe      	b.n	8000c86 <BusFault_Handler+0x4>

08000c88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c8c:	e7fe      	b.n	8000c8c <UsageFault_Handler+0x4>

08000c8e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c8e:	b480      	push	{r7}
 8000c90:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c92:	bf00      	nop
 8000c94:	46bd      	mov	sp, r7
 8000c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9a:	4770      	bx	lr

08000c9c <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000ca0:	4802      	ldr	r0, [pc, #8]	; (8000cac <TIM1_UP_TIM16_IRQHandler+0x10>)
 8000ca2:	f002 f8f1 	bl	8002e88 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000ca6:	bf00      	nop
 8000ca8:	bd80      	pop	{r7, pc}
 8000caa:	bf00      	nop
 8000cac:	200000c8 	.word	0x200000c8

08000cb0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000cb4:	4b06      	ldr	r3, [pc, #24]	; (8000cd0 <SystemInit+0x20>)
 8000cb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000cba:	4a05      	ldr	r2, [pc, #20]	; (8000cd0 <SystemInit+0x20>)
 8000cbc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000cc0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000cc4:	bf00      	nop
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ccc:	4770      	bx	lr
 8000cce:	bf00      	nop
 8000cd0:	e000ed00 	.word	0xe000ed00

08000cd4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000cd4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d0c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000cd8:	f7ff ffea 	bl	8000cb0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000cdc:	480c      	ldr	r0, [pc, #48]	; (8000d10 <LoopForever+0x6>)
  ldr r1, =_edata
 8000cde:	490d      	ldr	r1, [pc, #52]	; (8000d14 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ce0:	4a0d      	ldr	r2, [pc, #52]	; (8000d18 <LoopForever+0xe>)
  movs r3, #0
 8000ce2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ce4:	e002      	b.n	8000cec <LoopCopyDataInit>

08000ce6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ce6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ce8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cea:	3304      	adds	r3, #4

08000cec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cf0:	d3f9      	bcc.n	8000ce6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cf2:	4a0a      	ldr	r2, [pc, #40]	; (8000d1c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000cf4:	4c0a      	ldr	r4, [pc, #40]	; (8000d20 <LoopForever+0x16>)
  movs r3, #0
 8000cf6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cf8:	e001      	b.n	8000cfe <LoopFillZerobss>

08000cfa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cfa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cfc:	3204      	adds	r2, #4

08000cfe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cfe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d00:	d3fb      	bcc.n	8000cfa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d02:	f005 ff77 	bl	8006bf4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000d06:	f7ff fcdf 	bl	80006c8 <main>

08000d0a <LoopForever>:

LoopForever:
    b LoopForever
 8000d0a:	e7fe      	b.n	8000d0a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000d0c:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8000d10:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d14:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000d18:	08006e1c 	.word	0x08006e1c
  ldr r2, =_sbss
 8000d1c:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000d20:	2001e27c 	.word	0x2001e27c

08000d24 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000d24:	e7fe      	b.n	8000d24 <ADC1_IRQHandler>

08000d26 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d26:	b580      	push	{r7, lr}
 8000d28:	b082      	sub	sp, #8
 8000d2a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d30:	2003      	movs	r0, #3
 8000d32:	f000 f902 	bl	8000f3a <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d36:	200f      	movs	r0, #15
 8000d38:	f7ff ff2c 	bl	8000b94 <HAL_InitTick>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d002      	beq.n	8000d48 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000d42:	2301      	movs	r3, #1
 8000d44:	71fb      	strb	r3, [r7, #7]
 8000d46:	e001      	b.n	8000d4c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000d48:	f7ff fea0 	bl	8000a8c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000d4c:	79fb      	ldrb	r3, [r7, #7]
}
 8000d4e:	4618      	mov	r0, r3
 8000d50:	3708      	adds	r7, #8
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd80      	pop	{r7, pc}
	...

08000d58 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000d5c:	4b06      	ldr	r3, [pc, #24]	; (8000d78 <HAL_IncTick+0x20>)
 8000d5e:	781b      	ldrb	r3, [r3, #0]
 8000d60:	461a      	mov	r2, r3
 8000d62:	4b06      	ldr	r3, [pc, #24]	; (8000d7c <HAL_IncTick+0x24>)
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	4413      	add	r3, r2
 8000d68:	4a04      	ldr	r2, [pc, #16]	; (8000d7c <HAL_IncTick+0x24>)
 8000d6a:	6013      	str	r3, [r2, #0]
}
 8000d6c:	bf00      	nop
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d74:	4770      	bx	lr
 8000d76:	bf00      	nop
 8000d78:	20000008 	.word	0x20000008
 8000d7c:	20000114 	.word	0x20000114

08000d80 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d80:	b480      	push	{r7}
 8000d82:	af00      	add	r7, sp, #0
  return uwTick;
 8000d84:	4b03      	ldr	r3, [pc, #12]	; (8000d94 <HAL_GetTick+0x14>)
 8000d86:	681b      	ldr	r3, [r3, #0]
}
 8000d88:	4618      	mov	r0, r3
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d90:	4770      	bx	lr
 8000d92:	bf00      	nop
 8000d94:	20000114 	.word	0x20000114

08000d98 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b084      	sub	sp, #16
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000da0:	f7ff ffee 	bl	8000d80 <HAL_GetTick>
 8000da4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000daa:	68fb      	ldr	r3, [r7, #12]
 8000dac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000db0:	d005      	beq.n	8000dbe <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000db2:	4b0a      	ldr	r3, [pc, #40]	; (8000ddc <HAL_Delay+0x44>)
 8000db4:	781b      	ldrb	r3, [r3, #0]
 8000db6:	461a      	mov	r2, r3
 8000db8:	68fb      	ldr	r3, [r7, #12]
 8000dba:	4413      	add	r3, r2
 8000dbc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000dbe:	bf00      	nop
 8000dc0:	f7ff ffde 	bl	8000d80 <HAL_GetTick>
 8000dc4:	4602      	mov	r2, r0
 8000dc6:	68bb      	ldr	r3, [r7, #8]
 8000dc8:	1ad3      	subs	r3, r2, r3
 8000dca:	68fa      	ldr	r2, [r7, #12]
 8000dcc:	429a      	cmp	r2, r3
 8000dce:	d8f7      	bhi.n	8000dc0 <HAL_Delay+0x28>
  {
  }
}
 8000dd0:	bf00      	nop
 8000dd2:	bf00      	nop
 8000dd4:	3710      	adds	r7, #16
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	bf00      	nop
 8000ddc:	20000008 	.word	0x20000008

08000de0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000de0:	b480      	push	{r7}
 8000de2:	b085      	sub	sp, #20
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	f003 0307 	and.w	r3, r3, #7
 8000dee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000df0:	4b0c      	ldr	r3, [pc, #48]	; (8000e24 <__NVIC_SetPriorityGrouping+0x44>)
 8000df2:	68db      	ldr	r3, [r3, #12]
 8000df4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000df6:	68ba      	ldr	r2, [r7, #8]
 8000df8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000dfc:	4013      	ands	r3, r2
 8000dfe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e00:	68fb      	ldr	r3, [r7, #12]
 8000e02:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e04:	68bb      	ldr	r3, [r7, #8]
 8000e06:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e08:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e10:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e12:	4a04      	ldr	r2, [pc, #16]	; (8000e24 <__NVIC_SetPriorityGrouping+0x44>)
 8000e14:	68bb      	ldr	r3, [r7, #8]
 8000e16:	60d3      	str	r3, [r2, #12]
}
 8000e18:	bf00      	nop
 8000e1a:	3714      	adds	r7, #20
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e22:	4770      	bx	lr
 8000e24:	e000ed00 	.word	0xe000ed00

08000e28 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e2c:	4b04      	ldr	r3, [pc, #16]	; (8000e40 <__NVIC_GetPriorityGrouping+0x18>)
 8000e2e:	68db      	ldr	r3, [r3, #12]
 8000e30:	0a1b      	lsrs	r3, r3, #8
 8000e32:	f003 0307 	and.w	r3, r3, #7
}
 8000e36:	4618      	mov	r0, r3
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3e:	4770      	bx	lr
 8000e40:	e000ed00 	.word	0xe000ed00

08000e44 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e44:	b480      	push	{r7}
 8000e46:	b083      	sub	sp, #12
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	db0b      	blt.n	8000e6e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e56:	79fb      	ldrb	r3, [r7, #7]
 8000e58:	f003 021f 	and.w	r2, r3, #31
 8000e5c:	4907      	ldr	r1, [pc, #28]	; (8000e7c <__NVIC_EnableIRQ+0x38>)
 8000e5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e62:	095b      	lsrs	r3, r3, #5
 8000e64:	2001      	movs	r0, #1
 8000e66:	fa00 f202 	lsl.w	r2, r0, r2
 8000e6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000e6e:	bf00      	nop
 8000e70:	370c      	adds	r7, #12
 8000e72:	46bd      	mov	sp, r7
 8000e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e78:	4770      	bx	lr
 8000e7a:	bf00      	nop
 8000e7c:	e000e100 	.word	0xe000e100

08000e80 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e80:	b480      	push	{r7}
 8000e82:	b083      	sub	sp, #12
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	4603      	mov	r3, r0
 8000e88:	6039      	str	r1, [r7, #0]
 8000e8a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	db0a      	blt.n	8000eaa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e94:	683b      	ldr	r3, [r7, #0]
 8000e96:	b2da      	uxtb	r2, r3
 8000e98:	490c      	ldr	r1, [pc, #48]	; (8000ecc <__NVIC_SetPriority+0x4c>)
 8000e9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e9e:	0112      	lsls	r2, r2, #4
 8000ea0:	b2d2      	uxtb	r2, r2
 8000ea2:	440b      	add	r3, r1
 8000ea4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ea8:	e00a      	b.n	8000ec0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eaa:	683b      	ldr	r3, [r7, #0]
 8000eac:	b2da      	uxtb	r2, r3
 8000eae:	4908      	ldr	r1, [pc, #32]	; (8000ed0 <__NVIC_SetPriority+0x50>)
 8000eb0:	79fb      	ldrb	r3, [r7, #7]
 8000eb2:	f003 030f 	and.w	r3, r3, #15
 8000eb6:	3b04      	subs	r3, #4
 8000eb8:	0112      	lsls	r2, r2, #4
 8000eba:	b2d2      	uxtb	r2, r2
 8000ebc:	440b      	add	r3, r1
 8000ebe:	761a      	strb	r2, [r3, #24]
}
 8000ec0:	bf00      	nop
 8000ec2:	370c      	adds	r7, #12
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eca:	4770      	bx	lr
 8000ecc:	e000e100 	.word	0xe000e100
 8000ed0:	e000ed00 	.word	0xe000ed00

08000ed4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	b089      	sub	sp, #36	; 0x24
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	60f8      	str	r0, [r7, #12]
 8000edc:	60b9      	str	r1, [r7, #8]
 8000ede:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	f003 0307 	and.w	r3, r3, #7
 8000ee6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ee8:	69fb      	ldr	r3, [r7, #28]
 8000eea:	f1c3 0307 	rsb	r3, r3, #7
 8000eee:	2b04      	cmp	r3, #4
 8000ef0:	bf28      	it	cs
 8000ef2:	2304      	movcs	r3, #4
 8000ef4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ef6:	69fb      	ldr	r3, [r7, #28]
 8000ef8:	3304      	adds	r3, #4
 8000efa:	2b06      	cmp	r3, #6
 8000efc:	d902      	bls.n	8000f04 <NVIC_EncodePriority+0x30>
 8000efe:	69fb      	ldr	r3, [r7, #28]
 8000f00:	3b03      	subs	r3, #3
 8000f02:	e000      	b.n	8000f06 <NVIC_EncodePriority+0x32>
 8000f04:	2300      	movs	r3, #0
 8000f06:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f08:	f04f 32ff 	mov.w	r2, #4294967295
 8000f0c:	69bb      	ldr	r3, [r7, #24]
 8000f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f12:	43da      	mvns	r2, r3
 8000f14:	68bb      	ldr	r3, [r7, #8]
 8000f16:	401a      	ands	r2, r3
 8000f18:	697b      	ldr	r3, [r7, #20]
 8000f1a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f1c:	f04f 31ff 	mov.w	r1, #4294967295
 8000f20:	697b      	ldr	r3, [r7, #20]
 8000f22:	fa01 f303 	lsl.w	r3, r1, r3
 8000f26:	43d9      	mvns	r1, r3
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f2c:	4313      	orrs	r3, r2
         );
}
 8000f2e:	4618      	mov	r0, r3
 8000f30:	3724      	adds	r7, #36	; 0x24
 8000f32:	46bd      	mov	sp, r7
 8000f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f38:	4770      	bx	lr

08000f3a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f3a:	b580      	push	{r7, lr}
 8000f3c:	b082      	sub	sp, #8
 8000f3e:	af00      	add	r7, sp, #0
 8000f40:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f42:	6878      	ldr	r0, [r7, #4]
 8000f44:	f7ff ff4c 	bl	8000de0 <__NVIC_SetPriorityGrouping>
}
 8000f48:	bf00      	nop
 8000f4a:	3708      	adds	r7, #8
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	bd80      	pop	{r7, pc}

08000f50 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b086      	sub	sp, #24
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	4603      	mov	r3, r0
 8000f58:	60b9      	str	r1, [r7, #8]
 8000f5a:	607a      	str	r2, [r7, #4]
 8000f5c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000f62:	f7ff ff61 	bl	8000e28 <__NVIC_GetPriorityGrouping>
 8000f66:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f68:	687a      	ldr	r2, [r7, #4]
 8000f6a:	68b9      	ldr	r1, [r7, #8]
 8000f6c:	6978      	ldr	r0, [r7, #20]
 8000f6e:	f7ff ffb1 	bl	8000ed4 <NVIC_EncodePriority>
 8000f72:	4602      	mov	r2, r0
 8000f74:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f78:	4611      	mov	r1, r2
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	f7ff ff80 	bl	8000e80 <__NVIC_SetPriority>
}
 8000f80:	bf00      	nop
 8000f82:	3718      	adds	r7, #24
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bd80      	pop	{r7, pc}

08000f88 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b082      	sub	sp, #8
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	4603      	mov	r3, r0
 8000f90:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f96:	4618      	mov	r0, r3
 8000f98:	f7ff ff54 	bl	8000e44 <__NVIC_EnableIRQ>
}
 8000f9c:	bf00      	nop
 8000f9e:	3708      	adds	r7, #8
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bd80      	pop	{r7, pc}

08000fa4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	b087      	sub	sp, #28
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
 8000fac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000fb2:	e166      	b.n	8001282 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000fb4:	683b      	ldr	r3, [r7, #0]
 8000fb6:	681a      	ldr	r2, [r3, #0]
 8000fb8:	2101      	movs	r1, #1
 8000fba:	697b      	ldr	r3, [r7, #20]
 8000fbc:	fa01 f303 	lsl.w	r3, r1, r3
 8000fc0:	4013      	ands	r3, r2
 8000fc2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	f000 8158 	beq.w	800127c <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000fcc:	683b      	ldr	r3, [r7, #0]
 8000fce:	685b      	ldr	r3, [r3, #4]
 8000fd0:	f003 0303 	and.w	r3, r3, #3
 8000fd4:	2b01      	cmp	r3, #1
 8000fd6:	d005      	beq.n	8000fe4 <HAL_GPIO_Init+0x40>
 8000fd8:	683b      	ldr	r3, [r7, #0]
 8000fda:	685b      	ldr	r3, [r3, #4]
 8000fdc:	f003 0303 	and.w	r3, r3, #3
 8000fe0:	2b02      	cmp	r3, #2
 8000fe2:	d130      	bne.n	8001046 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	689b      	ldr	r3, [r3, #8]
 8000fe8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000fea:	697b      	ldr	r3, [r7, #20]
 8000fec:	005b      	lsls	r3, r3, #1
 8000fee:	2203      	movs	r2, #3
 8000ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff4:	43db      	mvns	r3, r3
 8000ff6:	693a      	ldr	r2, [r7, #16]
 8000ff8:	4013      	ands	r3, r2
 8000ffa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000ffc:	683b      	ldr	r3, [r7, #0]
 8000ffe:	68da      	ldr	r2, [r3, #12]
 8001000:	697b      	ldr	r3, [r7, #20]
 8001002:	005b      	lsls	r3, r3, #1
 8001004:	fa02 f303 	lsl.w	r3, r2, r3
 8001008:	693a      	ldr	r2, [r7, #16]
 800100a:	4313      	orrs	r3, r2
 800100c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	693a      	ldr	r2, [r7, #16]
 8001012:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	685b      	ldr	r3, [r3, #4]
 8001018:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800101a:	2201      	movs	r2, #1
 800101c:	697b      	ldr	r3, [r7, #20]
 800101e:	fa02 f303 	lsl.w	r3, r2, r3
 8001022:	43db      	mvns	r3, r3
 8001024:	693a      	ldr	r2, [r7, #16]
 8001026:	4013      	ands	r3, r2
 8001028:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800102a:	683b      	ldr	r3, [r7, #0]
 800102c:	685b      	ldr	r3, [r3, #4]
 800102e:	091b      	lsrs	r3, r3, #4
 8001030:	f003 0201 	and.w	r2, r3, #1
 8001034:	697b      	ldr	r3, [r7, #20]
 8001036:	fa02 f303 	lsl.w	r3, r2, r3
 800103a:	693a      	ldr	r2, [r7, #16]
 800103c:	4313      	orrs	r3, r2
 800103e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	693a      	ldr	r2, [r7, #16]
 8001044:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001046:	683b      	ldr	r3, [r7, #0]
 8001048:	685b      	ldr	r3, [r3, #4]
 800104a:	f003 0303 	and.w	r3, r3, #3
 800104e:	2b03      	cmp	r3, #3
 8001050:	d017      	beq.n	8001082 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	68db      	ldr	r3, [r3, #12]
 8001056:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001058:	697b      	ldr	r3, [r7, #20]
 800105a:	005b      	lsls	r3, r3, #1
 800105c:	2203      	movs	r2, #3
 800105e:	fa02 f303 	lsl.w	r3, r2, r3
 8001062:	43db      	mvns	r3, r3
 8001064:	693a      	ldr	r2, [r7, #16]
 8001066:	4013      	ands	r3, r2
 8001068:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800106a:	683b      	ldr	r3, [r7, #0]
 800106c:	689a      	ldr	r2, [r3, #8]
 800106e:	697b      	ldr	r3, [r7, #20]
 8001070:	005b      	lsls	r3, r3, #1
 8001072:	fa02 f303 	lsl.w	r3, r2, r3
 8001076:	693a      	ldr	r2, [r7, #16]
 8001078:	4313      	orrs	r3, r2
 800107a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	693a      	ldr	r2, [r7, #16]
 8001080:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001082:	683b      	ldr	r3, [r7, #0]
 8001084:	685b      	ldr	r3, [r3, #4]
 8001086:	f003 0303 	and.w	r3, r3, #3
 800108a:	2b02      	cmp	r3, #2
 800108c:	d123      	bne.n	80010d6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800108e:	697b      	ldr	r3, [r7, #20]
 8001090:	08da      	lsrs	r2, r3, #3
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	3208      	adds	r2, #8
 8001096:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800109a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800109c:	697b      	ldr	r3, [r7, #20]
 800109e:	f003 0307 	and.w	r3, r3, #7
 80010a2:	009b      	lsls	r3, r3, #2
 80010a4:	220f      	movs	r2, #15
 80010a6:	fa02 f303 	lsl.w	r3, r2, r3
 80010aa:	43db      	mvns	r3, r3
 80010ac:	693a      	ldr	r2, [r7, #16]
 80010ae:	4013      	ands	r3, r2
 80010b0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80010b2:	683b      	ldr	r3, [r7, #0]
 80010b4:	691a      	ldr	r2, [r3, #16]
 80010b6:	697b      	ldr	r3, [r7, #20]
 80010b8:	f003 0307 	and.w	r3, r3, #7
 80010bc:	009b      	lsls	r3, r3, #2
 80010be:	fa02 f303 	lsl.w	r3, r2, r3
 80010c2:	693a      	ldr	r2, [r7, #16]
 80010c4:	4313      	orrs	r3, r2
 80010c6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80010c8:	697b      	ldr	r3, [r7, #20]
 80010ca:	08da      	lsrs	r2, r3, #3
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	3208      	adds	r2, #8
 80010d0:	6939      	ldr	r1, [r7, #16]
 80010d2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80010dc:	697b      	ldr	r3, [r7, #20]
 80010de:	005b      	lsls	r3, r3, #1
 80010e0:	2203      	movs	r2, #3
 80010e2:	fa02 f303 	lsl.w	r3, r2, r3
 80010e6:	43db      	mvns	r3, r3
 80010e8:	693a      	ldr	r2, [r7, #16]
 80010ea:	4013      	ands	r3, r2
 80010ec:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80010ee:	683b      	ldr	r3, [r7, #0]
 80010f0:	685b      	ldr	r3, [r3, #4]
 80010f2:	f003 0203 	and.w	r2, r3, #3
 80010f6:	697b      	ldr	r3, [r7, #20]
 80010f8:	005b      	lsls	r3, r3, #1
 80010fa:	fa02 f303 	lsl.w	r3, r2, r3
 80010fe:	693a      	ldr	r2, [r7, #16]
 8001100:	4313      	orrs	r3, r2
 8001102:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	693a      	ldr	r2, [r7, #16]
 8001108:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800110a:	683b      	ldr	r3, [r7, #0]
 800110c:	685b      	ldr	r3, [r3, #4]
 800110e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001112:	2b00      	cmp	r3, #0
 8001114:	f000 80b2 	beq.w	800127c <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001118:	4b61      	ldr	r3, [pc, #388]	; (80012a0 <HAL_GPIO_Init+0x2fc>)
 800111a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800111c:	4a60      	ldr	r2, [pc, #384]	; (80012a0 <HAL_GPIO_Init+0x2fc>)
 800111e:	f043 0301 	orr.w	r3, r3, #1
 8001122:	6613      	str	r3, [r2, #96]	; 0x60
 8001124:	4b5e      	ldr	r3, [pc, #376]	; (80012a0 <HAL_GPIO_Init+0x2fc>)
 8001126:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001128:	f003 0301 	and.w	r3, r3, #1
 800112c:	60bb      	str	r3, [r7, #8]
 800112e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001130:	4a5c      	ldr	r2, [pc, #368]	; (80012a4 <HAL_GPIO_Init+0x300>)
 8001132:	697b      	ldr	r3, [r7, #20]
 8001134:	089b      	lsrs	r3, r3, #2
 8001136:	3302      	adds	r3, #2
 8001138:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800113c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800113e:	697b      	ldr	r3, [r7, #20]
 8001140:	f003 0303 	and.w	r3, r3, #3
 8001144:	009b      	lsls	r3, r3, #2
 8001146:	220f      	movs	r2, #15
 8001148:	fa02 f303 	lsl.w	r3, r2, r3
 800114c:	43db      	mvns	r3, r3
 800114e:	693a      	ldr	r2, [r7, #16]
 8001150:	4013      	ands	r3, r2
 8001152:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800115a:	d02b      	beq.n	80011b4 <HAL_GPIO_Init+0x210>
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	4a52      	ldr	r2, [pc, #328]	; (80012a8 <HAL_GPIO_Init+0x304>)
 8001160:	4293      	cmp	r3, r2
 8001162:	d025      	beq.n	80011b0 <HAL_GPIO_Init+0x20c>
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	4a51      	ldr	r2, [pc, #324]	; (80012ac <HAL_GPIO_Init+0x308>)
 8001168:	4293      	cmp	r3, r2
 800116a:	d01f      	beq.n	80011ac <HAL_GPIO_Init+0x208>
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	4a50      	ldr	r2, [pc, #320]	; (80012b0 <HAL_GPIO_Init+0x30c>)
 8001170:	4293      	cmp	r3, r2
 8001172:	d019      	beq.n	80011a8 <HAL_GPIO_Init+0x204>
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	4a4f      	ldr	r2, [pc, #316]	; (80012b4 <HAL_GPIO_Init+0x310>)
 8001178:	4293      	cmp	r3, r2
 800117a:	d013      	beq.n	80011a4 <HAL_GPIO_Init+0x200>
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	4a4e      	ldr	r2, [pc, #312]	; (80012b8 <HAL_GPIO_Init+0x314>)
 8001180:	4293      	cmp	r3, r2
 8001182:	d00d      	beq.n	80011a0 <HAL_GPIO_Init+0x1fc>
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	4a4d      	ldr	r2, [pc, #308]	; (80012bc <HAL_GPIO_Init+0x318>)
 8001188:	4293      	cmp	r3, r2
 800118a:	d007      	beq.n	800119c <HAL_GPIO_Init+0x1f8>
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	4a4c      	ldr	r2, [pc, #304]	; (80012c0 <HAL_GPIO_Init+0x31c>)
 8001190:	4293      	cmp	r3, r2
 8001192:	d101      	bne.n	8001198 <HAL_GPIO_Init+0x1f4>
 8001194:	2307      	movs	r3, #7
 8001196:	e00e      	b.n	80011b6 <HAL_GPIO_Init+0x212>
 8001198:	2308      	movs	r3, #8
 800119a:	e00c      	b.n	80011b6 <HAL_GPIO_Init+0x212>
 800119c:	2306      	movs	r3, #6
 800119e:	e00a      	b.n	80011b6 <HAL_GPIO_Init+0x212>
 80011a0:	2305      	movs	r3, #5
 80011a2:	e008      	b.n	80011b6 <HAL_GPIO_Init+0x212>
 80011a4:	2304      	movs	r3, #4
 80011a6:	e006      	b.n	80011b6 <HAL_GPIO_Init+0x212>
 80011a8:	2303      	movs	r3, #3
 80011aa:	e004      	b.n	80011b6 <HAL_GPIO_Init+0x212>
 80011ac:	2302      	movs	r3, #2
 80011ae:	e002      	b.n	80011b6 <HAL_GPIO_Init+0x212>
 80011b0:	2301      	movs	r3, #1
 80011b2:	e000      	b.n	80011b6 <HAL_GPIO_Init+0x212>
 80011b4:	2300      	movs	r3, #0
 80011b6:	697a      	ldr	r2, [r7, #20]
 80011b8:	f002 0203 	and.w	r2, r2, #3
 80011bc:	0092      	lsls	r2, r2, #2
 80011be:	4093      	lsls	r3, r2
 80011c0:	693a      	ldr	r2, [r7, #16]
 80011c2:	4313      	orrs	r3, r2
 80011c4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80011c6:	4937      	ldr	r1, [pc, #220]	; (80012a4 <HAL_GPIO_Init+0x300>)
 80011c8:	697b      	ldr	r3, [r7, #20]
 80011ca:	089b      	lsrs	r3, r3, #2
 80011cc:	3302      	adds	r3, #2
 80011ce:	693a      	ldr	r2, [r7, #16]
 80011d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80011d4:	4b3b      	ldr	r3, [pc, #236]	; (80012c4 <HAL_GPIO_Init+0x320>)
 80011d6:	689b      	ldr	r3, [r3, #8]
 80011d8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	43db      	mvns	r3, r3
 80011de:	693a      	ldr	r2, [r7, #16]
 80011e0:	4013      	ands	r3, r2
 80011e2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	685b      	ldr	r3, [r3, #4]
 80011e8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d003      	beq.n	80011f8 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 80011f0:	693a      	ldr	r2, [r7, #16]
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	4313      	orrs	r3, r2
 80011f6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80011f8:	4a32      	ldr	r2, [pc, #200]	; (80012c4 <HAL_GPIO_Init+0x320>)
 80011fa:	693b      	ldr	r3, [r7, #16]
 80011fc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80011fe:	4b31      	ldr	r3, [pc, #196]	; (80012c4 <HAL_GPIO_Init+0x320>)
 8001200:	68db      	ldr	r3, [r3, #12]
 8001202:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	43db      	mvns	r3, r3
 8001208:	693a      	ldr	r2, [r7, #16]
 800120a:	4013      	ands	r3, r2
 800120c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800120e:	683b      	ldr	r3, [r7, #0]
 8001210:	685b      	ldr	r3, [r3, #4]
 8001212:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001216:	2b00      	cmp	r3, #0
 8001218:	d003      	beq.n	8001222 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 800121a:	693a      	ldr	r2, [r7, #16]
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	4313      	orrs	r3, r2
 8001220:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001222:	4a28      	ldr	r2, [pc, #160]	; (80012c4 <HAL_GPIO_Init+0x320>)
 8001224:	693b      	ldr	r3, [r7, #16]
 8001226:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001228:	4b26      	ldr	r3, [pc, #152]	; (80012c4 <HAL_GPIO_Init+0x320>)
 800122a:	685b      	ldr	r3, [r3, #4]
 800122c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	43db      	mvns	r3, r3
 8001232:	693a      	ldr	r2, [r7, #16]
 8001234:	4013      	ands	r3, r2
 8001236:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	685b      	ldr	r3, [r3, #4]
 800123c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001240:	2b00      	cmp	r3, #0
 8001242:	d003      	beq.n	800124c <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8001244:	693a      	ldr	r2, [r7, #16]
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	4313      	orrs	r3, r2
 800124a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800124c:	4a1d      	ldr	r2, [pc, #116]	; (80012c4 <HAL_GPIO_Init+0x320>)
 800124e:	693b      	ldr	r3, [r7, #16]
 8001250:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001252:	4b1c      	ldr	r3, [pc, #112]	; (80012c4 <HAL_GPIO_Init+0x320>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	43db      	mvns	r3, r3
 800125c:	693a      	ldr	r2, [r7, #16]
 800125e:	4013      	ands	r3, r2
 8001260:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001262:	683b      	ldr	r3, [r7, #0]
 8001264:	685b      	ldr	r3, [r3, #4]
 8001266:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800126a:	2b00      	cmp	r3, #0
 800126c:	d003      	beq.n	8001276 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 800126e:	693a      	ldr	r2, [r7, #16]
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	4313      	orrs	r3, r2
 8001274:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001276:	4a13      	ldr	r2, [pc, #76]	; (80012c4 <HAL_GPIO_Init+0x320>)
 8001278:	693b      	ldr	r3, [r7, #16]
 800127a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800127c:	697b      	ldr	r3, [r7, #20]
 800127e:	3301      	adds	r3, #1
 8001280:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001282:	683b      	ldr	r3, [r7, #0]
 8001284:	681a      	ldr	r2, [r3, #0]
 8001286:	697b      	ldr	r3, [r7, #20]
 8001288:	fa22 f303 	lsr.w	r3, r2, r3
 800128c:	2b00      	cmp	r3, #0
 800128e:	f47f ae91 	bne.w	8000fb4 <HAL_GPIO_Init+0x10>
  }
}
 8001292:	bf00      	nop
 8001294:	bf00      	nop
 8001296:	371c      	adds	r7, #28
 8001298:	46bd      	mov	sp, r7
 800129a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129e:	4770      	bx	lr
 80012a0:	40021000 	.word	0x40021000
 80012a4:	40010000 	.word	0x40010000
 80012a8:	48000400 	.word	0x48000400
 80012ac:	48000800 	.word	0x48000800
 80012b0:	48000c00 	.word	0x48000c00
 80012b4:	48001000 	.word	0x48001000
 80012b8:	48001400 	.word	0x48001400
 80012bc:	48001800 	.word	0x48001800
 80012c0:	48001c00 	.word	0x48001c00
 80012c4:	40010400 	.word	0x40010400

080012c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012c8:	b480      	push	{r7}
 80012ca:	b083      	sub	sp, #12
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
 80012d0:	460b      	mov	r3, r1
 80012d2:	807b      	strh	r3, [r7, #2]
 80012d4:	4613      	mov	r3, r2
 80012d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80012d8:	787b      	ldrb	r3, [r7, #1]
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d003      	beq.n	80012e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80012de:	887a      	ldrh	r2, [r7, #2]
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80012e4:	e002      	b.n	80012ec <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80012e6:	887a      	ldrh	r2, [r7, #2]
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	629a      	str	r2, [r3, #40]	; 0x28
}
 80012ec:	bf00      	nop
 80012ee:	370c      	adds	r7, #12
 80012f0:	46bd      	mov	sp, r7
 80012f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f6:	4770      	bx	lr

080012f8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80012f8:	b480      	push	{r7}
 80012fa:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80012fc:	4b0d      	ldr	r3, [pc, #52]	; (8001334 <HAL_PWREx_GetVoltageRange+0x3c>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001304:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001308:	d102      	bne.n	8001310 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 800130a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800130e:	e00b      	b.n	8001328 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8001310:	4b08      	ldr	r3, [pc, #32]	; (8001334 <HAL_PWREx_GetVoltageRange+0x3c>)
 8001312:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001316:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800131a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800131e:	d102      	bne.n	8001326 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8001320:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001324:	e000      	b.n	8001328 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8001326:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8001328:	4618      	mov	r0, r3
 800132a:	46bd      	mov	sp, r7
 800132c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001330:	4770      	bx	lr
 8001332:	bf00      	nop
 8001334:	40007000 	.word	0x40007000

08001338 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001338:	b480      	push	{r7}
 800133a:	b085      	sub	sp, #20
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	2b00      	cmp	r3, #0
 8001344:	d141      	bne.n	80013ca <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001346:	4b4b      	ldr	r3, [pc, #300]	; (8001474 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800134e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001352:	d131      	bne.n	80013b8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001354:	4b47      	ldr	r3, [pc, #284]	; (8001474 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001356:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800135a:	4a46      	ldr	r2, [pc, #280]	; (8001474 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800135c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001360:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001364:	4b43      	ldr	r3, [pc, #268]	; (8001474 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800136c:	4a41      	ldr	r2, [pc, #260]	; (8001474 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800136e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001372:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8001374:	4b40      	ldr	r3, [pc, #256]	; (8001478 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	2232      	movs	r2, #50	; 0x32
 800137a:	fb02 f303 	mul.w	r3, r2, r3
 800137e:	4a3f      	ldr	r2, [pc, #252]	; (800147c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001380:	fba2 2303 	umull	r2, r3, r2, r3
 8001384:	0c9b      	lsrs	r3, r3, #18
 8001386:	3301      	adds	r3, #1
 8001388:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800138a:	e002      	b.n	8001392 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	3b01      	subs	r3, #1
 8001390:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001392:	4b38      	ldr	r3, [pc, #224]	; (8001474 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001394:	695b      	ldr	r3, [r3, #20]
 8001396:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800139a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800139e:	d102      	bne.n	80013a6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d1f2      	bne.n	800138c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80013a6:	4b33      	ldr	r3, [pc, #204]	; (8001474 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013a8:	695b      	ldr	r3, [r3, #20]
 80013aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80013b2:	d158      	bne.n	8001466 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80013b4:	2303      	movs	r3, #3
 80013b6:	e057      	b.n	8001468 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80013b8:	4b2e      	ldr	r3, [pc, #184]	; (8001474 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80013be:	4a2d      	ldr	r2, [pc, #180]	; (8001474 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80013c4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80013c8:	e04d      	b.n	8001466 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80013d0:	d141      	bne.n	8001456 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80013d2:	4b28      	ldr	r3, [pc, #160]	; (8001474 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80013da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80013de:	d131      	bne.n	8001444 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80013e0:	4b24      	ldr	r3, [pc, #144]	; (8001474 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80013e6:	4a23      	ldr	r2, [pc, #140]	; (8001474 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013ec:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80013f0:	4b20      	ldr	r3, [pc, #128]	; (8001474 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80013f8:	4a1e      	ldr	r2, [pc, #120]	; (8001474 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013fa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80013fe:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8001400:	4b1d      	ldr	r3, [pc, #116]	; (8001478 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	2232      	movs	r2, #50	; 0x32
 8001406:	fb02 f303 	mul.w	r3, r2, r3
 800140a:	4a1c      	ldr	r2, [pc, #112]	; (800147c <HAL_PWREx_ControlVoltageScaling+0x144>)
 800140c:	fba2 2303 	umull	r2, r3, r2, r3
 8001410:	0c9b      	lsrs	r3, r3, #18
 8001412:	3301      	adds	r3, #1
 8001414:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001416:	e002      	b.n	800141e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	3b01      	subs	r3, #1
 800141c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800141e:	4b15      	ldr	r3, [pc, #84]	; (8001474 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001420:	695b      	ldr	r3, [r3, #20]
 8001422:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001426:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800142a:	d102      	bne.n	8001432 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	2b00      	cmp	r3, #0
 8001430:	d1f2      	bne.n	8001418 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001432:	4b10      	ldr	r3, [pc, #64]	; (8001474 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001434:	695b      	ldr	r3, [r3, #20]
 8001436:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800143a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800143e:	d112      	bne.n	8001466 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001440:	2303      	movs	r3, #3
 8001442:	e011      	b.n	8001468 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001444:	4b0b      	ldr	r3, [pc, #44]	; (8001474 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001446:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800144a:	4a0a      	ldr	r2, [pc, #40]	; (8001474 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800144c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001450:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001454:	e007      	b.n	8001466 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001456:	4b07      	ldr	r3, [pc, #28]	; (8001474 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800145e:	4a05      	ldr	r2, [pc, #20]	; (8001474 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001460:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001464:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001466:	2300      	movs	r3, #0
}
 8001468:	4618      	mov	r0, r3
 800146a:	3714      	adds	r7, #20
 800146c:	46bd      	mov	sp, r7
 800146e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001472:	4770      	bx	lr
 8001474:	40007000 	.word	0x40007000
 8001478:	20000000 	.word	0x20000000
 800147c:	431bde83 	.word	0x431bde83

08001480 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8001480:	b480      	push	{r7}
 8001482:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8001484:	4b05      	ldr	r3, [pc, #20]	; (800149c <HAL_PWREx_EnableVddIO2+0x1c>)
 8001486:	685b      	ldr	r3, [r3, #4]
 8001488:	4a04      	ldr	r2, [pc, #16]	; (800149c <HAL_PWREx_EnableVddIO2+0x1c>)
 800148a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800148e:	6053      	str	r3, [r2, #4]
}
 8001490:	bf00      	nop
 8001492:	46bd      	mov	sp, r7
 8001494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001498:	4770      	bx	lr
 800149a:	bf00      	nop
 800149c:	40007000 	.word	0x40007000

080014a0 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b088      	sub	sp, #32
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d102      	bne.n	80014b4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80014ae:	2301      	movs	r3, #1
 80014b0:	f000 bc08 	b.w	8001cc4 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80014b4:	4b96      	ldr	r3, [pc, #600]	; (8001710 <HAL_RCC_OscConfig+0x270>)
 80014b6:	689b      	ldr	r3, [r3, #8]
 80014b8:	f003 030c 	and.w	r3, r3, #12
 80014bc:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80014be:	4b94      	ldr	r3, [pc, #592]	; (8001710 <HAL_RCC_OscConfig+0x270>)
 80014c0:	68db      	ldr	r3, [r3, #12]
 80014c2:	f003 0303 	and.w	r3, r3, #3
 80014c6:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	f003 0310 	and.w	r3, r3, #16
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	f000 80e4 	beq.w	800169e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80014d6:	69bb      	ldr	r3, [r7, #24]
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d007      	beq.n	80014ec <HAL_RCC_OscConfig+0x4c>
 80014dc:	69bb      	ldr	r3, [r7, #24]
 80014de:	2b0c      	cmp	r3, #12
 80014e0:	f040 808b 	bne.w	80015fa <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80014e4:	697b      	ldr	r3, [r7, #20]
 80014e6:	2b01      	cmp	r3, #1
 80014e8:	f040 8087 	bne.w	80015fa <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80014ec:	4b88      	ldr	r3, [pc, #544]	; (8001710 <HAL_RCC_OscConfig+0x270>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f003 0302 	and.w	r3, r3, #2
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d005      	beq.n	8001504 <HAL_RCC_OscConfig+0x64>
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	699b      	ldr	r3, [r3, #24]
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d101      	bne.n	8001504 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001500:	2301      	movs	r3, #1
 8001502:	e3df      	b.n	8001cc4 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	6a1a      	ldr	r2, [r3, #32]
 8001508:	4b81      	ldr	r3, [pc, #516]	; (8001710 <HAL_RCC_OscConfig+0x270>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	f003 0308 	and.w	r3, r3, #8
 8001510:	2b00      	cmp	r3, #0
 8001512:	d004      	beq.n	800151e <HAL_RCC_OscConfig+0x7e>
 8001514:	4b7e      	ldr	r3, [pc, #504]	; (8001710 <HAL_RCC_OscConfig+0x270>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800151c:	e005      	b.n	800152a <HAL_RCC_OscConfig+0x8a>
 800151e:	4b7c      	ldr	r3, [pc, #496]	; (8001710 <HAL_RCC_OscConfig+0x270>)
 8001520:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001524:	091b      	lsrs	r3, r3, #4
 8001526:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800152a:	4293      	cmp	r3, r2
 800152c:	d223      	bcs.n	8001576 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	6a1b      	ldr	r3, [r3, #32]
 8001532:	4618      	mov	r0, r3
 8001534:	f000 fdfe 	bl	8002134 <RCC_SetFlashLatencyFromMSIRange>
 8001538:	4603      	mov	r3, r0
 800153a:	2b00      	cmp	r3, #0
 800153c:	d001      	beq.n	8001542 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800153e:	2301      	movs	r3, #1
 8001540:	e3c0      	b.n	8001cc4 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001542:	4b73      	ldr	r3, [pc, #460]	; (8001710 <HAL_RCC_OscConfig+0x270>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	4a72      	ldr	r2, [pc, #456]	; (8001710 <HAL_RCC_OscConfig+0x270>)
 8001548:	f043 0308 	orr.w	r3, r3, #8
 800154c:	6013      	str	r3, [r2, #0]
 800154e:	4b70      	ldr	r3, [pc, #448]	; (8001710 <HAL_RCC_OscConfig+0x270>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	6a1b      	ldr	r3, [r3, #32]
 800155a:	496d      	ldr	r1, [pc, #436]	; (8001710 <HAL_RCC_OscConfig+0x270>)
 800155c:	4313      	orrs	r3, r2
 800155e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001560:	4b6b      	ldr	r3, [pc, #428]	; (8001710 <HAL_RCC_OscConfig+0x270>)
 8001562:	685b      	ldr	r3, [r3, #4]
 8001564:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	69db      	ldr	r3, [r3, #28]
 800156c:	021b      	lsls	r3, r3, #8
 800156e:	4968      	ldr	r1, [pc, #416]	; (8001710 <HAL_RCC_OscConfig+0x270>)
 8001570:	4313      	orrs	r3, r2
 8001572:	604b      	str	r3, [r1, #4]
 8001574:	e025      	b.n	80015c2 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001576:	4b66      	ldr	r3, [pc, #408]	; (8001710 <HAL_RCC_OscConfig+0x270>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	4a65      	ldr	r2, [pc, #404]	; (8001710 <HAL_RCC_OscConfig+0x270>)
 800157c:	f043 0308 	orr.w	r3, r3, #8
 8001580:	6013      	str	r3, [r2, #0]
 8001582:	4b63      	ldr	r3, [pc, #396]	; (8001710 <HAL_RCC_OscConfig+0x270>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	6a1b      	ldr	r3, [r3, #32]
 800158e:	4960      	ldr	r1, [pc, #384]	; (8001710 <HAL_RCC_OscConfig+0x270>)
 8001590:	4313      	orrs	r3, r2
 8001592:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001594:	4b5e      	ldr	r3, [pc, #376]	; (8001710 <HAL_RCC_OscConfig+0x270>)
 8001596:	685b      	ldr	r3, [r3, #4]
 8001598:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	69db      	ldr	r3, [r3, #28]
 80015a0:	021b      	lsls	r3, r3, #8
 80015a2:	495b      	ldr	r1, [pc, #364]	; (8001710 <HAL_RCC_OscConfig+0x270>)
 80015a4:	4313      	orrs	r3, r2
 80015a6:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80015a8:	69bb      	ldr	r3, [r7, #24]
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d109      	bne.n	80015c2 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	6a1b      	ldr	r3, [r3, #32]
 80015b2:	4618      	mov	r0, r3
 80015b4:	f000 fdbe 	bl	8002134 <RCC_SetFlashLatencyFromMSIRange>
 80015b8:	4603      	mov	r3, r0
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d001      	beq.n	80015c2 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80015be:	2301      	movs	r3, #1
 80015c0:	e380      	b.n	8001cc4 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80015c2:	f000 fcc1 	bl	8001f48 <HAL_RCC_GetSysClockFreq>
 80015c6:	4602      	mov	r2, r0
 80015c8:	4b51      	ldr	r3, [pc, #324]	; (8001710 <HAL_RCC_OscConfig+0x270>)
 80015ca:	689b      	ldr	r3, [r3, #8]
 80015cc:	091b      	lsrs	r3, r3, #4
 80015ce:	f003 030f 	and.w	r3, r3, #15
 80015d2:	4950      	ldr	r1, [pc, #320]	; (8001714 <HAL_RCC_OscConfig+0x274>)
 80015d4:	5ccb      	ldrb	r3, [r1, r3]
 80015d6:	f003 031f 	and.w	r3, r3, #31
 80015da:	fa22 f303 	lsr.w	r3, r2, r3
 80015de:	4a4e      	ldr	r2, [pc, #312]	; (8001718 <HAL_RCC_OscConfig+0x278>)
 80015e0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80015e2:	4b4e      	ldr	r3, [pc, #312]	; (800171c <HAL_RCC_OscConfig+0x27c>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	4618      	mov	r0, r3
 80015e8:	f7ff fad4 	bl	8000b94 <HAL_InitTick>
 80015ec:	4603      	mov	r3, r0
 80015ee:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80015f0:	7bfb      	ldrb	r3, [r7, #15]
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d052      	beq.n	800169c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80015f6:	7bfb      	ldrb	r3, [r7, #15]
 80015f8:	e364      	b.n	8001cc4 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	699b      	ldr	r3, [r3, #24]
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d032      	beq.n	8001668 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001602:	4b43      	ldr	r3, [pc, #268]	; (8001710 <HAL_RCC_OscConfig+0x270>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	4a42      	ldr	r2, [pc, #264]	; (8001710 <HAL_RCC_OscConfig+0x270>)
 8001608:	f043 0301 	orr.w	r3, r3, #1
 800160c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800160e:	f7ff fbb7 	bl	8000d80 <HAL_GetTick>
 8001612:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001614:	e008      	b.n	8001628 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001616:	f7ff fbb3 	bl	8000d80 <HAL_GetTick>
 800161a:	4602      	mov	r2, r0
 800161c:	693b      	ldr	r3, [r7, #16]
 800161e:	1ad3      	subs	r3, r2, r3
 8001620:	2b02      	cmp	r3, #2
 8001622:	d901      	bls.n	8001628 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001624:	2303      	movs	r3, #3
 8001626:	e34d      	b.n	8001cc4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001628:	4b39      	ldr	r3, [pc, #228]	; (8001710 <HAL_RCC_OscConfig+0x270>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f003 0302 	and.w	r3, r3, #2
 8001630:	2b00      	cmp	r3, #0
 8001632:	d0f0      	beq.n	8001616 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001634:	4b36      	ldr	r3, [pc, #216]	; (8001710 <HAL_RCC_OscConfig+0x270>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	4a35      	ldr	r2, [pc, #212]	; (8001710 <HAL_RCC_OscConfig+0x270>)
 800163a:	f043 0308 	orr.w	r3, r3, #8
 800163e:	6013      	str	r3, [r2, #0]
 8001640:	4b33      	ldr	r3, [pc, #204]	; (8001710 <HAL_RCC_OscConfig+0x270>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	6a1b      	ldr	r3, [r3, #32]
 800164c:	4930      	ldr	r1, [pc, #192]	; (8001710 <HAL_RCC_OscConfig+0x270>)
 800164e:	4313      	orrs	r3, r2
 8001650:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001652:	4b2f      	ldr	r3, [pc, #188]	; (8001710 <HAL_RCC_OscConfig+0x270>)
 8001654:	685b      	ldr	r3, [r3, #4]
 8001656:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	69db      	ldr	r3, [r3, #28]
 800165e:	021b      	lsls	r3, r3, #8
 8001660:	492b      	ldr	r1, [pc, #172]	; (8001710 <HAL_RCC_OscConfig+0x270>)
 8001662:	4313      	orrs	r3, r2
 8001664:	604b      	str	r3, [r1, #4]
 8001666:	e01a      	b.n	800169e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001668:	4b29      	ldr	r3, [pc, #164]	; (8001710 <HAL_RCC_OscConfig+0x270>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	4a28      	ldr	r2, [pc, #160]	; (8001710 <HAL_RCC_OscConfig+0x270>)
 800166e:	f023 0301 	bic.w	r3, r3, #1
 8001672:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001674:	f7ff fb84 	bl	8000d80 <HAL_GetTick>
 8001678:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800167a:	e008      	b.n	800168e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800167c:	f7ff fb80 	bl	8000d80 <HAL_GetTick>
 8001680:	4602      	mov	r2, r0
 8001682:	693b      	ldr	r3, [r7, #16]
 8001684:	1ad3      	subs	r3, r2, r3
 8001686:	2b02      	cmp	r3, #2
 8001688:	d901      	bls.n	800168e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800168a:	2303      	movs	r3, #3
 800168c:	e31a      	b.n	8001cc4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800168e:	4b20      	ldr	r3, [pc, #128]	; (8001710 <HAL_RCC_OscConfig+0x270>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f003 0302 	and.w	r3, r3, #2
 8001696:	2b00      	cmp	r3, #0
 8001698:	d1f0      	bne.n	800167c <HAL_RCC_OscConfig+0x1dc>
 800169a:	e000      	b.n	800169e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800169c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f003 0301 	and.w	r3, r3, #1
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d073      	beq.n	8001792 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80016aa:	69bb      	ldr	r3, [r7, #24]
 80016ac:	2b08      	cmp	r3, #8
 80016ae:	d005      	beq.n	80016bc <HAL_RCC_OscConfig+0x21c>
 80016b0:	69bb      	ldr	r3, [r7, #24]
 80016b2:	2b0c      	cmp	r3, #12
 80016b4:	d10e      	bne.n	80016d4 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80016b6:	697b      	ldr	r3, [r7, #20]
 80016b8:	2b03      	cmp	r3, #3
 80016ba:	d10b      	bne.n	80016d4 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016bc:	4b14      	ldr	r3, [pc, #80]	; (8001710 <HAL_RCC_OscConfig+0x270>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d063      	beq.n	8001790 <HAL_RCC_OscConfig+0x2f0>
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	685b      	ldr	r3, [r3, #4]
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d15f      	bne.n	8001790 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80016d0:	2301      	movs	r3, #1
 80016d2:	e2f7      	b.n	8001cc4 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	685b      	ldr	r3, [r3, #4]
 80016d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016dc:	d106      	bne.n	80016ec <HAL_RCC_OscConfig+0x24c>
 80016de:	4b0c      	ldr	r3, [pc, #48]	; (8001710 <HAL_RCC_OscConfig+0x270>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	4a0b      	ldr	r2, [pc, #44]	; (8001710 <HAL_RCC_OscConfig+0x270>)
 80016e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016e8:	6013      	str	r3, [r2, #0]
 80016ea:	e025      	b.n	8001738 <HAL_RCC_OscConfig+0x298>
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	685b      	ldr	r3, [r3, #4]
 80016f0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80016f4:	d114      	bne.n	8001720 <HAL_RCC_OscConfig+0x280>
 80016f6:	4b06      	ldr	r3, [pc, #24]	; (8001710 <HAL_RCC_OscConfig+0x270>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	4a05      	ldr	r2, [pc, #20]	; (8001710 <HAL_RCC_OscConfig+0x270>)
 80016fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001700:	6013      	str	r3, [r2, #0]
 8001702:	4b03      	ldr	r3, [pc, #12]	; (8001710 <HAL_RCC_OscConfig+0x270>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	4a02      	ldr	r2, [pc, #8]	; (8001710 <HAL_RCC_OscConfig+0x270>)
 8001708:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800170c:	6013      	str	r3, [r2, #0]
 800170e:	e013      	b.n	8001738 <HAL_RCC_OscConfig+0x298>
 8001710:	40021000 	.word	0x40021000
 8001714:	08006d9c 	.word	0x08006d9c
 8001718:	20000000 	.word	0x20000000
 800171c:	20000004 	.word	0x20000004
 8001720:	4ba0      	ldr	r3, [pc, #640]	; (80019a4 <HAL_RCC_OscConfig+0x504>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	4a9f      	ldr	r2, [pc, #636]	; (80019a4 <HAL_RCC_OscConfig+0x504>)
 8001726:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800172a:	6013      	str	r3, [r2, #0]
 800172c:	4b9d      	ldr	r3, [pc, #628]	; (80019a4 <HAL_RCC_OscConfig+0x504>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	4a9c      	ldr	r2, [pc, #624]	; (80019a4 <HAL_RCC_OscConfig+0x504>)
 8001732:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001736:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	685b      	ldr	r3, [r3, #4]
 800173c:	2b00      	cmp	r3, #0
 800173e:	d013      	beq.n	8001768 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001740:	f7ff fb1e 	bl	8000d80 <HAL_GetTick>
 8001744:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001746:	e008      	b.n	800175a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001748:	f7ff fb1a 	bl	8000d80 <HAL_GetTick>
 800174c:	4602      	mov	r2, r0
 800174e:	693b      	ldr	r3, [r7, #16]
 8001750:	1ad3      	subs	r3, r2, r3
 8001752:	2b64      	cmp	r3, #100	; 0x64
 8001754:	d901      	bls.n	800175a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001756:	2303      	movs	r3, #3
 8001758:	e2b4      	b.n	8001cc4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800175a:	4b92      	ldr	r3, [pc, #584]	; (80019a4 <HAL_RCC_OscConfig+0x504>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001762:	2b00      	cmp	r3, #0
 8001764:	d0f0      	beq.n	8001748 <HAL_RCC_OscConfig+0x2a8>
 8001766:	e014      	b.n	8001792 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001768:	f7ff fb0a 	bl	8000d80 <HAL_GetTick>
 800176c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800176e:	e008      	b.n	8001782 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001770:	f7ff fb06 	bl	8000d80 <HAL_GetTick>
 8001774:	4602      	mov	r2, r0
 8001776:	693b      	ldr	r3, [r7, #16]
 8001778:	1ad3      	subs	r3, r2, r3
 800177a:	2b64      	cmp	r3, #100	; 0x64
 800177c:	d901      	bls.n	8001782 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800177e:	2303      	movs	r3, #3
 8001780:	e2a0      	b.n	8001cc4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001782:	4b88      	ldr	r3, [pc, #544]	; (80019a4 <HAL_RCC_OscConfig+0x504>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800178a:	2b00      	cmp	r3, #0
 800178c:	d1f0      	bne.n	8001770 <HAL_RCC_OscConfig+0x2d0>
 800178e:	e000      	b.n	8001792 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001790:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f003 0302 	and.w	r3, r3, #2
 800179a:	2b00      	cmp	r3, #0
 800179c:	d060      	beq.n	8001860 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800179e:	69bb      	ldr	r3, [r7, #24]
 80017a0:	2b04      	cmp	r3, #4
 80017a2:	d005      	beq.n	80017b0 <HAL_RCC_OscConfig+0x310>
 80017a4:	69bb      	ldr	r3, [r7, #24]
 80017a6:	2b0c      	cmp	r3, #12
 80017a8:	d119      	bne.n	80017de <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80017aa:	697b      	ldr	r3, [r7, #20]
 80017ac:	2b02      	cmp	r3, #2
 80017ae:	d116      	bne.n	80017de <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80017b0:	4b7c      	ldr	r3, [pc, #496]	; (80019a4 <HAL_RCC_OscConfig+0x504>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d005      	beq.n	80017c8 <HAL_RCC_OscConfig+0x328>
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	68db      	ldr	r3, [r3, #12]
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d101      	bne.n	80017c8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80017c4:	2301      	movs	r3, #1
 80017c6:	e27d      	b.n	8001cc4 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017c8:	4b76      	ldr	r3, [pc, #472]	; (80019a4 <HAL_RCC_OscConfig+0x504>)
 80017ca:	685b      	ldr	r3, [r3, #4]
 80017cc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	691b      	ldr	r3, [r3, #16]
 80017d4:	061b      	lsls	r3, r3, #24
 80017d6:	4973      	ldr	r1, [pc, #460]	; (80019a4 <HAL_RCC_OscConfig+0x504>)
 80017d8:	4313      	orrs	r3, r2
 80017da:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80017dc:	e040      	b.n	8001860 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	68db      	ldr	r3, [r3, #12]
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d023      	beq.n	800182e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80017e6:	4b6f      	ldr	r3, [pc, #444]	; (80019a4 <HAL_RCC_OscConfig+0x504>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	4a6e      	ldr	r2, [pc, #440]	; (80019a4 <HAL_RCC_OscConfig+0x504>)
 80017ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017f2:	f7ff fac5 	bl	8000d80 <HAL_GetTick>
 80017f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80017f8:	e008      	b.n	800180c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017fa:	f7ff fac1 	bl	8000d80 <HAL_GetTick>
 80017fe:	4602      	mov	r2, r0
 8001800:	693b      	ldr	r3, [r7, #16]
 8001802:	1ad3      	subs	r3, r2, r3
 8001804:	2b02      	cmp	r3, #2
 8001806:	d901      	bls.n	800180c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001808:	2303      	movs	r3, #3
 800180a:	e25b      	b.n	8001cc4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800180c:	4b65      	ldr	r3, [pc, #404]	; (80019a4 <HAL_RCC_OscConfig+0x504>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001814:	2b00      	cmp	r3, #0
 8001816:	d0f0      	beq.n	80017fa <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001818:	4b62      	ldr	r3, [pc, #392]	; (80019a4 <HAL_RCC_OscConfig+0x504>)
 800181a:	685b      	ldr	r3, [r3, #4]
 800181c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	691b      	ldr	r3, [r3, #16]
 8001824:	061b      	lsls	r3, r3, #24
 8001826:	495f      	ldr	r1, [pc, #380]	; (80019a4 <HAL_RCC_OscConfig+0x504>)
 8001828:	4313      	orrs	r3, r2
 800182a:	604b      	str	r3, [r1, #4]
 800182c:	e018      	b.n	8001860 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800182e:	4b5d      	ldr	r3, [pc, #372]	; (80019a4 <HAL_RCC_OscConfig+0x504>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	4a5c      	ldr	r2, [pc, #368]	; (80019a4 <HAL_RCC_OscConfig+0x504>)
 8001834:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001838:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800183a:	f7ff faa1 	bl	8000d80 <HAL_GetTick>
 800183e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001840:	e008      	b.n	8001854 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001842:	f7ff fa9d 	bl	8000d80 <HAL_GetTick>
 8001846:	4602      	mov	r2, r0
 8001848:	693b      	ldr	r3, [r7, #16]
 800184a:	1ad3      	subs	r3, r2, r3
 800184c:	2b02      	cmp	r3, #2
 800184e:	d901      	bls.n	8001854 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001850:	2303      	movs	r3, #3
 8001852:	e237      	b.n	8001cc4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001854:	4b53      	ldr	r3, [pc, #332]	; (80019a4 <HAL_RCC_OscConfig+0x504>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800185c:	2b00      	cmp	r3, #0
 800185e:	d1f0      	bne.n	8001842 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f003 0308 	and.w	r3, r3, #8
 8001868:	2b00      	cmp	r3, #0
 800186a:	d03c      	beq.n	80018e6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	695b      	ldr	r3, [r3, #20]
 8001870:	2b00      	cmp	r3, #0
 8001872:	d01c      	beq.n	80018ae <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001874:	4b4b      	ldr	r3, [pc, #300]	; (80019a4 <HAL_RCC_OscConfig+0x504>)
 8001876:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800187a:	4a4a      	ldr	r2, [pc, #296]	; (80019a4 <HAL_RCC_OscConfig+0x504>)
 800187c:	f043 0301 	orr.w	r3, r3, #1
 8001880:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001884:	f7ff fa7c 	bl	8000d80 <HAL_GetTick>
 8001888:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800188a:	e008      	b.n	800189e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800188c:	f7ff fa78 	bl	8000d80 <HAL_GetTick>
 8001890:	4602      	mov	r2, r0
 8001892:	693b      	ldr	r3, [r7, #16]
 8001894:	1ad3      	subs	r3, r2, r3
 8001896:	2b02      	cmp	r3, #2
 8001898:	d901      	bls.n	800189e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800189a:	2303      	movs	r3, #3
 800189c:	e212      	b.n	8001cc4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800189e:	4b41      	ldr	r3, [pc, #260]	; (80019a4 <HAL_RCC_OscConfig+0x504>)
 80018a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80018a4:	f003 0302 	and.w	r3, r3, #2
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d0ef      	beq.n	800188c <HAL_RCC_OscConfig+0x3ec>
 80018ac:	e01b      	b.n	80018e6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80018ae:	4b3d      	ldr	r3, [pc, #244]	; (80019a4 <HAL_RCC_OscConfig+0x504>)
 80018b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80018b4:	4a3b      	ldr	r2, [pc, #236]	; (80019a4 <HAL_RCC_OscConfig+0x504>)
 80018b6:	f023 0301 	bic.w	r3, r3, #1
 80018ba:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018be:	f7ff fa5f 	bl	8000d80 <HAL_GetTick>
 80018c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80018c4:	e008      	b.n	80018d8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018c6:	f7ff fa5b 	bl	8000d80 <HAL_GetTick>
 80018ca:	4602      	mov	r2, r0
 80018cc:	693b      	ldr	r3, [r7, #16]
 80018ce:	1ad3      	subs	r3, r2, r3
 80018d0:	2b02      	cmp	r3, #2
 80018d2:	d901      	bls.n	80018d8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80018d4:	2303      	movs	r3, #3
 80018d6:	e1f5      	b.n	8001cc4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80018d8:	4b32      	ldr	r3, [pc, #200]	; (80019a4 <HAL_RCC_OscConfig+0x504>)
 80018da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80018de:	f003 0302 	and.w	r3, r3, #2
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d1ef      	bne.n	80018c6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f003 0304 	and.w	r3, r3, #4
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	f000 80a6 	beq.w	8001a40 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80018f4:	2300      	movs	r3, #0
 80018f6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80018f8:	4b2a      	ldr	r3, [pc, #168]	; (80019a4 <HAL_RCC_OscConfig+0x504>)
 80018fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001900:	2b00      	cmp	r3, #0
 8001902:	d10d      	bne.n	8001920 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001904:	4b27      	ldr	r3, [pc, #156]	; (80019a4 <HAL_RCC_OscConfig+0x504>)
 8001906:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001908:	4a26      	ldr	r2, [pc, #152]	; (80019a4 <HAL_RCC_OscConfig+0x504>)
 800190a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800190e:	6593      	str	r3, [r2, #88]	; 0x58
 8001910:	4b24      	ldr	r3, [pc, #144]	; (80019a4 <HAL_RCC_OscConfig+0x504>)
 8001912:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001914:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001918:	60bb      	str	r3, [r7, #8]
 800191a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800191c:	2301      	movs	r3, #1
 800191e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001920:	4b21      	ldr	r3, [pc, #132]	; (80019a8 <HAL_RCC_OscConfig+0x508>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001928:	2b00      	cmp	r3, #0
 800192a:	d118      	bne.n	800195e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800192c:	4b1e      	ldr	r3, [pc, #120]	; (80019a8 <HAL_RCC_OscConfig+0x508>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	4a1d      	ldr	r2, [pc, #116]	; (80019a8 <HAL_RCC_OscConfig+0x508>)
 8001932:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001936:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001938:	f7ff fa22 	bl	8000d80 <HAL_GetTick>
 800193c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800193e:	e008      	b.n	8001952 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001940:	f7ff fa1e 	bl	8000d80 <HAL_GetTick>
 8001944:	4602      	mov	r2, r0
 8001946:	693b      	ldr	r3, [r7, #16]
 8001948:	1ad3      	subs	r3, r2, r3
 800194a:	2b02      	cmp	r3, #2
 800194c:	d901      	bls.n	8001952 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800194e:	2303      	movs	r3, #3
 8001950:	e1b8      	b.n	8001cc4 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001952:	4b15      	ldr	r3, [pc, #84]	; (80019a8 <HAL_RCC_OscConfig+0x508>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800195a:	2b00      	cmp	r3, #0
 800195c:	d0f0      	beq.n	8001940 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	689b      	ldr	r3, [r3, #8]
 8001962:	2b01      	cmp	r3, #1
 8001964:	d108      	bne.n	8001978 <HAL_RCC_OscConfig+0x4d8>
 8001966:	4b0f      	ldr	r3, [pc, #60]	; (80019a4 <HAL_RCC_OscConfig+0x504>)
 8001968:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800196c:	4a0d      	ldr	r2, [pc, #52]	; (80019a4 <HAL_RCC_OscConfig+0x504>)
 800196e:	f043 0301 	orr.w	r3, r3, #1
 8001972:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001976:	e029      	b.n	80019cc <HAL_RCC_OscConfig+0x52c>
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	689b      	ldr	r3, [r3, #8]
 800197c:	2b05      	cmp	r3, #5
 800197e:	d115      	bne.n	80019ac <HAL_RCC_OscConfig+0x50c>
 8001980:	4b08      	ldr	r3, [pc, #32]	; (80019a4 <HAL_RCC_OscConfig+0x504>)
 8001982:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001986:	4a07      	ldr	r2, [pc, #28]	; (80019a4 <HAL_RCC_OscConfig+0x504>)
 8001988:	f043 0304 	orr.w	r3, r3, #4
 800198c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001990:	4b04      	ldr	r3, [pc, #16]	; (80019a4 <HAL_RCC_OscConfig+0x504>)
 8001992:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001996:	4a03      	ldr	r2, [pc, #12]	; (80019a4 <HAL_RCC_OscConfig+0x504>)
 8001998:	f043 0301 	orr.w	r3, r3, #1
 800199c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80019a0:	e014      	b.n	80019cc <HAL_RCC_OscConfig+0x52c>
 80019a2:	bf00      	nop
 80019a4:	40021000 	.word	0x40021000
 80019a8:	40007000 	.word	0x40007000
 80019ac:	4b9d      	ldr	r3, [pc, #628]	; (8001c24 <HAL_RCC_OscConfig+0x784>)
 80019ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019b2:	4a9c      	ldr	r2, [pc, #624]	; (8001c24 <HAL_RCC_OscConfig+0x784>)
 80019b4:	f023 0301 	bic.w	r3, r3, #1
 80019b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80019bc:	4b99      	ldr	r3, [pc, #612]	; (8001c24 <HAL_RCC_OscConfig+0x784>)
 80019be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019c2:	4a98      	ldr	r2, [pc, #608]	; (8001c24 <HAL_RCC_OscConfig+0x784>)
 80019c4:	f023 0304 	bic.w	r3, r3, #4
 80019c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	689b      	ldr	r3, [r3, #8]
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d016      	beq.n	8001a02 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019d4:	f7ff f9d4 	bl	8000d80 <HAL_GetTick>
 80019d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80019da:	e00a      	b.n	80019f2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019dc:	f7ff f9d0 	bl	8000d80 <HAL_GetTick>
 80019e0:	4602      	mov	r2, r0
 80019e2:	693b      	ldr	r3, [r7, #16]
 80019e4:	1ad3      	subs	r3, r2, r3
 80019e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80019ea:	4293      	cmp	r3, r2
 80019ec:	d901      	bls.n	80019f2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80019ee:	2303      	movs	r3, #3
 80019f0:	e168      	b.n	8001cc4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80019f2:	4b8c      	ldr	r3, [pc, #560]	; (8001c24 <HAL_RCC_OscConfig+0x784>)
 80019f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019f8:	f003 0302 	and.w	r3, r3, #2
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d0ed      	beq.n	80019dc <HAL_RCC_OscConfig+0x53c>
 8001a00:	e015      	b.n	8001a2e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a02:	f7ff f9bd 	bl	8000d80 <HAL_GetTick>
 8001a06:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001a08:	e00a      	b.n	8001a20 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a0a:	f7ff f9b9 	bl	8000d80 <HAL_GetTick>
 8001a0e:	4602      	mov	r2, r0
 8001a10:	693b      	ldr	r3, [r7, #16]
 8001a12:	1ad3      	subs	r3, r2, r3
 8001a14:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a18:	4293      	cmp	r3, r2
 8001a1a:	d901      	bls.n	8001a20 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001a1c:	2303      	movs	r3, #3
 8001a1e:	e151      	b.n	8001cc4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001a20:	4b80      	ldr	r3, [pc, #512]	; (8001c24 <HAL_RCC_OscConfig+0x784>)
 8001a22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a26:	f003 0302 	and.w	r3, r3, #2
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d1ed      	bne.n	8001a0a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001a2e:	7ffb      	ldrb	r3, [r7, #31]
 8001a30:	2b01      	cmp	r3, #1
 8001a32:	d105      	bne.n	8001a40 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a34:	4b7b      	ldr	r3, [pc, #492]	; (8001c24 <HAL_RCC_OscConfig+0x784>)
 8001a36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a38:	4a7a      	ldr	r2, [pc, #488]	; (8001c24 <HAL_RCC_OscConfig+0x784>)
 8001a3a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a3e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f003 0320 	and.w	r3, r3, #32
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d03c      	beq.n	8001ac6 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d01c      	beq.n	8001a8e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001a54:	4b73      	ldr	r3, [pc, #460]	; (8001c24 <HAL_RCC_OscConfig+0x784>)
 8001a56:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001a5a:	4a72      	ldr	r2, [pc, #456]	; (8001c24 <HAL_RCC_OscConfig+0x784>)
 8001a5c:	f043 0301 	orr.w	r3, r3, #1
 8001a60:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a64:	f7ff f98c 	bl	8000d80 <HAL_GetTick>
 8001a68:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001a6a:	e008      	b.n	8001a7e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001a6c:	f7ff f988 	bl	8000d80 <HAL_GetTick>
 8001a70:	4602      	mov	r2, r0
 8001a72:	693b      	ldr	r3, [r7, #16]
 8001a74:	1ad3      	subs	r3, r2, r3
 8001a76:	2b02      	cmp	r3, #2
 8001a78:	d901      	bls.n	8001a7e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8001a7a:	2303      	movs	r3, #3
 8001a7c:	e122      	b.n	8001cc4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001a7e:	4b69      	ldr	r3, [pc, #420]	; (8001c24 <HAL_RCC_OscConfig+0x784>)
 8001a80:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001a84:	f003 0302 	and.w	r3, r3, #2
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d0ef      	beq.n	8001a6c <HAL_RCC_OscConfig+0x5cc>
 8001a8c:	e01b      	b.n	8001ac6 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001a8e:	4b65      	ldr	r3, [pc, #404]	; (8001c24 <HAL_RCC_OscConfig+0x784>)
 8001a90:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001a94:	4a63      	ldr	r2, [pc, #396]	; (8001c24 <HAL_RCC_OscConfig+0x784>)
 8001a96:	f023 0301 	bic.w	r3, r3, #1
 8001a9a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a9e:	f7ff f96f 	bl	8000d80 <HAL_GetTick>
 8001aa2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001aa4:	e008      	b.n	8001ab8 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001aa6:	f7ff f96b 	bl	8000d80 <HAL_GetTick>
 8001aaa:	4602      	mov	r2, r0
 8001aac:	693b      	ldr	r3, [r7, #16]
 8001aae:	1ad3      	subs	r3, r2, r3
 8001ab0:	2b02      	cmp	r3, #2
 8001ab2:	d901      	bls.n	8001ab8 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001ab4:	2303      	movs	r3, #3
 8001ab6:	e105      	b.n	8001cc4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001ab8:	4b5a      	ldr	r3, [pc, #360]	; (8001c24 <HAL_RCC_OscConfig+0x784>)
 8001aba:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001abe:	f003 0302 	and.w	r3, r3, #2
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d1ef      	bne.n	8001aa6 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	f000 80f9 	beq.w	8001cc2 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ad4:	2b02      	cmp	r3, #2
 8001ad6:	f040 80cf 	bne.w	8001c78 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001ada:	4b52      	ldr	r3, [pc, #328]	; (8001c24 <HAL_RCC_OscConfig+0x784>)
 8001adc:	68db      	ldr	r3, [r3, #12]
 8001ade:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ae0:	697b      	ldr	r3, [r7, #20]
 8001ae2:	f003 0203 	and.w	r2, r3, #3
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001aea:	429a      	cmp	r2, r3
 8001aec:	d12c      	bne.n	8001b48 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001aee:	697b      	ldr	r3, [r7, #20]
 8001af0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001af8:	3b01      	subs	r3, #1
 8001afa:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001afc:	429a      	cmp	r2, r3
 8001afe:	d123      	bne.n	8001b48 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001b00:	697b      	ldr	r3, [r7, #20]
 8001b02:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b0a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001b0c:	429a      	cmp	r2, r3
 8001b0e:	d11b      	bne.n	8001b48 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001b10:	697b      	ldr	r3, [r7, #20]
 8001b12:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b1a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001b1c:	429a      	cmp	r2, r3
 8001b1e:	d113      	bne.n	8001b48 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001b20:	697b      	ldr	r3, [r7, #20]
 8001b22:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b2a:	085b      	lsrs	r3, r3, #1
 8001b2c:	3b01      	subs	r3, #1
 8001b2e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001b30:	429a      	cmp	r2, r3
 8001b32:	d109      	bne.n	8001b48 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001b34:	697b      	ldr	r3, [r7, #20]
 8001b36:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b3e:	085b      	lsrs	r3, r3, #1
 8001b40:	3b01      	subs	r3, #1
 8001b42:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001b44:	429a      	cmp	r2, r3
 8001b46:	d071      	beq.n	8001c2c <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001b48:	69bb      	ldr	r3, [r7, #24]
 8001b4a:	2b0c      	cmp	r3, #12
 8001b4c:	d068      	beq.n	8001c20 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001b4e:	4b35      	ldr	r3, [pc, #212]	; (8001c24 <HAL_RCC_OscConfig+0x784>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d105      	bne.n	8001b66 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001b5a:	4b32      	ldr	r3, [pc, #200]	; (8001c24 <HAL_RCC_OscConfig+0x784>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d001      	beq.n	8001b6a <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8001b66:	2301      	movs	r3, #1
 8001b68:	e0ac      	b.n	8001cc4 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001b6a:	4b2e      	ldr	r3, [pc, #184]	; (8001c24 <HAL_RCC_OscConfig+0x784>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	4a2d      	ldr	r2, [pc, #180]	; (8001c24 <HAL_RCC_OscConfig+0x784>)
 8001b70:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001b74:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001b76:	f7ff f903 	bl	8000d80 <HAL_GetTick>
 8001b7a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b7c:	e008      	b.n	8001b90 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b7e:	f7ff f8ff 	bl	8000d80 <HAL_GetTick>
 8001b82:	4602      	mov	r2, r0
 8001b84:	693b      	ldr	r3, [r7, #16]
 8001b86:	1ad3      	subs	r3, r2, r3
 8001b88:	2b02      	cmp	r3, #2
 8001b8a:	d901      	bls.n	8001b90 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8001b8c:	2303      	movs	r3, #3
 8001b8e:	e099      	b.n	8001cc4 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b90:	4b24      	ldr	r3, [pc, #144]	; (8001c24 <HAL_RCC_OscConfig+0x784>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d1f0      	bne.n	8001b7e <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b9c:	4b21      	ldr	r3, [pc, #132]	; (8001c24 <HAL_RCC_OscConfig+0x784>)
 8001b9e:	68da      	ldr	r2, [r3, #12]
 8001ba0:	4b21      	ldr	r3, [pc, #132]	; (8001c28 <HAL_RCC_OscConfig+0x788>)
 8001ba2:	4013      	ands	r3, r2
 8001ba4:	687a      	ldr	r2, [r7, #4]
 8001ba6:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001ba8:	687a      	ldr	r2, [r7, #4]
 8001baa:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001bac:	3a01      	subs	r2, #1
 8001bae:	0112      	lsls	r2, r2, #4
 8001bb0:	4311      	orrs	r1, r2
 8001bb2:	687a      	ldr	r2, [r7, #4]
 8001bb4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001bb6:	0212      	lsls	r2, r2, #8
 8001bb8:	4311      	orrs	r1, r2
 8001bba:	687a      	ldr	r2, [r7, #4]
 8001bbc:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001bbe:	0852      	lsrs	r2, r2, #1
 8001bc0:	3a01      	subs	r2, #1
 8001bc2:	0552      	lsls	r2, r2, #21
 8001bc4:	4311      	orrs	r1, r2
 8001bc6:	687a      	ldr	r2, [r7, #4]
 8001bc8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001bca:	0852      	lsrs	r2, r2, #1
 8001bcc:	3a01      	subs	r2, #1
 8001bce:	0652      	lsls	r2, r2, #25
 8001bd0:	4311      	orrs	r1, r2
 8001bd2:	687a      	ldr	r2, [r7, #4]
 8001bd4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001bd6:	06d2      	lsls	r2, r2, #27
 8001bd8:	430a      	orrs	r2, r1
 8001bda:	4912      	ldr	r1, [pc, #72]	; (8001c24 <HAL_RCC_OscConfig+0x784>)
 8001bdc:	4313      	orrs	r3, r2
 8001bde:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001be0:	4b10      	ldr	r3, [pc, #64]	; (8001c24 <HAL_RCC_OscConfig+0x784>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	4a0f      	ldr	r2, [pc, #60]	; (8001c24 <HAL_RCC_OscConfig+0x784>)
 8001be6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001bea:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001bec:	4b0d      	ldr	r3, [pc, #52]	; (8001c24 <HAL_RCC_OscConfig+0x784>)
 8001bee:	68db      	ldr	r3, [r3, #12]
 8001bf0:	4a0c      	ldr	r2, [pc, #48]	; (8001c24 <HAL_RCC_OscConfig+0x784>)
 8001bf2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001bf6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001bf8:	f7ff f8c2 	bl	8000d80 <HAL_GetTick>
 8001bfc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001bfe:	e008      	b.n	8001c12 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c00:	f7ff f8be 	bl	8000d80 <HAL_GetTick>
 8001c04:	4602      	mov	r2, r0
 8001c06:	693b      	ldr	r3, [r7, #16]
 8001c08:	1ad3      	subs	r3, r2, r3
 8001c0a:	2b02      	cmp	r3, #2
 8001c0c:	d901      	bls.n	8001c12 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8001c0e:	2303      	movs	r3, #3
 8001c10:	e058      	b.n	8001cc4 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c12:	4b04      	ldr	r3, [pc, #16]	; (8001c24 <HAL_RCC_OscConfig+0x784>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d0f0      	beq.n	8001c00 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001c1e:	e050      	b.n	8001cc2 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001c20:	2301      	movs	r3, #1
 8001c22:	e04f      	b.n	8001cc4 <HAL_RCC_OscConfig+0x824>
 8001c24:	40021000 	.word	0x40021000
 8001c28:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c2c:	4b27      	ldr	r3, [pc, #156]	; (8001ccc <HAL_RCC_OscConfig+0x82c>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d144      	bne.n	8001cc2 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001c38:	4b24      	ldr	r3, [pc, #144]	; (8001ccc <HAL_RCC_OscConfig+0x82c>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	4a23      	ldr	r2, [pc, #140]	; (8001ccc <HAL_RCC_OscConfig+0x82c>)
 8001c3e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c42:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001c44:	4b21      	ldr	r3, [pc, #132]	; (8001ccc <HAL_RCC_OscConfig+0x82c>)
 8001c46:	68db      	ldr	r3, [r3, #12]
 8001c48:	4a20      	ldr	r2, [pc, #128]	; (8001ccc <HAL_RCC_OscConfig+0x82c>)
 8001c4a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c4e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001c50:	f7ff f896 	bl	8000d80 <HAL_GetTick>
 8001c54:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c56:	e008      	b.n	8001c6a <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c58:	f7ff f892 	bl	8000d80 <HAL_GetTick>
 8001c5c:	4602      	mov	r2, r0
 8001c5e:	693b      	ldr	r3, [r7, #16]
 8001c60:	1ad3      	subs	r3, r2, r3
 8001c62:	2b02      	cmp	r3, #2
 8001c64:	d901      	bls.n	8001c6a <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8001c66:	2303      	movs	r3, #3
 8001c68:	e02c      	b.n	8001cc4 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c6a:	4b18      	ldr	r3, [pc, #96]	; (8001ccc <HAL_RCC_OscConfig+0x82c>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d0f0      	beq.n	8001c58 <HAL_RCC_OscConfig+0x7b8>
 8001c76:	e024      	b.n	8001cc2 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001c78:	69bb      	ldr	r3, [r7, #24]
 8001c7a:	2b0c      	cmp	r3, #12
 8001c7c:	d01f      	beq.n	8001cbe <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c7e:	4b13      	ldr	r3, [pc, #76]	; (8001ccc <HAL_RCC_OscConfig+0x82c>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	4a12      	ldr	r2, [pc, #72]	; (8001ccc <HAL_RCC_OscConfig+0x82c>)
 8001c84:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001c88:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c8a:	f7ff f879 	bl	8000d80 <HAL_GetTick>
 8001c8e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c90:	e008      	b.n	8001ca4 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c92:	f7ff f875 	bl	8000d80 <HAL_GetTick>
 8001c96:	4602      	mov	r2, r0
 8001c98:	693b      	ldr	r3, [r7, #16]
 8001c9a:	1ad3      	subs	r3, r2, r3
 8001c9c:	2b02      	cmp	r3, #2
 8001c9e:	d901      	bls.n	8001ca4 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8001ca0:	2303      	movs	r3, #3
 8001ca2:	e00f      	b.n	8001cc4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ca4:	4b09      	ldr	r3, [pc, #36]	; (8001ccc <HAL_RCC_OscConfig+0x82c>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d1f0      	bne.n	8001c92 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001cb0:	4b06      	ldr	r3, [pc, #24]	; (8001ccc <HAL_RCC_OscConfig+0x82c>)
 8001cb2:	68da      	ldr	r2, [r3, #12]
 8001cb4:	4905      	ldr	r1, [pc, #20]	; (8001ccc <HAL_RCC_OscConfig+0x82c>)
 8001cb6:	4b06      	ldr	r3, [pc, #24]	; (8001cd0 <HAL_RCC_OscConfig+0x830>)
 8001cb8:	4013      	ands	r3, r2
 8001cba:	60cb      	str	r3, [r1, #12]
 8001cbc:	e001      	b.n	8001cc2 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	e000      	b.n	8001cc4 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8001cc2:	2300      	movs	r3, #0
}
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	3720      	adds	r7, #32
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	bd80      	pop	{r7, pc}
 8001ccc:	40021000 	.word	0x40021000
 8001cd0:	feeefffc 	.word	0xfeeefffc

08001cd4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b086      	sub	sp, #24
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
 8001cdc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d101      	bne.n	8001cec <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001ce8:	2301      	movs	r3, #1
 8001cea:	e11d      	b.n	8001f28 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001cec:	4b90      	ldr	r3, [pc, #576]	; (8001f30 <HAL_RCC_ClockConfig+0x25c>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f003 030f 	and.w	r3, r3, #15
 8001cf4:	683a      	ldr	r2, [r7, #0]
 8001cf6:	429a      	cmp	r2, r3
 8001cf8:	d910      	bls.n	8001d1c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cfa:	4b8d      	ldr	r3, [pc, #564]	; (8001f30 <HAL_RCC_ClockConfig+0x25c>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f023 020f 	bic.w	r2, r3, #15
 8001d02:	498b      	ldr	r1, [pc, #556]	; (8001f30 <HAL_RCC_ClockConfig+0x25c>)
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	4313      	orrs	r3, r2
 8001d08:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d0a:	4b89      	ldr	r3, [pc, #548]	; (8001f30 <HAL_RCC_ClockConfig+0x25c>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f003 030f 	and.w	r3, r3, #15
 8001d12:	683a      	ldr	r2, [r7, #0]
 8001d14:	429a      	cmp	r2, r3
 8001d16:	d001      	beq.n	8001d1c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001d18:	2301      	movs	r3, #1
 8001d1a:	e105      	b.n	8001f28 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f003 0302 	and.w	r3, r3, #2
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d010      	beq.n	8001d4a <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	689a      	ldr	r2, [r3, #8]
 8001d2c:	4b81      	ldr	r3, [pc, #516]	; (8001f34 <HAL_RCC_ClockConfig+0x260>)
 8001d2e:	689b      	ldr	r3, [r3, #8]
 8001d30:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001d34:	429a      	cmp	r2, r3
 8001d36:	d908      	bls.n	8001d4a <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d38:	4b7e      	ldr	r3, [pc, #504]	; (8001f34 <HAL_RCC_ClockConfig+0x260>)
 8001d3a:	689b      	ldr	r3, [r3, #8]
 8001d3c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	689b      	ldr	r3, [r3, #8]
 8001d44:	497b      	ldr	r1, [pc, #492]	; (8001f34 <HAL_RCC_ClockConfig+0x260>)
 8001d46:	4313      	orrs	r3, r2
 8001d48:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f003 0301 	and.w	r3, r3, #1
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d079      	beq.n	8001e4a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	685b      	ldr	r3, [r3, #4]
 8001d5a:	2b03      	cmp	r3, #3
 8001d5c:	d11e      	bne.n	8001d9c <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d5e:	4b75      	ldr	r3, [pc, #468]	; (8001f34 <HAL_RCC_ClockConfig+0x260>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d101      	bne.n	8001d6e <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8001d6a:	2301      	movs	r3, #1
 8001d6c:	e0dc      	b.n	8001f28 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8001d6e:	f000 fa3b 	bl	80021e8 <RCC_GetSysClockFreqFromPLLSource>
 8001d72:	4603      	mov	r3, r0
 8001d74:	4a70      	ldr	r2, [pc, #448]	; (8001f38 <HAL_RCC_ClockConfig+0x264>)
 8001d76:	4293      	cmp	r3, r2
 8001d78:	d946      	bls.n	8001e08 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8001d7a:	4b6e      	ldr	r3, [pc, #440]	; (8001f34 <HAL_RCC_ClockConfig+0x260>)
 8001d7c:	689b      	ldr	r3, [r3, #8]
 8001d7e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d140      	bne.n	8001e08 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001d86:	4b6b      	ldr	r3, [pc, #428]	; (8001f34 <HAL_RCC_ClockConfig+0x260>)
 8001d88:	689b      	ldr	r3, [r3, #8]
 8001d8a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001d8e:	4a69      	ldr	r2, [pc, #420]	; (8001f34 <HAL_RCC_ClockConfig+0x260>)
 8001d90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d94:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001d96:	2380      	movs	r3, #128	; 0x80
 8001d98:	617b      	str	r3, [r7, #20]
 8001d9a:	e035      	b.n	8001e08 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	685b      	ldr	r3, [r3, #4]
 8001da0:	2b02      	cmp	r3, #2
 8001da2:	d107      	bne.n	8001db4 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001da4:	4b63      	ldr	r3, [pc, #396]	; (8001f34 <HAL_RCC_ClockConfig+0x260>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d115      	bne.n	8001ddc <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8001db0:	2301      	movs	r3, #1
 8001db2:	e0b9      	b.n	8001f28 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	685b      	ldr	r3, [r3, #4]
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d107      	bne.n	8001dcc <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001dbc:	4b5d      	ldr	r3, [pc, #372]	; (8001f34 <HAL_RCC_ClockConfig+0x260>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f003 0302 	and.w	r3, r3, #2
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d109      	bne.n	8001ddc <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8001dc8:	2301      	movs	r3, #1
 8001dca:	e0ad      	b.n	8001f28 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001dcc:	4b59      	ldr	r3, [pc, #356]	; (8001f34 <HAL_RCC_ClockConfig+0x260>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d101      	bne.n	8001ddc <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8001dd8:	2301      	movs	r3, #1
 8001dda:	e0a5      	b.n	8001f28 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8001ddc:	f000 f8b4 	bl	8001f48 <HAL_RCC_GetSysClockFreq>
 8001de0:	4603      	mov	r3, r0
 8001de2:	4a55      	ldr	r2, [pc, #340]	; (8001f38 <HAL_RCC_ClockConfig+0x264>)
 8001de4:	4293      	cmp	r3, r2
 8001de6:	d90f      	bls.n	8001e08 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8001de8:	4b52      	ldr	r3, [pc, #328]	; (8001f34 <HAL_RCC_ClockConfig+0x260>)
 8001dea:	689b      	ldr	r3, [r3, #8]
 8001dec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d109      	bne.n	8001e08 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001df4:	4b4f      	ldr	r3, [pc, #316]	; (8001f34 <HAL_RCC_ClockConfig+0x260>)
 8001df6:	689b      	ldr	r3, [r3, #8]
 8001df8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001dfc:	4a4d      	ldr	r2, [pc, #308]	; (8001f34 <HAL_RCC_ClockConfig+0x260>)
 8001dfe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e02:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001e04:	2380      	movs	r3, #128	; 0x80
 8001e06:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001e08:	4b4a      	ldr	r3, [pc, #296]	; (8001f34 <HAL_RCC_ClockConfig+0x260>)
 8001e0a:	689b      	ldr	r3, [r3, #8]
 8001e0c:	f023 0203 	bic.w	r2, r3, #3
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	685b      	ldr	r3, [r3, #4]
 8001e14:	4947      	ldr	r1, [pc, #284]	; (8001f34 <HAL_RCC_ClockConfig+0x260>)
 8001e16:	4313      	orrs	r3, r2
 8001e18:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001e1a:	f7fe ffb1 	bl	8000d80 <HAL_GetTick>
 8001e1e:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e20:	e00a      	b.n	8001e38 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e22:	f7fe ffad 	bl	8000d80 <HAL_GetTick>
 8001e26:	4602      	mov	r2, r0
 8001e28:	693b      	ldr	r3, [r7, #16]
 8001e2a:	1ad3      	subs	r3, r2, r3
 8001e2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e30:	4293      	cmp	r3, r2
 8001e32:	d901      	bls.n	8001e38 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8001e34:	2303      	movs	r3, #3
 8001e36:	e077      	b.n	8001f28 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e38:	4b3e      	ldr	r3, [pc, #248]	; (8001f34 <HAL_RCC_ClockConfig+0x260>)
 8001e3a:	689b      	ldr	r3, [r3, #8]
 8001e3c:	f003 020c 	and.w	r2, r3, #12
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	685b      	ldr	r3, [r3, #4]
 8001e44:	009b      	lsls	r3, r3, #2
 8001e46:	429a      	cmp	r2, r3
 8001e48:	d1eb      	bne.n	8001e22 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8001e4a:	697b      	ldr	r3, [r7, #20]
 8001e4c:	2b80      	cmp	r3, #128	; 0x80
 8001e4e:	d105      	bne.n	8001e5c <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001e50:	4b38      	ldr	r3, [pc, #224]	; (8001f34 <HAL_RCC_ClockConfig+0x260>)
 8001e52:	689b      	ldr	r3, [r3, #8]
 8001e54:	4a37      	ldr	r2, [pc, #220]	; (8001f34 <HAL_RCC_ClockConfig+0x260>)
 8001e56:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001e5a:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f003 0302 	and.w	r3, r3, #2
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d010      	beq.n	8001e8a <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	689a      	ldr	r2, [r3, #8]
 8001e6c:	4b31      	ldr	r3, [pc, #196]	; (8001f34 <HAL_RCC_ClockConfig+0x260>)
 8001e6e:	689b      	ldr	r3, [r3, #8]
 8001e70:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001e74:	429a      	cmp	r2, r3
 8001e76:	d208      	bcs.n	8001e8a <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e78:	4b2e      	ldr	r3, [pc, #184]	; (8001f34 <HAL_RCC_ClockConfig+0x260>)
 8001e7a:	689b      	ldr	r3, [r3, #8]
 8001e7c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	689b      	ldr	r3, [r3, #8]
 8001e84:	492b      	ldr	r1, [pc, #172]	; (8001f34 <HAL_RCC_ClockConfig+0x260>)
 8001e86:	4313      	orrs	r3, r2
 8001e88:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001e8a:	4b29      	ldr	r3, [pc, #164]	; (8001f30 <HAL_RCC_ClockConfig+0x25c>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f003 030f 	and.w	r3, r3, #15
 8001e92:	683a      	ldr	r2, [r7, #0]
 8001e94:	429a      	cmp	r2, r3
 8001e96:	d210      	bcs.n	8001eba <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e98:	4b25      	ldr	r3, [pc, #148]	; (8001f30 <HAL_RCC_ClockConfig+0x25c>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f023 020f 	bic.w	r2, r3, #15
 8001ea0:	4923      	ldr	r1, [pc, #140]	; (8001f30 <HAL_RCC_ClockConfig+0x25c>)
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	4313      	orrs	r3, r2
 8001ea6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ea8:	4b21      	ldr	r3, [pc, #132]	; (8001f30 <HAL_RCC_ClockConfig+0x25c>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f003 030f 	and.w	r3, r3, #15
 8001eb0:	683a      	ldr	r2, [r7, #0]
 8001eb2:	429a      	cmp	r2, r3
 8001eb4:	d001      	beq.n	8001eba <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	e036      	b.n	8001f28 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f003 0304 	and.w	r3, r3, #4
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d008      	beq.n	8001ed8 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ec6:	4b1b      	ldr	r3, [pc, #108]	; (8001f34 <HAL_RCC_ClockConfig+0x260>)
 8001ec8:	689b      	ldr	r3, [r3, #8]
 8001eca:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	68db      	ldr	r3, [r3, #12]
 8001ed2:	4918      	ldr	r1, [pc, #96]	; (8001f34 <HAL_RCC_ClockConfig+0x260>)
 8001ed4:	4313      	orrs	r3, r2
 8001ed6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f003 0308 	and.w	r3, r3, #8
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d009      	beq.n	8001ef8 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001ee4:	4b13      	ldr	r3, [pc, #76]	; (8001f34 <HAL_RCC_ClockConfig+0x260>)
 8001ee6:	689b      	ldr	r3, [r3, #8]
 8001ee8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	691b      	ldr	r3, [r3, #16]
 8001ef0:	00db      	lsls	r3, r3, #3
 8001ef2:	4910      	ldr	r1, [pc, #64]	; (8001f34 <HAL_RCC_ClockConfig+0x260>)
 8001ef4:	4313      	orrs	r3, r2
 8001ef6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001ef8:	f000 f826 	bl	8001f48 <HAL_RCC_GetSysClockFreq>
 8001efc:	4602      	mov	r2, r0
 8001efe:	4b0d      	ldr	r3, [pc, #52]	; (8001f34 <HAL_RCC_ClockConfig+0x260>)
 8001f00:	689b      	ldr	r3, [r3, #8]
 8001f02:	091b      	lsrs	r3, r3, #4
 8001f04:	f003 030f 	and.w	r3, r3, #15
 8001f08:	490c      	ldr	r1, [pc, #48]	; (8001f3c <HAL_RCC_ClockConfig+0x268>)
 8001f0a:	5ccb      	ldrb	r3, [r1, r3]
 8001f0c:	f003 031f 	and.w	r3, r3, #31
 8001f10:	fa22 f303 	lsr.w	r3, r2, r3
 8001f14:	4a0a      	ldr	r2, [pc, #40]	; (8001f40 <HAL_RCC_ClockConfig+0x26c>)
 8001f16:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001f18:	4b0a      	ldr	r3, [pc, #40]	; (8001f44 <HAL_RCC_ClockConfig+0x270>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	f7fe fe39 	bl	8000b94 <HAL_InitTick>
 8001f22:	4603      	mov	r3, r0
 8001f24:	73fb      	strb	r3, [r7, #15]

  return status;
 8001f26:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f28:	4618      	mov	r0, r3
 8001f2a:	3718      	adds	r7, #24
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	bd80      	pop	{r7, pc}
 8001f30:	40022000 	.word	0x40022000
 8001f34:	40021000 	.word	0x40021000
 8001f38:	04c4b400 	.word	0x04c4b400
 8001f3c:	08006d9c 	.word	0x08006d9c
 8001f40:	20000000 	.word	0x20000000
 8001f44:	20000004 	.word	0x20000004

08001f48 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	b089      	sub	sp, #36	; 0x24
 8001f4c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	61fb      	str	r3, [r7, #28]
 8001f52:	2300      	movs	r3, #0
 8001f54:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f56:	4b3e      	ldr	r3, [pc, #248]	; (8002050 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f58:	689b      	ldr	r3, [r3, #8]
 8001f5a:	f003 030c 	and.w	r3, r3, #12
 8001f5e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001f60:	4b3b      	ldr	r3, [pc, #236]	; (8002050 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f62:	68db      	ldr	r3, [r3, #12]
 8001f64:	f003 0303 	and.w	r3, r3, #3
 8001f68:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001f6a:	693b      	ldr	r3, [r7, #16]
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d005      	beq.n	8001f7c <HAL_RCC_GetSysClockFreq+0x34>
 8001f70:	693b      	ldr	r3, [r7, #16]
 8001f72:	2b0c      	cmp	r3, #12
 8001f74:	d121      	bne.n	8001fba <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	2b01      	cmp	r3, #1
 8001f7a:	d11e      	bne.n	8001fba <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001f7c:	4b34      	ldr	r3, [pc, #208]	; (8002050 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f003 0308 	and.w	r3, r3, #8
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d107      	bne.n	8001f98 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001f88:	4b31      	ldr	r3, [pc, #196]	; (8002050 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f8e:	0a1b      	lsrs	r3, r3, #8
 8001f90:	f003 030f 	and.w	r3, r3, #15
 8001f94:	61fb      	str	r3, [r7, #28]
 8001f96:	e005      	b.n	8001fa4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001f98:	4b2d      	ldr	r3, [pc, #180]	; (8002050 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	091b      	lsrs	r3, r3, #4
 8001f9e:	f003 030f 	and.w	r3, r3, #15
 8001fa2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001fa4:	4a2b      	ldr	r2, [pc, #172]	; (8002054 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001fa6:	69fb      	ldr	r3, [r7, #28]
 8001fa8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fac:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001fae:	693b      	ldr	r3, [r7, #16]
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d10d      	bne.n	8001fd0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001fb4:	69fb      	ldr	r3, [r7, #28]
 8001fb6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001fb8:	e00a      	b.n	8001fd0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001fba:	693b      	ldr	r3, [r7, #16]
 8001fbc:	2b04      	cmp	r3, #4
 8001fbe:	d102      	bne.n	8001fc6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001fc0:	4b25      	ldr	r3, [pc, #148]	; (8002058 <HAL_RCC_GetSysClockFreq+0x110>)
 8001fc2:	61bb      	str	r3, [r7, #24]
 8001fc4:	e004      	b.n	8001fd0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001fc6:	693b      	ldr	r3, [r7, #16]
 8001fc8:	2b08      	cmp	r3, #8
 8001fca:	d101      	bne.n	8001fd0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001fcc:	4b23      	ldr	r3, [pc, #140]	; (800205c <HAL_RCC_GetSysClockFreq+0x114>)
 8001fce:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001fd0:	693b      	ldr	r3, [r7, #16]
 8001fd2:	2b0c      	cmp	r3, #12
 8001fd4:	d134      	bne.n	8002040 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001fd6:	4b1e      	ldr	r3, [pc, #120]	; (8002050 <HAL_RCC_GetSysClockFreq+0x108>)
 8001fd8:	68db      	ldr	r3, [r3, #12]
 8001fda:	f003 0303 	and.w	r3, r3, #3
 8001fde:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001fe0:	68bb      	ldr	r3, [r7, #8]
 8001fe2:	2b02      	cmp	r3, #2
 8001fe4:	d003      	beq.n	8001fee <HAL_RCC_GetSysClockFreq+0xa6>
 8001fe6:	68bb      	ldr	r3, [r7, #8]
 8001fe8:	2b03      	cmp	r3, #3
 8001fea:	d003      	beq.n	8001ff4 <HAL_RCC_GetSysClockFreq+0xac>
 8001fec:	e005      	b.n	8001ffa <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001fee:	4b1a      	ldr	r3, [pc, #104]	; (8002058 <HAL_RCC_GetSysClockFreq+0x110>)
 8001ff0:	617b      	str	r3, [r7, #20]
      break;
 8001ff2:	e005      	b.n	8002000 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001ff4:	4b19      	ldr	r3, [pc, #100]	; (800205c <HAL_RCC_GetSysClockFreq+0x114>)
 8001ff6:	617b      	str	r3, [r7, #20]
      break;
 8001ff8:	e002      	b.n	8002000 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001ffa:	69fb      	ldr	r3, [r7, #28]
 8001ffc:	617b      	str	r3, [r7, #20]
      break;
 8001ffe:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002000:	4b13      	ldr	r3, [pc, #76]	; (8002050 <HAL_RCC_GetSysClockFreq+0x108>)
 8002002:	68db      	ldr	r3, [r3, #12]
 8002004:	091b      	lsrs	r3, r3, #4
 8002006:	f003 030f 	and.w	r3, r3, #15
 800200a:	3301      	adds	r3, #1
 800200c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800200e:	4b10      	ldr	r3, [pc, #64]	; (8002050 <HAL_RCC_GetSysClockFreq+0x108>)
 8002010:	68db      	ldr	r3, [r3, #12]
 8002012:	0a1b      	lsrs	r3, r3, #8
 8002014:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002018:	697a      	ldr	r2, [r7, #20]
 800201a:	fb03 f202 	mul.w	r2, r3, r2
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	fbb2 f3f3 	udiv	r3, r2, r3
 8002024:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002026:	4b0a      	ldr	r3, [pc, #40]	; (8002050 <HAL_RCC_GetSysClockFreq+0x108>)
 8002028:	68db      	ldr	r3, [r3, #12]
 800202a:	0e5b      	lsrs	r3, r3, #25
 800202c:	f003 0303 	and.w	r3, r3, #3
 8002030:	3301      	adds	r3, #1
 8002032:	005b      	lsls	r3, r3, #1
 8002034:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002036:	697a      	ldr	r2, [r7, #20]
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	fbb2 f3f3 	udiv	r3, r2, r3
 800203e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002040:	69bb      	ldr	r3, [r7, #24]
}
 8002042:	4618      	mov	r0, r3
 8002044:	3724      	adds	r7, #36	; 0x24
 8002046:	46bd      	mov	sp, r7
 8002048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204c:	4770      	bx	lr
 800204e:	bf00      	nop
 8002050:	40021000 	.word	0x40021000
 8002054:	08006db4 	.word	0x08006db4
 8002058:	00f42400 	.word	0x00f42400
 800205c:	007a1200 	.word	0x007a1200

08002060 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002060:	b480      	push	{r7}
 8002062:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002064:	4b03      	ldr	r3, [pc, #12]	; (8002074 <HAL_RCC_GetHCLKFreq+0x14>)
 8002066:	681b      	ldr	r3, [r3, #0]
}
 8002068:	4618      	mov	r0, r3
 800206a:	46bd      	mov	sp, r7
 800206c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002070:	4770      	bx	lr
 8002072:	bf00      	nop
 8002074:	20000000 	.word	0x20000000

08002078 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800207c:	f7ff fff0 	bl	8002060 <HAL_RCC_GetHCLKFreq>
 8002080:	4602      	mov	r2, r0
 8002082:	4b06      	ldr	r3, [pc, #24]	; (800209c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002084:	689b      	ldr	r3, [r3, #8]
 8002086:	0a1b      	lsrs	r3, r3, #8
 8002088:	f003 0307 	and.w	r3, r3, #7
 800208c:	4904      	ldr	r1, [pc, #16]	; (80020a0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800208e:	5ccb      	ldrb	r3, [r1, r3]
 8002090:	f003 031f 	and.w	r3, r3, #31
 8002094:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002098:	4618      	mov	r0, r3
 800209a:	bd80      	pop	{r7, pc}
 800209c:	40021000 	.word	0x40021000
 80020a0:	08006dac 	.word	0x08006dac

080020a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80020a8:	f7ff ffda 	bl	8002060 <HAL_RCC_GetHCLKFreq>
 80020ac:	4602      	mov	r2, r0
 80020ae:	4b06      	ldr	r3, [pc, #24]	; (80020c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80020b0:	689b      	ldr	r3, [r3, #8]
 80020b2:	0adb      	lsrs	r3, r3, #11
 80020b4:	f003 0307 	and.w	r3, r3, #7
 80020b8:	4904      	ldr	r1, [pc, #16]	; (80020cc <HAL_RCC_GetPCLK2Freq+0x28>)
 80020ba:	5ccb      	ldrb	r3, [r1, r3]
 80020bc:	f003 031f 	and.w	r3, r3, #31
 80020c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80020c4:	4618      	mov	r0, r3
 80020c6:	bd80      	pop	{r7, pc}
 80020c8:	40021000 	.word	0x40021000
 80020cc:	08006dac 	.word	0x08006dac

080020d0 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80020d0:	b480      	push	{r7}
 80020d2:	b083      	sub	sp, #12
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
 80020d8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	220f      	movs	r2, #15
 80020de:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80020e0:	4b12      	ldr	r3, [pc, #72]	; (800212c <HAL_RCC_GetClockConfig+0x5c>)
 80020e2:	689b      	ldr	r3, [r3, #8]
 80020e4:	f003 0203 	and.w	r2, r3, #3
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80020ec:	4b0f      	ldr	r3, [pc, #60]	; (800212c <HAL_RCC_GetClockConfig+0x5c>)
 80020ee:	689b      	ldr	r3, [r3, #8]
 80020f0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80020f8:	4b0c      	ldr	r3, [pc, #48]	; (800212c <HAL_RCC_GetClockConfig+0x5c>)
 80020fa:	689b      	ldr	r3, [r3, #8]
 80020fc:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8002104:	4b09      	ldr	r3, [pc, #36]	; (800212c <HAL_RCC_GetClockConfig+0x5c>)
 8002106:	689b      	ldr	r3, [r3, #8]
 8002108:	08db      	lsrs	r3, r3, #3
 800210a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8002112:	4b07      	ldr	r3, [pc, #28]	; (8002130 <HAL_RCC_GetClockConfig+0x60>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f003 020f 	and.w	r2, r3, #15
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	601a      	str	r2, [r3, #0]
}
 800211e:	bf00      	nop
 8002120:	370c      	adds	r7, #12
 8002122:	46bd      	mov	sp, r7
 8002124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002128:	4770      	bx	lr
 800212a:	bf00      	nop
 800212c:	40021000 	.word	0x40021000
 8002130:	40022000 	.word	0x40022000

08002134 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b086      	sub	sp, #24
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800213c:	2300      	movs	r3, #0
 800213e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002140:	4b27      	ldr	r3, [pc, #156]	; (80021e0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002142:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002144:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002148:	2b00      	cmp	r3, #0
 800214a:	d003      	beq.n	8002154 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800214c:	f7ff f8d4 	bl	80012f8 <HAL_PWREx_GetVoltageRange>
 8002150:	6178      	str	r0, [r7, #20]
 8002152:	e014      	b.n	800217e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002154:	4b22      	ldr	r3, [pc, #136]	; (80021e0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002156:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002158:	4a21      	ldr	r2, [pc, #132]	; (80021e0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800215a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800215e:	6593      	str	r3, [r2, #88]	; 0x58
 8002160:	4b1f      	ldr	r3, [pc, #124]	; (80021e0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002162:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002164:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002168:	60fb      	str	r3, [r7, #12]
 800216a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800216c:	f7ff f8c4 	bl	80012f8 <HAL_PWREx_GetVoltageRange>
 8002170:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002172:	4b1b      	ldr	r3, [pc, #108]	; (80021e0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002174:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002176:	4a1a      	ldr	r2, [pc, #104]	; (80021e0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002178:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800217c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800217e:	697b      	ldr	r3, [r7, #20]
 8002180:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002184:	d10b      	bne.n	800219e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	2b80      	cmp	r3, #128	; 0x80
 800218a:	d913      	bls.n	80021b4 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2ba0      	cmp	r3, #160	; 0xa0
 8002190:	d902      	bls.n	8002198 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002192:	2302      	movs	r3, #2
 8002194:	613b      	str	r3, [r7, #16]
 8002196:	e00d      	b.n	80021b4 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002198:	2301      	movs	r3, #1
 800219a:	613b      	str	r3, [r7, #16]
 800219c:	e00a      	b.n	80021b4 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	2b7f      	cmp	r3, #127	; 0x7f
 80021a2:	d902      	bls.n	80021aa <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 80021a4:	2302      	movs	r3, #2
 80021a6:	613b      	str	r3, [r7, #16]
 80021a8:	e004      	b.n	80021b4 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	2b70      	cmp	r3, #112	; 0x70
 80021ae:	d101      	bne.n	80021b4 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80021b0:	2301      	movs	r3, #1
 80021b2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80021b4:	4b0b      	ldr	r3, [pc, #44]	; (80021e4 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f023 020f 	bic.w	r2, r3, #15
 80021bc:	4909      	ldr	r1, [pc, #36]	; (80021e4 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80021be:	693b      	ldr	r3, [r7, #16]
 80021c0:	4313      	orrs	r3, r2
 80021c2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80021c4:	4b07      	ldr	r3, [pc, #28]	; (80021e4 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f003 030f 	and.w	r3, r3, #15
 80021cc:	693a      	ldr	r2, [r7, #16]
 80021ce:	429a      	cmp	r2, r3
 80021d0:	d001      	beq.n	80021d6 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 80021d2:	2301      	movs	r3, #1
 80021d4:	e000      	b.n	80021d8 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 80021d6:	2300      	movs	r3, #0
}
 80021d8:	4618      	mov	r0, r3
 80021da:	3718      	adds	r7, #24
 80021dc:	46bd      	mov	sp, r7
 80021de:	bd80      	pop	{r7, pc}
 80021e0:	40021000 	.word	0x40021000
 80021e4:	40022000 	.word	0x40022000

080021e8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80021e8:	b480      	push	{r7}
 80021ea:	b087      	sub	sp, #28
 80021ec:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80021ee:	4b2d      	ldr	r3, [pc, #180]	; (80022a4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80021f0:	68db      	ldr	r3, [r3, #12]
 80021f2:	f003 0303 	and.w	r3, r3, #3
 80021f6:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	2b03      	cmp	r3, #3
 80021fc:	d00b      	beq.n	8002216 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	2b03      	cmp	r3, #3
 8002202:	d825      	bhi.n	8002250 <RCC_GetSysClockFreqFromPLLSource+0x68>
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	2b01      	cmp	r3, #1
 8002208:	d008      	beq.n	800221c <RCC_GetSysClockFreqFromPLLSource+0x34>
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	2b02      	cmp	r3, #2
 800220e:	d11f      	bne.n	8002250 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8002210:	4b25      	ldr	r3, [pc, #148]	; (80022a8 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002212:	613b      	str	r3, [r7, #16]
    break;
 8002214:	e01f      	b.n	8002256 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8002216:	4b25      	ldr	r3, [pc, #148]	; (80022ac <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8002218:	613b      	str	r3, [r7, #16]
    break;
 800221a:	e01c      	b.n	8002256 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800221c:	4b21      	ldr	r3, [pc, #132]	; (80022a4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f003 0308 	and.w	r3, r3, #8
 8002224:	2b00      	cmp	r3, #0
 8002226:	d107      	bne.n	8002238 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002228:	4b1e      	ldr	r3, [pc, #120]	; (80022a4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800222a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800222e:	0a1b      	lsrs	r3, r3, #8
 8002230:	f003 030f 	and.w	r3, r3, #15
 8002234:	617b      	str	r3, [r7, #20]
 8002236:	e005      	b.n	8002244 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002238:	4b1a      	ldr	r3, [pc, #104]	; (80022a4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	091b      	lsrs	r3, r3, #4
 800223e:	f003 030f 	and.w	r3, r3, #15
 8002242:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8002244:	4a1a      	ldr	r2, [pc, #104]	; (80022b0 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8002246:	697b      	ldr	r3, [r7, #20]
 8002248:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800224c:	613b      	str	r3, [r7, #16]
    break;
 800224e:	e002      	b.n	8002256 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8002250:	2300      	movs	r3, #0
 8002252:	613b      	str	r3, [r7, #16]
    break;
 8002254:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002256:	4b13      	ldr	r3, [pc, #76]	; (80022a4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002258:	68db      	ldr	r3, [r3, #12]
 800225a:	091b      	lsrs	r3, r3, #4
 800225c:	f003 030f 	and.w	r3, r3, #15
 8002260:	3301      	adds	r3, #1
 8002262:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002264:	4b0f      	ldr	r3, [pc, #60]	; (80022a4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002266:	68db      	ldr	r3, [r3, #12]
 8002268:	0a1b      	lsrs	r3, r3, #8
 800226a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800226e:	693a      	ldr	r2, [r7, #16]
 8002270:	fb03 f202 	mul.w	r2, r3, r2
 8002274:	68bb      	ldr	r3, [r7, #8]
 8002276:	fbb2 f3f3 	udiv	r3, r2, r3
 800227a:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800227c:	4b09      	ldr	r3, [pc, #36]	; (80022a4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800227e:	68db      	ldr	r3, [r3, #12]
 8002280:	0e5b      	lsrs	r3, r3, #25
 8002282:	f003 0303 	and.w	r3, r3, #3
 8002286:	3301      	adds	r3, #1
 8002288:	005b      	lsls	r3, r3, #1
 800228a:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 800228c:	693a      	ldr	r2, [r7, #16]
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	fbb2 f3f3 	udiv	r3, r2, r3
 8002294:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8002296:	683b      	ldr	r3, [r7, #0]
}
 8002298:	4618      	mov	r0, r3
 800229a:	371c      	adds	r7, #28
 800229c:	46bd      	mov	sp, r7
 800229e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a2:	4770      	bx	lr
 80022a4:	40021000 	.word	0x40021000
 80022a8:	00f42400 	.word	0x00f42400
 80022ac:	007a1200 	.word	0x007a1200
 80022b0:	08006db4 	.word	0x08006db4

080022b4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b086      	sub	sp, #24
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80022bc:	2300      	movs	r3, #0
 80022be:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80022c0:	2300      	movs	r3, #0
 80022c2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d040      	beq.n	8002352 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80022d4:	2b80      	cmp	r3, #128	; 0x80
 80022d6:	d02a      	beq.n	800232e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80022d8:	2b80      	cmp	r3, #128	; 0x80
 80022da:	d825      	bhi.n	8002328 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80022dc:	2b60      	cmp	r3, #96	; 0x60
 80022de:	d026      	beq.n	800232e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80022e0:	2b60      	cmp	r3, #96	; 0x60
 80022e2:	d821      	bhi.n	8002328 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80022e4:	2b40      	cmp	r3, #64	; 0x40
 80022e6:	d006      	beq.n	80022f6 <HAL_RCCEx_PeriphCLKConfig+0x42>
 80022e8:	2b40      	cmp	r3, #64	; 0x40
 80022ea:	d81d      	bhi.n	8002328 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d009      	beq.n	8002304 <HAL_RCCEx_PeriphCLKConfig+0x50>
 80022f0:	2b20      	cmp	r3, #32
 80022f2:	d010      	beq.n	8002316 <HAL_RCCEx_PeriphCLKConfig+0x62>
 80022f4:	e018      	b.n	8002328 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80022f6:	4b89      	ldr	r3, [pc, #548]	; (800251c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80022f8:	68db      	ldr	r3, [r3, #12]
 80022fa:	4a88      	ldr	r2, [pc, #544]	; (800251c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80022fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002300:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002302:	e015      	b.n	8002330 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	3304      	adds	r3, #4
 8002308:	2100      	movs	r1, #0
 800230a:	4618      	mov	r0, r3
 800230c:	f000 fb02 	bl	8002914 <RCCEx_PLLSAI1_Config>
 8002310:	4603      	mov	r3, r0
 8002312:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002314:	e00c      	b.n	8002330 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	3320      	adds	r3, #32
 800231a:	2100      	movs	r1, #0
 800231c:	4618      	mov	r0, r3
 800231e:	f000 fbed 	bl	8002afc <RCCEx_PLLSAI2_Config>
 8002322:	4603      	mov	r3, r0
 8002324:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002326:	e003      	b.n	8002330 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002328:	2301      	movs	r3, #1
 800232a:	74fb      	strb	r3, [r7, #19]
      break;
 800232c:	e000      	b.n	8002330 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 800232e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002330:	7cfb      	ldrb	r3, [r7, #19]
 8002332:	2b00      	cmp	r3, #0
 8002334:	d10b      	bne.n	800234e <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002336:	4b79      	ldr	r3, [pc, #484]	; (800251c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002338:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800233c:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002344:	4975      	ldr	r1, [pc, #468]	; (800251c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002346:	4313      	orrs	r3, r2
 8002348:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 800234c:	e001      	b.n	8002352 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800234e:	7cfb      	ldrb	r3, [r7, #19]
 8002350:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800235a:	2b00      	cmp	r3, #0
 800235c:	d047      	beq.n	80023ee <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002362:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002366:	d030      	beq.n	80023ca <HAL_RCCEx_PeriphCLKConfig+0x116>
 8002368:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800236c:	d82a      	bhi.n	80023c4 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800236e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002372:	d02a      	beq.n	80023ca <HAL_RCCEx_PeriphCLKConfig+0x116>
 8002374:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002378:	d824      	bhi.n	80023c4 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800237a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800237e:	d008      	beq.n	8002392 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8002380:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002384:	d81e      	bhi.n	80023c4 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8002386:	2b00      	cmp	r3, #0
 8002388:	d00a      	beq.n	80023a0 <HAL_RCCEx_PeriphCLKConfig+0xec>
 800238a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800238e:	d010      	beq.n	80023b2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8002390:	e018      	b.n	80023c4 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002392:	4b62      	ldr	r3, [pc, #392]	; (800251c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002394:	68db      	ldr	r3, [r3, #12]
 8002396:	4a61      	ldr	r2, [pc, #388]	; (800251c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002398:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800239c:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800239e:	e015      	b.n	80023cc <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	3304      	adds	r3, #4
 80023a4:	2100      	movs	r1, #0
 80023a6:	4618      	mov	r0, r3
 80023a8:	f000 fab4 	bl	8002914 <RCCEx_PLLSAI1_Config>
 80023ac:	4603      	mov	r3, r0
 80023ae:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80023b0:	e00c      	b.n	80023cc <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	3320      	adds	r3, #32
 80023b6:	2100      	movs	r1, #0
 80023b8:	4618      	mov	r0, r3
 80023ba:	f000 fb9f 	bl	8002afc <RCCEx_PLLSAI2_Config>
 80023be:	4603      	mov	r3, r0
 80023c0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80023c2:	e003      	b.n	80023cc <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80023c4:	2301      	movs	r3, #1
 80023c6:	74fb      	strb	r3, [r7, #19]
      break;
 80023c8:	e000      	b.n	80023cc <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 80023ca:	bf00      	nop
    }

    if(ret == HAL_OK)
 80023cc:	7cfb      	ldrb	r3, [r7, #19]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d10b      	bne.n	80023ea <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80023d2:	4b52      	ldr	r3, [pc, #328]	; (800251c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80023d4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80023d8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023e0:	494e      	ldr	r1, [pc, #312]	; (800251c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80023e2:	4313      	orrs	r3, r2
 80023e4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 80023e8:	e001      	b.n	80023ee <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80023ea:	7cfb      	ldrb	r3, [r7, #19]
 80023ec:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	f000 809f 	beq.w	800253a <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 80023fc:	2300      	movs	r3, #0
 80023fe:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002400:	4b46      	ldr	r3, [pc, #280]	; (800251c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002402:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002404:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002408:	2b00      	cmp	r3, #0
 800240a:	d101      	bne.n	8002410 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 800240c:	2301      	movs	r3, #1
 800240e:	e000      	b.n	8002412 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8002410:	2300      	movs	r3, #0
 8002412:	2b00      	cmp	r3, #0
 8002414:	d00d      	beq.n	8002432 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002416:	4b41      	ldr	r3, [pc, #260]	; (800251c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002418:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800241a:	4a40      	ldr	r2, [pc, #256]	; (800251c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800241c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002420:	6593      	str	r3, [r2, #88]	; 0x58
 8002422:	4b3e      	ldr	r3, [pc, #248]	; (800251c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002424:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002426:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800242a:	60bb      	str	r3, [r7, #8]
 800242c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800242e:	2301      	movs	r3, #1
 8002430:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002432:	4b3b      	ldr	r3, [pc, #236]	; (8002520 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	4a3a      	ldr	r2, [pc, #232]	; (8002520 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8002438:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800243c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800243e:	f7fe fc9f 	bl	8000d80 <HAL_GetTick>
 8002442:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002444:	e009      	b.n	800245a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002446:	f7fe fc9b 	bl	8000d80 <HAL_GetTick>
 800244a:	4602      	mov	r2, r0
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	1ad3      	subs	r3, r2, r3
 8002450:	2b02      	cmp	r3, #2
 8002452:	d902      	bls.n	800245a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8002454:	2303      	movs	r3, #3
 8002456:	74fb      	strb	r3, [r7, #19]
        break;
 8002458:	e005      	b.n	8002466 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800245a:	4b31      	ldr	r3, [pc, #196]	; (8002520 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002462:	2b00      	cmp	r3, #0
 8002464:	d0ef      	beq.n	8002446 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8002466:	7cfb      	ldrb	r3, [r7, #19]
 8002468:	2b00      	cmp	r3, #0
 800246a:	d15b      	bne.n	8002524 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800246c:	4b2b      	ldr	r3, [pc, #172]	; (800251c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800246e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002472:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002476:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002478:	697b      	ldr	r3, [r7, #20]
 800247a:	2b00      	cmp	r3, #0
 800247c:	d01f      	beq.n	80024be <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002484:	697a      	ldr	r2, [r7, #20]
 8002486:	429a      	cmp	r2, r3
 8002488:	d019      	beq.n	80024be <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800248a:	4b24      	ldr	r3, [pc, #144]	; (800251c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800248c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002490:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002494:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002496:	4b21      	ldr	r3, [pc, #132]	; (800251c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002498:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800249c:	4a1f      	ldr	r2, [pc, #124]	; (800251c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800249e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024a2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80024a6:	4b1d      	ldr	r3, [pc, #116]	; (800251c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80024a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024ac:	4a1b      	ldr	r2, [pc, #108]	; (800251c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80024ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024b2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80024b6:	4a19      	ldr	r2, [pc, #100]	; (800251c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80024b8:	697b      	ldr	r3, [r7, #20]
 80024ba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80024be:	697b      	ldr	r3, [r7, #20]
 80024c0:	f003 0301 	and.w	r3, r3, #1
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d016      	beq.n	80024f6 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024c8:	f7fe fc5a 	bl	8000d80 <HAL_GetTick>
 80024cc:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80024ce:	e00b      	b.n	80024e8 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024d0:	f7fe fc56 	bl	8000d80 <HAL_GetTick>
 80024d4:	4602      	mov	r2, r0
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	1ad3      	subs	r3, r2, r3
 80024da:	f241 3288 	movw	r2, #5000	; 0x1388
 80024de:	4293      	cmp	r3, r2
 80024e0:	d902      	bls.n	80024e8 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 80024e2:	2303      	movs	r3, #3
 80024e4:	74fb      	strb	r3, [r7, #19]
            break;
 80024e6:	e006      	b.n	80024f6 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80024e8:	4b0c      	ldr	r3, [pc, #48]	; (800251c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80024ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024ee:	f003 0302 	and.w	r3, r3, #2
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d0ec      	beq.n	80024d0 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 80024f6:	7cfb      	ldrb	r3, [r7, #19]
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d10c      	bne.n	8002516 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80024fc:	4b07      	ldr	r3, [pc, #28]	; (800251c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80024fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002502:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800250c:	4903      	ldr	r1, [pc, #12]	; (800251c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800250e:	4313      	orrs	r3, r2
 8002510:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002514:	e008      	b.n	8002528 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002516:	7cfb      	ldrb	r3, [r7, #19]
 8002518:	74bb      	strb	r3, [r7, #18]
 800251a:	e005      	b.n	8002528 <HAL_RCCEx_PeriphCLKConfig+0x274>
 800251c:	40021000 	.word	0x40021000
 8002520:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002524:	7cfb      	ldrb	r3, [r7, #19]
 8002526:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002528:	7c7b      	ldrb	r3, [r7, #17]
 800252a:	2b01      	cmp	r3, #1
 800252c:	d105      	bne.n	800253a <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800252e:	4ba0      	ldr	r3, [pc, #640]	; (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002530:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002532:	4a9f      	ldr	r2, [pc, #636]	; (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002534:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002538:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f003 0301 	and.w	r3, r3, #1
 8002542:	2b00      	cmp	r3, #0
 8002544:	d00a      	beq.n	800255c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002546:	4b9a      	ldr	r3, [pc, #616]	; (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002548:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800254c:	f023 0203 	bic.w	r2, r3, #3
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002554:	4996      	ldr	r1, [pc, #600]	; (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002556:	4313      	orrs	r3, r2
 8002558:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f003 0302 	and.w	r3, r3, #2
 8002564:	2b00      	cmp	r3, #0
 8002566:	d00a      	beq.n	800257e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002568:	4b91      	ldr	r3, [pc, #580]	; (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800256a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800256e:	f023 020c 	bic.w	r2, r3, #12
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002576:	498e      	ldr	r1, [pc, #568]	; (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002578:	4313      	orrs	r3, r2
 800257a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f003 0304 	and.w	r3, r3, #4
 8002586:	2b00      	cmp	r3, #0
 8002588:	d00a      	beq.n	80025a0 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800258a:	4b89      	ldr	r3, [pc, #548]	; (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800258c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002590:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002598:	4985      	ldr	r1, [pc, #532]	; (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800259a:	4313      	orrs	r3, r2
 800259c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f003 0308 	and.w	r3, r3, #8
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d00a      	beq.n	80025c2 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80025ac:	4b80      	ldr	r3, [pc, #512]	; (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80025ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025b2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80025ba:	497d      	ldr	r1, [pc, #500]	; (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80025bc:	4313      	orrs	r3, r2
 80025be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f003 0310 	and.w	r3, r3, #16
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d00a      	beq.n	80025e4 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80025ce:	4b78      	ldr	r3, [pc, #480]	; (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80025d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025d4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025dc:	4974      	ldr	r1, [pc, #464]	; (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80025de:	4313      	orrs	r3, r2
 80025e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f003 0320 	and.w	r3, r3, #32
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d00a      	beq.n	8002606 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80025f0:	4b6f      	ldr	r3, [pc, #444]	; (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80025f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025f6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80025fe:	496c      	ldr	r1, [pc, #432]	; (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002600:	4313      	orrs	r3, r2
 8002602:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800260e:	2b00      	cmp	r3, #0
 8002610:	d00a      	beq.n	8002628 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002612:	4b67      	ldr	r3, [pc, #412]	; (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002614:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002618:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002620:	4963      	ldr	r1, [pc, #396]	; (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002622:	4313      	orrs	r3, r2
 8002624:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002630:	2b00      	cmp	r3, #0
 8002632:	d00a      	beq.n	800264a <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002634:	4b5e      	ldr	r3, [pc, #376]	; (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002636:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800263a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002642:	495b      	ldr	r1, [pc, #364]	; (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002644:	4313      	orrs	r3, r2
 8002646:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002652:	2b00      	cmp	r3, #0
 8002654:	d00a      	beq.n	800266c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002656:	4b56      	ldr	r3, [pc, #344]	; (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002658:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800265c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002664:	4952      	ldr	r1, [pc, #328]	; (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002666:	4313      	orrs	r3, r2
 8002668:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002674:	2b00      	cmp	r3, #0
 8002676:	d00a      	beq.n	800268e <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002678:	4b4d      	ldr	r3, [pc, #308]	; (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800267a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800267e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002686:	494a      	ldr	r1, [pc, #296]	; (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002688:	4313      	orrs	r3, r2
 800268a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002696:	2b00      	cmp	r3, #0
 8002698:	d00a      	beq.n	80026b0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800269a:	4b45      	ldr	r3, [pc, #276]	; (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800269c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026a0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026a8:	4941      	ldr	r1, [pc, #260]	; (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80026aa:	4313      	orrs	r3, r2
 80026ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d00a      	beq.n	80026d2 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80026bc:	4b3c      	ldr	r3, [pc, #240]	; (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80026be:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80026c2:	f023 0203 	bic.w	r2, r3, #3
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026ca:	4939      	ldr	r1, [pc, #228]	; (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80026cc:	4313      	orrs	r3, r2
 80026ce:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d028      	beq.n	8002730 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80026de:	4b34      	ldr	r3, [pc, #208]	; (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80026e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026e4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026ec:	4930      	ldr	r1, [pc, #192]	; (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80026ee:	4313      	orrs	r3, r2
 80026f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026f8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80026fc:	d106      	bne.n	800270c <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80026fe:	4b2c      	ldr	r3, [pc, #176]	; (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002700:	68db      	ldr	r3, [r3, #12]
 8002702:	4a2b      	ldr	r2, [pc, #172]	; (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002704:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002708:	60d3      	str	r3, [r2, #12]
 800270a:	e011      	b.n	8002730 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002710:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002714:	d10c      	bne.n	8002730 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	3304      	adds	r3, #4
 800271a:	2101      	movs	r1, #1
 800271c:	4618      	mov	r0, r3
 800271e:	f000 f8f9 	bl	8002914 <RCCEx_PLLSAI1_Config>
 8002722:	4603      	mov	r3, r0
 8002724:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002726:	7cfb      	ldrb	r3, [r7, #19]
 8002728:	2b00      	cmp	r3, #0
 800272a:	d001      	beq.n	8002730 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 800272c:	7cfb      	ldrb	r3, [r7, #19]
 800272e:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002738:	2b00      	cmp	r3, #0
 800273a:	d04d      	beq.n	80027d8 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002740:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002744:	d108      	bne.n	8002758 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8002746:	4b1a      	ldr	r3, [pc, #104]	; (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002748:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800274c:	4a18      	ldr	r2, [pc, #96]	; (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800274e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002752:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8002756:	e012      	b.n	800277e <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8002758:	4b15      	ldr	r3, [pc, #84]	; (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800275a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800275e:	4a14      	ldr	r2, [pc, #80]	; (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002760:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002764:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8002768:	4b11      	ldr	r3, [pc, #68]	; (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800276a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800276e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002776:	490e      	ldr	r1, [pc, #56]	; (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002778:	4313      	orrs	r3, r2
 800277a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002782:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002786:	d106      	bne.n	8002796 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002788:	4b09      	ldr	r3, [pc, #36]	; (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800278a:	68db      	ldr	r3, [r3, #12]
 800278c:	4a08      	ldr	r2, [pc, #32]	; (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800278e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002792:	60d3      	str	r3, [r2, #12]
 8002794:	e020      	b.n	80027d8 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800279a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800279e:	d109      	bne.n	80027b4 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80027a0:	4b03      	ldr	r3, [pc, #12]	; (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80027a2:	68db      	ldr	r3, [r3, #12]
 80027a4:	4a02      	ldr	r2, [pc, #8]	; (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80027a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027aa:	60d3      	str	r3, [r2, #12]
 80027ac:	e014      	b.n	80027d8 <HAL_RCCEx_PeriphCLKConfig+0x524>
 80027ae:	bf00      	nop
 80027b0:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80027b8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80027bc:	d10c      	bne.n	80027d8 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	3304      	adds	r3, #4
 80027c2:	2101      	movs	r1, #1
 80027c4:	4618      	mov	r0, r3
 80027c6:	f000 f8a5 	bl	8002914 <RCCEx_PLLSAI1_Config>
 80027ca:	4603      	mov	r3, r0
 80027cc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80027ce:	7cfb      	ldrb	r3, [r7, #19]
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d001      	beq.n	80027d8 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 80027d4:	7cfb      	ldrb	r3, [r7, #19]
 80027d6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d028      	beq.n	8002836 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80027e4:	4b4a      	ldr	r3, [pc, #296]	; (8002910 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80027e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027ea:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80027f2:	4947      	ldr	r1, [pc, #284]	; (8002910 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80027f4:	4313      	orrs	r3, r2
 80027f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80027fe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002802:	d106      	bne.n	8002812 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002804:	4b42      	ldr	r3, [pc, #264]	; (8002910 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002806:	68db      	ldr	r3, [r3, #12]
 8002808:	4a41      	ldr	r2, [pc, #260]	; (8002910 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800280a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800280e:	60d3      	str	r3, [r2, #12]
 8002810:	e011      	b.n	8002836 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002816:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800281a:	d10c      	bne.n	8002836 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	3304      	adds	r3, #4
 8002820:	2101      	movs	r1, #1
 8002822:	4618      	mov	r0, r3
 8002824:	f000 f876 	bl	8002914 <RCCEx_PLLSAI1_Config>
 8002828:	4603      	mov	r3, r0
 800282a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800282c:	7cfb      	ldrb	r3, [r7, #19]
 800282e:	2b00      	cmp	r3, #0
 8002830:	d001      	beq.n	8002836 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8002832:	7cfb      	ldrb	r3, [r7, #19]
 8002834:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800283e:	2b00      	cmp	r3, #0
 8002840:	d01e      	beq.n	8002880 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002842:	4b33      	ldr	r3, [pc, #204]	; (8002910 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002844:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002848:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002852:	492f      	ldr	r1, [pc, #188]	; (8002910 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002854:	4313      	orrs	r3, r2
 8002856:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002860:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002864:	d10c      	bne.n	8002880 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	3304      	adds	r3, #4
 800286a:	2102      	movs	r1, #2
 800286c:	4618      	mov	r0, r3
 800286e:	f000 f851 	bl	8002914 <RCCEx_PLLSAI1_Config>
 8002872:	4603      	mov	r3, r0
 8002874:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002876:	7cfb      	ldrb	r3, [r7, #19]
 8002878:	2b00      	cmp	r3, #0
 800287a:	d001      	beq.n	8002880 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 800287c:	7cfb      	ldrb	r3, [r7, #19]
 800287e:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002888:	2b00      	cmp	r3, #0
 800288a:	d00b      	beq.n	80028a4 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800288c:	4b20      	ldr	r3, [pc, #128]	; (8002910 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800288e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002892:	f023 0204 	bic.w	r2, r3, #4
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800289c:	491c      	ldr	r1, [pc, #112]	; (8002910 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800289e:	4313      	orrs	r3, r2
 80028a0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d00b      	beq.n	80028c8 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80028b0:	4b17      	ldr	r3, [pc, #92]	; (8002910 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80028b2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80028b6:	f023 0218 	bic.w	r2, r3, #24
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028c0:	4913      	ldr	r1, [pc, #76]	; (8002910 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80028c2:	4313      	orrs	r3, r2
 80028c4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d017      	beq.n	8002904 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80028d4:	4b0e      	ldr	r3, [pc, #56]	; (8002910 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80028d6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80028da:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80028e4:	490a      	ldr	r1, [pc, #40]	; (8002910 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80028e6:	4313      	orrs	r3, r2
 80028e8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80028f2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80028f6:	d105      	bne.n	8002904 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80028f8:	4b05      	ldr	r3, [pc, #20]	; (8002910 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80028fa:	68db      	ldr	r3, [r3, #12]
 80028fc:	4a04      	ldr	r2, [pc, #16]	; (8002910 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80028fe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002902:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002904:	7cbb      	ldrb	r3, [r7, #18]
}
 8002906:	4618      	mov	r0, r3
 8002908:	3718      	adds	r7, #24
 800290a:	46bd      	mov	sp, r7
 800290c:	bd80      	pop	{r7, pc}
 800290e:	bf00      	nop
 8002910:	40021000 	.word	0x40021000

08002914 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b084      	sub	sp, #16
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
 800291c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800291e:	2300      	movs	r3, #0
 8002920:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002922:	4b72      	ldr	r3, [pc, #456]	; (8002aec <RCCEx_PLLSAI1_Config+0x1d8>)
 8002924:	68db      	ldr	r3, [r3, #12]
 8002926:	f003 0303 	and.w	r3, r3, #3
 800292a:	2b00      	cmp	r3, #0
 800292c:	d00e      	beq.n	800294c <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800292e:	4b6f      	ldr	r3, [pc, #444]	; (8002aec <RCCEx_PLLSAI1_Config+0x1d8>)
 8002930:	68db      	ldr	r3, [r3, #12]
 8002932:	f003 0203 	and.w	r2, r3, #3
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	429a      	cmp	r2, r3
 800293c:	d103      	bne.n	8002946 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
       ||
 8002942:	2b00      	cmp	r3, #0
 8002944:	d142      	bne.n	80029cc <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8002946:	2301      	movs	r3, #1
 8002948:	73fb      	strb	r3, [r7, #15]
 800294a:	e03f      	b.n	80029cc <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	2b03      	cmp	r3, #3
 8002952:	d018      	beq.n	8002986 <RCCEx_PLLSAI1_Config+0x72>
 8002954:	2b03      	cmp	r3, #3
 8002956:	d825      	bhi.n	80029a4 <RCCEx_PLLSAI1_Config+0x90>
 8002958:	2b01      	cmp	r3, #1
 800295a:	d002      	beq.n	8002962 <RCCEx_PLLSAI1_Config+0x4e>
 800295c:	2b02      	cmp	r3, #2
 800295e:	d009      	beq.n	8002974 <RCCEx_PLLSAI1_Config+0x60>
 8002960:	e020      	b.n	80029a4 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002962:	4b62      	ldr	r3, [pc, #392]	; (8002aec <RCCEx_PLLSAI1_Config+0x1d8>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f003 0302 	and.w	r3, r3, #2
 800296a:	2b00      	cmp	r3, #0
 800296c:	d11d      	bne.n	80029aa <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 800296e:	2301      	movs	r3, #1
 8002970:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002972:	e01a      	b.n	80029aa <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002974:	4b5d      	ldr	r3, [pc, #372]	; (8002aec <RCCEx_PLLSAI1_Config+0x1d8>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800297c:	2b00      	cmp	r3, #0
 800297e:	d116      	bne.n	80029ae <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8002980:	2301      	movs	r3, #1
 8002982:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002984:	e013      	b.n	80029ae <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002986:	4b59      	ldr	r3, [pc, #356]	; (8002aec <RCCEx_PLLSAI1_Config+0x1d8>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800298e:	2b00      	cmp	r3, #0
 8002990:	d10f      	bne.n	80029b2 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002992:	4b56      	ldr	r3, [pc, #344]	; (8002aec <RCCEx_PLLSAI1_Config+0x1d8>)
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800299a:	2b00      	cmp	r3, #0
 800299c:	d109      	bne.n	80029b2 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 800299e:	2301      	movs	r3, #1
 80029a0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80029a2:	e006      	b.n	80029b2 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 80029a4:	2301      	movs	r3, #1
 80029a6:	73fb      	strb	r3, [r7, #15]
      break;
 80029a8:	e004      	b.n	80029b4 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80029aa:	bf00      	nop
 80029ac:	e002      	b.n	80029b4 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80029ae:	bf00      	nop
 80029b0:	e000      	b.n	80029b4 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80029b2:	bf00      	nop
    }

    if(status == HAL_OK)
 80029b4:	7bfb      	ldrb	r3, [r7, #15]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d108      	bne.n	80029cc <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 80029ba:	4b4c      	ldr	r3, [pc, #304]	; (8002aec <RCCEx_PLLSAI1_Config+0x1d8>)
 80029bc:	68db      	ldr	r3, [r3, #12]
 80029be:	f023 0203 	bic.w	r2, r3, #3
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	4949      	ldr	r1, [pc, #292]	; (8002aec <RCCEx_PLLSAI1_Config+0x1d8>)
 80029c8:	4313      	orrs	r3, r2
 80029ca:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80029cc:	7bfb      	ldrb	r3, [r7, #15]
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	f040 8086 	bne.w	8002ae0 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80029d4:	4b45      	ldr	r3, [pc, #276]	; (8002aec <RCCEx_PLLSAI1_Config+0x1d8>)
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	4a44      	ldr	r2, [pc, #272]	; (8002aec <RCCEx_PLLSAI1_Config+0x1d8>)
 80029da:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80029de:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80029e0:	f7fe f9ce 	bl	8000d80 <HAL_GetTick>
 80029e4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80029e6:	e009      	b.n	80029fc <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80029e8:	f7fe f9ca 	bl	8000d80 <HAL_GetTick>
 80029ec:	4602      	mov	r2, r0
 80029ee:	68bb      	ldr	r3, [r7, #8]
 80029f0:	1ad3      	subs	r3, r2, r3
 80029f2:	2b02      	cmp	r3, #2
 80029f4:	d902      	bls.n	80029fc <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 80029f6:	2303      	movs	r3, #3
 80029f8:	73fb      	strb	r3, [r7, #15]
        break;
 80029fa:	e005      	b.n	8002a08 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80029fc:	4b3b      	ldr	r3, [pc, #236]	; (8002aec <RCCEx_PLLSAI1_Config+0x1d8>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d1ef      	bne.n	80029e8 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8002a08:	7bfb      	ldrb	r3, [r7, #15]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d168      	bne.n	8002ae0 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d113      	bne.n	8002a3c <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002a14:	4b35      	ldr	r3, [pc, #212]	; (8002aec <RCCEx_PLLSAI1_Config+0x1d8>)
 8002a16:	691a      	ldr	r2, [r3, #16]
 8002a18:	4b35      	ldr	r3, [pc, #212]	; (8002af0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002a1a:	4013      	ands	r3, r2
 8002a1c:	687a      	ldr	r2, [r7, #4]
 8002a1e:	6892      	ldr	r2, [r2, #8]
 8002a20:	0211      	lsls	r1, r2, #8
 8002a22:	687a      	ldr	r2, [r7, #4]
 8002a24:	68d2      	ldr	r2, [r2, #12]
 8002a26:	06d2      	lsls	r2, r2, #27
 8002a28:	4311      	orrs	r1, r2
 8002a2a:	687a      	ldr	r2, [r7, #4]
 8002a2c:	6852      	ldr	r2, [r2, #4]
 8002a2e:	3a01      	subs	r2, #1
 8002a30:	0112      	lsls	r2, r2, #4
 8002a32:	430a      	orrs	r2, r1
 8002a34:	492d      	ldr	r1, [pc, #180]	; (8002aec <RCCEx_PLLSAI1_Config+0x1d8>)
 8002a36:	4313      	orrs	r3, r2
 8002a38:	610b      	str	r3, [r1, #16]
 8002a3a:	e02d      	b.n	8002a98 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	2b01      	cmp	r3, #1
 8002a40:	d115      	bne.n	8002a6e <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002a42:	4b2a      	ldr	r3, [pc, #168]	; (8002aec <RCCEx_PLLSAI1_Config+0x1d8>)
 8002a44:	691a      	ldr	r2, [r3, #16]
 8002a46:	4b2b      	ldr	r3, [pc, #172]	; (8002af4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002a48:	4013      	ands	r3, r2
 8002a4a:	687a      	ldr	r2, [r7, #4]
 8002a4c:	6892      	ldr	r2, [r2, #8]
 8002a4e:	0211      	lsls	r1, r2, #8
 8002a50:	687a      	ldr	r2, [r7, #4]
 8002a52:	6912      	ldr	r2, [r2, #16]
 8002a54:	0852      	lsrs	r2, r2, #1
 8002a56:	3a01      	subs	r2, #1
 8002a58:	0552      	lsls	r2, r2, #21
 8002a5a:	4311      	orrs	r1, r2
 8002a5c:	687a      	ldr	r2, [r7, #4]
 8002a5e:	6852      	ldr	r2, [r2, #4]
 8002a60:	3a01      	subs	r2, #1
 8002a62:	0112      	lsls	r2, r2, #4
 8002a64:	430a      	orrs	r2, r1
 8002a66:	4921      	ldr	r1, [pc, #132]	; (8002aec <RCCEx_PLLSAI1_Config+0x1d8>)
 8002a68:	4313      	orrs	r3, r2
 8002a6a:	610b      	str	r3, [r1, #16]
 8002a6c:	e014      	b.n	8002a98 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002a6e:	4b1f      	ldr	r3, [pc, #124]	; (8002aec <RCCEx_PLLSAI1_Config+0x1d8>)
 8002a70:	691a      	ldr	r2, [r3, #16]
 8002a72:	4b21      	ldr	r3, [pc, #132]	; (8002af8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a74:	4013      	ands	r3, r2
 8002a76:	687a      	ldr	r2, [r7, #4]
 8002a78:	6892      	ldr	r2, [r2, #8]
 8002a7a:	0211      	lsls	r1, r2, #8
 8002a7c:	687a      	ldr	r2, [r7, #4]
 8002a7e:	6952      	ldr	r2, [r2, #20]
 8002a80:	0852      	lsrs	r2, r2, #1
 8002a82:	3a01      	subs	r2, #1
 8002a84:	0652      	lsls	r2, r2, #25
 8002a86:	4311      	orrs	r1, r2
 8002a88:	687a      	ldr	r2, [r7, #4]
 8002a8a:	6852      	ldr	r2, [r2, #4]
 8002a8c:	3a01      	subs	r2, #1
 8002a8e:	0112      	lsls	r2, r2, #4
 8002a90:	430a      	orrs	r2, r1
 8002a92:	4916      	ldr	r1, [pc, #88]	; (8002aec <RCCEx_PLLSAI1_Config+0x1d8>)
 8002a94:	4313      	orrs	r3, r2
 8002a96:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002a98:	4b14      	ldr	r3, [pc, #80]	; (8002aec <RCCEx_PLLSAI1_Config+0x1d8>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	4a13      	ldr	r2, [pc, #76]	; (8002aec <RCCEx_PLLSAI1_Config+0x1d8>)
 8002a9e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002aa2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002aa4:	f7fe f96c 	bl	8000d80 <HAL_GetTick>
 8002aa8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002aaa:	e009      	b.n	8002ac0 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002aac:	f7fe f968 	bl	8000d80 <HAL_GetTick>
 8002ab0:	4602      	mov	r2, r0
 8002ab2:	68bb      	ldr	r3, [r7, #8]
 8002ab4:	1ad3      	subs	r3, r2, r3
 8002ab6:	2b02      	cmp	r3, #2
 8002ab8:	d902      	bls.n	8002ac0 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8002aba:	2303      	movs	r3, #3
 8002abc:	73fb      	strb	r3, [r7, #15]
          break;
 8002abe:	e005      	b.n	8002acc <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002ac0:	4b0a      	ldr	r3, [pc, #40]	; (8002aec <RCCEx_PLLSAI1_Config+0x1d8>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d0ef      	beq.n	8002aac <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8002acc:	7bfb      	ldrb	r3, [r7, #15]
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d106      	bne.n	8002ae0 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002ad2:	4b06      	ldr	r3, [pc, #24]	; (8002aec <RCCEx_PLLSAI1_Config+0x1d8>)
 8002ad4:	691a      	ldr	r2, [r3, #16]
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	699b      	ldr	r3, [r3, #24]
 8002ada:	4904      	ldr	r1, [pc, #16]	; (8002aec <RCCEx_PLLSAI1_Config+0x1d8>)
 8002adc:	4313      	orrs	r3, r2
 8002ade:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002ae0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	3710      	adds	r7, #16
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	bd80      	pop	{r7, pc}
 8002aea:	bf00      	nop
 8002aec:	40021000 	.word	0x40021000
 8002af0:	07ff800f 	.word	0x07ff800f
 8002af4:	ff9f800f 	.word	0xff9f800f
 8002af8:	f9ff800f 	.word	0xf9ff800f

08002afc <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b084      	sub	sp, #16
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
 8002b04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002b06:	2300      	movs	r3, #0
 8002b08:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002b0a:	4b72      	ldr	r3, [pc, #456]	; (8002cd4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002b0c:	68db      	ldr	r3, [r3, #12]
 8002b0e:	f003 0303 	and.w	r3, r3, #3
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d00e      	beq.n	8002b34 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002b16:	4b6f      	ldr	r3, [pc, #444]	; (8002cd4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002b18:	68db      	ldr	r3, [r3, #12]
 8002b1a:	f003 0203 	and.w	r2, r3, #3
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	429a      	cmp	r2, r3
 8002b24:	d103      	bne.n	8002b2e <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
       ||
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d142      	bne.n	8002bb4 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8002b2e:	2301      	movs	r3, #1
 8002b30:	73fb      	strb	r3, [r7, #15]
 8002b32:	e03f      	b.n	8002bb4 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	2b03      	cmp	r3, #3
 8002b3a:	d018      	beq.n	8002b6e <RCCEx_PLLSAI2_Config+0x72>
 8002b3c:	2b03      	cmp	r3, #3
 8002b3e:	d825      	bhi.n	8002b8c <RCCEx_PLLSAI2_Config+0x90>
 8002b40:	2b01      	cmp	r3, #1
 8002b42:	d002      	beq.n	8002b4a <RCCEx_PLLSAI2_Config+0x4e>
 8002b44:	2b02      	cmp	r3, #2
 8002b46:	d009      	beq.n	8002b5c <RCCEx_PLLSAI2_Config+0x60>
 8002b48:	e020      	b.n	8002b8c <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002b4a:	4b62      	ldr	r3, [pc, #392]	; (8002cd4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f003 0302 	and.w	r3, r3, #2
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d11d      	bne.n	8002b92 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8002b56:	2301      	movs	r3, #1
 8002b58:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b5a:	e01a      	b.n	8002b92 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002b5c:	4b5d      	ldr	r3, [pc, #372]	; (8002cd4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d116      	bne.n	8002b96 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8002b68:	2301      	movs	r3, #1
 8002b6a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b6c:	e013      	b.n	8002b96 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002b6e:	4b59      	ldr	r3, [pc, #356]	; (8002cd4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d10f      	bne.n	8002b9a <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002b7a:	4b56      	ldr	r3, [pc, #344]	; (8002cd4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d109      	bne.n	8002b9a <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8002b86:	2301      	movs	r3, #1
 8002b88:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002b8a:	e006      	b.n	8002b9a <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8002b8c:	2301      	movs	r3, #1
 8002b8e:	73fb      	strb	r3, [r7, #15]
      break;
 8002b90:	e004      	b.n	8002b9c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8002b92:	bf00      	nop
 8002b94:	e002      	b.n	8002b9c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8002b96:	bf00      	nop
 8002b98:	e000      	b.n	8002b9c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8002b9a:	bf00      	nop
    }

    if(status == HAL_OK)
 8002b9c:	7bfb      	ldrb	r3, [r7, #15]
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d108      	bne.n	8002bb4 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8002ba2:	4b4c      	ldr	r3, [pc, #304]	; (8002cd4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002ba4:	68db      	ldr	r3, [r3, #12]
 8002ba6:	f023 0203 	bic.w	r2, r3, #3
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	4949      	ldr	r1, [pc, #292]	; (8002cd4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002bb0:	4313      	orrs	r3, r2
 8002bb2:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8002bb4:	7bfb      	ldrb	r3, [r7, #15]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	f040 8086 	bne.w	8002cc8 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002bbc:	4b45      	ldr	r3, [pc, #276]	; (8002cd4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	4a44      	ldr	r2, [pc, #272]	; (8002cd4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002bc2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002bc6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002bc8:	f7fe f8da 	bl	8000d80 <HAL_GetTick>
 8002bcc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002bce:	e009      	b.n	8002be4 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002bd0:	f7fe f8d6 	bl	8000d80 <HAL_GetTick>
 8002bd4:	4602      	mov	r2, r0
 8002bd6:	68bb      	ldr	r3, [r7, #8]
 8002bd8:	1ad3      	subs	r3, r2, r3
 8002bda:	2b02      	cmp	r3, #2
 8002bdc:	d902      	bls.n	8002be4 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8002bde:	2303      	movs	r3, #3
 8002be0:	73fb      	strb	r3, [r7, #15]
        break;
 8002be2:	e005      	b.n	8002bf0 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002be4:	4b3b      	ldr	r3, [pc, #236]	; (8002cd4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d1ef      	bne.n	8002bd0 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8002bf0:	7bfb      	ldrb	r3, [r7, #15]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d168      	bne.n	8002cc8 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d113      	bne.n	8002c24 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002bfc:	4b35      	ldr	r3, [pc, #212]	; (8002cd4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002bfe:	695a      	ldr	r2, [r3, #20]
 8002c00:	4b35      	ldr	r3, [pc, #212]	; (8002cd8 <RCCEx_PLLSAI2_Config+0x1dc>)
 8002c02:	4013      	ands	r3, r2
 8002c04:	687a      	ldr	r2, [r7, #4]
 8002c06:	6892      	ldr	r2, [r2, #8]
 8002c08:	0211      	lsls	r1, r2, #8
 8002c0a:	687a      	ldr	r2, [r7, #4]
 8002c0c:	68d2      	ldr	r2, [r2, #12]
 8002c0e:	06d2      	lsls	r2, r2, #27
 8002c10:	4311      	orrs	r1, r2
 8002c12:	687a      	ldr	r2, [r7, #4]
 8002c14:	6852      	ldr	r2, [r2, #4]
 8002c16:	3a01      	subs	r2, #1
 8002c18:	0112      	lsls	r2, r2, #4
 8002c1a:	430a      	orrs	r2, r1
 8002c1c:	492d      	ldr	r1, [pc, #180]	; (8002cd4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002c1e:	4313      	orrs	r3, r2
 8002c20:	614b      	str	r3, [r1, #20]
 8002c22:	e02d      	b.n	8002c80 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	2b01      	cmp	r3, #1
 8002c28:	d115      	bne.n	8002c56 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002c2a:	4b2a      	ldr	r3, [pc, #168]	; (8002cd4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002c2c:	695a      	ldr	r2, [r3, #20]
 8002c2e:	4b2b      	ldr	r3, [pc, #172]	; (8002cdc <RCCEx_PLLSAI2_Config+0x1e0>)
 8002c30:	4013      	ands	r3, r2
 8002c32:	687a      	ldr	r2, [r7, #4]
 8002c34:	6892      	ldr	r2, [r2, #8]
 8002c36:	0211      	lsls	r1, r2, #8
 8002c38:	687a      	ldr	r2, [r7, #4]
 8002c3a:	6912      	ldr	r2, [r2, #16]
 8002c3c:	0852      	lsrs	r2, r2, #1
 8002c3e:	3a01      	subs	r2, #1
 8002c40:	0552      	lsls	r2, r2, #21
 8002c42:	4311      	orrs	r1, r2
 8002c44:	687a      	ldr	r2, [r7, #4]
 8002c46:	6852      	ldr	r2, [r2, #4]
 8002c48:	3a01      	subs	r2, #1
 8002c4a:	0112      	lsls	r2, r2, #4
 8002c4c:	430a      	orrs	r2, r1
 8002c4e:	4921      	ldr	r1, [pc, #132]	; (8002cd4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002c50:	4313      	orrs	r3, r2
 8002c52:	614b      	str	r3, [r1, #20]
 8002c54:	e014      	b.n	8002c80 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002c56:	4b1f      	ldr	r3, [pc, #124]	; (8002cd4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002c58:	695a      	ldr	r2, [r3, #20]
 8002c5a:	4b21      	ldr	r3, [pc, #132]	; (8002ce0 <RCCEx_PLLSAI2_Config+0x1e4>)
 8002c5c:	4013      	ands	r3, r2
 8002c5e:	687a      	ldr	r2, [r7, #4]
 8002c60:	6892      	ldr	r2, [r2, #8]
 8002c62:	0211      	lsls	r1, r2, #8
 8002c64:	687a      	ldr	r2, [r7, #4]
 8002c66:	6952      	ldr	r2, [r2, #20]
 8002c68:	0852      	lsrs	r2, r2, #1
 8002c6a:	3a01      	subs	r2, #1
 8002c6c:	0652      	lsls	r2, r2, #25
 8002c6e:	4311      	orrs	r1, r2
 8002c70:	687a      	ldr	r2, [r7, #4]
 8002c72:	6852      	ldr	r2, [r2, #4]
 8002c74:	3a01      	subs	r2, #1
 8002c76:	0112      	lsls	r2, r2, #4
 8002c78:	430a      	orrs	r2, r1
 8002c7a:	4916      	ldr	r1, [pc, #88]	; (8002cd4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002c7c:	4313      	orrs	r3, r2
 8002c7e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002c80:	4b14      	ldr	r3, [pc, #80]	; (8002cd4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	4a13      	ldr	r2, [pc, #76]	; (8002cd4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002c86:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c8a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c8c:	f7fe f878 	bl	8000d80 <HAL_GetTick>
 8002c90:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002c92:	e009      	b.n	8002ca8 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002c94:	f7fe f874 	bl	8000d80 <HAL_GetTick>
 8002c98:	4602      	mov	r2, r0
 8002c9a:	68bb      	ldr	r3, [r7, #8]
 8002c9c:	1ad3      	subs	r3, r2, r3
 8002c9e:	2b02      	cmp	r3, #2
 8002ca0:	d902      	bls.n	8002ca8 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8002ca2:	2303      	movs	r3, #3
 8002ca4:	73fb      	strb	r3, [r7, #15]
          break;
 8002ca6:	e005      	b.n	8002cb4 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002ca8:	4b0a      	ldr	r3, [pc, #40]	; (8002cd4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d0ef      	beq.n	8002c94 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8002cb4:	7bfb      	ldrb	r3, [r7, #15]
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d106      	bne.n	8002cc8 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002cba:	4b06      	ldr	r3, [pc, #24]	; (8002cd4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002cbc:	695a      	ldr	r2, [r3, #20]
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	699b      	ldr	r3, [r3, #24]
 8002cc2:	4904      	ldr	r1, [pc, #16]	; (8002cd4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002cc4:	4313      	orrs	r3, r2
 8002cc6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002cc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cca:	4618      	mov	r0, r3
 8002ccc:	3710      	adds	r7, #16
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	bd80      	pop	{r7, pc}
 8002cd2:	bf00      	nop
 8002cd4:	40021000 	.word	0x40021000
 8002cd8:	07ff800f 	.word	0x07ff800f
 8002cdc:	ff9f800f 	.word	0xff9f800f
 8002ce0:	f9ff800f 	.word	0xf9ff800f

08002ce4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b082      	sub	sp, #8
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d101      	bne.n	8002cf6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002cf2:	2301      	movs	r3, #1
 8002cf4:	e049      	b.n	8002d8a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002cfc:	b2db      	uxtb	r3, r3
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d106      	bne.n	8002d10 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	2200      	movs	r2, #0
 8002d06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002d0a:	6878      	ldr	r0, [r7, #4]
 8002d0c:	f000 f841 	bl	8002d92 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2202      	movs	r2, #2
 8002d14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681a      	ldr	r2, [r3, #0]
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	3304      	adds	r3, #4
 8002d20:	4619      	mov	r1, r3
 8002d22:	4610      	mov	r0, r2
 8002d24:	f000 f9da 	bl	80030dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2201      	movs	r2, #1
 8002d2c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2201      	movs	r2, #1
 8002d34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2201      	movs	r2, #1
 8002d3c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2201      	movs	r2, #1
 8002d44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2201      	movs	r2, #1
 8002d4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2201      	movs	r2, #1
 8002d54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2201      	movs	r2, #1
 8002d5c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2201      	movs	r2, #1
 8002d64:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2201      	movs	r2, #1
 8002d6c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2201      	movs	r2, #1
 8002d74:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2201      	movs	r2, #1
 8002d7c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2201      	movs	r2, #1
 8002d84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002d88:	2300      	movs	r3, #0
}
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	3708      	adds	r7, #8
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	bd80      	pop	{r7, pc}

08002d92 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002d92:	b480      	push	{r7}
 8002d94:	b083      	sub	sp, #12
 8002d96:	af00      	add	r7, sp, #0
 8002d98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002d9a:	bf00      	nop
 8002d9c:	370c      	adds	r7, #12
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da4:	4770      	bx	lr
	...

08002da8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002da8:	b480      	push	{r7}
 8002daa:	b085      	sub	sp, #20
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002db6:	b2db      	uxtb	r3, r3
 8002db8:	2b01      	cmp	r3, #1
 8002dba:	d001      	beq.n	8002dc0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002dbc:	2301      	movs	r3, #1
 8002dbe:	e04f      	b.n	8002e60 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2202      	movs	r2, #2
 8002dc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	68da      	ldr	r2, [r3, #12]
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f042 0201 	orr.w	r2, r2, #1
 8002dd6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	4a23      	ldr	r2, [pc, #140]	; (8002e6c <HAL_TIM_Base_Start_IT+0xc4>)
 8002dde:	4293      	cmp	r3, r2
 8002de0:	d01d      	beq.n	8002e1e <HAL_TIM_Base_Start_IT+0x76>
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002dea:	d018      	beq.n	8002e1e <HAL_TIM_Base_Start_IT+0x76>
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	4a1f      	ldr	r2, [pc, #124]	; (8002e70 <HAL_TIM_Base_Start_IT+0xc8>)
 8002df2:	4293      	cmp	r3, r2
 8002df4:	d013      	beq.n	8002e1e <HAL_TIM_Base_Start_IT+0x76>
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	4a1e      	ldr	r2, [pc, #120]	; (8002e74 <HAL_TIM_Base_Start_IT+0xcc>)
 8002dfc:	4293      	cmp	r3, r2
 8002dfe:	d00e      	beq.n	8002e1e <HAL_TIM_Base_Start_IT+0x76>
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	4a1c      	ldr	r2, [pc, #112]	; (8002e78 <HAL_TIM_Base_Start_IT+0xd0>)
 8002e06:	4293      	cmp	r3, r2
 8002e08:	d009      	beq.n	8002e1e <HAL_TIM_Base_Start_IT+0x76>
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	4a1b      	ldr	r2, [pc, #108]	; (8002e7c <HAL_TIM_Base_Start_IT+0xd4>)
 8002e10:	4293      	cmp	r3, r2
 8002e12:	d004      	beq.n	8002e1e <HAL_TIM_Base_Start_IT+0x76>
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	4a19      	ldr	r2, [pc, #100]	; (8002e80 <HAL_TIM_Base_Start_IT+0xd8>)
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	d115      	bne.n	8002e4a <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	689a      	ldr	r2, [r3, #8]
 8002e24:	4b17      	ldr	r3, [pc, #92]	; (8002e84 <HAL_TIM_Base_Start_IT+0xdc>)
 8002e26:	4013      	ands	r3, r2
 8002e28:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	2b06      	cmp	r3, #6
 8002e2e:	d015      	beq.n	8002e5c <HAL_TIM_Base_Start_IT+0xb4>
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e36:	d011      	beq.n	8002e5c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	681a      	ldr	r2, [r3, #0]
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f042 0201 	orr.w	r2, r2, #1
 8002e46:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e48:	e008      	b.n	8002e5c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	681a      	ldr	r2, [r3, #0]
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f042 0201 	orr.w	r2, r2, #1
 8002e58:	601a      	str	r2, [r3, #0]
 8002e5a:	e000      	b.n	8002e5e <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e5c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002e5e:	2300      	movs	r3, #0
}
 8002e60:	4618      	mov	r0, r3
 8002e62:	3714      	adds	r7, #20
 8002e64:	46bd      	mov	sp, r7
 8002e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6a:	4770      	bx	lr
 8002e6c:	40012c00 	.word	0x40012c00
 8002e70:	40000400 	.word	0x40000400
 8002e74:	40000800 	.word	0x40000800
 8002e78:	40000c00 	.word	0x40000c00
 8002e7c:	40013400 	.word	0x40013400
 8002e80:	40014000 	.word	0x40014000
 8002e84:	00010007 	.word	0x00010007

08002e88 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b084      	sub	sp, #16
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	68db      	ldr	r3, [r3, #12]
 8002e96:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	691b      	ldr	r3, [r3, #16]
 8002e9e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002ea0:	68bb      	ldr	r3, [r7, #8]
 8002ea2:	f003 0302 	and.w	r3, r3, #2
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d020      	beq.n	8002eec <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	f003 0302 	and.w	r3, r3, #2
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d01b      	beq.n	8002eec <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f06f 0202 	mvn.w	r2, #2
 8002ebc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	2201      	movs	r2, #1
 8002ec2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	699b      	ldr	r3, [r3, #24]
 8002eca:	f003 0303 	and.w	r3, r3, #3
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d003      	beq.n	8002eda <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002ed2:	6878      	ldr	r0, [r7, #4]
 8002ed4:	f000 f8e4 	bl	80030a0 <HAL_TIM_IC_CaptureCallback>
 8002ed8:	e005      	b.n	8002ee6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002eda:	6878      	ldr	r0, [r7, #4]
 8002edc:	f000 f8d6 	bl	800308c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ee0:	6878      	ldr	r0, [r7, #4]
 8002ee2:	f000 f8e7 	bl	80030b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	2200      	movs	r2, #0
 8002eea:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002eec:	68bb      	ldr	r3, [r7, #8]
 8002eee:	f003 0304 	and.w	r3, r3, #4
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d020      	beq.n	8002f38 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	f003 0304 	and.w	r3, r3, #4
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d01b      	beq.n	8002f38 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f06f 0204 	mvn.w	r2, #4
 8002f08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	2202      	movs	r2, #2
 8002f0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	699b      	ldr	r3, [r3, #24]
 8002f16:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d003      	beq.n	8002f26 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f1e:	6878      	ldr	r0, [r7, #4]
 8002f20:	f000 f8be 	bl	80030a0 <HAL_TIM_IC_CaptureCallback>
 8002f24:	e005      	b.n	8002f32 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f26:	6878      	ldr	r0, [r7, #4]
 8002f28:	f000 f8b0 	bl	800308c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f2c:	6878      	ldr	r0, [r7, #4]
 8002f2e:	f000 f8c1 	bl	80030b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	2200      	movs	r2, #0
 8002f36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002f38:	68bb      	ldr	r3, [r7, #8]
 8002f3a:	f003 0308 	and.w	r3, r3, #8
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d020      	beq.n	8002f84 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	f003 0308 	and.w	r3, r3, #8
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d01b      	beq.n	8002f84 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f06f 0208 	mvn.w	r2, #8
 8002f54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	2204      	movs	r2, #4
 8002f5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	69db      	ldr	r3, [r3, #28]
 8002f62:	f003 0303 	and.w	r3, r3, #3
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d003      	beq.n	8002f72 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f6a:	6878      	ldr	r0, [r7, #4]
 8002f6c:	f000 f898 	bl	80030a0 <HAL_TIM_IC_CaptureCallback>
 8002f70:	e005      	b.n	8002f7e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f72:	6878      	ldr	r0, [r7, #4]
 8002f74:	f000 f88a 	bl	800308c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f78:	6878      	ldr	r0, [r7, #4]
 8002f7a:	f000 f89b 	bl	80030b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	2200      	movs	r2, #0
 8002f82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002f84:	68bb      	ldr	r3, [r7, #8]
 8002f86:	f003 0310 	and.w	r3, r3, #16
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d020      	beq.n	8002fd0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	f003 0310 	and.w	r3, r3, #16
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d01b      	beq.n	8002fd0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f06f 0210 	mvn.w	r2, #16
 8002fa0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	2208      	movs	r2, #8
 8002fa6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	69db      	ldr	r3, [r3, #28]
 8002fae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d003      	beq.n	8002fbe <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002fb6:	6878      	ldr	r0, [r7, #4]
 8002fb8:	f000 f872 	bl	80030a0 <HAL_TIM_IC_CaptureCallback>
 8002fbc:	e005      	b.n	8002fca <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002fbe:	6878      	ldr	r0, [r7, #4]
 8002fc0:	f000 f864 	bl	800308c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fc4:	6878      	ldr	r0, [r7, #4]
 8002fc6:	f000 f875 	bl	80030b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	2200      	movs	r2, #0
 8002fce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002fd0:	68bb      	ldr	r3, [r7, #8]
 8002fd2:	f003 0301 	and.w	r3, r3, #1
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d00c      	beq.n	8002ff4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	f003 0301 	and.w	r3, r3, #1
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d007      	beq.n	8002ff4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f06f 0201 	mvn.w	r2, #1
 8002fec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002fee:	6878      	ldr	r0, [r7, #4]
 8002ff0:	f7fd fd34 	bl	8000a5c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002ff4:	68bb      	ldr	r3, [r7, #8]
 8002ff6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d00c      	beq.n	8003018 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003004:	2b00      	cmp	r3, #0
 8003006:	d007      	beq.n	8003018 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003010:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003012:	6878      	ldr	r0, [r7, #4]
 8003014:	f000 f906 	bl	8003224 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8003018:	68bb      	ldr	r3, [r7, #8]
 800301a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800301e:	2b00      	cmp	r3, #0
 8003020:	d00c      	beq.n	800303c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003028:	2b00      	cmp	r3, #0
 800302a:	d007      	beq.n	800303c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003034:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003036:	6878      	ldr	r0, [r7, #4]
 8003038:	f000 f8fe 	bl	8003238 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800303c:	68bb      	ldr	r3, [r7, #8]
 800303e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003042:	2b00      	cmp	r3, #0
 8003044:	d00c      	beq.n	8003060 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800304c:	2b00      	cmp	r3, #0
 800304e:	d007      	beq.n	8003060 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003058:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800305a:	6878      	ldr	r0, [r7, #4]
 800305c:	f000 f834 	bl	80030c8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003060:	68bb      	ldr	r3, [r7, #8]
 8003062:	f003 0320 	and.w	r3, r3, #32
 8003066:	2b00      	cmp	r3, #0
 8003068:	d00c      	beq.n	8003084 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	f003 0320 	and.w	r3, r3, #32
 8003070:	2b00      	cmp	r3, #0
 8003072:	d007      	beq.n	8003084 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f06f 0220 	mvn.w	r2, #32
 800307c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800307e:	6878      	ldr	r0, [r7, #4]
 8003080:	f000 f8c6 	bl	8003210 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003084:	bf00      	nop
 8003086:	3710      	adds	r7, #16
 8003088:	46bd      	mov	sp, r7
 800308a:	bd80      	pop	{r7, pc}

0800308c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800308c:	b480      	push	{r7}
 800308e:	b083      	sub	sp, #12
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003094:	bf00      	nop
 8003096:	370c      	adds	r7, #12
 8003098:	46bd      	mov	sp, r7
 800309a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309e:	4770      	bx	lr

080030a0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80030a0:	b480      	push	{r7}
 80030a2:	b083      	sub	sp, #12
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80030a8:	bf00      	nop
 80030aa:	370c      	adds	r7, #12
 80030ac:	46bd      	mov	sp, r7
 80030ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b2:	4770      	bx	lr

080030b4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80030b4:	b480      	push	{r7}
 80030b6:	b083      	sub	sp, #12
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80030bc:	bf00      	nop
 80030be:	370c      	adds	r7, #12
 80030c0:	46bd      	mov	sp, r7
 80030c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c6:	4770      	bx	lr

080030c8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80030c8:	b480      	push	{r7}
 80030ca:	b083      	sub	sp, #12
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80030d0:	bf00      	nop
 80030d2:	370c      	adds	r7, #12
 80030d4:	46bd      	mov	sp, r7
 80030d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030da:	4770      	bx	lr

080030dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80030dc:	b480      	push	{r7}
 80030de:	b085      	sub	sp, #20
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
 80030e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	4a40      	ldr	r2, [pc, #256]	; (80031f0 <TIM_Base_SetConfig+0x114>)
 80030f0:	4293      	cmp	r3, r2
 80030f2:	d013      	beq.n	800311c <TIM_Base_SetConfig+0x40>
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030fa:	d00f      	beq.n	800311c <TIM_Base_SetConfig+0x40>
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	4a3d      	ldr	r2, [pc, #244]	; (80031f4 <TIM_Base_SetConfig+0x118>)
 8003100:	4293      	cmp	r3, r2
 8003102:	d00b      	beq.n	800311c <TIM_Base_SetConfig+0x40>
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	4a3c      	ldr	r2, [pc, #240]	; (80031f8 <TIM_Base_SetConfig+0x11c>)
 8003108:	4293      	cmp	r3, r2
 800310a:	d007      	beq.n	800311c <TIM_Base_SetConfig+0x40>
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	4a3b      	ldr	r2, [pc, #236]	; (80031fc <TIM_Base_SetConfig+0x120>)
 8003110:	4293      	cmp	r3, r2
 8003112:	d003      	beq.n	800311c <TIM_Base_SetConfig+0x40>
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	4a3a      	ldr	r2, [pc, #232]	; (8003200 <TIM_Base_SetConfig+0x124>)
 8003118:	4293      	cmp	r3, r2
 800311a:	d108      	bne.n	800312e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003122:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	685b      	ldr	r3, [r3, #4]
 8003128:	68fa      	ldr	r2, [r7, #12]
 800312a:	4313      	orrs	r3, r2
 800312c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	4a2f      	ldr	r2, [pc, #188]	; (80031f0 <TIM_Base_SetConfig+0x114>)
 8003132:	4293      	cmp	r3, r2
 8003134:	d01f      	beq.n	8003176 <TIM_Base_SetConfig+0x9a>
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800313c:	d01b      	beq.n	8003176 <TIM_Base_SetConfig+0x9a>
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	4a2c      	ldr	r2, [pc, #176]	; (80031f4 <TIM_Base_SetConfig+0x118>)
 8003142:	4293      	cmp	r3, r2
 8003144:	d017      	beq.n	8003176 <TIM_Base_SetConfig+0x9a>
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	4a2b      	ldr	r2, [pc, #172]	; (80031f8 <TIM_Base_SetConfig+0x11c>)
 800314a:	4293      	cmp	r3, r2
 800314c:	d013      	beq.n	8003176 <TIM_Base_SetConfig+0x9a>
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	4a2a      	ldr	r2, [pc, #168]	; (80031fc <TIM_Base_SetConfig+0x120>)
 8003152:	4293      	cmp	r3, r2
 8003154:	d00f      	beq.n	8003176 <TIM_Base_SetConfig+0x9a>
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	4a29      	ldr	r2, [pc, #164]	; (8003200 <TIM_Base_SetConfig+0x124>)
 800315a:	4293      	cmp	r3, r2
 800315c:	d00b      	beq.n	8003176 <TIM_Base_SetConfig+0x9a>
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	4a28      	ldr	r2, [pc, #160]	; (8003204 <TIM_Base_SetConfig+0x128>)
 8003162:	4293      	cmp	r3, r2
 8003164:	d007      	beq.n	8003176 <TIM_Base_SetConfig+0x9a>
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	4a27      	ldr	r2, [pc, #156]	; (8003208 <TIM_Base_SetConfig+0x12c>)
 800316a:	4293      	cmp	r3, r2
 800316c:	d003      	beq.n	8003176 <TIM_Base_SetConfig+0x9a>
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	4a26      	ldr	r2, [pc, #152]	; (800320c <TIM_Base_SetConfig+0x130>)
 8003172:	4293      	cmp	r3, r2
 8003174:	d108      	bne.n	8003188 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800317c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800317e:	683b      	ldr	r3, [r7, #0]
 8003180:	68db      	ldr	r3, [r3, #12]
 8003182:	68fa      	ldr	r2, [r7, #12]
 8003184:	4313      	orrs	r3, r2
 8003186:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	695b      	ldr	r3, [r3, #20]
 8003192:	4313      	orrs	r3, r2
 8003194:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	68fa      	ldr	r2, [r7, #12]
 800319a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	689a      	ldr	r2, [r3, #8]
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	681a      	ldr	r2, [r3, #0]
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	4a10      	ldr	r2, [pc, #64]	; (80031f0 <TIM_Base_SetConfig+0x114>)
 80031b0:	4293      	cmp	r3, r2
 80031b2:	d00f      	beq.n	80031d4 <TIM_Base_SetConfig+0xf8>
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	4a12      	ldr	r2, [pc, #72]	; (8003200 <TIM_Base_SetConfig+0x124>)
 80031b8:	4293      	cmp	r3, r2
 80031ba:	d00b      	beq.n	80031d4 <TIM_Base_SetConfig+0xf8>
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	4a11      	ldr	r2, [pc, #68]	; (8003204 <TIM_Base_SetConfig+0x128>)
 80031c0:	4293      	cmp	r3, r2
 80031c2:	d007      	beq.n	80031d4 <TIM_Base_SetConfig+0xf8>
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	4a10      	ldr	r2, [pc, #64]	; (8003208 <TIM_Base_SetConfig+0x12c>)
 80031c8:	4293      	cmp	r3, r2
 80031ca:	d003      	beq.n	80031d4 <TIM_Base_SetConfig+0xf8>
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	4a0f      	ldr	r2, [pc, #60]	; (800320c <TIM_Base_SetConfig+0x130>)
 80031d0:	4293      	cmp	r3, r2
 80031d2:	d103      	bne.n	80031dc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	691a      	ldr	r2, [r3, #16]
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2201      	movs	r2, #1
 80031e0:	615a      	str	r2, [r3, #20]
}
 80031e2:	bf00      	nop
 80031e4:	3714      	adds	r7, #20
 80031e6:	46bd      	mov	sp, r7
 80031e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ec:	4770      	bx	lr
 80031ee:	bf00      	nop
 80031f0:	40012c00 	.word	0x40012c00
 80031f4:	40000400 	.word	0x40000400
 80031f8:	40000800 	.word	0x40000800
 80031fc:	40000c00 	.word	0x40000c00
 8003200:	40013400 	.word	0x40013400
 8003204:	40014000 	.word	0x40014000
 8003208:	40014400 	.word	0x40014400
 800320c:	40014800 	.word	0x40014800

08003210 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003210:	b480      	push	{r7}
 8003212:	b083      	sub	sp, #12
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003218:	bf00      	nop
 800321a:	370c      	adds	r7, #12
 800321c:	46bd      	mov	sp, r7
 800321e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003222:	4770      	bx	lr

08003224 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003224:	b480      	push	{r7}
 8003226:	b083      	sub	sp, #12
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800322c:	bf00      	nop
 800322e:	370c      	adds	r7, #12
 8003230:	46bd      	mov	sp, r7
 8003232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003236:	4770      	bx	lr

08003238 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003238:	b480      	push	{r7}
 800323a:	b083      	sub	sp, #12
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003240:	bf00      	nop
 8003242:	370c      	adds	r7, #12
 8003244:	46bd      	mov	sp, r7
 8003246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324a:	4770      	bx	lr

0800324c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	b082      	sub	sp, #8
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2b00      	cmp	r3, #0
 8003258:	d101      	bne.n	800325e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800325a:	2301      	movs	r3, #1
 800325c:	e042      	b.n	80032e4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003264:	2b00      	cmp	r3, #0
 8003266:	d106      	bne.n	8003276 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2200      	movs	r2, #0
 800326c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003270:	6878      	ldr	r0, [r7, #4]
 8003272:	f7fd fc2f 	bl	8000ad4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	2224      	movs	r2, #36	; 0x24
 800327a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	681a      	ldr	r2, [r3, #0]
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f022 0201 	bic.w	r2, r2, #1
 800328c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003292:	2b00      	cmp	r3, #0
 8003294:	d002      	beq.n	800329c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8003296:	6878      	ldr	r0, [r7, #4]
 8003298:	f000 fbb4 	bl	8003a04 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800329c:	6878      	ldr	r0, [r7, #4]
 800329e:	f000 f8b5 	bl	800340c <UART_SetConfig>
 80032a2:	4603      	mov	r3, r0
 80032a4:	2b01      	cmp	r3, #1
 80032a6:	d101      	bne.n	80032ac <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80032a8:	2301      	movs	r3, #1
 80032aa:	e01b      	b.n	80032e4 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	685a      	ldr	r2, [r3, #4]
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80032ba:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	689a      	ldr	r2, [r3, #8]
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80032ca:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	681a      	ldr	r2, [r3, #0]
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f042 0201 	orr.w	r2, r2, #1
 80032da:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80032dc:	6878      	ldr	r0, [r7, #4]
 80032de:	f000 fc33 	bl	8003b48 <UART_CheckIdleState>
 80032e2:	4603      	mov	r3, r0
}
 80032e4:	4618      	mov	r0, r3
 80032e6:	3708      	adds	r7, #8
 80032e8:	46bd      	mov	sp, r7
 80032ea:	bd80      	pop	{r7, pc}

080032ec <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b08a      	sub	sp, #40	; 0x28
 80032f0:	af02      	add	r7, sp, #8
 80032f2:	60f8      	str	r0, [r7, #12]
 80032f4:	60b9      	str	r1, [r7, #8]
 80032f6:	603b      	str	r3, [r7, #0]
 80032f8:	4613      	mov	r3, r2
 80032fa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003302:	2b20      	cmp	r3, #32
 8003304:	d17c      	bne.n	8003400 <HAL_UART_Transmit+0x114>
  {
    if ((pData == NULL) || (Size == 0U))
 8003306:	68bb      	ldr	r3, [r7, #8]
 8003308:	2b00      	cmp	r3, #0
 800330a:	d002      	beq.n	8003312 <HAL_UART_Transmit+0x26>
 800330c:	88fb      	ldrh	r3, [r7, #6]
 800330e:	2b00      	cmp	r3, #0
 8003310:	d101      	bne.n	8003316 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003312:	2301      	movs	r3, #1
 8003314:	e075      	b.n	8003402 <HAL_UART_Transmit+0x116>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	2200      	movs	r2, #0
 800331a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	2221      	movs	r2, #33	; 0x21
 8003322:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003326:	f7fd fd2b 	bl	8000d80 <HAL_GetTick>
 800332a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	88fa      	ldrh	r2, [r7, #6]
 8003330:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	88fa      	ldrh	r2, [r7, #6]
 8003338:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	689b      	ldr	r3, [r3, #8]
 8003340:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003344:	d108      	bne.n	8003358 <HAL_UART_Transmit+0x6c>
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	691b      	ldr	r3, [r3, #16]
 800334a:	2b00      	cmp	r3, #0
 800334c:	d104      	bne.n	8003358 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800334e:	2300      	movs	r3, #0
 8003350:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003352:	68bb      	ldr	r3, [r7, #8]
 8003354:	61bb      	str	r3, [r7, #24]
 8003356:	e003      	b.n	8003360 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003358:	68bb      	ldr	r3, [r7, #8]
 800335a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800335c:	2300      	movs	r3, #0
 800335e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003360:	e031      	b.n	80033c6 <HAL_UART_Transmit+0xda>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	9300      	str	r3, [sp, #0]
 8003366:	697b      	ldr	r3, [r7, #20]
 8003368:	2200      	movs	r2, #0
 800336a:	2180      	movs	r1, #128	; 0x80
 800336c:	68f8      	ldr	r0, [r7, #12]
 800336e:	f000 fc95 	bl	8003c9c <UART_WaitOnFlagUntilTimeout>
 8003372:	4603      	mov	r3, r0
 8003374:	2b00      	cmp	r3, #0
 8003376:	d005      	beq.n	8003384 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	2220      	movs	r2, #32
 800337c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8003380:	2303      	movs	r3, #3
 8003382:	e03e      	b.n	8003402 <HAL_UART_Transmit+0x116>
      }
      if (pdata8bits == NULL)
 8003384:	69fb      	ldr	r3, [r7, #28]
 8003386:	2b00      	cmp	r3, #0
 8003388:	d10b      	bne.n	80033a2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800338a:	69bb      	ldr	r3, [r7, #24]
 800338c:	881a      	ldrh	r2, [r3, #0]
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003396:	b292      	uxth	r2, r2
 8003398:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800339a:	69bb      	ldr	r3, [r7, #24]
 800339c:	3302      	adds	r3, #2
 800339e:	61bb      	str	r3, [r7, #24]
 80033a0:	e008      	b.n	80033b4 <HAL_UART_Transmit+0xc8>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80033a2:	69fb      	ldr	r3, [r7, #28]
 80033a4:	781a      	ldrb	r2, [r3, #0]
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	b292      	uxth	r2, r2
 80033ac:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80033ae:	69fb      	ldr	r3, [r7, #28]
 80033b0:	3301      	adds	r3, #1
 80033b2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80033ba:	b29b      	uxth	r3, r3
 80033bc:	3b01      	subs	r3, #1
 80033be:	b29a      	uxth	r2, r3
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80033cc:	b29b      	uxth	r3, r3
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d1c7      	bne.n	8003362 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	9300      	str	r3, [sp, #0]
 80033d6:	697b      	ldr	r3, [r7, #20]
 80033d8:	2200      	movs	r2, #0
 80033da:	2140      	movs	r1, #64	; 0x40
 80033dc:	68f8      	ldr	r0, [r7, #12]
 80033de:	f000 fc5d 	bl	8003c9c <UART_WaitOnFlagUntilTimeout>
 80033e2:	4603      	mov	r3, r0
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d005      	beq.n	80033f4 <HAL_UART_Transmit+0x108>
    {
      huart->gState = HAL_UART_STATE_READY;
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	2220      	movs	r2, #32
 80033ec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 80033f0:	2303      	movs	r3, #3
 80033f2:	e006      	b.n	8003402 <HAL_UART_Transmit+0x116>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	2220      	movs	r2, #32
 80033f8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 80033fc:	2300      	movs	r3, #0
 80033fe:	e000      	b.n	8003402 <HAL_UART_Transmit+0x116>
  }
  else
  {
    return HAL_BUSY;
 8003400:	2302      	movs	r3, #2
  }
}
 8003402:	4618      	mov	r0, r3
 8003404:	3720      	adds	r7, #32
 8003406:	46bd      	mov	sp, r7
 8003408:	bd80      	pop	{r7, pc}
	...

0800340c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800340c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003410:	b08c      	sub	sp, #48	; 0x30
 8003412:	af00      	add	r7, sp, #0
 8003414:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003416:	2300      	movs	r3, #0
 8003418:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800341c:	697b      	ldr	r3, [r7, #20]
 800341e:	689a      	ldr	r2, [r3, #8]
 8003420:	697b      	ldr	r3, [r7, #20]
 8003422:	691b      	ldr	r3, [r3, #16]
 8003424:	431a      	orrs	r2, r3
 8003426:	697b      	ldr	r3, [r7, #20]
 8003428:	695b      	ldr	r3, [r3, #20]
 800342a:	431a      	orrs	r2, r3
 800342c:	697b      	ldr	r3, [r7, #20]
 800342e:	69db      	ldr	r3, [r3, #28]
 8003430:	4313      	orrs	r3, r2
 8003432:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003434:	697b      	ldr	r3, [r7, #20]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	681a      	ldr	r2, [r3, #0]
 800343a:	4baa      	ldr	r3, [pc, #680]	; (80036e4 <UART_SetConfig+0x2d8>)
 800343c:	4013      	ands	r3, r2
 800343e:	697a      	ldr	r2, [r7, #20]
 8003440:	6812      	ldr	r2, [r2, #0]
 8003442:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003444:	430b      	orrs	r3, r1
 8003446:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003448:	697b      	ldr	r3, [r7, #20]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	685b      	ldr	r3, [r3, #4]
 800344e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003452:	697b      	ldr	r3, [r7, #20]
 8003454:	68da      	ldr	r2, [r3, #12]
 8003456:	697b      	ldr	r3, [r7, #20]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	430a      	orrs	r2, r1
 800345c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800345e:	697b      	ldr	r3, [r7, #20]
 8003460:	699b      	ldr	r3, [r3, #24]
 8003462:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003464:	697b      	ldr	r3, [r7, #20]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	4a9f      	ldr	r2, [pc, #636]	; (80036e8 <UART_SetConfig+0x2dc>)
 800346a:	4293      	cmp	r3, r2
 800346c:	d004      	beq.n	8003478 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800346e:	697b      	ldr	r3, [r7, #20]
 8003470:	6a1b      	ldr	r3, [r3, #32]
 8003472:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003474:	4313      	orrs	r3, r2
 8003476:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003478:	697b      	ldr	r3, [r7, #20]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	689b      	ldr	r3, [r3, #8]
 800347e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8003482:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8003486:	697a      	ldr	r2, [r7, #20]
 8003488:	6812      	ldr	r2, [r2, #0]
 800348a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800348c:	430b      	orrs	r3, r1
 800348e:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003490:	697b      	ldr	r3, [r7, #20]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003496:	f023 010f 	bic.w	r1, r3, #15
 800349a:	697b      	ldr	r3, [r7, #20]
 800349c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800349e:	697b      	ldr	r3, [r7, #20]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	430a      	orrs	r2, r1
 80034a4:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80034a6:	697b      	ldr	r3, [r7, #20]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	4a90      	ldr	r2, [pc, #576]	; (80036ec <UART_SetConfig+0x2e0>)
 80034ac:	4293      	cmp	r3, r2
 80034ae:	d125      	bne.n	80034fc <UART_SetConfig+0xf0>
 80034b0:	4b8f      	ldr	r3, [pc, #572]	; (80036f0 <UART_SetConfig+0x2e4>)
 80034b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034b6:	f003 0303 	and.w	r3, r3, #3
 80034ba:	2b03      	cmp	r3, #3
 80034bc:	d81a      	bhi.n	80034f4 <UART_SetConfig+0xe8>
 80034be:	a201      	add	r2, pc, #4	; (adr r2, 80034c4 <UART_SetConfig+0xb8>)
 80034c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034c4:	080034d5 	.word	0x080034d5
 80034c8:	080034e5 	.word	0x080034e5
 80034cc:	080034dd 	.word	0x080034dd
 80034d0:	080034ed 	.word	0x080034ed
 80034d4:	2301      	movs	r3, #1
 80034d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80034da:	e116      	b.n	800370a <UART_SetConfig+0x2fe>
 80034dc:	2302      	movs	r3, #2
 80034de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80034e2:	e112      	b.n	800370a <UART_SetConfig+0x2fe>
 80034e4:	2304      	movs	r3, #4
 80034e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80034ea:	e10e      	b.n	800370a <UART_SetConfig+0x2fe>
 80034ec:	2308      	movs	r3, #8
 80034ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80034f2:	e10a      	b.n	800370a <UART_SetConfig+0x2fe>
 80034f4:	2310      	movs	r3, #16
 80034f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80034fa:	e106      	b.n	800370a <UART_SetConfig+0x2fe>
 80034fc:	697b      	ldr	r3, [r7, #20]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	4a7c      	ldr	r2, [pc, #496]	; (80036f4 <UART_SetConfig+0x2e8>)
 8003502:	4293      	cmp	r3, r2
 8003504:	d138      	bne.n	8003578 <UART_SetConfig+0x16c>
 8003506:	4b7a      	ldr	r3, [pc, #488]	; (80036f0 <UART_SetConfig+0x2e4>)
 8003508:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800350c:	f003 030c 	and.w	r3, r3, #12
 8003510:	2b0c      	cmp	r3, #12
 8003512:	d82d      	bhi.n	8003570 <UART_SetConfig+0x164>
 8003514:	a201      	add	r2, pc, #4	; (adr r2, 800351c <UART_SetConfig+0x110>)
 8003516:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800351a:	bf00      	nop
 800351c:	08003551 	.word	0x08003551
 8003520:	08003571 	.word	0x08003571
 8003524:	08003571 	.word	0x08003571
 8003528:	08003571 	.word	0x08003571
 800352c:	08003561 	.word	0x08003561
 8003530:	08003571 	.word	0x08003571
 8003534:	08003571 	.word	0x08003571
 8003538:	08003571 	.word	0x08003571
 800353c:	08003559 	.word	0x08003559
 8003540:	08003571 	.word	0x08003571
 8003544:	08003571 	.word	0x08003571
 8003548:	08003571 	.word	0x08003571
 800354c:	08003569 	.word	0x08003569
 8003550:	2300      	movs	r3, #0
 8003552:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003556:	e0d8      	b.n	800370a <UART_SetConfig+0x2fe>
 8003558:	2302      	movs	r3, #2
 800355a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800355e:	e0d4      	b.n	800370a <UART_SetConfig+0x2fe>
 8003560:	2304      	movs	r3, #4
 8003562:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003566:	e0d0      	b.n	800370a <UART_SetConfig+0x2fe>
 8003568:	2308      	movs	r3, #8
 800356a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800356e:	e0cc      	b.n	800370a <UART_SetConfig+0x2fe>
 8003570:	2310      	movs	r3, #16
 8003572:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003576:	e0c8      	b.n	800370a <UART_SetConfig+0x2fe>
 8003578:	697b      	ldr	r3, [r7, #20]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	4a5e      	ldr	r2, [pc, #376]	; (80036f8 <UART_SetConfig+0x2ec>)
 800357e:	4293      	cmp	r3, r2
 8003580:	d125      	bne.n	80035ce <UART_SetConfig+0x1c2>
 8003582:	4b5b      	ldr	r3, [pc, #364]	; (80036f0 <UART_SetConfig+0x2e4>)
 8003584:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003588:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800358c:	2b30      	cmp	r3, #48	; 0x30
 800358e:	d016      	beq.n	80035be <UART_SetConfig+0x1b2>
 8003590:	2b30      	cmp	r3, #48	; 0x30
 8003592:	d818      	bhi.n	80035c6 <UART_SetConfig+0x1ba>
 8003594:	2b20      	cmp	r3, #32
 8003596:	d00a      	beq.n	80035ae <UART_SetConfig+0x1a2>
 8003598:	2b20      	cmp	r3, #32
 800359a:	d814      	bhi.n	80035c6 <UART_SetConfig+0x1ba>
 800359c:	2b00      	cmp	r3, #0
 800359e:	d002      	beq.n	80035a6 <UART_SetConfig+0x19a>
 80035a0:	2b10      	cmp	r3, #16
 80035a2:	d008      	beq.n	80035b6 <UART_SetConfig+0x1aa>
 80035a4:	e00f      	b.n	80035c6 <UART_SetConfig+0x1ba>
 80035a6:	2300      	movs	r3, #0
 80035a8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80035ac:	e0ad      	b.n	800370a <UART_SetConfig+0x2fe>
 80035ae:	2302      	movs	r3, #2
 80035b0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80035b4:	e0a9      	b.n	800370a <UART_SetConfig+0x2fe>
 80035b6:	2304      	movs	r3, #4
 80035b8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80035bc:	e0a5      	b.n	800370a <UART_SetConfig+0x2fe>
 80035be:	2308      	movs	r3, #8
 80035c0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80035c4:	e0a1      	b.n	800370a <UART_SetConfig+0x2fe>
 80035c6:	2310      	movs	r3, #16
 80035c8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80035cc:	e09d      	b.n	800370a <UART_SetConfig+0x2fe>
 80035ce:	697b      	ldr	r3, [r7, #20]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	4a4a      	ldr	r2, [pc, #296]	; (80036fc <UART_SetConfig+0x2f0>)
 80035d4:	4293      	cmp	r3, r2
 80035d6:	d125      	bne.n	8003624 <UART_SetConfig+0x218>
 80035d8:	4b45      	ldr	r3, [pc, #276]	; (80036f0 <UART_SetConfig+0x2e4>)
 80035da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035de:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80035e2:	2bc0      	cmp	r3, #192	; 0xc0
 80035e4:	d016      	beq.n	8003614 <UART_SetConfig+0x208>
 80035e6:	2bc0      	cmp	r3, #192	; 0xc0
 80035e8:	d818      	bhi.n	800361c <UART_SetConfig+0x210>
 80035ea:	2b80      	cmp	r3, #128	; 0x80
 80035ec:	d00a      	beq.n	8003604 <UART_SetConfig+0x1f8>
 80035ee:	2b80      	cmp	r3, #128	; 0x80
 80035f0:	d814      	bhi.n	800361c <UART_SetConfig+0x210>
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d002      	beq.n	80035fc <UART_SetConfig+0x1f0>
 80035f6:	2b40      	cmp	r3, #64	; 0x40
 80035f8:	d008      	beq.n	800360c <UART_SetConfig+0x200>
 80035fa:	e00f      	b.n	800361c <UART_SetConfig+0x210>
 80035fc:	2300      	movs	r3, #0
 80035fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003602:	e082      	b.n	800370a <UART_SetConfig+0x2fe>
 8003604:	2302      	movs	r3, #2
 8003606:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800360a:	e07e      	b.n	800370a <UART_SetConfig+0x2fe>
 800360c:	2304      	movs	r3, #4
 800360e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003612:	e07a      	b.n	800370a <UART_SetConfig+0x2fe>
 8003614:	2308      	movs	r3, #8
 8003616:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800361a:	e076      	b.n	800370a <UART_SetConfig+0x2fe>
 800361c:	2310      	movs	r3, #16
 800361e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003622:	e072      	b.n	800370a <UART_SetConfig+0x2fe>
 8003624:	697b      	ldr	r3, [r7, #20]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	4a35      	ldr	r2, [pc, #212]	; (8003700 <UART_SetConfig+0x2f4>)
 800362a:	4293      	cmp	r3, r2
 800362c:	d12a      	bne.n	8003684 <UART_SetConfig+0x278>
 800362e:	4b30      	ldr	r3, [pc, #192]	; (80036f0 <UART_SetConfig+0x2e4>)
 8003630:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003634:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003638:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800363c:	d01a      	beq.n	8003674 <UART_SetConfig+0x268>
 800363e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003642:	d81b      	bhi.n	800367c <UART_SetConfig+0x270>
 8003644:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003648:	d00c      	beq.n	8003664 <UART_SetConfig+0x258>
 800364a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800364e:	d815      	bhi.n	800367c <UART_SetConfig+0x270>
 8003650:	2b00      	cmp	r3, #0
 8003652:	d003      	beq.n	800365c <UART_SetConfig+0x250>
 8003654:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003658:	d008      	beq.n	800366c <UART_SetConfig+0x260>
 800365a:	e00f      	b.n	800367c <UART_SetConfig+0x270>
 800365c:	2300      	movs	r3, #0
 800365e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003662:	e052      	b.n	800370a <UART_SetConfig+0x2fe>
 8003664:	2302      	movs	r3, #2
 8003666:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800366a:	e04e      	b.n	800370a <UART_SetConfig+0x2fe>
 800366c:	2304      	movs	r3, #4
 800366e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003672:	e04a      	b.n	800370a <UART_SetConfig+0x2fe>
 8003674:	2308      	movs	r3, #8
 8003676:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800367a:	e046      	b.n	800370a <UART_SetConfig+0x2fe>
 800367c:	2310      	movs	r3, #16
 800367e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003682:	e042      	b.n	800370a <UART_SetConfig+0x2fe>
 8003684:	697b      	ldr	r3, [r7, #20]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	4a17      	ldr	r2, [pc, #92]	; (80036e8 <UART_SetConfig+0x2dc>)
 800368a:	4293      	cmp	r3, r2
 800368c:	d13a      	bne.n	8003704 <UART_SetConfig+0x2f8>
 800368e:	4b18      	ldr	r3, [pc, #96]	; (80036f0 <UART_SetConfig+0x2e4>)
 8003690:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003694:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003698:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800369c:	d01a      	beq.n	80036d4 <UART_SetConfig+0x2c8>
 800369e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80036a2:	d81b      	bhi.n	80036dc <UART_SetConfig+0x2d0>
 80036a4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80036a8:	d00c      	beq.n	80036c4 <UART_SetConfig+0x2b8>
 80036aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80036ae:	d815      	bhi.n	80036dc <UART_SetConfig+0x2d0>
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d003      	beq.n	80036bc <UART_SetConfig+0x2b0>
 80036b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036b8:	d008      	beq.n	80036cc <UART_SetConfig+0x2c0>
 80036ba:	e00f      	b.n	80036dc <UART_SetConfig+0x2d0>
 80036bc:	2300      	movs	r3, #0
 80036be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80036c2:	e022      	b.n	800370a <UART_SetConfig+0x2fe>
 80036c4:	2302      	movs	r3, #2
 80036c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80036ca:	e01e      	b.n	800370a <UART_SetConfig+0x2fe>
 80036cc:	2304      	movs	r3, #4
 80036ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80036d2:	e01a      	b.n	800370a <UART_SetConfig+0x2fe>
 80036d4:	2308      	movs	r3, #8
 80036d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80036da:	e016      	b.n	800370a <UART_SetConfig+0x2fe>
 80036dc:	2310      	movs	r3, #16
 80036de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80036e2:	e012      	b.n	800370a <UART_SetConfig+0x2fe>
 80036e4:	cfff69f3 	.word	0xcfff69f3
 80036e8:	40008000 	.word	0x40008000
 80036ec:	40013800 	.word	0x40013800
 80036f0:	40021000 	.word	0x40021000
 80036f4:	40004400 	.word	0x40004400
 80036f8:	40004800 	.word	0x40004800
 80036fc:	40004c00 	.word	0x40004c00
 8003700:	40005000 	.word	0x40005000
 8003704:	2310      	movs	r3, #16
 8003706:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800370a:	697b      	ldr	r3, [r7, #20]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	4aae      	ldr	r2, [pc, #696]	; (80039c8 <UART_SetConfig+0x5bc>)
 8003710:	4293      	cmp	r3, r2
 8003712:	f040 8097 	bne.w	8003844 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003716:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800371a:	2b08      	cmp	r3, #8
 800371c:	d823      	bhi.n	8003766 <UART_SetConfig+0x35a>
 800371e:	a201      	add	r2, pc, #4	; (adr r2, 8003724 <UART_SetConfig+0x318>)
 8003720:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003724:	08003749 	.word	0x08003749
 8003728:	08003767 	.word	0x08003767
 800372c:	08003751 	.word	0x08003751
 8003730:	08003767 	.word	0x08003767
 8003734:	08003757 	.word	0x08003757
 8003738:	08003767 	.word	0x08003767
 800373c:	08003767 	.word	0x08003767
 8003740:	08003767 	.word	0x08003767
 8003744:	0800375f 	.word	0x0800375f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003748:	f7fe fc96 	bl	8002078 <HAL_RCC_GetPCLK1Freq>
 800374c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800374e:	e010      	b.n	8003772 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003750:	4b9e      	ldr	r3, [pc, #632]	; (80039cc <UART_SetConfig+0x5c0>)
 8003752:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003754:	e00d      	b.n	8003772 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003756:	f7fe fbf7 	bl	8001f48 <HAL_RCC_GetSysClockFreq>
 800375a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800375c:	e009      	b.n	8003772 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800375e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003762:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003764:	e005      	b.n	8003772 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8003766:	2300      	movs	r3, #0
 8003768:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800376a:	2301      	movs	r3, #1
 800376c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003770:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003774:	2b00      	cmp	r3, #0
 8003776:	f000 8130 	beq.w	80039da <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800377a:	697b      	ldr	r3, [r7, #20]
 800377c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800377e:	4a94      	ldr	r2, [pc, #592]	; (80039d0 <UART_SetConfig+0x5c4>)
 8003780:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003784:	461a      	mov	r2, r3
 8003786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003788:	fbb3 f3f2 	udiv	r3, r3, r2
 800378c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800378e:	697b      	ldr	r3, [r7, #20]
 8003790:	685a      	ldr	r2, [r3, #4]
 8003792:	4613      	mov	r3, r2
 8003794:	005b      	lsls	r3, r3, #1
 8003796:	4413      	add	r3, r2
 8003798:	69ba      	ldr	r2, [r7, #24]
 800379a:	429a      	cmp	r2, r3
 800379c:	d305      	bcc.n	80037aa <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800379e:	697b      	ldr	r3, [r7, #20]
 80037a0:	685b      	ldr	r3, [r3, #4]
 80037a2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80037a4:	69ba      	ldr	r2, [r7, #24]
 80037a6:	429a      	cmp	r2, r3
 80037a8:	d903      	bls.n	80037b2 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80037aa:	2301      	movs	r3, #1
 80037ac:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80037b0:	e113      	b.n	80039da <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80037b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037b4:	2200      	movs	r2, #0
 80037b6:	60bb      	str	r3, [r7, #8]
 80037b8:	60fa      	str	r2, [r7, #12]
 80037ba:	697b      	ldr	r3, [r7, #20]
 80037bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037be:	4a84      	ldr	r2, [pc, #528]	; (80039d0 <UART_SetConfig+0x5c4>)
 80037c0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80037c4:	b29b      	uxth	r3, r3
 80037c6:	2200      	movs	r2, #0
 80037c8:	603b      	str	r3, [r7, #0]
 80037ca:	607a      	str	r2, [r7, #4]
 80037cc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80037d0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80037d4:	f7fc fd1c 	bl	8000210 <__aeabi_uldivmod>
 80037d8:	4602      	mov	r2, r0
 80037da:	460b      	mov	r3, r1
 80037dc:	4610      	mov	r0, r2
 80037de:	4619      	mov	r1, r3
 80037e0:	f04f 0200 	mov.w	r2, #0
 80037e4:	f04f 0300 	mov.w	r3, #0
 80037e8:	020b      	lsls	r3, r1, #8
 80037ea:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80037ee:	0202      	lsls	r2, r0, #8
 80037f0:	6979      	ldr	r1, [r7, #20]
 80037f2:	6849      	ldr	r1, [r1, #4]
 80037f4:	0849      	lsrs	r1, r1, #1
 80037f6:	2000      	movs	r0, #0
 80037f8:	460c      	mov	r4, r1
 80037fa:	4605      	mov	r5, r0
 80037fc:	eb12 0804 	adds.w	r8, r2, r4
 8003800:	eb43 0905 	adc.w	r9, r3, r5
 8003804:	697b      	ldr	r3, [r7, #20]
 8003806:	685b      	ldr	r3, [r3, #4]
 8003808:	2200      	movs	r2, #0
 800380a:	469a      	mov	sl, r3
 800380c:	4693      	mov	fp, r2
 800380e:	4652      	mov	r2, sl
 8003810:	465b      	mov	r3, fp
 8003812:	4640      	mov	r0, r8
 8003814:	4649      	mov	r1, r9
 8003816:	f7fc fcfb 	bl	8000210 <__aeabi_uldivmod>
 800381a:	4602      	mov	r2, r0
 800381c:	460b      	mov	r3, r1
 800381e:	4613      	mov	r3, r2
 8003820:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003822:	6a3b      	ldr	r3, [r7, #32]
 8003824:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003828:	d308      	bcc.n	800383c <UART_SetConfig+0x430>
 800382a:	6a3b      	ldr	r3, [r7, #32]
 800382c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003830:	d204      	bcs.n	800383c <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8003832:	697b      	ldr	r3, [r7, #20]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	6a3a      	ldr	r2, [r7, #32]
 8003838:	60da      	str	r2, [r3, #12]
 800383a:	e0ce      	b.n	80039da <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800383c:	2301      	movs	r3, #1
 800383e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003842:	e0ca      	b.n	80039da <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003844:	697b      	ldr	r3, [r7, #20]
 8003846:	69db      	ldr	r3, [r3, #28]
 8003848:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800384c:	d166      	bne.n	800391c <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800384e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003852:	2b08      	cmp	r3, #8
 8003854:	d827      	bhi.n	80038a6 <UART_SetConfig+0x49a>
 8003856:	a201      	add	r2, pc, #4	; (adr r2, 800385c <UART_SetConfig+0x450>)
 8003858:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800385c:	08003881 	.word	0x08003881
 8003860:	08003889 	.word	0x08003889
 8003864:	08003891 	.word	0x08003891
 8003868:	080038a7 	.word	0x080038a7
 800386c:	08003897 	.word	0x08003897
 8003870:	080038a7 	.word	0x080038a7
 8003874:	080038a7 	.word	0x080038a7
 8003878:	080038a7 	.word	0x080038a7
 800387c:	0800389f 	.word	0x0800389f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003880:	f7fe fbfa 	bl	8002078 <HAL_RCC_GetPCLK1Freq>
 8003884:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003886:	e014      	b.n	80038b2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003888:	f7fe fc0c 	bl	80020a4 <HAL_RCC_GetPCLK2Freq>
 800388c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800388e:	e010      	b.n	80038b2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003890:	4b4e      	ldr	r3, [pc, #312]	; (80039cc <UART_SetConfig+0x5c0>)
 8003892:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003894:	e00d      	b.n	80038b2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003896:	f7fe fb57 	bl	8001f48 <HAL_RCC_GetSysClockFreq>
 800389a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800389c:	e009      	b.n	80038b2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800389e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80038a2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80038a4:	e005      	b.n	80038b2 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 80038a6:	2300      	movs	r3, #0
 80038a8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80038aa:	2301      	movs	r3, #1
 80038ac:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80038b0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80038b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	f000 8090 	beq.w	80039da <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80038ba:	697b      	ldr	r3, [r7, #20]
 80038bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038be:	4a44      	ldr	r2, [pc, #272]	; (80039d0 <UART_SetConfig+0x5c4>)
 80038c0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80038c4:	461a      	mov	r2, r3
 80038c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038c8:	fbb3 f3f2 	udiv	r3, r3, r2
 80038cc:	005a      	lsls	r2, r3, #1
 80038ce:	697b      	ldr	r3, [r7, #20]
 80038d0:	685b      	ldr	r3, [r3, #4]
 80038d2:	085b      	lsrs	r3, r3, #1
 80038d4:	441a      	add	r2, r3
 80038d6:	697b      	ldr	r3, [r7, #20]
 80038d8:	685b      	ldr	r3, [r3, #4]
 80038da:	fbb2 f3f3 	udiv	r3, r2, r3
 80038de:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80038e0:	6a3b      	ldr	r3, [r7, #32]
 80038e2:	2b0f      	cmp	r3, #15
 80038e4:	d916      	bls.n	8003914 <UART_SetConfig+0x508>
 80038e6:	6a3b      	ldr	r3, [r7, #32]
 80038e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038ec:	d212      	bcs.n	8003914 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80038ee:	6a3b      	ldr	r3, [r7, #32]
 80038f0:	b29b      	uxth	r3, r3
 80038f2:	f023 030f 	bic.w	r3, r3, #15
 80038f6:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80038f8:	6a3b      	ldr	r3, [r7, #32]
 80038fa:	085b      	lsrs	r3, r3, #1
 80038fc:	b29b      	uxth	r3, r3
 80038fe:	f003 0307 	and.w	r3, r3, #7
 8003902:	b29a      	uxth	r2, r3
 8003904:	8bfb      	ldrh	r3, [r7, #30]
 8003906:	4313      	orrs	r3, r2
 8003908:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800390a:	697b      	ldr	r3, [r7, #20]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	8bfa      	ldrh	r2, [r7, #30]
 8003910:	60da      	str	r2, [r3, #12]
 8003912:	e062      	b.n	80039da <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8003914:	2301      	movs	r3, #1
 8003916:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800391a:	e05e      	b.n	80039da <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800391c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003920:	2b08      	cmp	r3, #8
 8003922:	d828      	bhi.n	8003976 <UART_SetConfig+0x56a>
 8003924:	a201      	add	r2, pc, #4	; (adr r2, 800392c <UART_SetConfig+0x520>)
 8003926:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800392a:	bf00      	nop
 800392c:	08003951 	.word	0x08003951
 8003930:	08003959 	.word	0x08003959
 8003934:	08003961 	.word	0x08003961
 8003938:	08003977 	.word	0x08003977
 800393c:	08003967 	.word	0x08003967
 8003940:	08003977 	.word	0x08003977
 8003944:	08003977 	.word	0x08003977
 8003948:	08003977 	.word	0x08003977
 800394c:	0800396f 	.word	0x0800396f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003950:	f7fe fb92 	bl	8002078 <HAL_RCC_GetPCLK1Freq>
 8003954:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003956:	e014      	b.n	8003982 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003958:	f7fe fba4 	bl	80020a4 <HAL_RCC_GetPCLK2Freq>
 800395c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800395e:	e010      	b.n	8003982 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003960:	4b1a      	ldr	r3, [pc, #104]	; (80039cc <UART_SetConfig+0x5c0>)
 8003962:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003964:	e00d      	b.n	8003982 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003966:	f7fe faef 	bl	8001f48 <HAL_RCC_GetSysClockFreq>
 800396a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800396c:	e009      	b.n	8003982 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800396e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003972:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003974:	e005      	b.n	8003982 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8003976:	2300      	movs	r3, #0
 8003978:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800397a:	2301      	movs	r3, #1
 800397c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003980:	bf00      	nop
    }

    if (pclk != 0U)
 8003982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003984:	2b00      	cmp	r3, #0
 8003986:	d028      	beq.n	80039da <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003988:	697b      	ldr	r3, [r7, #20]
 800398a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800398c:	4a10      	ldr	r2, [pc, #64]	; (80039d0 <UART_SetConfig+0x5c4>)
 800398e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003992:	461a      	mov	r2, r3
 8003994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003996:	fbb3 f2f2 	udiv	r2, r3, r2
 800399a:	697b      	ldr	r3, [r7, #20]
 800399c:	685b      	ldr	r3, [r3, #4]
 800399e:	085b      	lsrs	r3, r3, #1
 80039a0:	441a      	add	r2, r3
 80039a2:	697b      	ldr	r3, [r7, #20]
 80039a4:	685b      	ldr	r3, [r3, #4]
 80039a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80039aa:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80039ac:	6a3b      	ldr	r3, [r7, #32]
 80039ae:	2b0f      	cmp	r3, #15
 80039b0:	d910      	bls.n	80039d4 <UART_SetConfig+0x5c8>
 80039b2:	6a3b      	ldr	r3, [r7, #32]
 80039b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039b8:	d20c      	bcs.n	80039d4 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80039ba:	6a3b      	ldr	r3, [r7, #32]
 80039bc:	b29a      	uxth	r2, r3
 80039be:	697b      	ldr	r3, [r7, #20]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	60da      	str	r2, [r3, #12]
 80039c4:	e009      	b.n	80039da <UART_SetConfig+0x5ce>
 80039c6:	bf00      	nop
 80039c8:	40008000 	.word	0x40008000
 80039cc:	00f42400 	.word	0x00f42400
 80039d0:	08006de4 	.word	0x08006de4
      }
      else
      {
        ret = HAL_ERROR;
 80039d4:	2301      	movs	r3, #1
 80039d6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80039da:	697b      	ldr	r3, [r7, #20]
 80039dc:	2201      	movs	r2, #1
 80039de:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80039e2:	697b      	ldr	r3, [r7, #20]
 80039e4:	2201      	movs	r2, #1
 80039e6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80039ea:	697b      	ldr	r3, [r7, #20]
 80039ec:	2200      	movs	r2, #0
 80039ee:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80039f0:	697b      	ldr	r3, [r7, #20]
 80039f2:	2200      	movs	r2, #0
 80039f4:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80039f6:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80039fa:	4618      	mov	r0, r3
 80039fc:	3730      	adds	r7, #48	; 0x30
 80039fe:	46bd      	mov	sp, r7
 8003a00:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08003a04 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003a04:	b480      	push	{r7}
 8003a06:	b083      	sub	sp, #12
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a10:	f003 0308 	and.w	r3, r3, #8
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d00a      	beq.n	8003a2e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	685b      	ldr	r3, [r3, #4]
 8003a1e:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	430a      	orrs	r2, r1
 8003a2c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a32:	f003 0301 	and.w	r3, r3, #1
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d00a      	beq.n	8003a50 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	685b      	ldr	r3, [r3, #4]
 8003a40:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	430a      	orrs	r2, r1
 8003a4e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a54:	f003 0302 	and.w	r3, r3, #2
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d00a      	beq.n	8003a72 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	685b      	ldr	r3, [r3, #4]
 8003a62:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	430a      	orrs	r2, r1
 8003a70:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a76:	f003 0304 	and.w	r3, r3, #4
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d00a      	beq.n	8003a94 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	685b      	ldr	r3, [r3, #4]
 8003a84:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	430a      	orrs	r2, r1
 8003a92:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a98:	f003 0310 	and.w	r3, r3, #16
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d00a      	beq.n	8003ab6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	689b      	ldr	r3, [r3, #8]
 8003aa6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	430a      	orrs	r2, r1
 8003ab4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003aba:	f003 0320 	and.w	r3, r3, #32
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d00a      	beq.n	8003ad8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	689b      	ldr	r3, [r3, #8]
 8003ac8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	430a      	orrs	r2, r1
 8003ad6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003adc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d01a      	beq.n	8003b1a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	685b      	ldr	r3, [r3, #4]
 8003aea:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	430a      	orrs	r2, r1
 8003af8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003afe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003b02:	d10a      	bne.n	8003b1a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	685b      	ldr	r3, [r3, #4]
 8003b0a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	430a      	orrs	r2, r1
 8003b18:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d00a      	beq.n	8003b3c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	685b      	ldr	r3, [r3, #4]
 8003b2c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	430a      	orrs	r2, r1
 8003b3a:	605a      	str	r2, [r3, #4]
  }
}
 8003b3c:	bf00      	nop
 8003b3e:	370c      	adds	r7, #12
 8003b40:	46bd      	mov	sp, r7
 8003b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b46:	4770      	bx	lr

08003b48 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b098      	sub	sp, #96	; 0x60
 8003b4c:	af02      	add	r7, sp, #8
 8003b4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2200      	movs	r2, #0
 8003b54:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003b58:	f7fd f912 	bl	8000d80 <HAL_GetTick>
 8003b5c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f003 0308 	and.w	r3, r3, #8
 8003b68:	2b08      	cmp	r3, #8
 8003b6a:	d12f      	bne.n	8003bcc <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003b6c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003b70:	9300      	str	r3, [sp, #0]
 8003b72:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b74:	2200      	movs	r2, #0
 8003b76:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003b7a:	6878      	ldr	r0, [r7, #4]
 8003b7c:	f000 f88e 	bl	8003c9c <UART_WaitOnFlagUntilTimeout>
 8003b80:	4603      	mov	r3, r0
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d022      	beq.n	8003bcc <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b8e:	e853 3f00 	ldrex	r3, [r3]
 8003b92:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003b94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b96:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003b9a:	653b      	str	r3, [r7, #80]	; 0x50
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	461a      	mov	r2, r3
 8003ba2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003ba4:	647b      	str	r3, [r7, #68]	; 0x44
 8003ba6:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ba8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003baa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003bac:	e841 2300 	strex	r3, r2, [r1]
 8003bb0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003bb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d1e6      	bne.n	8003b86 <UART_CheckIdleState+0x3e>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2220      	movs	r2, #32
 8003bbc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003bc8:	2303      	movs	r3, #3
 8003bca:	e063      	b.n	8003c94 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f003 0304 	and.w	r3, r3, #4
 8003bd6:	2b04      	cmp	r3, #4
 8003bd8:	d149      	bne.n	8003c6e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003bda:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003bde:	9300      	str	r3, [sp, #0]
 8003be0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003be2:	2200      	movs	r2, #0
 8003be4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003be8:	6878      	ldr	r0, [r7, #4]
 8003bea:	f000 f857 	bl	8003c9c <UART_WaitOnFlagUntilTimeout>
 8003bee:	4603      	mov	r3, r0
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d03c      	beq.n	8003c6e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bfc:	e853 3f00 	ldrex	r3, [r3]
 8003c00:	623b      	str	r3, [r7, #32]
   return(result);
 8003c02:	6a3b      	ldr	r3, [r7, #32]
 8003c04:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003c08:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	461a      	mov	r2, r3
 8003c10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c12:	633b      	str	r3, [r7, #48]	; 0x30
 8003c14:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c16:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003c18:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c1a:	e841 2300 	strex	r3, r2, [r1]
 8003c1e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003c20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d1e6      	bne.n	8003bf4 <UART_CheckIdleState+0xac>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	3308      	adds	r3, #8
 8003c2c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c2e:	693b      	ldr	r3, [r7, #16]
 8003c30:	e853 3f00 	ldrex	r3, [r3]
 8003c34:	60fb      	str	r3, [r7, #12]
   return(result);
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	f023 0301 	bic.w	r3, r3, #1
 8003c3c:	64bb      	str	r3, [r7, #72]	; 0x48
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	3308      	adds	r3, #8
 8003c44:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003c46:	61fa      	str	r2, [r7, #28]
 8003c48:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c4a:	69b9      	ldr	r1, [r7, #24]
 8003c4c:	69fa      	ldr	r2, [r7, #28]
 8003c4e:	e841 2300 	strex	r3, r2, [r1]
 8003c52:	617b      	str	r3, [r7, #20]
   return(result);
 8003c54:	697b      	ldr	r3, [r7, #20]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d1e5      	bne.n	8003c26 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	2220      	movs	r2, #32
 8003c5e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	2200      	movs	r2, #0
 8003c66:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003c6a:	2303      	movs	r3, #3
 8003c6c:	e012      	b.n	8003c94 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	2220      	movs	r2, #32
 8003c72:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	2220      	movs	r2, #32
 8003c7a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	2200      	movs	r2, #0
 8003c82:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2200      	movs	r2, #0
 8003c88:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8003c92:	2300      	movs	r3, #0
}
 8003c94:	4618      	mov	r0, r3
 8003c96:	3758      	adds	r7, #88	; 0x58
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	bd80      	pop	{r7, pc}

08003c9c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	b084      	sub	sp, #16
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	60f8      	str	r0, [r7, #12]
 8003ca4:	60b9      	str	r1, [r7, #8]
 8003ca6:	603b      	str	r3, [r7, #0]
 8003ca8:	4613      	mov	r3, r2
 8003caa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003cac:	e049      	b.n	8003d42 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003cae:	69bb      	ldr	r3, [r7, #24]
 8003cb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cb4:	d045      	beq.n	8003d42 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003cb6:	f7fd f863 	bl	8000d80 <HAL_GetTick>
 8003cba:	4602      	mov	r2, r0
 8003cbc:	683b      	ldr	r3, [r7, #0]
 8003cbe:	1ad3      	subs	r3, r2, r3
 8003cc0:	69ba      	ldr	r2, [r7, #24]
 8003cc2:	429a      	cmp	r2, r3
 8003cc4:	d302      	bcc.n	8003ccc <UART_WaitOnFlagUntilTimeout+0x30>
 8003cc6:	69bb      	ldr	r3, [r7, #24]
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d101      	bne.n	8003cd0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003ccc:	2303      	movs	r3, #3
 8003cce:	e048      	b.n	8003d62 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f003 0304 	and.w	r3, r3, #4
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d031      	beq.n	8003d42 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	69db      	ldr	r3, [r3, #28]
 8003ce4:	f003 0308 	and.w	r3, r3, #8
 8003ce8:	2b08      	cmp	r3, #8
 8003cea:	d110      	bne.n	8003d0e <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	2208      	movs	r2, #8
 8003cf2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003cf4:	68f8      	ldr	r0, [r7, #12]
 8003cf6:	f000 f838 	bl	8003d6a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	2208      	movs	r2, #8
 8003cfe:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	2200      	movs	r2, #0
 8003d06:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8003d0a:	2301      	movs	r3, #1
 8003d0c:	e029      	b.n	8003d62 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	69db      	ldr	r3, [r3, #28]
 8003d14:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d18:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d1c:	d111      	bne.n	8003d42 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003d26:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003d28:	68f8      	ldr	r0, [r7, #12]
 8003d2a:	f000 f81e 	bl	8003d6a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	2220      	movs	r2, #32
 8003d32:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	2200      	movs	r2, #0
 8003d3a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8003d3e:	2303      	movs	r3, #3
 8003d40:	e00f      	b.n	8003d62 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	69da      	ldr	r2, [r3, #28]
 8003d48:	68bb      	ldr	r3, [r7, #8]
 8003d4a:	4013      	ands	r3, r2
 8003d4c:	68ba      	ldr	r2, [r7, #8]
 8003d4e:	429a      	cmp	r2, r3
 8003d50:	bf0c      	ite	eq
 8003d52:	2301      	moveq	r3, #1
 8003d54:	2300      	movne	r3, #0
 8003d56:	b2db      	uxtb	r3, r3
 8003d58:	461a      	mov	r2, r3
 8003d5a:	79fb      	ldrb	r3, [r7, #7]
 8003d5c:	429a      	cmp	r2, r3
 8003d5e:	d0a6      	beq.n	8003cae <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003d60:	2300      	movs	r3, #0
}
 8003d62:	4618      	mov	r0, r3
 8003d64:	3710      	adds	r7, #16
 8003d66:	46bd      	mov	sp, r7
 8003d68:	bd80      	pop	{r7, pc}

08003d6a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003d6a:	b480      	push	{r7}
 8003d6c:	b095      	sub	sp, #84	; 0x54
 8003d6e:	af00      	add	r7, sp, #0
 8003d70:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d7a:	e853 3f00 	ldrex	r3, [r3]
 8003d7e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003d80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d82:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003d86:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	461a      	mov	r2, r3
 8003d8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d90:	643b      	str	r3, [r7, #64]	; 0x40
 8003d92:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d94:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003d96:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003d98:	e841 2300 	strex	r3, r2, [r1]
 8003d9c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003d9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d1e6      	bne.n	8003d72 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	3308      	adds	r3, #8
 8003daa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dac:	6a3b      	ldr	r3, [r7, #32]
 8003dae:	e853 3f00 	ldrex	r3, [r3]
 8003db2:	61fb      	str	r3, [r7, #28]
   return(result);
 8003db4:	69fb      	ldr	r3, [r7, #28]
 8003db6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003dba:	f023 0301 	bic.w	r3, r3, #1
 8003dbe:	64bb      	str	r3, [r7, #72]	; 0x48
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	3308      	adds	r3, #8
 8003dc6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003dc8:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003dca:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dcc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003dce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003dd0:	e841 2300 	strex	r3, r2, [r1]
 8003dd4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d1e3      	bne.n	8003da4 <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003de0:	2b01      	cmp	r3, #1
 8003de2:	d118      	bne.n	8003e16 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	e853 3f00 	ldrex	r3, [r3]
 8003df0:	60bb      	str	r3, [r7, #8]
   return(result);
 8003df2:	68bb      	ldr	r3, [r7, #8]
 8003df4:	f023 0310 	bic.w	r3, r3, #16
 8003df8:	647b      	str	r3, [r7, #68]	; 0x44
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	461a      	mov	r2, r3
 8003e00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e02:	61bb      	str	r3, [r7, #24]
 8003e04:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e06:	6979      	ldr	r1, [r7, #20]
 8003e08:	69ba      	ldr	r2, [r7, #24]
 8003e0a:	e841 2300 	strex	r3, r2, [r1]
 8003e0e:	613b      	str	r3, [r7, #16]
   return(result);
 8003e10:	693b      	ldr	r3, [r7, #16]
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d1e6      	bne.n	8003de4 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	2220      	movs	r2, #32
 8003e1a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	2200      	movs	r2, #0
 8003e22:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2200      	movs	r2, #0
 8003e28:	675a      	str	r2, [r3, #116]	; 0x74
}
 8003e2a:	bf00      	nop
 8003e2c:	3754      	adds	r7, #84	; 0x54
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e34:	4770      	bx	lr

08003e36 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8003e36:	b480      	push	{r7}
 8003e38:	b085      	sub	sp, #20
 8003e3a:	af00      	add	r7, sp, #0
 8003e3c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8003e44:	2b01      	cmp	r3, #1
 8003e46:	d101      	bne.n	8003e4c <HAL_UARTEx_DisableFifoMode+0x16>
 8003e48:	2302      	movs	r3, #2
 8003e4a:	e027      	b.n	8003e9c <HAL_UARTEx_DisableFifoMode+0x66>
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2201      	movs	r2, #1
 8003e50:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2224      	movs	r2, #36	; 0x24
 8003e58:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	681a      	ldr	r2, [r3, #0]
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f022 0201 	bic.w	r2, r2, #1
 8003e72:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8003e7a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2200      	movs	r2, #0
 8003e80:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	68fa      	ldr	r2, [r7, #12]
 8003e88:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	2220      	movs	r2, #32
 8003e8e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	2200      	movs	r2, #0
 8003e96:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8003e9a:	2300      	movs	r3, #0
}
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	3714      	adds	r7, #20
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea6:	4770      	bx	lr

08003ea8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b084      	sub	sp, #16
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
 8003eb0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8003eb8:	2b01      	cmp	r3, #1
 8003eba:	d101      	bne.n	8003ec0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8003ebc:	2302      	movs	r3, #2
 8003ebe:	e02d      	b.n	8003f1c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2201      	movs	r2, #1
 8003ec4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2224      	movs	r2, #36	; 0x24
 8003ecc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	681a      	ldr	r2, [r3, #0]
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f022 0201 	bic.w	r2, r2, #1
 8003ee6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	689b      	ldr	r3, [r3, #8]
 8003eee:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	683a      	ldr	r2, [r7, #0]
 8003ef8:	430a      	orrs	r2, r1
 8003efa:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003efc:	6878      	ldr	r0, [r7, #4]
 8003efe:	f000 f84f 	bl	8003fa0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	68fa      	ldr	r2, [r7, #12]
 8003f08:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	2220      	movs	r2, #32
 8003f0e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	2200      	movs	r2, #0
 8003f16:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8003f1a:	2300      	movs	r3, #0
}
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	3710      	adds	r7, #16
 8003f20:	46bd      	mov	sp, r7
 8003f22:	bd80      	pop	{r7, pc}

08003f24 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003f24:	b580      	push	{r7, lr}
 8003f26:	b084      	sub	sp, #16
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	6078      	str	r0, [r7, #4]
 8003f2c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8003f34:	2b01      	cmp	r3, #1
 8003f36:	d101      	bne.n	8003f3c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8003f38:	2302      	movs	r3, #2
 8003f3a:	e02d      	b.n	8003f98 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2201      	movs	r2, #1
 8003f40:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2224      	movs	r2, #36	; 0x24
 8003f48:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	681a      	ldr	r2, [r3, #0]
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f022 0201 	bic.w	r2, r2, #1
 8003f62:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	689b      	ldr	r3, [r3, #8]
 8003f6a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	683a      	ldr	r2, [r7, #0]
 8003f74:	430a      	orrs	r2, r1
 8003f76:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003f78:	6878      	ldr	r0, [r7, #4]
 8003f7a:	f000 f811 	bl	8003fa0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	68fa      	ldr	r2, [r7, #12]
 8003f84:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	2220      	movs	r2, #32
 8003f8a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	2200      	movs	r2, #0
 8003f92:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8003f96:	2300      	movs	r3, #0
}
 8003f98:	4618      	mov	r0, r3
 8003f9a:	3710      	adds	r7, #16
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	bd80      	pop	{r7, pc}

08003fa0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8003fa0:	b480      	push	{r7}
 8003fa2:	b085      	sub	sp, #20
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d108      	bne.n	8003fc2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2201      	movs	r2, #1
 8003fb4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2201      	movs	r2, #1
 8003fbc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8003fc0:	e031      	b.n	8004026 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8003fc2:	2308      	movs	r3, #8
 8003fc4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8003fc6:	2308      	movs	r3, #8
 8003fc8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	689b      	ldr	r3, [r3, #8]
 8003fd0:	0e5b      	lsrs	r3, r3, #25
 8003fd2:	b2db      	uxtb	r3, r3
 8003fd4:	f003 0307 	and.w	r3, r3, #7
 8003fd8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	689b      	ldr	r3, [r3, #8]
 8003fe0:	0f5b      	lsrs	r3, r3, #29
 8003fe2:	b2db      	uxtb	r3, r3
 8003fe4:	f003 0307 	and.w	r3, r3, #7
 8003fe8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003fea:	7bbb      	ldrb	r3, [r7, #14]
 8003fec:	7b3a      	ldrb	r2, [r7, #12]
 8003fee:	4911      	ldr	r1, [pc, #68]	; (8004034 <UARTEx_SetNbDataToProcess+0x94>)
 8003ff0:	5c8a      	ldrb	r2, [r1, r2]
 8003ff2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8003ff6:	7b3a      	ldrb	r2, [r7, #12]
 8003ff8:	490f      	ldr	r1, [pc, #60]	; (8004038 <UARTEx_SetNbDataToProcess+0x98>)
 8003ffa:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003ffc:	fb93 f3f2 	sdiv	r3, r3, r2
 8004000:	b29a      	uxth	r2, r3
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004008:	7bfb      	ldrb	r3, [r7, #15]
 800400a:	7b7a      	ldrb	r2, [r7, #13]
 800400c:	4909      	ldr	r1, [pc, #36]	; (8004034 <UARTEx_SetNbDataToProcess+0x94>)
 800400e:	5c8a      	ldrb	r2, [r1, r2]
 8004010:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8004014:	7b7a      	ldrb	r2, [r7, #13]
 8004016:	4908      	ldr	r1, [pc, #32]	; (8004038 <UARTEx_SetNbDataToProcess+0x98>)
 8004018:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800401a:	fb93 f3f2 	sdiv	r3, r3, r2
 800401e:	b29a      	uxth	r2, r3
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8004026:	bf00      	nop
 8004028:	3714      	adds	r7, #20
 800402a:	46bd      	mov	sp, r7
 800402c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004030:	4770      	bx	lr
 8004032:	bf00      	nop
 8004034:	08006dfc 	.word	0x08006dfc
 8004038:	08006e04 	.word	0x08006e04

0800403c <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800403c:	b480      	push	{r7}
 800403e:	b083      	sub	sp, #12
 8004040:	af00      	add	r7, sp, #0
 8004042:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	f103 0208 	add.w	r2, r3, #8
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	f04f 32ff 	mov.w	r2, #4294967295
 8004054:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	f103 0208 	add.w	r2, r3, #8
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	f103 0208 	add.w	r2, r3, #8
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	2200      	movs	r2, #0
 800406e:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004070:	bf00      	nop
 8004072:	370c      	adds	r7, #12
 8004074:	46bd      	mov	sp, r7
 8004076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407a:	4770      	bx	lr

0800407c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800407c:	b480      	push	{r7}
 800407e:	b083      	sub	sp, #12
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2200      	movs	r2, #0
 8004088:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800408a:	bf00      	nop
 800408c:	370c      	adds	r7, #12
 800408e:	46bd      	mov	sp, r7
 8004090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004094:	4770      	bx	lr

08004096 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8004096:	b480      	push	{r7}
 8004098:	b085      	sub	sp, #20
 800409a:	af00      	add	r7, sp, #0
 800409c:	6078      	str	r0, [r7, #4]
 800409e:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 80040a6:	68bb      	ldr	r3, [r7, #8]
 80040a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040ac:	d103      	bne.n	80040b6 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	691b      	ldr	r3, [r3, #16]
 80040b2:	60fb      	str	r3, [r7, #12]
 80040b4:	e00c      	b.n	80040d0 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	3308      	adds	r3, #8
 80040ba:	60fb      	str	r3, [r7, #12]
 80040bc:	e002      	b.n	80040c4 <vListInsert+0x2e>
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	685b      	ldr	r3, [r3, #4]
 80040c2:	60fb      	str	r3, [r7, #12]
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	685b      	ldr	r3, [r3, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	68ba      	ldr	r2, [r7, #8]
 80040cc:	429a      	cmp	r2, r3
 80040ce:	d2f6      	bcs.n	80040be <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	685a      	ldr	r2, [r3, #4]
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80040d8:	683b      	ldr	r3, [r7, #0]
 80040da:	685b      	ldr	r3, [r3, #4]
 80040dc:	683a      	ldr	r2, [r7, #0]
 80040de:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	68fa      	ldr	r2, [r7, #12]
 80040e4:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	683a      	ldr	r2, [r7, #0]
 80040ea:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	687a      	ldr	r2, [r7, #4]
 80040f0:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	1c5a      	adds	r2, r3, #1
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	601a      	str	r2, [r3, #0]
}
 80040fc:	bf00      	nop
 80040fe:	3714      	adds	r7, #20
 8004100:	46bd      	mov	sp, r7
 8004102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004106:	4770      	bx	lr

08004108 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004108:	b480      	push	{r7}
 800410a:	b085      	sub	sp, #20
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	691b      	ldr	r3, [r3, #16]
 8004114:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	685b      	ldr	r3, [r3, #4]
 800411a:	687a      	ldr	r2, [r7, #4]
 800411c:	6892      	ldr	r2, [r2, #8]
 800411e:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	689b      	ldr	r3, [r3, #8]
 8004124:	687a      	ldr	r2, [r7, #4]
 8004126:	6852      	ldr	r2, [r2, #4]
 8004128:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	685b      	ldr	r3, [r3, #4]
 800412e:	687a      	ldr	r2, [r7, #4]
 8004130:	429a      	cmp	r2, r3
 8004132:	d103      	bne.n	800413c <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	689a      	ldr	r2, [r3, #8]
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2200      	movs	r2, #0
 8004140:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	1e5a      	subs	r2, r3, #1
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	681b      	ldr	r3, [r3, #0]
}
 8004150:	4618      	mov	r0, r3
 8004152:	3714      	adds	r7, #20
 8004154:	46bd      	mov	sp, r7
 8004156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415a:	4770      	bx	lr

0800415c <xQueueGenericReset>:
    }
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 800415c:	b580      	push	{r7, lr}
 800415e:	b086      	sub	sp, #24
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
 8004164:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 8004166:	2301      	movs	r3, #1
 8004168:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 800416e:	693b      	ldr	r3, [r7, #16]
 8004170:	2b00      	cmp	r3, #0
 8004172:	d10a      	bne.n	800418a <xQueueGenericReset+0x2e>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8004174:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004178:	f383 8811 	msr	BASEPRI, r3
 800417c:	f3bf 8f6f 	isb	sy
 8004180:	f3bf 8f4f 	dsb	sy
 8004184:	60fb      	str	r3, [r7, #12]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8004186:	bf00      	nop
 8004188:	e7fe      	b.n	8004188 <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 800418a:	693b      	ldr	r3, [r7, #16]
 800418c:	2b00      	cmp	r3, #0
 800418e:	d05d      	beq.n	800424c <xQueueGenericReset+0xf0>
        ( pxQueue->uxLength >= 1U ) &&
 8004190:	693b      	ldr	r3, [r7, #16]
 8004192:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
 8004194:	2b00      	cmp	r3, #0
 8004196:	d059      	beq.n	800424c <xQueueGenericReset+0xf0>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 8004198:	693b      	ldr	r3, [r7, #16]
 800419a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800419c:	693b      	ldr	r3, [r7, #16]
 800419e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041a0:	2100      	movs	r1, #0
 80041a2:	fba3 2302 	umull	r2, r3, r3, r2
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d000      	beq.n	80041ac <xQueueGenericReset+0x50>
 80041aa:	2101      	movs	r1, #1
 80041ac:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d14c      	bne.n	800424c <xQueueGenericReset+0xf0>
    {
        taskENTER_CRITICAL();
 80041b2:	f002 fa69 	bl	8006688 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80041b6:	693b      	ldr	r3, [r7, #16]
 80041b8:	681a      	ldr	r2, [r3, #0]
 80041ba:	693b      	ldr	r3, [r7, #16]
 80041bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041be:	6939      	ldr	r1, [r7, #16]
 80041c0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80041c2:	fb01 f303 	mul.w	r3, r1, r3
 80041c6:	441a      	add	r2, r3
 80041c8:	693b      	ldr	r3, [r7, #16]
 80041ca:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80041cc:	693b      	ldr	r3, [r7, #16]
 80041ce:	2200      	movs	r2, #0
 80041d0:	639a      	str	r2, [r3, #56]	; 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 80041d2:	693b      	ldr	r3, [r7, #16]
 80041d4:	681a      	ldr	r2, [r3, #0]
 80041d6:	693b      	ldr	r3, [r7, #16]
 80041d8:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80041da:	693b      	ldr	r3, [r7, #16]
 80041dc:	681a      	ldr	r2, [r3, #0]
 80041de:	693b      	ldr	r3, [r7, #16]
 80041e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041e2:	3b01      	subs	r3, #1
 80041e4:	6939      	ldr	r1, [r7, #16]
 80041e6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80041e8:	fb01 f303 	mul.w	r3, r1, r3
 80041ec:	441a      	add	r2, r3
 80041ee:	693b      	ldr	r3, [r7, #16]
 80041f0:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 80041f2:	693b      	ldr	r3, [r7, #16]
 80041f4:	22ff      	movs	r2, #255	; 0xff
 80041f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 80041fa:	693b      	ldr	r3, [r7, #16]
 80041fc:	22ff      	movs	r2, #255	; 0xff
 80041fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

            if( xNewQueue == pdFALSE )
 8004202:	683b      	ldr	r3, [r7, #0]
 8004204:	2b00      	cmp	r3, #0
 8004206:	d114      	bne.n	8004232 <xQueueGenericReset+0xd6>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004208:	693b      	ldr	r3, [r7, #16]
 800420a:	691b      	ldr	r3, [r3, #16]
 800420c:	2b00      	cmp	r3, #0
 800420e:	d01a      	beq.n	8004246 <xQueueGenericReset+0xea>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004210:	693b      	ldr	r3, [r7, #16]
 8004212:	3310      	adds	r3, #16
 8004214:	4618      	mov	r0, r3
 8004216:	f001 f9e3 	bl	80055e0 <xTaskRemoveFromEventList>
 800421a:	4603      	mov	r3, r0
 800421c:	2b00      	cmp	r3, #0
 800421e:	d012      	beq.n	8004246 <xQueueGenericReset+0xea>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8004220:	4b15      	ldr	r3, [pc, #84]	; (8004278 <xQueueGenericReset+0x11c>)
 8004222:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004226:	601a      	str	r2, [r3, #0]
 8004228:	f3bf 8f4f 	dsb	sy
 800422c:	f3bf 8f6f 	isb	sy
 8004230:	e009      	b.n	8004246 <xQueueGenericReset+0xea>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004232:	693b      	ldr	r3, [r7, #16]
 8004234:	3310      	adds	r3, #16
 8004236:	4618      	mov	r0, r3
 8004238:	f7ff ff00 	bl	800403c <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800423c:	693b      	ldr	r3, [r7, #16]
 800423e:	3324      	adds	r3, #36	; 0x24
 8004240:	4618      	mov	r0, r3
 8004242:	f7ff fefb 	bl	800403c <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 8004246:	f002 fa4f 	bl	80066e8 <vPortExitCritical>
 800424a:	e001      	b.n	8004250 <xQueueGenericReset+0xf4>
    }
    else
    {
        xReturn = pdFAIL;
 800424c:	2300      	movs	r3, #0
 800424e:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 8004250:	697b      	ldr	r3, [r7, #20]
 8004252:	2b00      	cmp	r3, #0
 8004254:	d10a      	bne.n	800426c <xQueueGenericReset+0x110>
        __asm volatile
 8004256:	f04f 0350 	mov.w	r3, #80	; 0x50
 800425a:	f383 8811 	msr	BASEPRI, r3
 800425e:	f3bf 8f6f 	isb	sy
 8004262:	f3bf 8f4f 	dsb	sy
 8004266:	60bb      	str	r3, [r7, #8]
    }
 8004268:	bf00      	nop
 800426a:	e7fe      	b.n	800426a <xQueueGenericReset+0x10e>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 800426c:	697b      	ldr	r3, [r7, #20]
}
 800426e:	4618      	mov	r0, r3
 8004270:	3718      	adds	r7, #24
 8004272:	46bd      	mov	sp, r7
 8004274:	bd80      	pop	{r7, pc}
 8004276:	bf00      	nop
 8004278:	e000ed04 	.word	0xe000ed04

0800427c <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 800427c:	b580      	push	{r7, lr}
 800427e:	b08a      	sub	sp, #40	; 0x28
 8004280:	af02      	add	r7, sp, #8
 8004282:	60f8      	str	r0, [r7, #12]
 8004284:	60b9      	str	r1, [r7, #8]
 8004286:	4613      	mov	r3, r2
 8004288:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 800428a:	2300      	movs	r3, #0
 800428c:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	2b00      	cmp	r3, #0
 8004292:	d02e      	beq.n	80042f2 <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8004294:	2100      	movs	r1, #0
 8004296:	68ba      	ldr	r2, [r7, #8]
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	fba3 2302 	umull	r2, r3, r3, r2
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d000      	beq.n	80042a4 <xQueueGenericCreate+0x28>
 80042a2:	2101      	movs	r1, #1
 80042a4:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d123      	bne.n	80042f2 <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	68ba      	ldr	r2, [r7, #8]
 80042ae:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 80042b2:	f113 0f49 	cmn.w	r3, #73	; 0x49
 80042b6:	d81c      	bhi.n	80042f2 <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	68ba      	ldr	r2, [r7, #8]
 80042bc:	fb02 f303 	mul.w	r3, r2, r3
 80042c0:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80042c2:	69bb      	ldr	r3, [r7, #24]
 80042c4:	3348      	adds	r3, #72	; 0x48
 80042c6:	4618      	mov	r0, r3
 80042c8:	f002 fac0 	bl	800684c <pvPortMalloc>
 80042cc:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 80042ce:	69fb      	ldr	r3, [r7, #28]
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d01c      	beq.n	800430e <xQueueGenericCreate+0x92>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80042d4:	69fb      	ldr	r3, [r7, #28]
 80042d6:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80042d8:	697b      	ldr	r3, [r7, #20]
 80042da:	3348      	adds	r3, #72	; 0x48
 80042dc:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80042de:	79fa      	ldrb	r2, [r7, #7]
 80042e0:	69fb      	ldr	r3, [r7, #28]
 80042e2:	9300      	str	r3, [sp, #0]
 80042e4:	4613      	mov	r3, r2
 80042e6:	697a      	ldr	r2, [r7, #20]
 80042e8:	68b9      	ldr	r1, [r7, #8]
 80042ea:	68f8      	ldr	r0, [r7, #12]
 80042ec:	f000 f814 	bl	8004318 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 80042f0:	e00d      	b.n	800430e <xQueueGenericCreate+0x92>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 80042f2:	69fb      	ldr	r3, [r7, #28]
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d10a      	bne.n	800430e <xQueueGenericCreate+0x92>
        __asm volatile
 80042f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042fc:	f383 8811 	msr	BASEPRI, r3
 8004300:	f3bf 8f6f 	isb	sy
 8004304:	f3bf 8f4f 	dsb	sy
 8004308:	613b      	str	r3, [r7, #16]
    }
 800430a:	bf00      	nop
 800430c:	e7fe      	b.n	800430c <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 800430e:	69fb      	ldr	r3, [r7, #28]
    }
 8004310:	4618      	mov	r0, r3
 8004312:	3720      	adds	r7, #32
 8004314:	46bd      	mov	sp, r7
 8004316:	bd80      	pop	{r7, pc}

08004318 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8004318:	b580      	push	{r7, lr}
 800431a:	b084      	sub	sp, #16
 800431c:	af00      	add	r7, sp, #0
 800431e:	60f8      	str	r0, [r7, #12]
 8004320:	60b9      	str	r1, [r7, #8]
 8004322:	607a      	str	r2, [r7, #4]
 8004324:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8004326:	68bb      	ldr	r3, [r7, #8]
 8004328:	2b00      	cmp	r3, #0
 800432a:	d103      	bne.n	8004334 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800432c:	69bb      	ldr	r3, [r7, #24]
 800432e:	69ba      	ldr	r2, [r7, #24]
 8004330:	601a      	str	r2, [r3, #0]
 8004332:	e002      	b.n	800433a <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004334:	69bb      	ldr	r3, [r7, #24]
 8004336:	687a      	ldr	r2, [r7, #4]
 8004338:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 800433a:	69bb      	ldr	r3, [r7, #24]
 800433c:	68fa      	ldr	r2, [r7, #12]
 800433e:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8004340:	69bb      	ldr	r3, [r7, #24]
 8004342:	68ba      	ldr	r2, [r7, #8]
 8004344:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004346:	2101      	movs	r1, #1
 8004348:	69b8      	ldr	r0, [r7, #24]
 800434a:	f7ff ff07 	bl	800415c <xQueueGenericReset>
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 800434e:	bf00      	nop
 8004350:	3710      	adds	r7, #16
 8004352:	46bd      	mov	sp, r7
 8004354:	bd80      	pop	{r7, pc}

08004356 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    static void prvInitialiseMutex( Queue_t * pxNewQueue )
    {
 8004356:	b580      	push	{r7, lr}
 8004358:	b082      	sub	sp, #8
 800435a:	af00      	add	r7, sp, #0
 800435c:	6078      	str	r0, [r7, #4]
        if( pxNewQueue != NULL )
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	2b00      	cmp	r3, #0
 8004362:	d00e      	beq.n	8004382 <prvInitialiseMutex+0x2c>
        {
            /* The queue create function will set all the queue structure members
            * correctly for a generic queue, but this function is creating a
            * mutex.  Overwrite those members that need to be set differently -
            * in particular the information required for priority inheritance. */
            pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2200      	movs	r2, #0
 8004368:	609a      	str	r2, [r3, #8]
            pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	2200      	movs	r2, #0
 800436e:	601a      	str	r2, [r3, #0]

            /* In case this is a recursive mutex. */
            pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2200      	movs	r2, #0
 8004374:	60da      	str	r2, [r3, #12]

            traceCREATE_MUTEX( pxNewQueue );

            /* Start with the semaphore in the expected state. */
            ( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8004376:	2300      	movs	r3, #0
 8004378:	2200      	movs	r2, #0
 800437a:	2100      	movs	r1, #0
 800437c:	6878      	ldr	r0, [r7, #4]
 800437e:	f000 f81d 	bl	80043bc <xQueueGenericSend>
        }
        else
        {
            traceCREATE_MUTEX_FAILED();
        }
    }
 8004382:	bf00      	nop
 8004384:	3708      	adds	r7, #8
 8004386:	46bd      	mov	sp, r7
 8004388:	bd80      	pop	{r7, pc}

0800438a <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

    QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
    {
 800438a:	b580      	push	{r7, lr}
 800438c:	b086      	sub	sp, #24
 800438e:	af00      	add	r7, sp, #0
 8004390:	4603      	mov	r3, r0
 8004392:	71fb      	strb	r3, [r7, #7]
        QueueHandle_t xNewQueue;
        const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8004394:	2301      	movs	r3, #1
 8004396:	617b      	str	r3, [r7, #20]
 8004398:	2300      	movs	r3, #0
 800439a:	613b      	str	r3, [r7, #16]

        xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800439c:	79fb      	ldrb	r3, [r7, #7]
 800439e:	461a      	mov	r2, r3
 80043a0:	6939      	ldr	r1, [r7, #16]
 80043a2:	6978      	ldr	r0, [r7, #20]
 80043a4:	f7ff ff6a 	bl	800427c <xQueueGenericCreate>
 80043a8:	60f8      	str	r0, [r7, #12]
        prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80043aa:	68f8      	ldr	r0, [r7, #12]
 80043ac:	f7ff ffd3 	bl	8004356 <prvInitialiseMutex>

        return xNewQueue;
 80043b0:	68fb      	ldr	r3, [r7, #12]
    }
 80043b2:	4618      	mov	r0, r3
 80043b4:	3718      	adds	r7, #24
 80043b6:	46bd      	mov	sp, r7
 80043b8:	bd80      	pop	{r7, pc}
	...

080043bc <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 80043bc:	b580      	push	{r7, lr}
 80043be:	b08e      	sub	sp, #56	; 0x38
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	60f8      	str	r0, [r7, #12]
 80043c4:	60b9      	str	r1, [r7, #8]
 80043c6:	607a      	str	r2, [r7, #4]
 80043c8:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80043ca:	2300      	movs	r3, #0
 80043cc:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 80043d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d10a      	bne.n	80043ee <xQueueGenericSend+0x32>
        __asm volatile
 80043d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043dc:	f383 8811 	msr	BASEPRI, r3
 80043e0:	f3bf 8f6f 	isb	sy
 80043e4:	f3bf 8f4f 	dsb	sy
 80043e8:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 80043ea:	bf00      	nop
 80043ec:	e7fe      	b.n	80043ec <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80043ee:	68bb      	ldr	r3, [r7, #8]
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d103      	bne.n	80043fc <xQueueGenericSend+0x40>
 80043f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d101      	bne.n	8004400 <xQueueGenericSend+0x44>
 80043fc:	2301      	movs	r3, #1
 80043fe:	e000      	b.n	8004402 <xQueueGenericSend+0x46>
 8004400:	2300      	movs	r3, #0
 8004402:	2b00      	cmp	r3, #0
 8004404:	d10a      	bne.n	800441c <xQueueGenericSend+0x60>
        __asm volatile
 8004406:	f04f 0350 	mov.w	r3, #80	; 0x50
 800440a:	f383 8811 	msr	BASEPRI, r3
 800440e:	f3bf 8f6f 	isb	sy
 8004412:	f3bf 8f4f 	dsb	sy
 8004416:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8004418:	bf00      	nop
 800441a:	e7fe      	b.n	800441a <xQueueGenericSend+0x5e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800441c:	683b      	ldr	r3, [r7, #0]
 800441e:	2b02      	cmp	r3, #2
 8004420:	d103      	bne.n	800442a <xQueueGenericSend+0x6e>
 8004422:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004424:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004426:	2b01      	cmp	r3, #1
 8004428:	d101      	bne.n	800442e <xQueueGenericSend+0x72>
 800442a:	2301      	movs	r3, #1
 800442c:	e000      	b.n	8004430 <xQueueGenericSend+0x74>
 800442e:	2300      	movs	r3, #0
 8004430:	2b00      	cmp	r3, #0
 8004432:	d10a      	bne.n	800444a <xQueueGenericSend+0x8e>
        __asm volatile
 8004434:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004438:	f383 8811 	msr	BASEPRI, r3
 800443c:	f3bf 8f6f 	isb	sy
 8004440:	f3bf 8f4f 	dsb	sy
 8004444:	623b      	str	r3, [r7, #32]
    }
 8004446:	bf00      	nop
 8004448:	e7fe      	b.n	8004448 <xQueueGenericSend+0x8c>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800444a:	f001 fac9 	bl	80059e0 <xTaskGetSchedulerState>
 800444e:	4603      	mov	r3, r0
 8004450:	2b00      	cmp	r3, #0
 8004452:	d102      	bne.n	800445a <xQueueGenericSend+0x9e>
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2b00      	cmp	r3, #0
 8004458:	d101      	bne.n	800445e <xQueueGenericSend+0xa2>
 800445a:	2301      	movs	r3, #1
 800445c:	e000      	b.n	8004460 <xQueueGenericSend+0xa4>
 800445e:	2300      	movs	r3, #0
 8004460:	2b00      	cmp	r3, #0
 8004462:	d10a      	bne.n	800447a <xQueueGenericSend+0xbe>
        __asm volatile
 8004464:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004468:	f383 8811 	msr	BASEPRI, r3
 800446c:	f3bf 8f6f 	isb	sy
 8004470:	f3bf 8f4f 	dsb	sy
 8004474:	61fb      	str	r3, [r7, #28]
    }
 8004476:	bf00      	nop
 8004478:	e7fe      	b.n	8004478 <xQueueGenericSend+0xbc>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 800447a:	f002 f905 	bl	8006688 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800447e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004480:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004482:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004484:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004486:	429a      	cmp	r2, r3
 8004488:	d302      	bcc.n	8004490 <xQueueGenericSend+0xd4>
 800448a:	683b      	ldr	r3, [r7, #0]
 800448c:	2b02      	cmp	r3, #2
 800448e:	d129      	bne.n	80044e4 <xQueueGenericSend+0x128>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004490:	683a      	ldr	r2, [r7, #0]
 8004492:	68b9      	ldr	r1, [r7, #8]
 8004494:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004496:	f000 fa85 	bl	80049a4 <prvCopyDataToQueue>
 800449a:	62f8      	str	r0, [r7, #44]	; 0x2c

                    /* If there was a task waiting for data to arrive on the
                     * queue then unblock it now. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800449c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800449e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d010      	beq.n	80044c6 <xQueueGenericSend+0x10a>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80044a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044a6:	3324      	adds	r3, #36	; 0x24
 80044a8:	4618      	mov	r0, r3
 80044aa:	f001 f899 	bl	80055e0 <xTaskRemoveFromEventList>
 80044ae:	4603      	mov	r3, r0
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d013      	beq.n	80044dc <xQueueGenericSend+0x120>
                        {
                            /* The unblocked task has a priority higher than
                             * our own so yield immediately.  Yes it is ok to do
                             * this from within the critical section - the kernel
                             * takes care of that. */
                            queueYIELD_IF_USING_PREEMPTION();
 80044b4:	4b3f      	ldr	r3, [pc, #252]	; (80045b4 <xQueueGenericSend+0x1f8>)
 80044b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80044ba:	601a      	str	r2, [r3, #0]
 80044bc:	f3bf 8f4f 	dsb	sy
 80044c0:	f3bf 8f6f 	isb	sy
 80044c4:	e00a      	b.n	80044dc <xQueueGenericSend+0x120>
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                    else if( xYieldRequired != pdFALSE )
 80044c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d007      	beq.n	80044dc <xQueueGenericSend+0x120>
                    {
                        /* This path is a special case that will only get
                         * executed if the task was holding multiple mutexes and
                         * the mutexes were given back in an order that is
                         * different to that in which they were taken. */
                        queueYIELD_IF_USING_PREEMPTION();
 80044cc:	4b39      	ldr	r3, [pc, #228]	; (80045b4 <xQueueGenericSend+0x1f8>)
 80044ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80044d2:	601a      	str	r2, [r3, #0]
 80044d4:	f3bf 8f4f 	dsb	sy
 80044d8:	f3bf 8f6f 	isb	sy
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 80044dc:	f002 f904 	bl	80066e8 <vPortExitCritical>
                return pdPASS;
 80044e0:	2301      	movs	r3, #1
 80044e2:	e063      	b.n	80045ac <xQueueGenericSend+0x1f0>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d103      	bne.n	80044f2 <xQueueGenericSend+0x136>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80044ea:	f002 f8fd 	bl	80066e8 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 80044ee:	2300      	movs	r3, #0
 80044f0:	e05c      	b.n	80045ac <xQueueGenericSend+0x1f0>
                }
                else if( xEntryTimeSet == pdFALSE )
 80044f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d106      	bne.n	8004506 <xQueueGenericSend+0x14a>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80044f8:	f107 0314 	add.w	r3, r7, #20
 80044fc:	4618      	mov	r0, r3
 80044fe:	f001 f945 	bl	800578c <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8004502:	2301      	movs	r3, #1
 8004504:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8004506:	f002 f8ef 	bl	80066e8 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 800450a:	f000 fd73 	bl	8004ff4 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800450e:	f002 f8bb 	bl	8006688 <vPortEnterCritical>
 8004512:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004514:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004518:	b25b      	sxtb	r3, r3
 800451a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800451e:	d103      	bne.n	8004528 <xQueueGenericSend+0x16c>
 8004520:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004522:	2200      	movs	r2, #0
 8004524:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004528:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800452a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800452e:	b25b      	sxtb	r3, r3
 8004530:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004534:	d103      	bne.n	800453e <xQueueGenericSend+0x182>
 8004536:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004538:	2200      	movs	r2, #0
 800453a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800453e:	f002 f8d3 	bl	80066e8 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004542:	1d3a      	adds	r2, r7, #4
 8004544:	f107 0314 	add.w	r3, r7, #20
 8004548:	4611      	mov	r1, r2
 800454a:	4618      	mov	r0, r3
 800454c:	f001 f934 	bl	80057b8 <xTaskCheckForTimeOut>
 8004550:	4603      	mov	r3, r0
 8004552:	2b00      	cmp	r3, #0
 8004554:	d124      	bne.n	80045a0 <xQueueGenericSend+0x1e4>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004556:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004558:	f000 fb1c 	bl	8004b94 <prvIsQueueFull>
 800455c:	4603      	mov	r3, r0
 800455e:	2b00      	cmp	r3, #0
 8004560:	d018      	beq.n	8004594 <xQueueGenericSend+0x1d8>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004562:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004564:	3310      	adds	r3, #16
 8004566:	687a      	ldr	r2, [r7, #4]
 8004568:	4611      	mov	r1, r2
 800456a:	4618      	mov	r0, r3
 800456c:	f000 ffce 	bl	800550c <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list. It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready list instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8004570:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004572:	f000 faa7 	bl	8004ac4 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in the ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8004576:	f000 fd4b 	bl	8005010 <xTaskResumeAll>
 800457a:	4603      	mov	r3, r0
 800457c:	2b00      	cmp	r3, #0
 800457e:	f47f af7c 	bne.w	800447a <xQueueGenericSend+0xbe>
                {
                    portYIELD_WITHIN_API();
 8004582:	4b0c      	ldr	r3, [pc, #48]	; (80045b4 <xQueueGenericSend+0x1f8>)
 8004584:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004588:	601a      	str	r2, [r3, #0]
 800458a:	f3bf 8f4f 	dsb	sy
 800458e:	f3bf 8f6f 	isb	sy
 8004592:	e772      	b.n	800447a <xQueueGenericSend+0xbe>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8004594:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004596:	f000 fa95 	bl	8004ac4 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800459a:	f000 fd39 	bl	8005010 <xTaskResumeAll>
 800459e:	e76c      	b.n	800447a <xQueueGenericSend+0xbe>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 80045a0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80045a2:	f000 fa8f 	bl	8004ac4 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80045a6:	f000 fd33 	bl	8005010 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 80045aa:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 80045ac:	4618      	mov	r0, r3
 80045ae:	3738      	adds	r7, #56	; 0x38
 80045b0:	46bd      	mov	sp, r7
 80045b2:	bd80      	pop	{r7, pc}
 80045b4:	e000ed04 	.word	0xe000ed04

080045b8 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 80045b8:	b580      	push	{r7, lr}
 80045ba:	b08c      	sub	sp, #48	; 0x30
 80045bc:	af00      	add	r7, sp, #0
 80045be:	60f8      	str	r0, [r7, #12]
 80045c0:	60b9      	str	r1, [r7, #8]
 80045c2:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 80045c4:	2300      	movs	r3, #0
 80045c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 80045cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d10a      	bne.n	80045e8 <xQueueReceive+0x30>
        __asm volatile
 80045d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045d6:	f383 8811 	msr	BASEPRI, r3
 80045da:	f3bf 8f6f 	isb	sy
 80045de:	f3bf 8f4f 	dsb	sy
 80045e2:	623b      	str	r3, [r7, #32]
    }
 80045e4:	bf00      	nop
 80045e6:	e7fe      	b.n	80045e6 <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80045e8:	68bb      	ldr	r3, [r7, #8]
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d103      	bne.n	80045f6 <xQueueReceive+0x3e>
 80045ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d101      	bne.n	80045fa <xQueueReceive+0x42>
 80045f6:	2301      	movs	r3, #1
 80045f8:	e000      	b.n	80045fc <xQueueReceive+0x44>
 80045fa:	2300      	movs	r3, #0
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d10a      	bne.n	8004616 <xQueueReceive+0x5e>
        __asm volatile
 8004600:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004604:	f383 8811 	msr	BASEPRI, r3
 8004608:	f3bf 8f6f 	isb	sy
 800460c:	f3bf 8f4f 	dsb	sy
 8004610:	61fb      	str	r3, [r7, #28]
    }
 8004612:	bf00      	nop
 8004614:	e7fe      	b.n	8004614 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004616:	f001 f9e3 	bl	80059e0 <xTaskGetSchedulerState>
 800461a:	4603      	mov	r3, r0
 800461c:	2b00      	cmp	r3, #0
 800461e:	d102      	bne.n	8004626 <xQueueReceive+0x6e>
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2b00      	cmp	r3, #0
 8004624:	d101      	bne.n	800462a <xQueueReceive+0x72>
 8004626:	2301      	movs	r3, #1
 8004628:	e000      	b.n	800462c <xQueueReceive+0x74>
 800462a:	2300      	movs	r3, #0
 800462c:	2b00      	cmp	r3, #0
 800462e:	d10a      	bne.n	8004646 <xQueueReceive+0x8e>
        __asm volatile
 8004630:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004634:	f383 8811 	msr	BASEPRI, r3
 8004638:	f3bf 8f6f 	isb	sy
 800463c:	f3bf 8f4f 	dsb	sy
 8004640:	61bb      	str	r3, [r7, #24]
    }
 8004642:	bf00      	nop
 8004644:	e7fe      	b.n	8004644 <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8004646:	f002 f81f 	bl	8006688 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800464a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800464c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800464e:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004652:	2b00      	cmp	r3, #0
 8004654:	d01f      	beq.n	8004696 <xQueueReceive+0xde>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004656:	68b9      	ldr	r1, [r7, #8]
 8004658:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800465a:	f000 fa0d 	bl	8004a78 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800465e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004660:	1e5a      	subs	r2, r3, #1
 8004662:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004664:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004666:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004668:	691b      	ldr	r3, [r3, #16]
 800466a:	2b00      	cmp	r3, #0
 800466c:	d00f      	beq.n	800468e <xQueueReceive+0xd6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800466e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004670:	3310      	adds	r3, #16
 8004672:	4618      	mov	r0, r3
 8004674:	f000 ffb4 	bl	80055e0 <xTaskRemoveFromEventList>
 8004678:	4603      	mov	r3, r0
 800467a:	2b00      	cmp	r3, #0
 800467c:	d007      	beq.n	800468e <xQueueReceive+0xd6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 800467e:	4b3d      	ldr	r3, [pc, #244]	; (8004774 <xQueueReceive+0x1bc>)
 8004680:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004684:	601a      	str	r2, [r3, #0]
 8004686:	f3bf 8f4f 	dsb	sy
 800468a:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 800468e:	f002 f82b 	bl	80066e8 <vPortExitCritical>
                return pdPASS;
 8004692:	2301      	movs	r3, #1
 8004694:	e069      	b.n	800476a <xQueueReceive+0x1b2>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	2b00      	cmp	r3, #0
 800469a:	d103      	bne.n	80046a4 <xQueueReceive+0xec>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 800469c:	f002 f824 	bl	80066e8 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 80046a0:	2300      	movs	r3, #0
 80046a2:	e062      	b.n	800476a <xQueueReceive+0x1b2>
                }
                else if( xEntryTimeSet == pdFALSE )
 80046a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d106      	bne.n	80046b8 <xQueueReceive+0x100>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80046aa:	f107 0310 	add.w	r3, r7, #16
 80046ae:	4618      	mov	r0, r3
 80046b0:	f001 f86c 	bl	800578c <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80046b4:	2301      	movs	r3, #1
 80046b6:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80046b8:	f002 f816 	bl	80066e8 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80046bc:	f000 fc9a 	bl	8004ff4 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80046c0:	f001 ffe2 	bl	8006688 <vPortEnterCritical>
 80046c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046c6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80046ca:	b25b      	sxtb	r3, r3
 80046cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046d0:	d103      	bne.n	80046da <xQueueReceive+0x122>
 80046d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046d4:	2200      	movs	r2, #0
 80046d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80046da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046dc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80046e0:	b25b      	sxtb	r3, r3
 80046e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046e6:	d103      	bne.n	80046f0 <xQueueReceive+0x138>
 80046e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046ea:	2200      	movs	r2, #0
 80046ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80046f0:	f001 fffa 	bl	80066e8 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80046f4:	1d3a      	adds	r2, r7, #4
 80046f6:	f107 0310 	add.w	r3, r7, #16
 80046fa:	4611      	mov	r1, r2
 80046fc:	4618      	mov	r0, r3
 80046fe:	f001 f85b 	bl	80057b8 <xTaskCheckForTimeOut>
 8004702:	4603      	mov	r3, r0
 8004704:	2b00      	cmp	r3, #0
 8004706:	d123      	bne.n	8004750 <xQueueReceive+0x198>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004708:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800470a:	f000 fa2d 	bl	8004b68 <prvIsQueueEmpty>
 800470e:	4603      	mov	r3, r0
 8004710:	2b00      	cmp	r3, #0
 8004712:	d017      	beq.n	8004744 <xQueueReceive+0x18c>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004714:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004716:	3324      	adds	r3, #36	; 0x24
 8004718:	687a      	ldr	r2, [r7, #4]
 800471a:	4611      	mov	r1, r2
 800471c:	4618      	mov	r0, r3
 800471e:	f000 fef5 	bl	800550c <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8004722:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004724:	f000 f9ce 	bl	8004ac4 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8004728:	f000 fc72 	bl	8005010 <xTaskResumeAll>
 800472c:	4603      	mov	r3, r0
 800472e:	2b00      	cmp	r3, #0
 8004730:	d189      	bne.n	8004646 <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 8004732:	4b10      	ldr	r3, [pc, #64]	; (8004774 <xQueueReceive+0x1bc>)
 8004734:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004738:	601a      	str	r2, [r3, #0]
 800473a:	f3bf 8f4f 	dsb	sy
 800473e:	f3bf 8f6f 	isb	sy
 8004742:	e780      	b.n	8004646 <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8004744:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004746:	f000 f9bd 	bl	8004ac4 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800474a:	f000 fc61 	bl	8005010 <xTaskResumeAll>
 800474e:	e77a      	b.n	8004646 <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8004750:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004752:	f000 f9b7 	bl	8004ac4 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8004756:	f000 fc5b 	bl	8005010 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800475a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800475c:	f000 fa04 	bl	8004b68 <prvIsQueueEmpty>
 8004760:	4603      	mov	r3, r0
 8004762:	2b00      	cmp	r3, #0
 8004764:	f43f af6f 	beq.w	8004646 <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8004768:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 800476a:	4618      	mov	r0, r3
 800476c:	3730      	adds	r7, #48	; 0x30
 800476e:	46bd      	mov	sp, r7
 8004770:	bd80      	pop	{r7, pc}
 8004772:	bf00      	nop
 8004774:	e000ed04 	.word	0xe000ed04

08004778 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue,
                                TickType_t xTicksToWait )
{
 8004778:	b580      	push	{r7, lr}
 800477a:	b08c      	sub	sp, #48	; 0x30
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
 8004780:	6039      	str	r1, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE;
 8004782:	2300      	movs	r3, #0
 8004784:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	627b      	str	r3, [r7, #36]	; 0x24

    #if ( configUSE_MUTEXES == 1 )
        BaseType_t xInheritanceOccurred = pdFALSE;
 800478a:	2300      	movs	r3, #0
 800478c:	62bb      	str	r3, [r7, #40]	; 0x28
    #endif

    /* Check the queue pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 800478e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004790:	2b00      	cmp	r3, #0
 8004792:	d10a      	bne.n	80047aa <xQueueSemaphoreTake+0x32>
        __asm volatile
 8004794:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004798:	f383 8811 	msr	BASEPRI, r3
 800479c:	f3bf 8f6f 	isb	sy
 80047a0:	f3bf 8f4f 	dsb	sy
 80047a4:	61bb      	str	r3, [r7, #24]
    }
 80047a6:	bf00      	nop
 80047a8:	e7fe      	b.n	80047a8 <xQueueSemaphoreTake+0x30>

    /* Check this really is a semaphore, in which case the item size will be
     * 0. */
    configASSERT( pxQueue->uxItemSize == 0 );
 80047aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d00a      	beq.n	80047c8 <xQueueSemaphoreTake+0x50>
        __asm volatile
 80047b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047b6:	f383 8811 	msr	BASEPRI, r3
 80047ba:	f3bf 8f6f 	isb	sy
 80047be:	f3bf 8f4f 	dsb	sy
 80047c2:	617b      	str	r3, [r7, #20]
    }
 80047c4:	bf00      	nop
 80047c6:	e7fe      	b.n	80047c6 <xQueueSemaphoreTake+0x4e>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80047c8:	f001 f90a 	bl	80059e0 <xTaskGetSchedulerState>
 80047cc:	4603      	mov	r3, r0
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d102      	bne.n	80047d8 <xQueueSemaphoreTake+0x60>
 80047d2:	683b      	ldr	r3, [r7, #0]
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d101      	bne.n	80047dc <xQueueSemaphoreTake+0x64>
 80047d8:	2301      	movs	r3, #1
 80047da:	e000      	b.n	80047de <xQueueSemaphoreTake+0x66>
 80047dc:	2300      	movs	r3, #0
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d10a      	bne.n	80047f8 <xQueueSemaphoreTake+0x80>
        __asm volatile
 80047e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047e6:	f383 8811 	msr	BASEPRI, r3
 80047ea:	f3bf 8f6f 	isb	sy
 80047ee:	f3bf 8f4f 	dsb	sy
 80047f2:	613b      	str	r3, [r7, #16]
    }
 80047f4:	bf00      	nop
 80047f6:	e7fe      	b.n	80047f6 <xQueueSemaphoreTake+0x7e>
    /*lint -save -e904 This function relaxes the coding standard somewhat to allow return
     * statements within the function itself.  This is done in the interest
     * of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80047f8:	f001 ff46 	bl	8006688 <vPortEnterCritical>
        {
            /* Semaphores are queues with an item size of 0, and where the
             * number of messages in the queue is the semaphore's count value. */
            const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80047fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004800:	623b      	str	r3, [r7, #32]

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8004802:	6a3b      	ldr	r3, [r7, #32]
 8004804:	2b00      	cmp	r3, #0
 8004806:	d024      	beq.n	8004852 <xQueueSemaphoreTake+0xda>
            {
                traceQUEUE_RECEIVE( pxQueue );

                /* Semaphores are queues with a data size of zero and where the
                 * messages waiting is the semaphore's count.  Reduce the count. */
                pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8004808:	6a3b      	ldr	r3, [r7, #32]
 800480a:	1e5a      	subs	r2, r3, #1
 800480c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800480e:	639a      	str	r2, [r3, #56]	; 0x38

                #if ( configUSE_MUTEXES == 1 )
                {
                    if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	2b00      	cmp	r3, #0
 8004816:	d104      	bne.n	8004822 <xQueueSemaphoreTake+0xaa>
                    {
                        /* Record the information required to implement
                         * priority inheritance should it become necessary. */
                        pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8004818:	f001 fafa 	bl	8005e10 <pvTaskIncrementMutexHeldCount>
 800481c:	4602      	mov	r2, r0
 800481e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004820:	609a      	str	r2, [r3, #8]
                }
                #endif /* configUSE_MUTEXES */

                /* Check to see if other tasks are blocked waiting to give the
                 * semaphore, and if so, unblock the highest priority such task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004824:	691b      	ldr	r3, [r3, #16]
 8004826:	2b00      	cmp	r3, #0
 8004828:	d00f      	beq.n	800484a <xQueueSemaphoreTake+0xd2>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800482a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800482c:	3310      	adds	r3, #16
 800482e:	4618      	mov	r0, r3
 8004830:	f000 fed6 	bl	80055e0 <xTaskRemoveFromEventList>
 8004834:	4603      	mov	r3, r0
 8004836:	2b00      	cmp	r3, #0
 8004838:	d007      	beq.n	800484a <xQueueSemaphoreTake+0xd2>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 800483a:	4b4d      	ldr	r3, [pc, #308]	; (8004970 <xQueueSemaphoreTake+0x1f8>)
 800483c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004840:	601a      	str	r2, [r3, #0]
 8004842:	f3bf 8f4f 	dsb	sy
 8004846:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 800484a:	f001 ff4d 	bl	80066e8 <vPortExitCritical>
                return pdPASS;
 800484e:	2301      	movs	r3, #1
 8004850:	e089      	b.n	8004966 <xQueueSemaphoreTake+0x1ee>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8004852:	683b      	ldr	r3, [r7, #0]
 8004854:	2b00      	cmp	r3, #0
 8004856:	d103      	bne.n	8004860 <xQueueSemaphoreTake+0xe8>
                {
                    /* The semaphore count was 0 and no block time is specified
                     * (or the block time has expired) so exit now. */
                    taskEXIT_CRITICAL();
 8004858:	f001 ff46 	bl	80066e8 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 800485c:	2300      	movs	r3, #0
 800485e:	e082      	b.n	8004966 <xQueueSemaphoreTake+0x1ee>
                }
                else if( xEntryTimeSet == pdFALSE )
 8004860:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004862:	2b00      	cmp	r3, #0
 8004864:	d106      	bne.n	8004874 <xQueueSemaphoreTake+0xfc>
                {
                    /* The semaphore count was 0 and a block time was specified
                     * so configure the timeout structure ready to block. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8004866:	f107 0308 	add.w	r3, r7, #8
 800486a:	4618      	mov	r0, r3
 800486c:	f000 ff8e 	bl	800578c <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8004870:	2301      	movs	r3, #1
 8004872:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8004874:	f001 ff38 	bl	80066e8 <vPortExitCritical>

        /* Interrupts and other tasks can give to and take from the semaphore
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8004878:	f000 fbbc 	bl	8004ff4 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800487c:	f001 ff04 	bl	8006688 <vPortEnterCritical>
 8004880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004882:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004886:	b25b      	sxtb	r3, r3
 8004888:	f1b3 3fff 	cmp.w	r3, #4294967295
 800488c:	d103      	bne.n	8004896 <xQueueSemaphoreTake+0x11e>
 800488e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004890:	2200      	movs	r2, #0
 8004892:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004898:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800489c:	b25b      	sxtb	r3, r3
 800489e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048a2:	d103      	bne.n	80048ac <xQueueSemaphoreTake+0x134>
 80048a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048a6:	2200      	movs	r2, #0
 80048a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80048ac:	f001 ff1c 	bl	80066e8 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80048b0:	463a      	mov	r2, r7
 80048b2:	f107 0308 	add.w	r3, r7, #8
 80048b6:	4611      	mov	r1, r2
 80048b8:	4618      	mov	r0, r3
 80048ba:	f000 ff7d 	bl	80057b8 <xTaskCheckForTimeOut>
 80048be:	4603      	mov	r3, r0
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d132      	bne.n	800492a <xQueueSemaphoreTake+0x1b2>
        {
            /* A block time is specified and not expired.  If the semaphore
             * count is 0 then enter the Blocked state to wait for a semaphore to
             * become available.  As semaphores are implemented with queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80048c4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80048c6:	f000 f94f 	bl	8004b68 <prvIsQueueEmpty>
 80048ca:	4603      	mov	r3, r0
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d026      	beq.n	800491e <xQueueSemaphoreTake+0x1a6>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

                #if ( configUSE_MUTEXES == 1 )
                {
                    if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80048d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d109      	bne.n	80048ec <xQueueSemaphoreTake+0x174>
                    {
                        taskENTER_CRITICAL();
 80048d8:	f001 fed6 	bl	8006688 <vPortEnterCritical>
                        {
                            xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80048dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048de:	689b      	ldr	r3, [r3, #8]
 80048e0:	4618      	mov	r0, r3
 80048e2:	f001 f89b 	bl	8005a1c <xTaskPriorityInherit>
 80048e6:	62b8      	str	r0, [r7, #40]	; 0x28
                        }
                        taskEXIT_CRITICAL();
 80048e8:	f001 fefe 	bl	80066e8 <vPortExitCritical>
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* if ( configUSE_MUTEXES == 1 ) */

                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80048ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ee:	3324      	adds	r3, #36	; 0x24
 80048f0:	683a      	ldr	r2, [r7, #0]
 80048f2:	4611      	mov	r1, r2
 80048f4:	4618      	mov	r0, r3
 80048f6:	f000 fe09 	bl	800550c <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 80048fa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80048fc:	f000 f8e2 	bl	8004ac4 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8004900:	f000 fb86 	bl	8005010 <xTaskResumeAll>
 8004904:	4603      	mov	r3, r0
 8004906:	2b00      	cmp	r3, #0
 8004908:	f47f af76 	bne.w	80047f8 <xQueueSemaphoreTake+0x80>
                {
                    portYIELD_WITHIN_API();
 800490c:	4b18      	ldr	r3, [pc, #96]	; (8004970 <xQueueSemaphoreTake+0x1f8>)
 800490e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004912:	601a      	str	r2, [r3, #0]
 8004914:	f3bf 8f4f 	dsb	sy
 8004918:	f3bf 8f6f 	isb	sy
 800491c:	e76c      	b.n	80047f8 <xQueueSemaphoreTake+0x80>
            }
            else
            {
                /* There was no timeout and the semaphore count was not 0, so
                 * attempt to take the semaphore again. */
                prvUnlockQueue( pxQueue );
 800491e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004920:	f000 f8d0 	bl	8004ac4 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8004924:	f000 fb74 	bl	8005010 <xTaskResumeAll>
 8004928:	e766      	b.n	80047f8 <xQueueSemaphoreTake+0x80>
            }
        }
        else
        {
            /* Timed out. */
            prvUnlockQueue( pxQueue );
 800492a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800492c:	f000 f8ca 	bl	8004ac4 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8004930:	f000 fb6e 	bl	8005010 <xTaskResumeAll>

            /* If the semaphore count is 0 exit now as the timeout has
             * expired.  Otherwise return to attempt to take the semaphore that is
             * known to be available.  As semaphores are implemented by queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004934:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004936:	f000 f917 	bl	8004b68 <prvIsQueueEmpty>
 800493a:	4603      	mov	r3, r0
 800493c:	2b00      	cmp	r3, #0
 800493e:	f43f af5b 	beq.w	80047f8 <xQueueSemaphoreTake+0x80>
                #if ( configUSE_MUTEXES == 1 )
                {
                    /* xInheritanceOccurred could only have be set if
                     * pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
                     * test the mutex type again to check it is actually a mutex. */
                    if( xInheritanceOccurred != pdFALSE )
 8004942:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004944:	2b00      	cmp	r3, #0
 8004946:	d00d      	beq.n	8004964 <xQueueSemaphoreTake+0x1ec>
                    {
                        taskENTER_CRITICAL();
 8004948:	f001 fe9e 	bl	8006688 <vPortEnterCritical>
                            /* This task blocking on the mutex caused another
                             * task to inherit this task's priority.  Now this task
                             * has timed out the priority should be disinherited
                             * again, but only as low as the next highest priority
                             * task that is waiting for the same mutex. */
                            uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800494c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800494e:	f000 f811 	bl	8004974 <prvGetDisinheritPriorityAfterTimeout>
 8004952:	61f8      	str	r0, [r7, #28]
                            vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8004954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004956:	689b      	ldr	r3, [r3, #8]
 8004958:	69f9      	ldr	r1, [r7, #28]
 800495a:	4618      	mov	r0, r3
 800495c:	f001 f9a0 	bl	8005ca0 <vTaskPriorityDisinheritAfterTimeout>
                        }
                        taskEXIT_CRITICAL();
 8004960:	f001 fec2 	bl	80066e8 <vPortExitCritical>
                    }
                }
                #endif /* configUSE_MUTEXES */

                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8004964:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8004966:	4618      	mov	r0, r3
 8004968:	3730      	adds	r7, #48	; 0x30
 800496a:	46bd      	mov	sp, r7
 800496c:	bd80      	pop	{r7, pc}
 800496e:	bf00      	nop
 8004970:	e000ed04 	.word	0xe000ed04

08004974 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
    {
 8004974:	b480      	push	{r7}
 8004976:	b085      	sub	sp, #20
 8004978:	af00      	add	r7, sp, #0
 800497a:	6078      	str	r0, [r7, #4]
         * priority, but the waiting task times out, then the holder should
         * disinherit the priority - but only down to the highest priority of any
         * other tasks that are waiting for the same mutex.  For this purpose,
         * return the priority of the highest priority task that is waiting for the
         * mutex. */
        if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004980:	2b00      	cmp	r3, #0
 8004982:	d006      	beq.n	8004992 <prvGetDisinheritPriorityAfterTimeout+0x1e>
        {
            uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f1c3 0305 	rsb	r3, r3, #5
 800498e:	60fb      	str	r3, [r7, #12]
 8004990:	e001      	b.n	8004996 <prvGetDisinheritPriorityAfterTimeout+0x22>
        }
        else
        {
            uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8004992:	2300      	movs	r3, #0
 8004994:	60fb      	str	r3, [r7, #12]
        }

        return uxHighestPriorityOfWaitingTasks;
 8004996:	68fb      	ldr	r3, [r7, #12]
    }
 8004998:	4618      	mov	r0, r3
 800499a:	3714      	adds	r7, #20
 800499c:	46bd      	mov	sp, r7
 800499e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a2:	4770      	bx	lr

080049a4 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 80049a4:	b580      	push	{r7, lr}
 80049a6:	b086      	sub	sp, #24
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	60f8      	str	r0, [r7, #12]
 80049ac:	60b9      	str	r1, [r7, #8]
 80049ae:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 80049b0:	2300      	movs	r3, #0
 80049b2:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049b8:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d10d      	bne.n	80049de <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
        {
            if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d14d      	bne.n	8004a66 <prvCopyDataToQueue+0xc2>
            {
                /* The mutex is no longer being held. */
                xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	689b      	ldr	r3, [r3, #8]
 80049ce:	4618      	mov	r0, r3
 80049d0:	f001 f8c2 	bl	8005b58 <xTaskPriorityDisinherit>
 80049d4:	6178      	str	r0, [r7, #20]
                pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	2200      	movs	r2, #0
 80049da:	609a      	str	r2, [r3, #8]
 80049dc:	e043      	b.n	8004a66 <prvCopyDataToQueue+0xc2>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d119      	bne.n	8004a18 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	6858      	ldr	r0, [r3, #4]
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049ec:	461a      	mov	r2, r3
 80049ee:	68b9      	ldr	r1, [r7, #8]
 80049f0:	f002 f924 	bl	8006c3c <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	685a      	ldr	r2, [r3, #4]
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049fc:	441a      	add	r2, r3
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	685a      	ldr	r2, [r3, #4]
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	689b      	ldr	r3, [r3, #8]
 8004a0a:	429a      	cmp	r2, r3
 8004a0c:	d32b      	bcc.n	8004a66 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	681a      	ldr	r2, [r3, #0]
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	605a      	str	r2, [r3, #4]
 8004a16:	e026      	b.n	8004a66 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	68d8      	ldr	r0, [r3, #12]
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a20:	461a      	mov	r2, r3
 8004a22:	68b9      	ldr	r1, [r7, #8]
 8004a24:	f002 f90a 	bl	8006c3c <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	68da      	ldr	r2, [r3, #12]
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a30:	425b      	negs	r3, r3
 8004a32:	441a      	add	r2, r3
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	68da      	ldr	r2, [r3, #12]
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	429a      	cmp	r2, r3
 8004a42:	d207      	bcs.n	8004a54 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	689a      	ldr	r2, [r3, #8]
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a4c:	425b      	negs	r3, r3
 8004a4e:	441a      	add	r2, r3
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2b02      	cmp	r3, #2
 8004a58:	d105      	bne.n	8004a66 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004a5a:	693b      	ldr	r3, [r7, #16]
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d002      	beq.n	8004a66 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8004a60:	693b      	ldr	r3, [r7, #16]
 8004a62:	3b01      	subs	r3, #1
 8004a64:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004a66:	693b      	ldr	r3, [r7, #16]
 8004a68:	1c5a      	adds	r2, r3, #1
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 8004a6e:	697b      	ldr	r3, [r7, #20]
}
 8004a70:	4618      	mov	r0, r3
 8004a72:	3718      	adds	r7, #24
 8004a74:	46bd      	mov	sp, r7
 8004a76:	bd80      	pop	{r7, pc}

08004a78 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8004a78:	b580      	push	{r7, lr}
 8004a7a:	b082      	sub	sp, #8
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	6078      	str	r0, [r7, #4]
 8004a80:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d018      	beq.n	8004abc <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	68da      	ldr	r2, [r3, #12]
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a92:	441a      	add	r2, r3
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	68da      	ldr	r2, [r3, #12]
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	689b      	ldr	r3, [r3, #8]
 8004aa0:	429a      	cmp	r2, r3
 8004aa2:	d303      	bcc.n	8004aac <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681a      	ldr	r2, [r3, #0]
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	68d9      	ldr	r1, [r3, #12]
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ab4:	461a      	mov	r2, r3
 8004ab6:	6838      	ldr	r0, [r7, #0]
 8004ab8:	f002 f8c0 	bl	8006c3c <memcpy>
    }
}
 8004abc:	bf00      	nop
 8004abe:	3708      	adds	r7, #8
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	bd80      	pop	{r7, pc}

08004ac4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004ac4:	b580      	push	{r7, lr}
 8004ac6:	b084      	sub	sp, #16
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8004acc:	f001 fddc 	bl	8006688 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004ad6:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8004ad8:	e011      	b.n	8004afe <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d012      	beq.n	8004b08 <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	3324      	adds	r3, #36	; 0x24
 8004ae6:	4618      	mov	r0, r3
 8004ae8:	f000 fd7a 	bl	80055e0 <xTaskRemoveFromEventList>
 8004aec:	4603      	mov	r3, r0
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d001      	beq.n	8004af6 <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 8004af2:	f000 fec7 	bl	8005884 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8004af6:	7bfb      	ldrb	r3, [r7, #15]
 8004af8:	3b01      	subs	r3, #1
 8004afa:	b2db      	uxtb	r3, r3
 8004afc:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8004afe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	dce9      	bgt.n	8004ada <prvUnlockQueue+0x16>
 8004b06:	e000      	b.n	8004b0a <prvUnlockQueue+0x46>
                    break;
 8004b08:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	22ff      	movs	r2, #255	; 0xff
 8004b0e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8004b12:	f001 fde9 	bl	80066e8 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8004b16:	f001 fdb7 	bl	8006688 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004b20:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8004b22:	e011      	b.n	8004b48 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	691b      	ldr	r3, [r3, #16]
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d012      	beq.n	8004b52 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	3310      	adds	r3, #16
 8004b30:	4618      	mov	r0, r3
 8004b32:	f000 fd55 	bl	80055e0 <xTaskRemoveFromEventList>
 8004b36:	4603      	mov	r3, r0
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d001      	beq.n	8004b40 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8004b3c:	f000 fea2 	bl	8005884 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8004b40:	7bbb      	ldrb	r3, [r7, #14]
 8004b42:	3b01      	subs	r3, #1
 8004b44:	b2db      	uxtb	r3, r3
 8004b46:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8004b48:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	dce9      	bgt.n	8004b24 <prvUnlockQueue+0x60>
 8004b50:	e000      	b.n	8004b54 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8004b52:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	22ff      	movs	r2, #255	; 0xff
 8004b58:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8004b5c:	f001 fdc4 	bl	80066e8 <vPortExitCritical>
}
 8004b60:	bf00      	nop
 8004b62:	3710      	adds	r7, #16
 8004b64:	46bd      	mov	sp, r7
 8004b66:	bd80      	pop	{r7, pc}

08004b68 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8004b68:	b580      	push	{r7, lr}
 8004b6a:	b084      	sub	sp, #16
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8004b70:	f001 fd8a 	bl	8006688 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d102      	bne.n	8004b82 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8004b7c:	2301      	movs	r3, #1
 8004b7e:	60fb      	str	r3, [r7, #12]
 8004b80:	e001      	b.n	8004b86 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8004b82:	2300      	movs	r3, #0
 8004b84:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8004b86:	f001 fdaf 	bl	80066e8 <vPortExitCritical>

    return xReturn;
 8004b8a:	68fb      	ldr	r3, [r7, #12]
}
 8004b8c:	4618      	mov	r0, r3
 8004b8e:	3710      	adds	r7, #16
 8004b90:	46bd      	mov	sp, r7
 8004b92:	bd80      	pop	{r7, pc}

08004b94 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8004b94:	b580      	push	{r7, lr}
 8004b96:	b084      	sub	sp, #16
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8004b9c:	f001 fd74 	bl	8006688 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ba8:	429a      	cmp	r2, r3
 8004baa:	d102      	bne.n	8004bb2 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8004bac:	2301      	movs	r3, #1
 8004bae:	60fb      	str	r3, [r7, #12]
 8004bb0:	e001      	b.n	8004bb6 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8004bb2:	2300      	movs	r3, #0
 8004bb4:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8004bb6:	f001 fd97 	bl	80066e8 <vPortExitCritical>

    return xReturn;
 8004bba:	68fb      	ldr	r3, [r7, #12]
}
 8004bbc:	4618      	mov	r0, r3
 8004bbe:	3710      	adds	r7, #16
 8004bc0:	46bd      	mov	sp, r7
 8004bc2:	bd80      	pop	{r7, pc}

08004bc4 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8004bc4:	b580      	push	{r7, lr}
 8004bc6:	b086      	sub	sp, #24
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	60f8      	str	r0, [r7, #12]
 8004bcc:	60b9      	str	r1, [r7, #8]
 8004bce:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8004bd4:	f001 fd58 	bl	8006688 <vPortEnterCritical>
 8004bd8:	697b      	ldr	r3, [r7, #20]
 8004bda:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004bde:	b25b      	sxtb	r3, r3
 8004be0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004be4:	d103      	bne.n	8004bee <vQueueWaitForMessageRestricted+0x2a>
 8004be6:	697b      	ldr	r3, [r7, #20]
 8004be8:	2200      	movs	r2, #0
 8004bea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004bee:	697b      	ldr	r3, [r7, #20]
 8004bf0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004bf4:	b25b      	sxtb	r3, r3
 8004bf6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bfa:	d103      	bne.n	8004c04 <vQueueWaitForMessageRestricted+0x40>
 8004bfc:	697b      	ldr	r3, [r7, #20]
 8004bfe:	2200      	movs	r2, #0
 8004c00:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004c04:	f001 fd70 	bl	80066e8 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004c08:	697b      	ldr	r3, [r7, #20]
 8004c0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d106      	bne.n	8004c1e <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004c10:	697b      	ldr	r3, [r7, #20]
 8004c12:	3324      	adds	r3, #36	; 0x24
 8004c14:	687a      	ldr	r2, [r7, #4]
 8004c16:	68b9      	ldr	r1, [r7, #8]
 8004c18:	4618      	mov	r0, r3
 8004c1a:	f000 fc9b 	bl	8005554 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8004c1e:	6978      	ldr	r0, [r7, #20]
 8004c20:	f7ff ff50 	bl	8004ac4 <prvUnlockQueue>
    }
 8004c24:	bf00      	nop
 8004c26:	3718      	adds	r7, #24
 8004c28:	46bd      	mov	sp, r7
 8004c2a:	bd80      	pop	{r7, pc}

08004c2c <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8004c2c:	b580      	push	{r7, lr}
 8004c2e:	b08c      	sub	sp, #48	; 0x30
 8004c30:	af04      	add	r7, sp, #16
 8004c32:	60f8      	str	r0, [r7, #12]
 8004c34:	60b9      	str	r1, [r7, #8]
 8004c36:	603b      	str	r3, [r7, #0]
 8004c38:	4613      	mov	r3, r2
 8004c3a:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004c3c:	88fb      	ldrh	r3, [r7, #6]
 8004c3e:	009b      	lsls	r3, r3, #2
 8004c40:	4618      	mov	r0, r3
 8004c42:	f001 fe03 	bl	800684c <pvPortMalloc>
 8004c46:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 8004c48:	697b      	ldr	r3, [r7, #20]
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d013      	beq.n	8004c76 <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004c4e:	2050      	movs	r0, #80	; 0x50
 8004c50:	f001 fdfc 	bl	800684c <pvPortMalloc>
 8004c54:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 8004c56:	69fb      	ldr	r3, [r7, #28]
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d008      	beq.n	8004c6e <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8004c5c:	2250      	movs	r2, #80	; 0x50
 8004c5e:	2100      	movs	r1, #0
 8004c60:	69f8      	ldr	r0, [r7, #28]
 8004c62:	f001 ffbf 	bl	8006be4 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 8004c66:	69fb      	ldr	r3, [r7, #28]
 8004c68:	697a      	ldr	r2, [r7, #20]
 8004c6a:	631a      	str	r2, [r3, #48]	; 0x30
 8004c6c:	e005      	b.n	8004c7a <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 8004c6e:	6978      	ldr	r0, [r7, #20]
 8004c70:	f001 fea6 	bl	80069c0 <vPortFree>
 8004c74:	e001      	b.n	8004c7a <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 8004c76:	2300      	movs	r3, #0
 8004c78:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8004c7a:	69fb      	ldr	r3, [r7, #28]
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d013      	beq.n	8004ca8 <xTaskCreate+0x7c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004c80:	88fa      	ldrh	r2, [r7, #6]
 8004c82:	2300      	movs	r3, #0
 8004c84:	9303      	str	r3, [sp, #12]
 8004c86:	69fb      	ldr	r3, [r7, #28]
 8004c88:	9302      	str	r3, [sp, #8]
 8004c8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c8c:	9301      	str	r3, [sp, #4]
 8004c8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c90:	9300      	str	r3, [sp, #0]
 8004c92:	683b      	ldr	r3, [r7, #0]
 8004c94:	68b9      	ldr	r1, [r7, #8]
 8004c96:	68f8      	ldr	r0, [r7, #12]
 8004c98:	f000 f80e 	bl	8004cb8 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8004c9c:	69f8      	ldr	r0, [r7, #28]
 8004c9e:	f000 f891 	bl	8004dc4 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8004ca2:	2301      	movs	r3, #1
 8004ca4:	61bb      	str	r3, [r7, #24]
 8004ca6:	e002      	b.n	8004cae <xTaskCreate+0x82>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004ca8:	f04f 33ff 	mov.w	r3, #4294967295
 8004cac:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8004cae:	69bb      	ldr	r3, [r7, #24]
    }
 8004cb0:	4618      	mov	r0, r3
 8004cb2:	3720      	adds	r7, #32
 8004cb4:	46bd      	mov	sp, r7
 8004cb6:	bd80      	pop	{r7, pc}

08004cb8 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8004cb8:	b580      	push	{r7, lr}
 8004cba:	b088      	sub	sp, #32
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	60f8      	str	r0, [r7, #12]
 8004cc0:	60b9      	str	r1, [r7, #8]
 8004cc2:	607a      	str	r2, [r7, #4]
 8004cc4:	603b      	str	r3, [r7, #0]
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004cc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cc8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004cd0:	3b01      	subs	r3, #1
 8004cd2:	009b      	lsls	r3, r3, #2
 8004cd4:	4413      	add	r3, r2
 8004cd6:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004cd8:	69bb      	ldr	r3, [r7, #24]
 8004cda:	f023 0307 	bic.w	r3, r3, #7
 8004cde:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004ce0:	69bb      	ldr	r3, [r7, #24]
 8004ce2:	f003 0307 	and.w	r3, r3, #7
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d00a      	beq.n	8004d00 <prvInitialiseNewTask+0x48>
        __asm volatile
 8004cea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cee:	f383 8811 	msr	BASEPRI, r3
 8004cf2:	f3bf 8f6f 	isb	sy
 8004cf6:	f3bf 8f4f 	dsb	sy
 8004cfa:	617b      	str	r3, [r7, #20]
    }
 8004cfc:	bf00      	nop
 8004cfe:	e7fe      	b.n	8004cfe <prvInitialiseNewTask+0x46>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8004d00:	68bb      	ldr	r3, [r7, #8]
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d01e      	beq.n	8004d44 <prvInitialiseNewTask+0x8c>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004d06:	2300      	movs	r3, #0
 8004d08:	61fb      	str	r3, [r7, #28]
 8004d0a:	e012      	b.n	8004d32 <prvInitialiseNewTask+0x7a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004d0c:	68ba      	ldr	r2, [r7, #8]
 8004d0e:	69fb      	ldr	r3, [r7, #28]
 8004d10:	4413      	add	r3, r2
 8004d12:	7819      	ldrb	r1, [r3, #0]
 8004d14:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004d16:	69fb      	ldr	r3, [r7, #28]
 8004d18:	4413      	add	r3, r2
 8004d1a:	3334      	adds	r3, #52	; 0x34
 8004d1c:	460a      	mov	r2, r1
 8004d1e:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8004d20:	68ba      	ldr	r2, [r7, #8]
 8004d22:	69fb      	ldr	r3, [r7, #28]
 8004d24:	4413      	add	r3, r2
 8004d26:	781b      	ldrb	r3, [r3, #0]
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d006      	beq.n	8004d3a <prvInitialiseNewTask+0x82>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004d2c:	69fb      	ldr	r3, [r7, #28]
 8004d2e:	3301      	adds	r3, #1
 8004d30:	61fb      	str	r3, [r7, #28]
 8004d32:	69fb      	ldr	r3, [r7, #28]
 8004d34:	2b09      	cmp	r3, #9
 8004d36:	d9e9      	bls.n	8004d0c <prvInitialiseNewTask+0x54>
 8004d38:	e000      	b.n	8004d3c <prvInitialiseNewTask+0x84>
            {
                break;
 8004d3a:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004d3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d3e:	2200      	movs	r2, #0
 8004d40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8004d44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d46:	2b04      	cmp	r3, #4
 8004d48:	d90a      	bls.n	8004d60 <prvInitialiseNewTask+0xa8>
        __asm volatile
 8004d4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d4e:	f383 8811 	msr	BASEPRI, r3
 8004d52:	f3bf 8f6f 	isb	sy
 8004d56:	f3bf 8f4f 	dsb	sy
 8004d5a:	613b      	str	r3, [r7, #16]
    }
 8004d5c:	bf00      	nop
 8004d5e:	e7fe      	b.n	8004d5e <prvInitialiseNewTask+0xa6>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004d60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d62:	2b04      	cmp	r3, #4
 8004d64:	d901      	bls.n	8004d6a <prvInitialiseNewTask+0xb2>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004d66:	2304      	movs	r3, #4
 8004d68:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8004d6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d6c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004d6e:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8004d70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d72:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004d74:	641a      	str	r2, [r3, #64]	; 0x40
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004d76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d78:	3304      	adds	r3, #4
 8004d7a:	4618      	mov	r0, r3
 8004d7c:	f7ff f97e 	bl	800407c <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004d80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d82:	3318      	adds	r3, #24
 8004d84:	4618      	mov	r0, r3
 8004d86:	f7ff f979 	bl	800407c <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004d8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d8c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004d8e:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004d90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d92:	f1c3 0205 	rsb	r2, r3, #5
 8004d96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d98:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004d9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d9c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004d9e:	625a      	str	r2, [r3, #36]	; 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004da0:	683a      	ldr	r2, [r7, #0]
 8004da2:	68f9      	ldr	r1, [r7, #12]
 8004da4:	69b8      	ldr	r0, [r7, #24]
 8004da6:	f001 fb3f 	bl	8006428 <pxPortInitialiseStack>
 8004daa:	4602      	mov	r2, r0
 8004dac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dae:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8004db0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d002      	beq.n	8004dbc <prvInitialiseNewTask+0x104>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004db6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004db8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004dba:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8004dbc:	bf00      	nop
 8004dbe:	3720      	adds	r7, #32
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	bd80      	pop	{r7, pc}

08004dc4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8004dc4:	b580      	push	{r7, lr}
 8004dc6:	b084      	sub	sp, #16
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8004dcc:	f001 fc5c 	bl	8006688 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8004dd0:	4b3e      	ldr	r3, [pc, #248]	; (8004ecc <prvAddNewTaskToReadyList+0x108>)
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	3301      	adds	r3, #1
 8004dd6:	4a3d      	ldr	r2, [pc, #244]	; (8004ecc <prvAddNewTaskToReadyList+0x108>)
 8004dd8:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8004dda:	4b3d      	ldr	r3, [pc, #244]	; (8004ed0 <prvAddNewTaskToReadyList+0x10c>)
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d109      	bne.n	8004df6 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8004de2:	4a3b      	ldr	r2, [pc, #236]	; (8004ed0 <prvAddNewTaskToReadyList+0x10c>)
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004de8:	4b38      	ldr	r3, [pc, #224]	; (8004ecc <prvAddNewTaskToReadyList+0x108>)
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	2b01      	cmp	r3, #1
 8004dee:	d110      	bne.n	8004e12 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8004df0:	f000 fd5c 	bl	80058ac <prvInitialiseTaskLists>
 8004df4:	e00d      	b.n	8004e12 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8004df6:	4b37      	ldr	r3, [pc, #220]	; (8004ed4 <prvAddNewTaskToReadyList+0x110>)
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d109      	bne.n	8004e12 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004dfe:	4b34      	ldr	r3, [pc, #208]	; (8004ed0 <prvAddNewTaskToReadyList+0x10c>)
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e08:	429a      	cmp	r2, r3
 8004e0a:	d802      	bhi.n	8004e12 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8004e0c:	4a30      	ldr	r2, [pc, #192]	; (8004ed0 <prvAddNewTaskToReadyList+0x10c>)
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8004e12:	4b31      	ldr	r3, [pc, #196]	; (8004ed8 <prvAddNewTaskToReadyList+0x114>)
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	3301      	adds	r3, #1
 8004e18:	4a2f      	ldr	r2, [pc, #188]	; (8004ed8 <prvAddNewTaskToReadyList+0x114>)
 8004e1a:	6013      	str	r3, [r2, #0]
            pxNewTCB->uxTCBNumber = uxTaskNumber;
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e20:	2201      	movs	r2, #1
 8004e22:	409a      	lsls	r2, r3
 8004e24:	4b2d      	ldr	r3, [pc, #180]	; (8004edc <prvAddNewTaskToReadyList+0x118>)
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	4313      	orrs	r3, r2
 8004e2a:	4a2c      	ldr	r2, [pc, #176]	; (8004edc <prvAddNewTaskToReadyList+0x118>)
 8004e2c:	6013      	str	r3, [r2, #0]
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e32:	492b      	ldr	r1, [pc, #172]	; (8004ee0 <prvAddNewTaskToReadyList+0x11c>)
 8004e34:	4613      	mov	r3, r2
 8004e36:	009b      	lsls	r3, r3, #2
 8004e38:	4413      	add	r3, r2
 8004e3a:	009b      	lsls	r3, r3, #2
 8004e3c:	440b      	add	r3, r1
 8004e3e:	3304      	adds	r3, #4
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	60fb      	str	r3, [r7, #12]
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	68fa      	ldr	r2, [r7, #12]
 8004e48:	609a      	str	r2, [r3, #8]
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	689a      	ldr	r2, [r3, #8]
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	60da      	str	r2, [r3, #12]
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	689b      	ldr	r3, [r3, #8]
 8004e56:	687a      	ldr	r2, [r7, #4]
 8004e58:	3204      	adds	r2, #4
 8004e5a:	605a      	str	r2, [r3, #4]
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	1d1a      	adds	r2, r3, #4
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	609a      	str	r2, [r3, #8]
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e68:	4613      	mov	r3, r2
 8004e6a:	009b      	lsls	r3, r3, #2
 8004e6c:	4413      	add	r3, r2
 8004e6e:	009b      	lsls	r3, r3, #2
 8004e70:	4a1b      	ldr	r2, [pc, #108]	; (8004ee0 <prvAddNewTaskToReadyList+0x11c>)
 8004e72:	441a      	add	r2, r3
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	615a      	str	r2, [r3, #20]
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e7c:	4918      	ldr	r1, [pc, #96]	; (8004ee0 <prvAddNewTaskToReadyList+0x11c>)
 8004e7e:	4613      	mov	r3, r2
 8004e80:	009b      	lsls	r3, r3, #2
 8004e82:	4413      	add	r3, r2
 8004e84:	009b      	lsls	r3, r3, #2
 8004e86:	440b      	add	r3, r1
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	1c59      	adds	r1, r3, #1
 8004e8c:	4814      	ldr	r0, [pc, #80]	; (8004ee0 <prvAddNewTaskToReadyList+0x11c>)
 8004e8e:	4613      	mov	r3, r2
 8004e90:	009b      	lsls	r3, r3, #2
 8004e92:	4413      	add	r3, r2
 8004e94:	009b      	lsls	r3, r3, #2
 8004e96:	4403      	add	r3, r0
 8004e98:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8004e9a:	f001 fc25 	bl	80066e8 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8004e9e:	4b0d      	ldr	r3, [pc, #52]	; (8004ed4 <prvAddNewTaskToReadyList+0x110>)
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d00e      	beq.n	8004ec4 <prvAddNewTaskToReadyList+0x100>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004ea6:	4b0a      	ldr	r3, [pc, #40]	; (8004ed0 <prvAddNewTaskToReadyList+0x10c>)
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004eb0:	429a      	cmp	r2, r3
 8004eb2:	d207      	bcs.n	8004ec4 <prvAddNewTaskToReadyList+0x100>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8004eb4:	4b0b      	ldr	r3, [pc, #44]	; (8004ee4 <prvAddNewTaskToReadyList+0x120>)
 8004eb6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004eba:	601a      	str	r2, [r3, #0]
 8004ebc:	f3bf 8f4f 	dsb	sy
 8004ec0:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8004ec4:	bf00      	nop
 8004ec6:	3710      	adds	r7, #16
 8004ec8:	46bd      	mov	sp, r7
 8004eca:	bd80      	pop	{r7, pc}
 8004ecc:	200001f0 	.word	0x200001f0
 8004ed0:	20000118 	.word	0x20000118
 8004ed4:	200001fc 	.word	0x200001fc
 8004ed8:	2000020c 	.word	0x2000020c
 8004edc:	200001f8 	.word	0x200001f8
 8004ee0:	2000011c 	.word	0x2000011c
 8004ee4:	e000ed04 	.word	0xe000ed04

08004ee8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8004ee8:	b580      	push	{r7, lr}
 8004eea:	b084      	sub	sp, #16
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8004ef0:	2300      	movs	r3, #0
 8004ef2:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d017      	beq.n	8004f2a <vTaskDelay+0x42>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 8004efa:	4b13      	ldr	r3, [pc, #76]	; (8004f48 <vTaskDelay+0x60>)
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d00a      	beq.n	8004f18 <vTaskDelay+0x30>
        __asm volatile
 8004f02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f06:	f383 8811 	msr	BASEPRI, r3
 8004f0a:	f3bf 8f6f 	isb	sy
 8004f0e:	f3bf 8f4f 	dsb	sy
 8004f12:	60bb      	str	r3, [r7, #8]
    }
 8004f14:	bf00      	nop
 8004f16:	e7fe      	b.n	8004f16 <vTaskDelay+0x2e>
            vTaskSuspendAll();
 8004f18:	f000 f86c 	bl	8004ff4 <vTaskSuspendAll>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004f1c:	2100      	movs	r1, #0
 8004f1e:	6878      	ldr	r0, [r7, #4]
 8004f20:	f000 ff8a 	bl	8005e38 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8004f24:	f000 f874 	bl	8005010 <xTaskResumeAll>
 8004f28:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d107      	bne.n	8004f40 <vTaskDelay+0x58>
        {
            portYIELD_WITHIN_API();
 8004f30:	4b06      	ldr	r3, [pc, #24]	; (8004f4c <vTaskDelay+0x64>)
 8004f32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f36:	601a      	str	r2, [r3, #0]
 8004f38:	f3bf 8f4f 	dsb	sy
 8004f3c:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8004f40:	bf00      	nop
 8004f42:	3710      	adds	r7, #16
 8004f44:	46bd      	mov	sp, r7
 8004f46:	bd80      	pop	{r7, pc}
 8004f48:	20000218 	.word	0x20000218
 8004f4c:	e000ed04 	.word	0xe000ed04

08004f50 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004f50:	b580      	push	{r7, lr}
 8004f52:	b086      	sub	sp, #24
 8004f54:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 8004f56:	4b20      	ldr	r3, [pc, #128]	; (8004fd8 <vTaskStartScheduler+0x88>)
 8004f58:	9301      	str	r3, [sp, #4]
 8004f5a:	2300      	movs	r3, #0
 8004f5c:	9300      	str	r3, [sp, #0]
 8004f5e:	2300      	movs	r3, #0
 8004f60:	2280      	movs	r2, #128	; 0x80
 8004f62:	491e      	ldr	r1, [pc, #120]	; (8004fdc <vTaskStartScheduler+0x8c>)
 8004f64:	481e      	ldr	r0, [pc, #120]	; (8004fe0 <vTaskStartScheduler+0x90>)
 8004f66:	f7ff fe61 	bl	8004c2c <xTaskCreate>
 8004f6a:	60f8      	str	r0, [r7, #12]
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	2b01      	cmp	r3, #1
 8004f70:	d102      	bne.n	8004f78 <vTaskStartScheduler+0x28>
        {
            xReturn = xTimerCreateTimerTask();
 8004f72:	f000 ffe1 	bl	8005f38 <xTimerCreateTimerTask>
 8004f76:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	2b01      	cmp	r3, #1
 8004f7c:	d116      	bne.n	8004fac <vTaskStartScheduler+0x5c>
        __asm volatile
 8004f7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f82:	f383 8811 	msr	BASEPRI, r3
 8004f86:	f3bf 8f6f 	isb	sy
 8004f8a:	f3bf 8f4f 	dsb	sy
 8004f8e:	60bb      	str	r3, [r7, #8]
    }
 8004f90:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 8004f92:	4b14      	ldr	r3, [pc, #80]	; (8004fe4 <vTaskStartScheduler+0x94>)
 8004f94:	f04f 32ff 	mov.w	r2, #4294967295
 8004f98:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8004f9a:	4b13      	ldr	r3, [pc, #76]	; (8004fe8 <vTaskStartScheduler+0x98>)
 8004f9c:	2201      	movs	r2, #1
 8004f9e:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004fa0:	4b12      	ldr	r3, [pc, #72]	; (8004fec <vTaskStartScheduler+0x9c>)
 8004fa2:	2200      	movs	r2, #0
 8004fa4:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 8004fa6:	f001 facd 	bl	8006544 <xPortStartScheduler>
 8004faa:	e00e      	b.n	8004fca <vTaskStartScheduler+0x7a>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fb2:	d10a      	bne.n	8004fca <vTaskStartScheduler+0x7a>
        __asm volatile
 8004fb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fb8:	f383 8811 	msr	BASEPRI, r3
 8004fbc:	f3bf 8f6f 	isb	sy
 8004fc0:	f3bf 8f4f 	dsb	sy
 8004fc4:	607b      	str	r3, [r7, #4]
    }
 8004fc6:	bf00      	nop
 8004fc8:	e7fe      	b.n	8004fc8 <vTaskStartScheduler+0x78>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8004fca:	4b09      	ldr	r3, [pc, #36]	; (8004ff0 <vTaskStartScheduler+0xa0>)
 8004fcc:	681b      	ldr	r3, [r3, #0]
}
 8004fce:	bf00      	nop
 8004fd0:	3710      	adds	r7, #16
 8004fd2:	46bd      	mov	sp, r7
 8004fd4:	bd80      	pop	{r7, pc}
 8004fd6:	bf00      	nop
 8004fd8:	20000214 	.word	0x20000214
 8004fdc:	08006d8c 	.word	0x08006d8c
 8004fe0:	0800589d 	.word	0x0800589d
 8004fe4:	20000210 	.word	0x20000210
 8004fe8:	200001fc 	.word	0x200001fc
 8004fec:	200001f4 	.word	0x200001f4
 8004ff0:	2000000c 	.word	0x2000000c

08004ff4 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004ff4:	b480      	push	{r7}
 8004ff6:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8004ff8:	4b04      	ldr	r3, [pc, #16]	; (800500c <vTaskSuspendAll+0x18>)
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	3301      	adds	r3, #1
 8004ffe:	4a03      	ldr	r2, [pc, #12]	; (800500c <vTaskSuspendAll+0x18>)
 8005000:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8005002:	bf00      	nop
 8005004:	46bd      	mov	sp, r7
 8005006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500a:	4770      	bx	lr
 800500c:	20000218 	.word	0x20000218

08005010 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005010:	b580      	push	{r7, lr}
 8005012:	b088      	sub	sp, #32
 8005014:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8005016:	2300      	movs	r3, #0
 8005018:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 800501a:	2300      	movs	r3, #0
 800501c:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 800501e:	4b71      	ldr	r3, [pc, #452]	; (80051e4 <xTaskResumeAll+0x1d4>)
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	2b00      	cmp	r3, #0
 8005024:	d10a      	bne.n	800503c <xTaskResumeAll+0x2c>
        __asm volatile
 8005026:	f04f 0350 	mov.w	r3, #80	; 0x50
 800502a:	f383 8811 	msr	BASEPRI, r3
 800502e:	f3bf 8f6f 	isb	sy
 8005032:	f3bf 8f4f 	dsb	sy
 8005036:	607b      	str	r3, [r7, #4]
    }
 8005038:	bf00      	nop
 800503a:	e7fe      	b.n	800503a <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 800503c:	f001 fb24 	bl	8006688 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8005040:	4b68      	ldr	r3, [pc, #416]	; (80051e4 <xTaskResumeAll+0x1d4>)
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	3b01      	subs	r3, #1
 8005046:	4a67      	ldr	r2, [pc, #412]	; (80051e4 <xTaskResumeAll+0x1d4>)
 8005048:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800504a:	4b66      	ldr	r3, [pc, #408]	; (80051e4 <xTaskResumeAll+0x1d4>)
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	2b00      	cmp	r3, #0
 8005050:	f040 80c0 	bne.w	80051d4 <xTaskResumeAll+0x1c4>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005054:	4b64      	ldr	r3, [pc, #400]	; (80051e8 <xTaskResumeAll+0x1d8>)
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	2b00      	cmp	r3, #0
 800505a:	f000 80bb 	beq.w	80051d4 <xTaskResumeAll+0x1c4>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800505e:	e08a      	b.n	8005176 <xTaskResumeAll+0x166>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005060:	4b62      	ldr	r3, [pc, #392]	; (80051ec <xTaskResumeAll+0x1dc>)
 8005062:	68db      	ldr	r3, [r3, #12]
 8005064:	68db      	ldr	r3, [r3, #12]
 8005066:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8005068:	69fb      	ldr	r3, [r7, #28]
 800506a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800506c:	613b      	str	r3, [r7, #16]
 800506e:	69fb      	ldr	r3, [r7, #28]
 8005070:	69db      	ldr	r3, [r3, #28]
 8005072:	69fa      	ldr	r2, [r7, #28]
 8005074:	6a12      	ldr	r2, [r2, #32]
 8005076:	609a      	str	r2, [r3, #8]
 8005078:	69fb      	ldr	r3, [r7, #28]
 800507a:	6a1b      	ldr	r3, [r3, #32]
 800507c:	69fa      	ldr	r2, [r7, #28]
 800507e:	69d2      	ldr	r2, [r2, #28]
 8005080:	605a      	str	r2, [r3, #4]
 8005082:	693b      	ldr	r3, [r7, #16]
 8005084:	685a      	ldr	r2, [r3, #4]
 8005086:	69fb      	ldr	r3, [r7, #28]
 8005088:	3318      	adds	r3, #24
 800508a:	429a      	cmp	r2, r3
 800508c:	d103      	bne.n	8005096 <xTaskResumeAll+0x86>
 800508e:	69fb      	ldr	r3, [r7, #28]
 8005090:	6a1a      	ldr	r2, [r3, #32]
 8005092:	693b      	ldr	r3, [r7, #16]
 8005094:	605a      	str	r2, [r3, #4]
 8005096:	69fb      	ldr	r3, [r7, #28]
 8005098:	2200      	movs	r2, #0
 800509a:	629a      	str	r2, [r3, #40]	; 0x28
 800509c:	693b      	ldr	r3, [r7, #16]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	1e5a      	subs	r2, r3, #1
 80050a2:	693b      	ldr	r3, [r7, #16]
 80050a4:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80050a6:	69fb      	ldr	r3, [r7, #28]
 80050a8:	695b      	ldr	r3, [r3, #20]
 80050aa:	60fb      	str	r3, [r7, #12]
 80050ac:	69fb      	ldr	r3, [r7, #28]
 80050ae:	689b      	ldr	r3, [r3, #8]
 80050b0:	69fa      	ldr	r2, [r7, #28]
 80050b2:	68d2      	ldr	r2, [r2, #12]
 80050b4:	609a      	str	r2, [r3, #8]
 80050b6:	69fb      	ldr	r3, [r7, #28]
 80050b8:	68db      	ldr	r3, [r3, #12]
 80050ba:	69fa      	ldr	r2, [r7, #28]
 80050bc:	6892      	ldr	r2, [r2, #8]
 80050be:	605a      	str	r2, [r3, #4]
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	685a      	ldr	r2, [r3, #4]
 80050c4:	69fb      	ldr	r3, [r7, #28]
 80050c6:	3304      	adds	r3, #4
 80050c8:	429a      	cmp	r2, r3
 80050ca:	d103      	bne.n	80050d4 <xTaskResumeAll+0xc4>
 80050cc:	69fb      	ldr	r3, [r7, #28]
 80050ce:	68da      	ldr	r2, [r3, #12]
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	605a      	str	r2, [r3, #4]
 80050d4:	69fb      	ldr	r3, [r7, #28]
 80050d6:	2200      	movs	r2, #0
 80050d8:	615a      	str	r2, [r3, #20]
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	1e5a      	subs	r2, r3, #1
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 80050e4:	69fb      	ldr	r3, [r7, #28]
 80050e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050e8:	2201      	movs	r2, #1
 80050ea:	409a      	lsls	r2, r3
 80050ec:	4b40      	ldr	r3, [pc, #256]	; (80051f0 <xTaskResumeAll+0x1e0>)
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	4313      	orrs	r3, r2
 80050f2:	4a3f      	ldr	r2, [pc, #252]	; (80051f0 <xTaskResumeAll+0x1e0>)
 80050f4:	6013      	str	r3, [r2, #0]
 80050f6:	69fb      	ldr	r3, [r7, #28]
 80050f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050fa:	493e      	ldr	r1, [pc, #248]	; (80051f4 <xTaskResumeAll+0x1e4>)
 80050fc:	4613      	mov	r3, r2
 80050fe:	009b      	lsls	r3, r3, #2
 8005100:	4413      	add	r3, r2
 8005102:	009b      	lsls	r3, r3, #2
 8005104:	440b      	add	r3, r1
 8005106:	3304      	adds	r3, #4
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	60bb      	str	r3, [r7, #8]
 800510c:	69fb      	ldr	r3, [r7, #28]
 800510e:	68ba      	ldr	r2, [r7, #8]
 8005110:	609a      	str	r2, [r3, #8]
 8005112:	68bb      	ldr	r3, [r7, #8]
 8005114:	689a      	ldr	r2, [r3, #8]
 8005116:	69fb      	ldr	r3, [r7, #28]
 8005118:	60da      	str	r2, [r3, #12]
 800511a:	68bb      	ldr	r3, [r7, #8]
 800511c:	689b      	ldr	r3, [r3, #8]
 800511e:	69fa      	ldr	r2, [r7, #28]
 8005120:	3204      	adds	r2, #4
 8005122:	605a      	str	r2, [r3, #4]
 8005124:	69fb      	ldr	r3, [r7, #28]
 8005126:	1d1a      	adds	r2, r3, #4
 8005128:	68bb      	ldr	r3, [r7, #8]
 800512a:	609a      	str	r2, [r3, #8]
 800512c:	69fb      	ldr	r3, [r7, #28]
 800512e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005130:	4613      	mov	r3, r2
 8005132:	009b      	lsls	r3, r3, #2
 8005134:	4413      	add	r3, r2
 8005136:	009b      	lsls	r3, r3, #2
 8005138:	4a2e      	ldr	r2, [pc, #184]	; (80051f4 <xTaskResumeAll+0x1e4>)
 800513a:	441a      	add	r2, r3
 800513c:	69fb      	ldr	r3, [r7, #28]
 800513e:	615a      	str	r2, [r3, #20]
 8005140:	69fb      	ldr	r3, [r7, #28]
 8005142:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005144:	492b      	ldr	r1, [pc, #172]	; (80051f4 <xTaskResumeAll+0x1e4>)
 8005146:	4613      	mov	r3, r2
 8005148:	009b      	lsls	r3, r3, #2
 800514a:	4413      	add	r3, r2
 800514c:	009b      	lsls	r3, r3, #2
 800514e:	440b      	add	r3, r1
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	1c59      	adds	r1, r3, #1
 8005154:	4827      	ldr	r0, [pc, #156]	; (80051f4 <xTaskResumeAll+0x1e4>)
 8005156:	4613      	mov	r3, r2
 8005158:	009b      	lsls	r3, r3, #2
 800515a:	4413      	add	r3, r2
 800515c:	009b      	lsls	r3, r3, #2
 800515e:	4403      	add	r3, r0
 8005160:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005162:	69fb      	ldr	r3, [r7, #28]
 8005164:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005166:	4b24      	ldr	r3, [pc, #144]	; (80051f8 <xTaskResumeAll+0x1e8>)
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800516c:	429a      	cmp	r2, r3
 800516e:	d302      	bcc.n	8005176 <xTaskResumeAll+0x166>
                    {
                        xYieldPending = pdTRUE;
 8005170:	4b22      	ldr	r3, [pc, #136]	; (80051fc <xTaskResumeAll+0x1ec>)
 8005172:	2201      	movs	r2, #1
 8005174:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005176:	4b1d      	ldr	r3, [pc, #116]	; (80051ec <xTaskResumeAll+0x1dc>)
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	2b00      	cmp	r3, #0
 800517c:	f47f af70 	bne.w	8005060 <xTaskResumeAll+0x50>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8005180:	69fb      	ldr	r3, [r7, #28]
 8005182:	2b00      	cmp	r3, #0
 8005184:	d001      	beq.n	800518a <xTaskResumeAll+0x17a>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8005186:	f000 fc0f 	bl	80059a8 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800518a:	4b1d      	ldr	r3, [pc, #116]	; (8005200 <xTaskResumeAll+0x1f0>)
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8005190:	697b      	ldr	r3, [r7, #20]
 8005192:	2b00      	cmp	r3, #0
 8005194:	d010      	beq.n	80051b8 <xTaskResumeAll+0x1a8>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8005196:	f000 f847 	bl	8005228 <xTaskIncrementTick>
 800519a:	4603      	mov	r3, r0
 800519c:	2b00      	cmp	r3, #0
 800519e:	d002      	beq.n	80051a6 <xTaskResumeAll+0x196>
                            {
                                xYieldPending = pdTRUE;
 80051a0:	4b16      	ldr	r3, [pc, #88]	; (80051fc <xTaskResumeAll+0x1ec>)
 80051a2:	2201      	movs	r2, #1
 80051a4:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 80051a6:	697b      	ldr	r3, [r7, #20]
 80051a8:	3b01      	subs	r3, #1
 80051aa:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 80051ac:	697b      	ldr	r3, [r7, #20]
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d1f1      	bne.n	8005196 <xTaskResumeAll+0x186>

                        xPendedTicks = 0;
 80051b2:	4b13      	ldr	r3, [pc, #76]	; (8005200 <xTaskResumeAll+0x1f0>)
 80051b4:	2200      	movs	r2, #0
 80051b6:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 80051b8:	4b10      	ldr	r3, [pc, #64]	; (80051fc <xTaskResumeAll+0x1ec>)
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d009      	beq.n	80051d4 <xTaskResumeAll+0x1c4>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 80051c0:	2301      	movs	r3, #1
 80051c2:	61bb      	str	r3, [r7, #24]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 80051c4:	4b0f      	ldr	r3, [pc, #60]	; (8005204 <xTaskResumeAll+0x1f4>)
 80051c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80051ca:	601a      	str	r2, [r3, #0]
 80051cc:	f3bf 8f4f 	dsb	sy
 80051d0:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 80051d4:	f001 fa88 	bl	80066e8 <vPortExitCritical>

    return xAlreadyYielded;
 80051d8:	69bb      	ldr	r3, [r7, #24]
}
 80051da:	4618      	mov	r0, r3
 80051dc:	3720      	adds	r7, #32
 80051de:	46bd      	mov	sp, r7
 80051e0:	bd80      	pop	{r7, pc}
 80051e2:	bf00      	nop
 80051e4:	20000218 	.word	0x20000218
 80051e8:	200001f0 	.word	0x200001f0
 80051ec:	200001b0 	.word	0x200001b0
 80051f0:	200001f8 	.word	0x200001f8
 80051f4:	2000011c 	.word	0x2000011c
 80051f8:	20000118 	.word	0x20000118
 80051fc:	20000204 	.word	0x20000204
 8005200:	20000200 	.word	0x20000200
 8005204:	e000ed04 	.word	0xe000ed04

08005208 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005208:	b480      	push	{r7}
 800520a:	b083      	sub	sp, #12
 800520c:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 800520e:	4b05      	ldr	r3, [pc, #20]	; (8005224 <xTaskGetTickCount+0x1c>)
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8005214:	687b      	ldr	r3, [r7, #4]
}
 8005216:	4618      	mov	r0, r3
 8005218:	370c      	adds	r7, #12
 800521a:	46bd      	mov	sp, r7
 800521c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005220:	4770      	bx	lr
 8005222:	bf00      	nop
 8005224:	200001f4 	.word	0x200001f4

08005228 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005228:	b580      	push	{r7, lr}
 800522a:	b08a      	sub	sp, #40	; 0x28
 800522c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 800522e:	2300      	movs	r3, #0
 8005230:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005232:	4b7d      	ldr	r3, [pc, #500]	; (8005428 <xTaskIncrementTick+0x200>)
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	2b00      	cmp	r3, #0
 8005238:	f040 80ec 	bne.w	8005414 <xTaskIncrementTick+0x1ec>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800523c:	4b7b      	ldr	r3, [pc, #492]	; (800542c <xTaskIncrementTick+0x204>)
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	3301      	adds	r3, #1
 8005242:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8005244:	4a79      	ldr	r2, [pc, #484]	; (800542c <xTaskIncrementTick+0x204>)
 8005246:	6a3b      	ldr	r3, [r7, #32]
 8005248:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800524a:	6a3b      	ldr	r3, [r7, #32]
 800524c:	2b00      	cmp	r3, #0
 800524e:	d120      	bne.n	8005292 <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8005250:	4b77      	ldr	r3, [pc, #476]	; (8005430 <xTaskIncrementTick+0x208>)
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	2b00      	cmp	r3, #0
 8005258:	d00a      	beq.n	8005270 <xTaskIncrementTick+0x48>
        __asm volatile
 800525a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800525e:	f383 8811 	msr	BASEPRI, r3
 8005262:	f3bf 8f6f 	isb	sy
 8005266:	f3bf 8f4f 	dsb	sy
 800526a:	607b      	str	r3, [r7, #4]
    }
 800526c:	bf00      	nop
 800526e:	e7fe      	b.n	800526e <xTaskIncrementTick+0x46>
 8005270:	4b6f      	ldr	r3, [pc, #444]	; (8005430 <xTaskIncrementTick+0x208>)
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	61fb      	str	r3, [r7, #28]
 8005276:	4b6f      	ldr	r3, [pc, #444]	; (8005434 <xTaskIncrementTick+0x20c>)
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	4a6d      	ldr	r2, [pc, #436]	; (8005430 <xTaskIncrementTick+0x208>)
 800527c:	6013      	str	r3, [r2, #0]
 800527e:	4a6d      	ldr	r2, [pc, #436]	; (8005434 <xTaskIncrementTick+0x20c>)
 8005280:	69fb      	ldr	r3, [r7, #28]
 8005282:	6013      	str	r3, [r2, #0]
 8005284:	4b6c      	ldr	r3, [pc, #432]	; (8005438 <xTaskIncrementTick+0x210>)
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	3301      	adds	r3, #1
 800528a:	4a6b      	ldr	r2, [pc, #428]	; (8005438 <xTaskIncrementTick+0x210>)
 800528c:	6013      	str	r3, [r2, #0]
 800528e:	f000 fb8b 	bl	80059a8 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8005292:	4b6a      	ldr	r3, [pc, #424]	; (800543c <xTaskIncrementTick+0x214>)
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	6a3a      	ldr	r2, [r7, #32]
 8005298:	429a      	cmp	r2, r3
 800529a:	f0c0 80a6 	bcc.w	80053ea <xTaskIncrementTick+0x1c2>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800529e:	4b64      	ldr	r3, [pc, #400]	; (8005430 <xTaskIncrementTick+0x208>)
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d104      	bne.n	80052b2 <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80052a8:	4b64      	ldr	r3, [pc, #400]	; (800543c <xTaskIncrementTick+0x214>)
 80052aa:	f04f 32ff 	mov.w	r2, #4294967295
 80052ae:	601a      	str	r2, [r3, #0]
                    break;
 80052b0:	e09b      	b.n	80053ea <xTaskIncrementTick+0x1c2>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80052b2:	4b5f      	ldr	r3, [pc, #380]	; (8005430 <xTaskIncrementTick+0x208>)
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	68db      	ldr	r3, [r3, #12]
 80052b8:	68db      	ldr	r3, [r3, #12]
 80052ba:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80052bc:	69bb      	ldr	r3, [r7, #24]
 80052be:	685b      	ldr	r3, [r3, #4]
 80052c0:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 80052c2:	6a3a      	ldr	r2, [r7, #32]
 80052c4:	697b      	ldr	r3, [r7, #20]
 80052c6:	429a      	cmp	r2, r3
 80052c8:	d203      	bcs.n	80052d2 <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 80052ca:	4a5c      	ldr	r2, [pc, #368]	; (800543c <xTaskIncrementTick+0x214>)
 80052cc:	697b      	ldr	r3, [r7, #20]
 80052ce:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 80052d0:	e08b      	b.n	80053ea <xTaskIncrementTick+0x1c2>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80052d2:	69bb      	ldr	r3, [r7, #24]
 80052d4:	695b      	ldr	r3, [r3, #20]
 80052d6:	613b      	str	r3, [r7, #16]
 80052d8:	69bb      	ldr	r3, [r7, #24]
 80052da:	689b      	ldr	r3, [r3, #8]
 80052dc:	69ba      	ldr	r2, [r7, #24]
 80052de:	68d2      	ldr	r2, [r2, #12]
 80052e0:	609a      	str	r2, [r3, #8]
 80052e2:	69bb      	ldr	r3, [r7, #24]
 80052e4:	68db      	ldr	r3, [r3, #12]
 80052e6:	69ba      	ldr	r2, [r7, #24]
 80052e8:	6892      	ldr	r2, [r2, #8]
 80052ea:	605a      	str	r2, [r3, #4]
 80052ec:	693b      	ldr	r3, [r7, #16]
 80052ee:	685a      	ldr	r2, [r3, #4]
 80052f0:	69bb      	ldr	r3, [r7, #24]
 80052f2:	3304      	adds	r3, #4
 80052f4:	429a      	cmp	r2, r3
 80052f6:	d103      	bne.n	8005300 <xTaskIncrementTick+0xd8>
 80052f8:	69bb      	ldr	r3, [r7, #24]
 80052fa:	68da      	ldr	r2, [r3, #12]
 80052fc:	693b      	ldr	r3, [r7, #16]
 80052fe:	605a      	str	r2, [r3, #4]
 8005300:	69bb      	ldr	r3, [r7, #24]
 8005302:	2200      	movs	r2, #0
 8005304:	615a      	str	r2, [r3, #20]
 8005306:	693b      	ldr	r3, [r7, #16]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	1e5a      	subs	r2, r3, #1
 800530c:	693b      	ldr	r3, [r7, #16]
 800530e:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005310:	69bb      	ldr	r3, [r7, #24]
 8005312:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005314:	2b00      	cmp	r3, #0
 8005316:	d01e      	beq.n	8005356 <xTaskIncrementTick+0x12e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8005318:	69bb      	ldr	r3, [r7, #24]
 800531a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800531c:	60fb      	str	r3, [r7, #12]
 800531e:	69bb      	ldr	r3, [r7, #24]
 8005320:	69db      	ldr	r3, [r3, #28]
 8005322:	69ba      	ldr	r2, [r7, #24]
 8005324:	6a12      	ldr	r2, [r2, #32]
 8005326:	609a      	str	r2, [r3, #8]
 8005328:	69bb      	ldr	r3, [r7, #24]
 800532a:	6a1b      	ldr	r3, [r3, #32]
 800532c:	69ba      	ldr	r2, [r7, #24]
 800532e:	69d2      	ldr	r2, [r2, #28]
 8005330:	605a      	str	r2, [r3, #4]
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	685a      	ldr	r2, [r3, #4]
 8005336:	69bb      	ldr	r3, [r7, #24]
 8005338:	3318      	adds	r3, #24
 800533a:	429a      	cmp	r2, r3
 800533c:	d103      	bne.n	8005346 <xTaskIncrementTick+0x11e>
 800533e:	69bb      	ldr	r3, [r7, #24]
 8005340:	6a1a      	ldr	r2, [r3, #32]
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	605a      	str	r2, [r3, #4]
 8005346:	69bb      	ldr	r3, [r7, #24]
 8005348:	2200      	movs	r2, #0
 800534a:	629a      	str	r2, [r3, #40]	; 0x28
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	1e5a      	subs	r2, r3, #1
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8005356:	69bb      	ldr	r3, [r7, #24]
 8005358:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800535a:	2201      	movs	r2, #1
 800535c:	409a      	lsls	r2, r3
 800535e:	4b38      	ldr	r3, [pc, #224]	; (8005440 <xTaskIncrementTick+0x218>)
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	4313      	orrs	r3, r2
 8005364:	4a36      	ldr	r2, [pc, #216]	; (8005440 <xTaskIncrementTick+0x218>)
 8005366:	6013      	str	r3, [r2, #0]
 8005368:	69bb      	ldr	r3, [r7, #24]
 800536a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800536c:	4935      	ldr	r1, [pc, #212]	; (8005444 <xTaskIncrementTick+0x21c>)
 800536e:	4613      	mov	r3, r2
 8005370:	009b      	lsls	r3, r3, #2
 8005372:	4413      	add	r3, r2
 8005374:	009b      	lsls	r3, r3, #2
 8005376:	440b      	add	r3, r1
 8005378:	3304      	adds	r3, #4
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	60bb      	str	r3, [r7, #8]
 800537e:	69bb      	ldr	r3, [r7, #24]
 8005380:	68ba      	ldr	r2, [r7, #8]
 8005382:	609a      	str	r2, [r3, #8]
 8005384:	68bb      	ldr	r3, [r7, #8]
 8005386:	689a      	ldr	r2, [r3, #8]
 8005388:	69bb      	ldr	r3, [r7, #24]
 800538a:	60da      	str	r2, [r3, #12]
 800538c:	68bb      	ldr	r3, [r7, #8]
 800538e:	689b      	ldr	r3, [r3, #8]
 8005390:	69ba      	ldr	r2, [r7, #24]
 8005392:	3204      	adds	r2, #4
 8005394:	605a      	str	r2, [r3, #4]
 8005396:	69bb      	ldr	r3, [r7, #24]
 8005398:	1d1a      	adds	r2, r3, #4
 800539a:	68bb      	ldr	r3, [r7, #8]
 800539c:	609a      	str	r2, [r3, #8]
 800539e:	69bb      	ldr	r3, [r7, #24]
 80053a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053a2:	4613      	mov	r3, r2
 80053a4:	009b      	lsls	r3, r3, #2
 80053a6:	4413      	add	r3, r2
 80053a8:	009b      	lsls	r3, r3, #2
 80053aa:	4a26      	ldr	r2, [pc, #152]	; (8005444 <xTaskIncrementTick+0x21c>)
 80053ac:	441a      	add	r2, r3
 80053ae:	69bb      	ldr	r3, [r7, #24]
 80053b0:	615a      	str	r2, [r3, #20]
 80053b2:	69bb      	ldr	r3, [r7, #24]
 80053b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053b6:	4923      	ldr	r1, [pc, #140]	; (8005444 <xTaskIncrementTick+0x21c>)
 80053b8:	4613      	mov	r3, r2
 80053ba:	009b      	lsls	r3, r3, #2
 80053bc:	4413      	add	r3, r2
 80053be:	009b      	lsls	r3, r3, #2
 80053c0:	440b      	add	r3, r1
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	1c59      	adds	r1, r3, #1
 80053c6:	481f      	ldr	r0, [pc, #124]	; (8005444 <xTaskIncrementTick+0x21c>)
 80053c8:	4613      	mov	r3, r2
 80053ca:	009b      	lsls	r3, r3, #2
 80053cc:	4413      	add	r3, r2
 80053ce:	009b      	lsls	r3, r3, #2
 80053d0:	4403      	add	r3, r0
 80053d2:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80053d4:	69bb      	ldr	r3, [r7, #24]
 80053d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053d8:	4b1b      	ldr	r3, [pc, #108]	; (8005448 <xTaskIncrementTick+0x220>)
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053de:	429a      	cmp	r2, r3
 80053e0:	f67f af5d 	bls.w	800529e <xTaskIncrementTick+0x76>
                        {
                            xSwitchRequired = pdTRUE;
 80053e4:	2301      	movs	r3, #1
 80053e6:	627b      	str	r3, [r7, #36]	; 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80053e8:	e759      	b.n	800529e <xTaskIncrementTick+0x76>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80053ea:	4b17      	ldr	r3, [pc, #92]	; (8005448 <xTaskIncrementTick+0x220>)
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053f0:	4914      	ldr	r1, [pc, #80]	; (8005444 <xTaskIncrementTick+0x21c>)
 80053f2:	4613      	mov	r3, r2
 80053f4:	009b      	lsls	r3, r3, #2
 80053f6:	4413      	add	r3, r2
 80053f8:	009b      	lsls	r3, r3, #2
 80053fa:	440b      	add	r3, r1
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	2b01      	cmp	r3, #1
 8005400:	d901      	bls.n	8005406 <xTaskIncrementTick+0x1de>
            {
                xSwitchRequired = pdTRUE;
 8005402:	2301      	movs	r3, #1
 8005404:	627b      	str	r3, [r7, #36]	; 0x24
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 8005406:	4b11      	ldr	r3, [pc, #68]	; (800544c <xTaskIncrementTick+0x224>)
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	2b00      	cmp	r3, #0
 800540c:	d007      	beq.n	800541e <xTaskIncrementTick+0x1f6>
            {
                xSwitchRequired = pdTRUE;
 800540e:	2301      	movs	r3, #1
 8005410:	627b      	str	r3, [r7, #36]	; 0x24
 8005412:	e004      	b.n	800541e <xTaskIncrementTick+0x1f6>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8005414:	4b0e      	ldr	r3, [pc, #56]	; (8005450 <xTaskIncrementTick+0x228>)
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	3301      	adds	r3, #1
 800541a:	4a0d      	ldr	r2, [pc, #52]	; (8005450 <xTaskIncrementTick+0x228>)
 800541c:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 800541e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005420:	4618      	mov	r0, r3
 8005422:	3728      	adds	r7, #40	; 0x28
 8005424:	46bd      	mov	sp, r7
 8005426:	bd80      	pop	{r7, pc}
 8005428:	20000218 	.word	0x20000218
 800542c:	200001f4 	.word	0x200001f4
 8005430:	200001a8 	.word	0x200001a8
 8005434:	200001ac 	.word	0x200001ac
 8005438:	20000208 	.word	0x20000208
 800543c:	20000210 	.word	0x20000210
 8005440:	200001f8 	.word	0x200001f8
 8005444:	2000011c 	.word	0x2000011c
 8005448:	20000118 	.word	0x20000118
 800544c:	20000204 	.word	0x20000204
 8005450:	20000200 	.word	0x20000200

08005454 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005454:	b480      	push	{r7}
 8005456:	b087      	sub	sp, #28
 8005458:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800545a:	4b27      	ldr	r3, [pc, #156]	; (80054f8 <vTaskSwitchContext+0xa4>)
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	2b00      	cmp	r3, #0
 8005460:	d003      	beq.n	800546a <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8005462:	4b26      	ldr	r3, [pc, #152]	; (80054fc <vTaskSwitchContext+0xa8>)
 8005464:	2201      	movs	r2, #1
 8005466:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 8005468:	e03f      	b.n	80054ea <vTaskSwitchContext+0x96>
        xYieldPending = pdFALSE;
 800546a:	4b24      	ldr	r3, [pc, #144]	; (80054fc <vTaskSwitchContext+0xa8>)
 800546c:	2200      	movs	r2, #0
 800546e:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005470:	4b23      	ldr	r3, [pc, #140]	; (8005500 <vTaskSwitchContext+0xac>)
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	fab3 f383 	clz	r3, r3
 800547c:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 800547e:	7afb      	ldrb	r3, [r7, #11]
 8005480:	f1c3 031f 	rsb	r3, r3, #31
 8005484:	617b      	str	r3, [r7, #20]
 8005486:	491f      	ldr	r1, [pc, #124]	; (8005504 <vTaskSwitchContext+0xb0>)
 8005488:	697a      	ldr	r2, [r7, #20]
 800548a:	4613      	mov	r3, r2
 800548c:	009b      	lsls	r3, r3, #2
 800548e:	4413      	add	r3, r2
 8005490:	009b      	lsls	r3, r3, #2
 8005492:	440b      	add	r3, r1
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	2b00      	cmp	r3, #0
 8005498:	d10a      	bne.n	80054b0 <vTaskSwitchContext+0x5c>
        __asm volatile
 800549a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800549e:	f383 8811 	msr	BASEPRI, r3
 80054a2:	f3bf 8f6f 	isb	sy
 80054a6:	f3bf 8f4f 	dsb	sy
 80054aa:	607b      	str	r3, [r7, #4]
    }
 80054ac:	bf00      	nop
 80054ae:	e7fe      	b.n	80054ae <vTaskSwitchContext+0x5a>
 80054b0:	697a      	ldr	r2, [r7, #20]
 80054b2:	4613      	mov	r3, r2
 80054b4:	009b      	lsls	r3, r3, #2
 80054b6:	4413      	add	r3, r2
 80054b8:	009b      	lsls	r3, r3, #2
 80054ba:	4a12      	ldr	r2, [pc, #72]	; (8005504 <vTaskSwitchContext+0xb0>)
 80054bc:	4413      	add	r3, r2
 80054be:	613b      	str	r3, [r7, #16]
 80054c0:	693b      	ldr	r3, [r7, #16]
 80054c2:	685b      	ldr	r3, [r3, #4]
 80054c4:	685a      	ldr	r2, [r3, #4]
 80054c6:	693b      	ldr	r3, [r7, #16]
 80054c8:	605a      	str	r2, [r3, #4]
 80054ca:	693b      	ldr	r3, [r7, #16]
 80054cc:	685a      	ldr	r2, [r3, #4]
 80054ce:	693b      	ldr	r3, [r7, #16]
 80054d0:	3308      	adds	r3, #8
 80054d2:	429a      	cmp	r2, r3
 80054d4:	d104      	bne.n	80054e0 <vTaskSwitchContext+0x8c>
 80054d6:	693b      	ldr	r3, [r7, #16]
 80054d8:	685b      	ldr	r3, [r3, #4]
 80054da:	685a      	ldr	r2, [r3, #4]
 80054dc:	693b      	ldr	r3, [r7, #16]
 80054de:	605a      	str	r2, [r3, #4]
 80054e0:	693b      	ldr	r3, [r7, #16]
 80054e2:	685b      	ldr	r3, [r3, #4]
 80054e4:	68db      	ldr	r3, [r3, #12]
 80054e6:	4a08      	ldr	r2, [pc, #32]	; (8005508 <vTaskSwitchContext+0xb4>)
 80054e8:	6013      	str	r3, [r2, #0]
}
 80054ea:	bf00      	nop
 80054ec:	371c      	adds	r7, #28
 80054ee:	46bd      	mov	sp, r7
 80054f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f4:	4770      	bx	lr
 80054f6:	bf00      	nop
 80054f8:	20000218 	.word	0x20000218
 80054fc:	20000204 	.word	0x20000204
 8005500:	200001f8 	.word	0x200001f8
 8005504:	2000011c 	.word	0x2000011c
 8005508:	20000118 	.word	0x20000118

0800550c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 800550c:	b580      	push	{r7, lr}
 800550e:	b084      	sub	sp, #16
 8005510:	af00      	add	r7, sp, #0
 8005512:	6078      	str	r0, [r7, #4]
 8005514:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	2b00      	cmp	r3, #0
 800551a:	d10a      	bne.n	8005532 <vTaskPlaceOnEventList+0x26>
        __asm volatile
 800551c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005520:	f383 8811 	msr	BASEPRI, r3
 8005524:	f3bf 8f6f 	isb	sy
 8005528:	f3bf 8f4f 	dsb	sy
 800552c:	60fb      	str	r3, [r7, #12]
    }
 800552e:	bf00      	nop
 8005530:	e7fe      	b.n	8005530 <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005532:	4b07      	ldr	r3, [pc, #28]	; (8005550 <vTaskPlaceOnEventList+0x44>)
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	3318      	adds	r3, #24
 8005538:	4619      	mov	r1, r3
 800553a:	6878      	ldr	r0, [r7, #4]
 800553c:	f7fe fdab 	bl	8004096 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005540:	2101      	movs	r1, #1
 8005542:	6838      	ldr	r0, [r7, #0]
 8005544:	f000 fc78 	bl	8005e38 <prvAddCurrentTaskToDelayedList>
}
 8005548:	bf00      	nop
 800554a:	3710      	adds	r7, #16
 800554c:	46bd      	mov	sp, r7
 800554e:	bd80      	pop	{r7, pc}
 8005550:	20000118 	.word	0x20000118

08005554 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8005554:	b580      	push	{r7, lr}
 8005556:	b086      	sub	sp, #24
 8005558:	af00      	add	r7, sp, #0
 800555a:	60f8      	str	r0, [r7, #12]
 800555c:	60b9      	str	r1, [r7, #8]
 800555e:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	2b00      	cmp	r3, #0
 8005564:	d10a      	bne.n	800557c <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 8005566:	f04f 0350 	mov.w	r3, #80	; 0x50
 800556a:	f383 8811 	msr	BASEPRI, r3
 800556e:	f3bf 8f6f 	isb	sy
 8005572:	f3bf 8f4f 	dsb	sy
 8005576:	613b      	str	r3, [r7, #16]
    }
 8005578:	bf00      	nop
 800557a:	e7fe      	b.n	800557a <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	685b      	ldr	r3, [r3, #4]
 8005580:	617b      	str	r3, [r7, #20]
 8005582:	4b16      	ldr	r3, [pc, #88]	; (80055dc <vTaskPlaceOnEventListRestricted+0x88>)
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	697a      	ldr	r2, [r7, #20]
 8005588:	61da      	str	r2, [r3, #28]
 800558a:	4b14      	ldr	r3, [pc, #80]	; (80055dc <vTaskPlaceOnEventListRestricted+0x88>)
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	697a      	ldr	r2, [r7, #20]
 8005590:	6892      	ldr	r2, [r2, #8]
 8005592:	621a      	str	r2, [r3, #32]
 8005594:	4b11      	ldr	r3, [pc, #68]	; (80055dc <vTaskPlaceOnEventListRestricted+0x88>)
 8005596:	681a      	ldr	r2, [r3, #0]
 8005598:	697b      	ldr	r3, [r7, #20]
 800559a:	689b      	ldr	r3, [r3, #8]
 800559c:	3218      	adds	r2, #24
 800559e:	605a      	str	r2, [r3, #4]
 80055a0:	4b0e      	ldr	r3, [pc, #56]	; (80055dc <vTaskPlaceOnEventListRestricted+0x88>)
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	f103 0218 	add.w	r2, r3, #24
 80055a8:	697b      	ldr	r3, [r7, #20]
 80055aa:	609a      	str	r2, [r3, #8]
 80055ac:	4b0b      	ldr	r3, [pc, #44]	; (80055dc <vTaskPlaceOnEventListRestricted+0x88>)
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	68fa      	ldr	r2, [r7, #12]
 80055b2:	629a      	str	r2, [r3, #40]	; 0x28
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	1c5a      	adds	r2, r3, #1
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d002      	beq.n	80055ca <vTaskPlaceOnEventListRestricted+0x76>
        {
            xTicksToWait = portMAX_DELAY;
 80055c4:	f04f 33ff 	mov.w	r3, #4294967295
 80055c8:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80055ca:	6879      	ldr	r1, [r7, #4]
 80055cc:	68b8      	ldr	r0, [r7, #8]
 80055ce:	f000 fc33 	bl	8005e38 <prvAddCurrentTaskToDelayedList>
    }
 80055d2:	bf00      	nop
 80055d4:	3718      	adds	r7, #24
 80055d6:	46bd      	mov	sp, r7
 80055d8:	bd80      	pop	{r7, pc}
 80055da:	bf00      	nop
 80055dc:	20000118 	.word	0x20000118

080055e0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80055e0:	b480      	push	{r7}
 80055e2:	b08b      	sub	sp, #44	; 0x2c
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	68db      	ldr	r3, [r3, #12]
 80055ec:	68db      	ldr	r3, [r3, #12]
 80055ee:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 80055f0:	6a3b      	ldr	r3, [r7, #32]
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d10a      	bne.n	800560c <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 80055f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055fa:	f383 8811 	msr	BASEPRI, r3
 80055fe:	f3bf 8f6f 	isb	sy
 8005602:	f3bf 8f4f 	dsb	sy
 8005606:	60fb      	str	r3, [r7, #12]
    }
 8005608:	bf00      	nop
 800560a:	e7fe      	b.n	800560a <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 800560c:	6a3b      	ldr	r3, [r7, #32]
 800560e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005610:	61fb      	str	r3, [r7, #28]
 8005612:	6a3b      	ldr	r3, [r7, #32]
 8005614:	69db      	ldr	r3, [r3, #28]
 8005616:	6a3a      	ldr	r2, [r7, #32]
 8005618:	6a12      	ldr	r2, [r2, #32]
 800561a:	609a      	str	r2, [r3, #8]
 800561c:	6a3b      	ldr	r3, [r7, #32]
 800561e:	6a1b      	ldr	r3, [r3, #32]
 8005620:	6a3a      	ldr	r2, [r7, #32]
 8005622:	69d2      	ldr	r2, [r2, #28]
 8005624:	605a      	str	r2, [r3, #4]
 8005626:	69fb      	ldr	r3, [r7, #28]
 8005628:	685a      	ldr	r2, [r3, #4]
 800562a:	6a3b      	ldr	r3, [r7, #32]
 800562c:	3318      	adds	r3, #24
 800562e:	429a      	cmp	r2, r3
 8005630:	d103      	bne.n	800563a <xTaskRemoveFromEventList+0x5a>
 8005632:	6a3b      	ldr	r3, [r7, #32]
 8005634:	6a1a      	ldr	r2, [r3, #32]
 8005636:	69fb      	ldr	r3, [r7, #28]
 8005638:	605a      	str	r2, [r3, #4]
 800563a:	6a3b      	ldr	r3, [r7, #32]
 800563c:	2200      	movs	r2, #0
 800563e:	629a      	str	r2, [r3, #40]	; 0x28
 8005640:	69fb      	ldr	r3, [r7, #28]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	1e5a      	subs	r2, r3, #1
 8005646:	69fb      	ldr	r3, [r7, #28]
 8005648:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800564a:	4b4a      	ldr	r3, [pc, #296]	; (8005774 <xTaskRemoveFromEventList+0x194>)
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	2b00      	cmp	r3, #0
 8005650:	d15e      	bne.n	8005710 <xTaskRemoveFromEventList+0x130>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8005652:	6a3b      	ldr	r3, [r7, #32]
 8005654:	695b      	ldr	r3, [r3, #20]
 8005656:	617b      	str	r3, [r7, #20]
 8005658:	6a3b      	ldr	r3, [r7, #32]
 800565a:	689b      	ldr	r3, [r3, #8]
 800565c:	6a3a      	ldr	r2, [r7, #32]
 800565e:	68d2      	ldr	r2, [r2, #12]
 8005660:	609a      	str	r2, [r3, #8]
 8005662:	6a3b      	ldr	r3, [r7, #32]
 8005664:	68db      	ldr	r3, [r3, #12]
 8005666:	6a3a      	ldr	r2, [r7, #32]
 8005668:	6892      	ldr	r2, [r2, #8]
 800566a:	605a      	str	r2, [r3, #4]
 800566c:	697b      	ldr	r3, [r7, #20]
 800566e:	685a      	ldr	r2, [r3, #4]
 8005670:	6a3b      	ldr	r3, [r7, #32]
 8005672:	3304      	adds	r3, #4
 8005674:	429a      	cmp	r2, r3
 8005676:	d103      	bne.n	8005680 <xTaskRemoveFromEventList+0xa0>
 8005678:	6a3b      	ldr	r3, [r7, #32]
 800567a:	68da      	ldr	r2, [r3, #12]
 800567c:	697b      	ldr	r3, [r7, #20]
 800567e:	605a      	str	r2, [r3, #4]
 8005680:	6a3b      	ldr	r3, [r7, #32]
 8005682:	2200      	movs	r2, #0
 8005684:	615a      	str	r2, [r3, #20]
 8005686:	697b      	ldr	r3, [r7, #20]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	1e5a      	subs	r2, r3, #1
 800568c:	697b      	ldr	r3, [r7, #20]
 800568e:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 8005690:	6a3b      	ldr	r3, [r7, #32]
 8005692:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005694:	2201      	movs	r2, #1
 8005696:	409a      	lsls	r2, r3
 8005698:	4b37      	ldr	r3, [pc, #220]	; (8005778 <xTaskRemoveFromEventList+0x198>)
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	4313      	orrs	r3, r2
 800569e:	4a36      	ldr	r2, [pc, #216]	; (8005778 <xTaskRemoveFromEventList+0x198>)
 80056a0:	6013      	str	r3, [r2, #0]
 80056a2:	6a3b      	ldr	r3, [r7, #32]
 80056a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056a6:	4935      	ldr	r1, [pc, #212]	; (800577c <xTaskRemoveFromEventList+0x19c>)
 80056a8:	4613      	mov	r3, r2
 80056aa:	009b      	lsls	r3, r3, #2
 80056ac:	4413      	add	r3, r2
 80056ae:	009b      	lsls	r3, r3, #2
 80056b0:	440b      	add	r3, r1
 80056b2:	3304      	adds	r3, #4
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	613b      	str	r3, [r7, #16]
 80056b8:	6a3b      	ldr	r3, [r7, #32]
 80056ba:	693a      	ldr	r2, [r7, #16]
 80056bc:	609a      	str	r2, [r3, #8]
 80056be:	693b      	ldr	r3, [r7, #16]
 80056c0:	689a      	ldr	r2, [r3, #8]
 80056c2:	6a3b      	ldr	r3, [r7, #32]
 80056c4:	60da      	str	r2, [r3, #12]
 80056c6:	693b      	ldr	r3, [r7, #16]
 80056c8:	689b      	ldr	r3, [r3, #8]
 80056ca:	6a3a      	ldr	r2, [r7, #32]
 80056cc:	3204      	adds	r2, #4
 80056ce:	605a      	str	r2, [r3, #4]
 80056d0:	6a3b      	ldr	r3, [r7, #32]
 80056d2:	1d1a      	adds	r2, r3, #4
 80056d4:	693b      	ldr	r3, [r7, #16]
 80056d6:	609a      	str	r2, [r3, #8]
 80056d8:	6a3b      	ldr	r3, [r7, #32]
 80056da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056dc:	4613      	mov	r3, r2
 80056de:	009b      	lsls	r3, r3, #2
 80056e0:	4413      	add	r3, r2
 80056e2:	009b      	lsls	r3, r3, #2
 80056e4:	4a25      	ldr	r2, [pc, #148]	; (800577c <xTaskRemoveFromEventList+0x19c>)
 80056e6:	441a      	add	r2, r3
 80056e8:	6a3b      	ldr	r3, [r7, #32]
 80056ea:	615a      	str	r2, [r3, #20]
 80056ec:	6a3b      	ldr	r3, [r7, #32]
 80056ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056f0:	4922      	ldr	r1, [pc, #136]	; (800577c <xTaskRemoveFromEventList+0x19c>)
 80056f2:	4613      	mov	r3, r2
 80056f4:	009b      	lsls	r3, r3, #2
 80056f6:	4413      	add	r3, r2
 80056f8:	009b      	lsls	r3, r3, #2
 80056fa:	440b      	add	r3, r1
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	1c59      	adds	r1, r3, #1
 8005700:	481e      	ldr	r0, [pc, #120]	; (800577c <xTaskRemoveFromEventList+0x19c>)
 8005702:	4613      	mov	r3, r2
 8005704:	009b      	lsls	r3, r3, #2
 8005706:	4413      	add	r3, r2
 8005708:	009b      	lsls	r3, r3, #2
 800570a:	4403      	add	r3, r0
 800570c:	6019      	str	r1, [r3, #0]
 800570e:	e01b      	b.n	8005748 <xTaskRemoveFromEventList+0x168>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005710:	4b1b      	ldr	r3, [pc, #108]	; (8005780 <xTaskRemoveFromEventList+0x1a0>)
 8005712:	685b      	ldr	r3, [r3, #4]
 8005714:	61bb      	str	r3, [r7, #24]
 8005716:	6a3b      	ldr	r3, [r7, #32]
 8005718:	69ba      	ldr	r2, [r7, #24]
 800571a:	61da      	str	r2, [r3, #28]
 800571c:	69bb      	ldr	r3, [r7, #24]
 800571e:	689a      	ldr	r2, [r3, #8]
 8005720:	6a3b      	ldr	r3, [r7, #32]
 8005722:	621a      	str	r2, [r3, #32]
 8005724:	69bb      	ldr	r3, [r7, #24]
 8005726:	689b      	ldr	r3, [r3, #8]
 8005728:	6a3a      	ldr	r2, [r7, #32]
 800572a:	3218      	adds	r2, #24
 800572c:	605a      	str	r2, [r3, #4]
 800572e:	6a3b      	ldr	r3, [r7, #32]
 8005730:	f103 0218 	add.w	r2, r3, #24
 8005734:	69bb      	ldr	r3, [r7, #24]
 8005736:	609a      	str	r2, [r3, #8]
 8005738:	6a3b      	ldr	r3, [r7, #32]
 800573a:	4a11      	ldr	r2, [pc, #68]	; (8005780 <xTaskRemoveFromEventList+0x1a0>)
 800573c:	629a      	str	r2, [r3, #40]	; 0x28
 800573e:	4b10      	ldr	r3, [pc, #64]	; (8005780 <xTaskRemoveFromEventList+0x1a0>)
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	3301      	adds	r3, #1
 8005744:	4a0e      	ldr	r2, [pc, #56]	; (8005780 <xTaskRemoveFromEventList+0x1a0>)
 8005746:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005748:	6a3b      	ldr	r3, [r7, #32]
 800574a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800574c:	4b0d      	ldr	r3, [pc, #52]	; (8005784 <xTaskRemoveFromEventList+0x1a4>)
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005752:	429a      	cmp	r2, r3
 8005754:	d905      	bls.n	8005762 <xTaskRemoveFromEventList+0x182>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8005756:	2301      	movs	r3, #1
 8005758:	627b      	str	r3, [r7, #36]	; 0x24

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 800575a:	4b0b      	ldr	r3, [pc, #44]	; (8005788 <xTaskRemoveFromEventList+0x1a8>)
 800575c:	2201      	movs	r2, #1
 800575e:	601a      	str	r2, [r3, #0]
 8005760:	e001      	b.n	8005766 <xTaskRemoveFromEventList+0x186>
    }
    else
    {
        xReturn = pdFALSE;
 8005762:	2300      	movs	r3, #0
 8005764:	627b      	str	r3, [r7, #36]	; 0x24
    }

    return xReturn;
 8005766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005768:	4618      	mov	r0, r3
 800576a:	372c      	adds	r7, #44	; 0x2c
 800576c:	46bd      	mov	sp, r7
 800576e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005772:	4770      	bx	lr
 8005774:	20000218 	.word	0x20000218
 8005778:	200001f8 	.word	0x200001f8
 800577c:	2000011c 	.word	0x2000011c
 8005780:	200001b0 	.word	0x200001b0
 8005784:	20000118 	.word	0x20000118
 8005788:	20000204 	.word	0x20000204

0800578c <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800578c:	b480      	push	{r7}
 800578e:	b083      	sub	sp, #12
 8005790:	af00      	add	r7, sp, #0
 8005792:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005794:	4b06      	ldr	r3, [pc, #24]	; (80057b0 <vTaskInternalSetTimeOutState+0x24>)
 8005796:	681a      	ldr	r2, [r3, #0]
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 800579c:	4b05      	ldr	r3, [pc, #20]	; (80057b4 <vTaskInternalSetTimeOutState+0x28>)
 800579e:	681a      	ldr	r2, [r3, #0]
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	605a      	str	r2, [r3, #4]
}
 80057a4:	bf00      	nop
 80057a6:	370c      	adds	r7, #12
 80057a8:	46bd      	mov	sp, r7
 80057aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ae:	4770      	bx	lr
 80057b0:	20000208 	.word	0x20000208
 80057b4:	200001f4 	.word	0x200001f4

080057b8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 80057b8:	b580      	push	{r7, lr}
 80057ba:	b088      	sub	sp, #32
 80057bc:	af00      	add	r7, sp, #0
 80057be:	6078      	str	r0, [r7, #4]
 80057c0:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d10a      	bne.n	80057de <xTaskCheckForTimeOut+0x26>
        __asm volatile
 80057c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057cc:	f383 8811 	msr	BASEPRI, r3
 80057d0:	f3bf 8f6f 	isb	sy
 80057d4:	f3bf 8f4f 	dsb	sy
 80057d8:	613b      	str	r3, [r7, #16]
    }
 80057da:	bf00      	nop
 80057dc:	e7fe      	b.n	80057dc <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 80057de:	683b      	ldr	r3, [r7, #0]
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d10a      	bne.n	80057fa <xTaskCheckForTimeOut+0x42>
        __asm volatile
 80057e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057e8:	f383 8811 	msr	BASEPRI, r3
 80057ec:	f3bf 8f6f 	isb	sy
 80057f0:	f3bf 8f4f 	dsb	sy
 80057f4:	60fb      	str	r3, [r7, #12]
    }
 80057f6:	bf00      	nop
 80057f8:	e7fe      	b.n	80057f8 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 80057fa:	f000 ff45 	bl	8006688 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 80057fe:	4b1f      	ldr	r3, [pc, #124]	; (800587c <xTaskCheckForTimeOut+0xc4>)
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	685b      	ldr	r3, [r3, #4]
 8005808:	69ba      	ldr	r2, [r7, #24]
 800580a:	1ad3      	subs	r3, r2, r3
 800580c:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 800580e:	683b      	ldr	r3, [r7, #0]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005816:	d102      	bne.n	800581e <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8005818:	2300      	movs	r3, #0
 800581a:	61fb      	str	r3, [r7, #28]
 800581c:	e026      	b.n	800586c <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681a      	ldr	r2, [r3, #0]
 8005822:	4b17      	ldr	r3, [pc, #92]	; (8005880 <xTaskCheckForTimeOut+0xc8>)
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	429a      	cmp	r2, r3
 8005828:	d00a      	beq.n	8005840 <xTaskCheckForTimeOut+0x88>
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	685b      	ldr	r3, [r3, #4]
 800582e:	69ba      	ldr	r2, [r7, #24]
 8005830:	429a      	cmp	r2, r3
 8005832:	d305      	bcc.n	8005840 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8005834:	2301      	movs	r3, #1
 8005836:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8005838:	683b      	ldr	r3, [r7, #0]
 800583a:	2200      	movs	r2, #0
 800583c:	601a      	str	r2, [r3, #0]
 800583e:	e015      	b.n	800586c <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005840:	683b      	ldr	r3, [r7, #0]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	697a      	ldr	r2, [r7, #20]
 8005846:	429a      	cmp	r2, r3
 8005848:	d20b      	bcs.n	8005862 <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 800584a:	683b      	ldr	r3, [r7, #0]
 800584c:	681a      	ldr	r2, [r3, #0]
 800584e:	697b      	ldr	r3, [r7, #20]
 8005850:	1ad2      	subs	r2, r2, r3
 8005852:	683b      	ldr	r3, [r7, #0]
 8005854:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8005856:	6878      	ldr	r0, [r7, #4]
 8005858:	f7ff ff98 	bl	800578c <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 800585c:	2300      	movs	r3, #0
 800585e:	61fb      	str	r3, [r7, #28]
 8005860:	e004      	b.n	800586c <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8005862:	683b      	ldr	r3, [r7, #0]
 8005864:	2200      	movs	r2, #0
 8005866:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8005868:	2301      	movs	r3, #1
 800586a:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 800586c:	f000 ff3c 	bl	80066e8 <vPortExitCritical>

    return xReturn;
 8005870:	69fb      	ldr	r3, [r7, #28]
}
 8005872:	4618      	mov	r0, r3
 8005874:	3720      	adds	r7, #32
 8005876:	46bd      	mov	sp, r7
 8005878:	bd80      	pop	{r7, pc}
 800587a:	bf00      	nop
 800587c:	200001f4 	.word	0x200001f4
 8005880:	20000208 	.word	0x20000208

08005884 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005884:	b480      	push	{r7}
 8005886:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8005888:	4b03      	ldr	r3, [pc, #12]	; (8005898 <vTaskMissedYield+0x14>)
 800588a:	2201      	movs	r2, #1
 800588c:	601a      	str	r2, [r3, #0]
}
 800588e:	bf00      	nop
 8005890:	46bd      	mov	sp, r7
 8005892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005896:	4770      	bx	lr
 8005898:	20000204 	.word	0x20000204

0800589c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800589c:	b580      	push	{r7, lr}
 800589e:	b082      	sub	sp, #8
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 80058a4:	f000 f842 	bl	800592c <prvCheckTasksWaitingTermination>
 80058a8:	e7fc      	b.n	80058a4 <prvIdleTask+0x8>
	...

080058ac <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80058ac:	b580      	push	{r7, lr}
 80058ae:	b082      	sub	sp, #8
 80058b0:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80058b2:	2300      	movs	r3, #0
 80058b4:	607b      	str	r3, [r7, #4]
 80058b6:	e00c      	b.n	80058d2 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80058b8:	687a      	ldr	r2, [r7, #4]
 80058ba:	4613      	mov	r3, r2
 80058bc:	009b      	lsls	r3, r3, #2
 80058be:	4413      	add	r3, r2
 80058c0:	009b      	lsls	r3, r3, #2
 80058c2:	4a12      	ldr	r2, [pc, #72]	; (800590c <prvInitialiseTaskLists+0x60>)
 80058c4:	4413      	add	r3, r2
 80058c6:	4618      	mov	r0, r3
 80058c8:	f7fe fbb8 	bl	800403c <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	3301      	adds	r3, #1
 80058d0:	607b      	str	r3, [r7, #4]
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	2b04      	cmp	r3, #4
 80058d6:	d9ef      	bls.n	80058b8 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 80058d8:	480d      	ldr	r0, [pc, #52]	; (8005910 <prvInitialiseTaskLists+0x64>)
 80058da:	f7fe fbaf 	bl	800403c <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 80058de:	480d      	ldr	r0, [pc, #52]	; (8005914 <prvInitialiseTaskLists+0x68>)
 80058e0:	f7fe fbac 	bl	800403c <vListInitialise>
    vListInitialise( &xPendingReadyList );
 80058e4:	480c      	ldr	r0, [pc, #48]	; (8005918 <prvInitialiseTaskLists+0x6c>)
 80058e6:	f7fe fba9 	bl	800403c <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 80058ea:	480c      	ldr	r0, [pc, #48]	; (800591c <prvInitialiseTaskLists+0x70>)
 80058ec:	f7fe fba6 	bl	800403c <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 80058f0:	480b      	ldr	r0, [pc, #44]	; (8005920 <prvInitialiseTaskLists+0x74>)
 80058f2:	f7fe fba3 	bl	800403c <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 80058f6:	4b0b      	ldr	r3, [pc, #44]	; (8005924 <prvInitialiseTaskLists+0x78>)
 80058f8:	4a05      	ldr	r2, [pc, #20]	; (8005910 <prvInitialiseTaskLists+0x64>)
 80058fa:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80058fc:	4b0a      	ldr	r3, [pc, #40]	; (8005928 <prvInitialiseTaskLists+0x7c>)
 80058fe:	4a05      	ldr	r2, [pc, #20]	; (8005914 <prvInitialiseTaskLists+0x68>)
 8005900:	601a      	str	r2, [r3, #0]
}
 8005902:	bf00      	nop
 8005904:	3708      	adds	r7, #8
 8005906:	46bd      	mov	sp, r7
 8005908:	bd80      	pop	{r7, pc}
 800590a:	bf00      	nop
 800590c:	2000011c 	.word	0x2000011c
 8005910:	20000180 	.word	0x20000180
 8005914:	20000194 	.word	0x20000194
 8005918:	200001b0 	.word	0x200001b0
 800591c:	200001c4 	.word	0x200001c4
 8005920:	200001dc 	.word	0x200001dc
 8005924:	200001a8 	.word	0x200001a8
 8005928:	200001ac 	.word	0x200001ac

0800592c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800592c:	b580      	push	{r7, lr}
 800592e:	b082      	sub	sp, #8
 8005930:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005932:	e019      	b.n	8005968 <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 8005934:	f000 fea8 	bl	8006688 <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005938:	4b10      	ldr	r3, [pc, #64]	; (800597c <prvCheckTasksWaitingTermination+0x50>)
 800593a:	68db      	ldr	r3, [r3, #12]
 800593c:	68db      	ldr	r3, [r3, #12]
 800593e:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	3304      	adds	r3, #4
 8005944:	4618      	mov	r0, r3
 8005946:	f7fe fbdf 	bl	8004108 <uxListRemove>
                --uxCurrentNumberOfTasks;
 800594a:	4b0d      	ldr	r3, [pc, #52]	; (8005980 <prvCheckTasksWaitingTermination+0x54>)
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	3b01      	subs	r3, #1
 8005950:	4a0b      	ldr	r2, [pc, #44]	; (8005980 <prvCheckTasksWaitingTermination+0x54>)
 8005952:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 8005954:	4b0b      	ldr	r3, [pc, #44]	; (8005984 <prvCheckTasksWaitingTermination+0x58>)
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	3b01      	subs	r3, #1
 800595a:	4a0a      	ldr	r2, [pc, #40]	; (8005984 <prvCheckTasksWaitingTermination+0x58>)
 800595c:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 800595e:	f000 fec3 	bl	80066e8 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 8005962:	6878      	ldr	r0, [r7, #4]
 8005964:	f000 f810 	bl	8005988 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005968:	4b06      	ldr	r3, [pc, #24]	; (8005984 <prvCheckTasksWaitingTermination+0x58>)
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	2b00      	cmp	r3, #0
 800596e:	d1e1      	bne.n	8005934 <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8005970:	bf00      	nop
 8005972:	bf00      	nop
 8005974:	3708      	adds	r7, #8
 8005976:	46bd      	mov	sp, r7
 8005978:	bd80      	pop	{r7, pc}
 800597a:	bf00      	nop
 800597c:	200001c4 	.word	0x200001c4
 8005980:	200001f0 	.word	0x200001f0
 8005984:	200001d8 	.word	0x200001d8

08005988 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8005988:	b580      	push	{r7, lr}
 800598a:	b082      	sub	sp, #8
 800598c:	af00      	add	r7, sp, #0
 800598e:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005994:	4618      	mov	r0, r3
 8005996:	f001 f813 	bl	80069c0 <vPortFree>
            vPortFree( pxTCB );
 800599a:	6878      	ldr	r0, [r7, #4]
 800599c:	f001 f810 	bl	80069c0 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 80059a0:	bf00      	nop
 80059a2:	3708      	adds	r7, #8
 80059a4:	46bd      	mov	sp, r7
 80059a6:	bd80      	pop	{r7, pc}

080059a8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80059a8:	b480      	push	{r7}
 80059aa:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80059ac:	4b0a      	ldr	r3, [pc, #40]	; (80059d8 <prvResetNextTaskUnblockTime+0x30>)
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d104      	bne.n	80059c0 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 80059b6:	4b09      	ldr	r3, [pc, #36]	; (80059dc <prvResetNextTaskUnblockTime+0x34>)
 80059b8:	f04f 32ff 	mov.w	r2, #4294967295
 80059bc:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 80059be:	e005      	b.n	80059cc <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 80059c0:	4b05      	ldr	r3, [pc, #20]	; (80059d8 <prvResetNextTaskUnblockTime+0x30>)
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	68db      	ldr	r3, [r3, #12]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	4a04      	ldr	r2, [pc, #16]	; (80059dc <prvResetNextTaskUnblockTime+0x34>)
 80059ca:	6013      	str	r3, [r2, #0]
}
 80059cc:	bf00      	nop
 80059ce:	46bd      	mov	sp, r7
 80059d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d4:	4770      	bx	lr
 80059d6:	bf00      	nop
 80059d8:	200001a8 	.word	0x200001a8
 80059dc:	20000210 	.word	0x20000210

080059e0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 80059e0:	b480      	push	{r7}
 80059e2:	b083      	sub	sp, #12
 80059e4:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 80059e6:	4b0b      	ldr	r3, [pc, #44]	; (8005a14 <xTaskGetSchedulerState+0x34>)
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d102      	bne.n	80059f4 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 80059ee:	2301      	movs	r3, #1
 80059f0:	607b      	str	r3, [r7, #4]
 80059f2:	e008      	b.n	8005a06 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80059f4:	4b08      	ldr	r3, [pc, #32]	; (8005a18 <xTaskGetSchedulerState+0x38>)
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d102      	bne.n	8005a02 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 80059fc:	2302      	movs	r3, #2
 80059fe:	607b      	str	r3, [r7, #4]
 8005a00:	e001      	b.n	8005a06 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8005a02:	2300      	movs	r3, #0
 8005a04:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8005a06:	687b      	ldr	r3, [r7, #4]
    }
 8005a08:	4618      	mov	r0, r3
 8005a0a:	370c      	adds	r7, #12
 8005a0c:	46bd      	mov	sp, r7
 8005a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a12:	4770      	bx	lr
 8005a14:	200001fc 	.word	0x200001fc
 8005a18:	20000218 	.word	0x20000218

08005a1c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
    {
 8005a1c:	b580      	push	{r7, lr}
 8005a1e:	b086      	sub	sp, #24
 8005a20:	af00      	add	r7, sp, #0
 8005a22:	6078      	str	r0, [r7, #4]
        TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8005a28:	2300      	movs	r3, #0
 8005a2a:	617b      	str	r3, [r7, #20]

        /* If the mutex was given back by an interrupt while the queue was
         * locked then the mutex holder might now be NULL.  _RB_ Is this still
         * needed as interrupts can no longer use mutexes? */
        if( pxMutexHolder != NULL )
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	f000 8087 	beq.w	8005b42 <xTaskPriorityInherit+0x126>
        {
            /* If the holder of the mutex has a priority below the priority of
             * the task attempting to obtain the mutex then it will temporarily
             * inherit the priority of the task attempting to obtain the mutex. */
            if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8005a34:	693b      	ldr	r3, [r7, #16]
 8005a36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a38:	4b44      	ldr	r3, [pc, #272]	; (8005b4c <xTaskPriorityInherit+0x130>)
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a3e:	429a      	cmp	r2, r3
 8005a40:	d276      	bcs.n	8005b30 <xTaskPriorityInherit+0x114>
            {
                /* Adjust the mutex holder state to account for its new
                 * priority.  Only reset the event list item value if the value is
                 * not being used for anything else. */
                if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005a42:	693b      	ldr	r3, [r7, #16]
 8005a44:	699b      	ldr	r3, [r3, #24]
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	db06      	blt.n	8005a58 <xTaskPriorityInherit+0x3c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005a4a:	4b40      	ldr	r3, [pc, #256]	; (8005b4c <xTaskPriorityInherit+0x130>)
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a50:	f1c3 0205 	rsb	r2, r3, #5
 8005a54:	693b      	ldr	r3, [r7, #16]
 8005a56:	619a      	str	r2, [r3, #24]
                    mtCOVERAGE_TEST_MARKER();
                }

                /* If the task being modified is in the ready state it will need
                 * to be moved into a new list. */
                if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8005a58:	693b      	ldr	r3, [r7, #16]
 8005a5a:	6959      	ldr	r1, [r3, #20]
 8005a5c:	693b      	ldr	r3, [r7, #16]
 8005a5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a60:	4613      	mov	r3, r2
 8005a62:	009b      	lsls	r3, r3, #2
 8005a64:	4413      	add	r3, r2
 8005a66:	009b      	lsls	r3, r3, #2
 8005a68:	4a39      	ldr	r2, [pc, #228]	; (8005b50 <xTaskPriorityInherit+0x134>)
 8005a6a:	4413      	add	r3, r2
 8005a6c:	4299      	cmp	r1, r3
 8005a6e:	d157      	bne.n	8005b20 <xTaskPriorityInherit+0x104>
                {
                    if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005a70:	693b      	ldr	r3, [r7, #16]
 8005a72:	3304      	adds	r3, #4
 8005a74:	4618      	mov	r0, r3
 8005a76:	f7fe fb47 	bl	8004108 <uxListRemove>
 8005a7a:	4603      	mov	r3, r0
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d10a      	bne.n	8005a96 <xTaskPriorityInherit+0x7a>
                    {
                        /* It is known that the task is in its ready list so
                         * there is no need to check again and the port level
                         * reset macro can be called directly. */
                        portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8005a80:	693b      	ldr	r3, [r7, #16]
 8005a82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a84:	2201      	movs	r2, #1
 8005a86:	fa02 f303 	lsl.w	r3, r2, r3
 8005a8a:	43da      	mvns	r2, r3
 8005a8c:	4b31      	ldr	r3, [pc, #196]	; (8005b54 <xTaskPriorityInherit+0x138>)
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	4013      	ands	r3, r2
 8005a92:	4a30      	ldr	r2, [pc, #192]	; (8005b54 <xTaskPriorityInherit+0x138>)
 8005a94:	6013      	str	r3, [r2, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Inherit the priority before being moved into the new list. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005a96:	4b2d      	ldr	r3, [pc, #180]	; (8005b4c <xTaskPriorityInherit+0x130>)
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a9c:	693b      	ldr	r3, [r7, #16]
 8005a9e:	62da      	str	r2, [r3, #44]	; 0x2c
                    prvAddTaskToReadyList( pxMutexHolderTCB );
 8005aa0:	693b      	ldr	r3, [r7, #16]
 8005aa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005aa4:	2201      	movs	r2, #1
 8005aa6:	409a      	lsls	r2, r3
 8005aa8:	4b2a      	ldr	r3, [pc, #168]	; (8005b54 <xTaskPriorityInherit+0x138>)
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	4313      	orrs	r3, r2
 8005aae:	4a29      	ldr	r2, [pc, #164]	; (8005b54 <xTaskPriorityInherit+0x138>)
 8005ab0:	6013      	str	r3, [r2, #0]
 8005ab2:	693b      	ldr	r3, [r7, #16]
 8005ab4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ab6:	4926      	ldr	r1, [pc, #152]	; (8005b50 <xTaskPriorityInherit+0x134>)
 8005ab8:	4613      	mov	r3, r2
 8005aba:	009b      	lsls	r3, r3, #2
 8005abc:	4413      	add	r3, r2
 8005abe:	009b      	lsls	r3, r3, #2
 8005ac0:	440b      	add	r3, r1
 8005ac2:	3304      	adds	r3, #4
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	60fb      	str	r3, [r7, #12]
 8005ac8:	693b      	ldr	r3, [r7, #16]
 8005aca:	68fa      	ldr	r2, [r7, #12]
 8005acc:	609a      	str	r2, [r3, #8]
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	689a      	ldr	r2, [r3, #8]
 8005ad2:	693b      	ldr	r3, [r7, #16]
 8005ad4:	60da      	str	r2, [r3, #12]
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	689b      	ldr	r3, [r3, #8]
 8005ada:	693a      	ldr	r2, [r7, #16]
 8005adc:	3204      	adds	r2, #4
 8005ade:	605a      	str	r2, [r3, #4]
 8005ae0:	693b      	ldr	r3, [r7, #16]
 8005ae2:	1d1a      	adds	r2, r3, #4
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	609a      	str	r2, [r3, #8]
 8005ae8:	693b      	ldr	r3, [r7, #16]
 8005aea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005aec:	4613      	mov	r3, r2
 8005aee:	009b      	lsls	r3, r3, #2
 8005af0:	4413      	add	r3, r2
 8005af2:	009b      	lsls	r3, r3, #2
 8005af4:	4a16      	ldr	r2, [pc, #88]	; (8005b50 <xTaskPriorityInherit+0x134>)
 8005af6:	441a      	add	r2, r3
 8005af8:	693b      	ldr	r3, [r7, #16]
 8005afa:	615a      	str	r2, [r3, #20]
 8005afc:	693b      	ldr	r3, [r7, #16]
 8005afe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b00:	4913      	ldr	r1, [pc, #76]	; (8005b50 <xTaskPriorityInherit+0x134>)
 8005b02:	4613      	mov	r3, r2
 8005b04:	009b      	lsls	r3, r3, #2
 8005b06:	4413      	add	r3, r2
 8005b08:	009b      	lsls	r3, r3, #2
 8005b0a:	440b      	add	r3, r1
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	1c59      	adds	r1, r3, #1
 8005b10:	480f      	ldr	r0, [pc, #60]	; (8005b50 <xTaskPriorityInherit+0x134>)
 8005b12:	4613      	mov	r3, r2
 8005b14:	009b      	lsls	r3, r3, #2
 8005b16:	4413      	add	r3, r2
 8005b18:	009b      	lsls	r3, r3, #2
 8005b1a:	4403      	add	r3, r0
 8005b1c:	6019      	str	r1, [r3, #0]
 8005b1e:	e004      	b.n	8005b2a <xTaskPriorityInherit+0x10e>
                }
                else
                {
                    /* Just inherit the priority. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005b20:	4b0a      	ldr	r3, [pc, #40]	; (8005b4c <xTaskPriorityInherit+0x130>)
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b26:	693b      	ldr	r3, [r7, #16]
 8005b28:	62da      	str	r2, [r3, #44]	; 0x2c
                }

                traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

                /* Inheritance occurred. */
                xReturn = pdTRUE;
 8005b2a:	2301      	movs	r3, #1
 8005b2c:	617b      	str	r3, [r7, #20]
 8005b2e:	e008      	b.n	8005b42 <xTaskPriorityInherit+0x126>
            }
            else
            {
                if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8005b30:	693b      	ldr	r3, [r7, #16]
 8005b32:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005b34:	4b05      	ldr	r3, [pc, #20]	; (8005b4c <xTaskPriorityInherit+0x130>)
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b3a:	429a      	cmp	r2, r3
 8005b3c:	d201      	bcs.n	8005b42 <xTaskPriorityInherit+0x126>
                     * current priority of the mutex holder is not lower than the
                     * priority of the task attempting to take the mutex.
                     * Therefore the mutex holder must have already inherited a
                     * priority, but inheritance would have occurred if that had
                     * not been the case. */
                    xReturn = pdTRUE;
 8005b3e:	2301      	movs	r3, #1
 8005b40:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8005b42:	697b      	ldr	r3, [r7, #20]
    }
 8005b44:	4618      	mov	r0, r3
 8005b46:	3718      	adds	r7, #24
 8005b48:	46bd      	mov	sp, r7
 8005b4a:	bd80      	pop	{r7, pc}
 8005b4c:	20000118 	.word	0x20000118
 8005b50:	2000011c 	.word	0x2000011c
 8005b54:	200001f8 	.word	0x200001f8

08005b58 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8005b58:	b580      	push	{r7, lr}
 8005b5a:	b088      	sub	sp, #32
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	61bb      	str	r3, [r7, #24]
        BaseType_t xReturn = pdFALSE;
 8005b64:	2300      	movs	r3, #0
 8005b66:	61fb      	str	r3, [r7, #28]

        if( pxMutexHolder != NULL )
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	f000 808c 	beq.w	8005c88 <xTaskPriorityDisinherit+0x130>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8005b70:	4b48      	ldr	r3, [pc, #288]	; (8005c94 <xTaskPriorityDisinherit+0x13c>)
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	69ba      	ldr	r2, [r7, #24]
 8005b76:	429a      	cmp	r2, r3
 8005b78:	d00a      	beq.n	8005b90 <xTaskPriorityDisinherit+0x38>
        __asm volatile
 8005b7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b7e:	f383 8811 	msr	BASEPRI, r3
 8005b82:	f3bf 8f6f 	isb	sy
 8005b86:	f3bf 8f4f 	dsb	sy
 8005b8a:	613b      	str	r3, [r7, #16]
    }
 8005b8c:	bf00      	nop
 8005b8e:	e7fe      	b.n	8005b8e <xTaskPriorityDisinherit+0x36>
            configASSERT( pxTCB->uxMutexesHeld );
 8005b90:	69bb      	ldr	r3, [r7, #24]
 8005b92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d10a      	bne.n	8005bae <xTaskPriorityDisinherit+0x56>
        __asm volatile
 8005b98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b9c:	f383 8811 	msr	BASEPRI, r3
 8005ba0:	f3bf 8f6f 	isb	sy
 8005ba4:	f3bf 8f4f 	dsb	sy
 8005ba8:	60fb      	str	r3, [r7, #12]
    }
 8005baa:	bf00      	nop
 8005bac:	e7fe      	b.n	8005bac <xTaskPriorityDisinherit+0x54>
            ( pxTCB->uxMutexesHeld )--;
 8005bae:	69bb      	ldr	r3, [r7, #24]
 8005bb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bb2:	1e5a      	subs	r2, r3, #1
 8005bb4:	69bb      	ldr	r3, [r7, #24]
 8005bb6:	645a      	str	r2, [r3, #68]	; 0x44

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005bb8:	69bb      	ldr	r3, [r7, #24]
 8005bba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bbc:	69bb      	ldr	r3, [r7, #24]
 8005bbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bc0:	429a      	cmp	r2, r3
 8005bc2:	d061      	beq.n	8005c88 <xTaskPriorityDisinherit+0x130>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005bc4:	69bb      	ldr	r3, [r7, #24]
 8005bc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d15d      	bne.n	8005c88 <xTaskPriorityDisinherit+0x130>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005bcc:	69bb      	ldr	r3, [r7, #24]
 8005bce:	3304      	adds	r3, #4
 8005bd0:	4618      	mov	r0, r3
 8005bd2:	f7fe fa99 	bl	8004108 <uxListRemove>
 8005bd6:	4603      	mov	r3, r0
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d10a      	bne.n	8005bf2 <xTaskPriorityDisinherit+0x9a>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8005bdc:	69bb      	ldr	r3, [r7, #24]
 8005bde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005be0:	2201      	movs	r2, #1
 8005be2:	fa02 f303 	lsl.w	r3, r2, r3
 8005be6:	43da      	mvns	r2, r3
 8005be8:	4b2b      	ldr	r3, [pc, #172]	; (8005c98 <xTaskPriorityDisinherit+0x140>)
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	4013      	ands	r3, r2
 8005bee:	4a2a      	ldr	r2, [pc, #168]	; (8005c98 <xTaskPriorityDisinherit+0x140>)
 8005bf0:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005bf2:	69bb      	ldr	r3, [r7, #24]
 8005bf4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005bf6:	69bb      	ldr	r3, [r7, #24]
 8005bf8:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005bfa:	69bb      	ldr	r3, [r7, #24]
 8005bfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bfe:	f1c3 0205 	rsb	r2, r3, #5
 8005c02:	69bb      	ldr	r3, [r7, #24]
 8005c04:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
 8005c06:	69bb      	ldr	r3, [r7, #24]
 8005c08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c0a:	2201      	movs	r2, #1
 8005c0c:	409a      	lsls	r2, r3
 8005c0e:	4b22      	ldr	r3, [pc, #136]	; (8005c98 <xTaskPriorityDisinherit+0x140>)
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	4313      	orrs	r3, r2
 8005c14:	4a20      	ldr	r2, [pc, #128]	; (8005c98 <xTaskPriorityDisinherit+0x140>)
 8005c16:	6013      	str	r3, [r2, #0]
 8005c18:	69bb      	ldr	r3, [r7, #24]
 8005c1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c1c:	491f      	ldr	r1, [pc, #124]	; (8005c9c <xTaskPriorityDisinherit+0x144>)
 8005c1e:	4613      	mov	r3, r2
 8005c20:	009b      	lsls	r3, r3, #2
 8005c22:	4413      	add	r3, r2
 8005c24:	009b      	lsls	r3, r3, #2
 8005c26:	440b      	add	r3, r1
 8005c28:	3304      	adds	r3, #4
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	617b      	str	r3, [r7, #20]
 8005c2e:	69bb      	ldr	r3, [r7, #24]
 8005c30:	697a      	ldr	r2, [r7, #20]
 8005c32:	609a      	str	r2, [r3, #8]
 8005c34:	697b      	ldr	r3, [r7, #20]
 8005c36:	689a      	ldr	r2, [r3, #8]
 8005c38:	69bb      	ldr	r3, [r7, #24]
 8005c3a:	60da      	str	r2, [r3, #12]
 8005c3c:	697b      	ldr	r3, [r7, #20]
 8005c3e:	689b      	ldr	r3, [r3, #8]
 8005c40:	69ba      	ldr	r2, [r7, #24]
 8005c42:	3204      	adds	r2, #4
 8005c44:	605a      	str	r2, [r3, #4]
 8005c46:	69bb      	ldr	r3, [r7, #24]
 8005c48:	1d1a      	adds	r2, r3, #4
 8005c4a:	697b      	ldr	r3, [r7, #20]
 8005c4c:	609a      	str	r2, [r3, #8]
 8005c4e:	69bb      	ldr	r3, [r7, #24]
 8005c50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c52:	4613      	mov	r3, r2
 8005c54:	009b      	lsls	r3, r3, #2
 8005c56:	4413      	add	r3, r2
 8005c58:	009b      	lsls	r3, r3, #2
 8005c5a:	4a10      	ldr	r2, [pc, #64]	; (8005c9c <xTaskPriorityDisinherit+0x144>)
 8005c5c:	441a      	add	r2, r3
 8005c5e:	69bb      	ldr	r3, [r7, #24]
 8005c60:	615a      	str	r2, [r3, #20]
 8005c62:	69bb      	ldr	r3, [r7, #24]
 8005c64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c66:	490d      	ldr	r1, [pc, #52]	; (8005c9c <xTaskPriorityDisinherit+0x144>)
 8005c68:	4613      	mov	r3, r2
 8005c6a:	009b      	lsls	r3, r3, #2
 8005c6c:	4413      	add	r3, r2
 8005c6e:	009b      	lsls	r3, r3, #2
 8005c70:	440b      	add	r3, r1
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	1c59      	adds	r1, r3, #1
 8005c76:	4809      	ldr	r0, [pc, #36]	; (8005c9c <xTaskPriorityDisinherit+0x144>)
 8005c78:	4613      	mov	r3, r2
 8005c7a:	009b      	lsls	r3, r3, #2
 8005c7c:	4413      	add	r3, r2
 8005c7e:	009b      	lsls	r3, r3, #2
 8005c80:	4403      	add	r3, r0
 8005c82:	6019      	str	r1, [r3, #0]
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8005c84:	2301      	movs	r3, #1
 8005c86:	61fb      	str	r3, [r7, #28]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8005c88:	69fb      	ldr	r3, [r7, #28]
    }
 8005c8a:	4618      	mov	r0, r3
 8005c8c:	3720      	adds	r7, #32
 8005c8e:	46bd      	mov	sp, r7
 8005c90:	bd80      	pop	{r7, pc}
 8005c92:	bf00      	nop
 8005c94:	20000118 	.word	0x20000118
 8005c98:	200001f8 	.word	0x200001f8
 8005c9c:	2000011c 	.word	0x2000011c

08005ca0 <vTaskPriorityDisinheritAfterTimeout>:

#if ( configUSE_MUTEXES == 1 )

    void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder,
                                              UBaseType_t uxHighestPriorityWaitingTask )
    {
 8005ca0:	b580      	push	{r7, lr}
 8005ca2:	b08a      	sub	sp, #40	; 0x28
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	6078      	str	r0, [r7, #4]
 8005ca8:	6039      	str	r1, [r7, #0]
        TCB_t * const pxTCB = pxMutexHolder;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	623b      	str	r3, [r7, #32]
        UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
        const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8005cae:	2301      	movs	r3, #1
 8005cb0:	61fb      	str	r3, [r7, #28]

        if( pxMutexHolder != NULL )
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	f000 80a1 	beq.w	8005dfc <vTaskPriorityDisinheritAfterTimeout+0x15c>
        {
            /* If pxMutexHolder is not NULL then the holder must hold at least
             * one mutex. */
            configASSERT( pxTCB->uxMutexesHeld );
 8005cba:	6a3b      	ldr	r3, [r7, #32]
 8005cbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d10a      	bne.n	8005cd8 <vTaskPriorityDisinheritAfterTimeout+0x38>
        __asm volatile
 8005cc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cc6:	f383 8811 	msr	BASEPRI, r3
 8005cca:	f3bf 8f6f 	isb	sy
 8005cce:	f3bf 8f4f 	dsb	sy
 8005cd2:	613b      	str	r3, [r7, #16]
    }
 8005cd4:	bf00      	nop
 8005cd6:	e7fe      	b.n	8005cd6 <vTaskPriorityDisinheritAfterTimeout+0x36>

            /* Determine the priority to which the priority of the task that
             * holds the mutex should be set.  This will be the greater of the
             * holding task's base priority and the priority of the highest
             * priority task that is waiting to obtain the mutex. */
            if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8005cd8:	6a3b      	ldr	r3, [r7, #32]
 8005cda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cdc:	683a      	ldr	r2, [r7, #0]
 8005cde:	429a      	cmp	r2, r3
 8005ce0:	d902      	bls.n	8005ce8 <vTaskPriorityDisinheritAfterTimeout+0x48>
            {
                uxPriorityToUse = uxHighestPriorityWaitingTask;
 8005ce2:	683b      	ldr	r3, [r7, #0]
 8005ce4:	627b      	str	r3, [r7, #36]	; 0x24
 8005ce6:	e002      	b.n	8005cee <vTaskPriorityDisinheritAfterTimeout+0x4e>
            }
            else
            {
                uxPriorityToUse = pxTCB->uxBasePriority;
 8005ce8:	6a3b      	ldr	r3, [r7, #32]
 8005cea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cec:	627b      	str	r3, [r7, #36]	; 0x24
            }

            /* Does the priority need to change? */
            if( pxTCB->uxPriority != uxPriorityToUse )
 8005cee:	6a3b      	ldr	r3, [r7, #32]
 8005cf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cf2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005cf4:	429a      	cmp	r2, r3
 8005cf6:	f000 8081 	beq.w	8005dfc <vTaskPriorityDisinheritAfterTimeout+0x15c>
            {
                /* Only disinherit if no other mutexes are held.  This is a
                 * simplification in the priority inheritance implementation.  If
                 * the task that holds the mutex is also holding other mutexes then
                 * the other mutexes may have caused the priority inheritance. */
                if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8005cfa:	6a3b      	ldr	r3, [r7, #32]
 8005cfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005cfe:	69fa      	ldr	r2, [r7, #28]
 8005d00:	429a      	cmp	r2, r3
 8005d02:	d17b      	bne.n	8005dfc <vTaskPriorityDisinheritAfterTimeout+0x15c>
                {
                    /* If a task has timed out because it already holds the
                     * mutex it was trying to obtain then it cannot of inherited
                     * its own priority. */
                    configASSERT( pxTCB != pxCurrentTCB );
 8005d04:	4b3f      	ldr	r3, [pc, #252]	; (8005e04 <vTaskPriorityDisinheritAfterTimeout+0x164>)
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	6a3a      	ldr	r2, [r7, #32]
 8005d0a:	429a      	cmp	r2, r3
 8005d0c:	d10a      	bne.n	8005d24 <vTaskPriorityDisinheritAfterTimeout+0x84>
        __asm volatile
 8005d0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d12:	f383 8811 	msr	BASEPRI, r3
 8005d16:	f3bf 8f6f 	isb	sy
 8005d1a:	f3bf 8f4f 	dsb	sy
 8005d1e:	60fb      	str	r3, [r7, #12]
    }
 8005d20:	bf00      	nop
 8005d22:	e7fe      	b.n	8005d22 <vTaskPriorityDisinheritAfterTimeout+0x82>

                    /* Disinherit the priority, remembering the previous
                     * priority to facilitate determining the subject task's
                     * state. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, uxPriorityToUse );
                    uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8005d24:	6a3b      	ldr	r3, [r7, #32]
 8005d26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d28:	61bb      	str	r3, [r7, #24]
                    pxTCB->uxPriority = uxPriorityToUse;
 8005d2a:	6a3b      	ldr	r3, [r7, #32]
 8005d2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d2e:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Only reset the event list item value if the value is not
                     * being used for anything else. */
                    if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005d30:	6a3b      	ldr	r3, [r7, #32]
 8005d32:	699b      	ldr	r3, [r3, #24]
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	db04      	blt.n	8005d42 <vTaskPriorityDisinheritAfterTimeout+0xa2>
                    {
                        listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d3a:	f1c3 0205 	rsb	r2, r3, #5
 8005d3e:	6a3b      	ldr	r3, [r7, #32]
 8005d40:	619a      	str	r2, [r3, #24]
                     * then the task that holds the mutex could be in either the
                     * Ready, Blocked or Suspended states.  Only remove the task
                     * from its current state list if it is in the Ready state as
                     * the task's priority is going to change and there is one
                     * Ready list per priority. */
                    if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8005d42:	6a3b      	ldr	r3, [r7, #32]
 8005d44:	6959      	ldr	r1, [r3, #20]
 8005d46:	69ba      	ldr	r2, [r7, #24]
 8005d48:	4613      	mov	r3, r2
 8005d4a:	009b      	lsls	r3, r3, #2
 8005d4c:	4413      	add	r3, r2
 8005d4e:	009b      	lsls	r3, r3, #2
 8005d50:	4a2d      	ldr	r2, [pc, #180]	; (8005e08 <vTaskPriorityDisinheritAfterTimeout+0x168>)
 8005d52:	4413      	add	r3, r2
 8005d54:	4299      	cmp	r1, r3
 8005d56:	d151      	bne.n	8005dfc <vTaskPriorityDisinheritAfterTimeout+0x15c>
                    {
                        if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005d58:	6a3b      	ldr	r3, [r7, #32]
 8005d5a:	3304      	adds	r3, #4
 8005d5c:	4618      	mov	r0, r3
 8005d5e:	f7fe f9d3 	bl	8004108 <uxListRemove>
 8005d62:	4603      	mov	r3, r0
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d10a      	bne.n	8005d7e <vTaskPriorityDisinheritAfterTimeout+0xde>
                        {
                            /* It is known that the task is in its ready list so
                             * there is no need to check again and the port level
                             * reset macro can be called directly. */
                            portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8005d68:	6a3b      	ldr	r3, [r7, #32]
 8005d6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d6c:	2201      	movs	r2, #1
 8005d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8005d72:	43da      	mvns	r2, r3
 8005d74:	4b25      	ldr	r3, [pc, #148]	; (8005e0c <vTaskPriorityDisinheritAfterTimeout+0x16c>)
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	4013      	ands	r3, r2
 8005d7a:	4a24      	ldr	r2, [pc, #144]	; (8005e0c <vTaskPriorityDisinheritAfterTimeout+0x16c>)
 8005d7c:	6013      	str	r3, [r2, #0]
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        prvAddTaskToReadyList( pxTCB );
 8005d7e:	6a3b      	ldr	r3, [r7, #32]
 8005d80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d82:	2201      	movs	r2, #1
 8005d84:	409a      	lsls	r2, r3
 8005d86:	4b21      	ldr	r3, [pc, #132]	; (8005e0c <vTaskPriorityDisinheritAfterTimeout+0x16c>)
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	4313      	orrs	r3, r2
 8005d8c:	4a1f      	ldr	r2, [pc, #124]	; (8005e0c <vTaskPriorityDisinheritAfterTimeout+0x16c>)
 8005d8e:	6013      	str	r3, [r2, #0]
 8005d90:	6a3b      	ldr	r3, [r7, #32]
 8005d92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d94:	491c      	ldr	r1, [pc, #112]	; (8005e08 <vTaskPriorityDisinheritAfterTimeout+0x168>)
 8005d96:	4613      	mov	r3, r2
 8005d98:	009b      	lsls	r3, r3, #2
 8005d9a:	4413      	add	r3, r2
 8005d9c:	009b      	lsls	r3, r3, #2
 8005d9e:	440b      	add	r3, r1
 8005da0:	3304      	adds	r3, #4
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	617b      	str	r3, [r7, #20]
 8005da6:	6a3b      	ldr	r3, [r7, #32]
 8005da8:	697a      	ldr	r2, [r7, #20]
 8005daa:	609a      	str	r2, [r3, #8]
 8005dac:	697b      	ldr	r3, [r7, #20]
 8005dae:	689a      	ldr	r2, [r3, #8]
 8005db0:	6a3b      	ldr	r3, [r7, #32]
 8005db2:	60da      	str	r2, [r3, #12]
 8005db4:	697b      	ldr	r3, [r7, #20]
 8005db6:	689b      	ldr	r3, [r3, #8]
 8005db8:	6a3a      	ldr	r2, [r7, #32]
 8005dba:	3204      	adds	r2, #4
 8005dbc:	605a      	str	r2, [r3, #4]
 8005dbe:	6a3b      	ldr	r3, [r7, #32]
 8005dc0:	1d1a      	adds	r2, r3, #4
 8005dc2:	697b      	ldr	r3, [r7, #20]
 8005dc4:	609a      	str	r2, [r3, #8]
 8005dc6:	6a3b      	ldr	r3, [r7, #32]
 8005dc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005dca:	4613      	mov	r3, r2
 8005dcc:	009b      	lsls	r3, r3, #2
 8005dce:	4413      	add	r3, r2
 8005dd0:	009b      	lsls	r3, r3, #2
 8005dd2:	4a0d      	ldr	r2, [pc, #52]	; (8005e08 <vTaskPriorityDisinheritAfterTimeout+0x168>)
 8005dd4:	441a      	add	r2, r3
 8005dd6:	6a3b      	ldr	r3, [r7, #32]
 8005dd8:	615a      	str	r2, [r3, #20]
 8005dda:	6a3b      	ldr	r3, [r7, #32]
 8005ddc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005dde:	490a      	ldr	r1, [pc, #40]	; (8005e08 <vTaskPriorityDisinheritAfterTimeout+0x168>)
 8005de0:	4613      	mov	r3, r2
 8005de2:	009b      	lsls	r3, r3, #2
 8005de4:	4413      	add	r3, r2
 8005de6:	009b      	lsls	r3, r3, #2
 8005de8:	440b      	add	r3, r1
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	1c59      	adds	r1, r3, #1
 8005dee:	4806      	ldr	r0, [pc, #24]	; (8005e08 <vTaskPriorityDisinheritAfterTimeout+0x168>)
 8005df0:	4613      	mov	r3, r2
 8005df2:	009b      	lsls	r3, r3, #2
 8005df4:	4413      	add	r3, r2
 8005df6:	009b      	lsls	r3, r3, #2
 8005df8:	4403      	add	r3, r0
 8005dfa:	6019      	str	r1, [r3, #0]
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8005dfc:	bf00      	nop
 8005dfe:	3728      	adds	r7, #40	; 0x28
 8005e00:	46bd      	mov	sp, r7
 8005e02:	bd80      	pop	{r7, pc}
 8005e04:	20000118 	.word	0x20000118
 8005e08:	2000011c 	.word	0x2000011c
 8005e0c:	200001f8 	.word	0x200001f8

08005e10 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    TaskHandle_t pvTaskIncrementMutexHeldCount( void )
    {
 8005e10:	b480      	push	{r7}
 8005e12:	af00      	add	r7, sp, #0
        /* If xSemaphoreCreateMutex() is called before any tasks have been created
         * then pxCurrentTCB will be NULL. */
        if( pxCurrentTCB != NULL )
 8005e14:	4b07      	ldr	r3, [pc, #28]	; (8005e34 <pvTaskIncrementMutexHeldCount+0x24>)
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d004      	beq.n	8005e26 <pvTaskIncrementMutexHeldCount+0x16>
        {
            ( pxCurrentTCB->uxMutexesHeld )++;
 8005e1c:	4b05      	ldr	r3, [pc, #20]	; (8005e34 <pvTaskIncrementMutexHeldCount+0x24>)
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005e22:	3201      	adds	r2, #1
 8005e24:	645a      	str	r2, [r3, #68]	; 0x44
        }

        return pxCurrentTCB;
 8005e26:	4b03      	ldr	r3, [pc, #12]	; (8005e34 <pvTaskIncrementMutexHeldCount+0x24>)
 8005e28:	681b      	ldr	r3, [r3, #0]
    }
 8005e2a:	4618      	mov	r0, r3
 8005e2c:	46bd      	mov	sp, r7
 8005e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e32:	4770      	bx	lr
 8005e34:	20000118 	.word	0x20000118

08005e38 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8005e38:	b580      	push	{r7, lr}
 8005e3a:	b086      	sub	sp, #24
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	6078      	str	r0, [r7, #4]
 8005e40:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8005e42:	4b36      	ldr	r3, [pc, #216]	; (8005f1c <prvAddCurrentTaskToDelayedList+0xe4>)
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005e48:	4b35      	ldr	r3, [pc, #212]	; (8005f20 <prvAddCurrentTaskToDelayedList+0xe8>)
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	3304      	adds	r3, #4
 8005e4e:	4618      	mov	r0, r3
 8005e50:	f7fe f95a 	bl	8004108 <uxListRemove>
 8005e54:	4603      	mov	r3, r0
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d10b      	bne.n	8005e72 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8005e5a:	4b31      	ldr	r3, [pc, #196]	; (8005f20 <prvAddCurrentTaskToDelayedList+0xe8>)
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e60:	2201      	movs	r2, #1
 8005e62:	fa02 f303 	lsl.w	r3, r2, r3
 8005e66:	43da      	mvns	r2, r3
 8005e68:	4b2e      	ldr	r3, [pc, #184]	; (8005f24 <prvAddCurrentTaskToDelayedList+0xec>)
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	4013      	ands	r3, r2
 8005e6e:	4a2d      	ldr	r2, [pc, #180]	; (8005f24 <prvAddCurrentTaskToDelayedList+0xec>)
 8005e70:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e78:	d124      	bne.n	8005ec4 <prvAddCurrentTaskToDelayedList+0x8c>
 8005e7a:	683b      	ldr	r3, [r7, #0]
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d021      	beq.n	8005ec4 <prvAddCurrentTaskToDelayedList+0x8c>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005e80:	4b29      	ldr	r3, [pc, #164]	; (8005f28 <prvAddCurrentTaskToDelayedList+0xf0>)
 8005e82:	685b      	ldr	r3, [r3, #4]
 8005e84:	613b      	str	r3, [r7, #16]
 8005e86:	4b26      	ldr	r3, [pc, #152]	; (8005f20 <prvAddCurrentTaskToDelayedList+0xe8>)
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	693a      	ldr	r2, [r7, #16]
 8005e8c:	609a      	str	r2, [r3, #8]
 8005e8e:	4b24      	ldr	r3, [pc, #144]	; (8005f20 <prvAddCurrentTaskToDelayedList+0xe8>)
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	693a      	ldr	r2, [r7, #16]
 8005e94:	6892      	ldr	r2, [r2, #8]
 8005e96:	60da      	str	r2, [r3, #12]
 8005e98:	4b21      	ldr	r3, [pc, #132]	; (8005f20 <prvAddCurrentTaskToDelayedList+0xe8>)
 8005e9a:	681a      	ldr	r2, [r3, #0]
 8005e9c:	693b      	ldr	r3, [r7, #16]
 8005e9e:	689b      	ldr	r3, [r3, #8]
 8005ea0:	3204      	adds	r2, #4
 8005ea2:	605a      	str	r2, [r3, #4]
 8005ea4:	4b1e      	ldr	r3, [pc, #120]	; (8005f20 <prvAddCurrentTaskToDelayedList+0xe8>)
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	1d1a      	adds	r2, r3, #4
 8005eaa:	693b      	ldr	r3, [r7, #16]
 8005eac:	609a      	str	r2, [r3, #8]
 8005eae:	4b1c      	ldr	r3, [pc, #112]	; (8005f20 <prvAddCurrentTaskToDelayedList+0xe8>)
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	4a1d      	ldr	r2, [pc, #116]	; (8005f28 <prvAddCurrentTaskToDelayedList+0xf0>)
 8005eb4:	615a      	str	r2, [r3, #20]
 8005eb6:	4b1c      	ldr	r3, [pc, #112]	; (8005f28 <prvAddCurrentTaskToDelayedList+0xf0>)
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	3301      	adds	r3, #1
 8005ebc:	4a1a      	ldr	r2, [pc, #104]	; (8005f28 <prvAddCurrentTaskToDelayedList+0xf0>)
 8005ebe:	6013      	str	r3, [r2, #0]
 8005ec0:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 8005ec2:	e026      	b.n	8005f12 <prvAddCurrentTaskToDelayedList+0xda>
            xTimeToWake = xConstTickCount + xTicksToWait;
 8005ec4:	697a      	ldr	r2, [r7, #20]
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	4413      	add	r3, r2
 8005eca:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005ecc:	4b14      	ldr	r3, [pc, #80]	; (8005f20 <prvAddCurrentTaskToDelayedList+0xe8>)
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	68fa      	ldr	r2, [r7, #12]
 8005ed2:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 8005ed4:	68fa      	ldr	r2, [r7, #12]
 8005ed6:	697b      	ldr	r3, [r7, #20]
 8005ed8:	429a      	cmp	r2, r3
 8005eda:	d209      	bcs.n	8005ef0 <prvAddCurrentTaskToDelayedList+0xb8>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005edc:	4b13      	ldr	r3, [pc, #76]	; (8005f2c <prvAddCurrentTaskToDelayedList+0xf4>)
 8005ede:	681a      	ldr	r2, [r3, #0]
 8005ee0:	4b0f      	ldr	r3, [pc, #60]	; (8005f20 <prvAddCurrentTaskToDelayedList+0xe8>)
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	3304      	adds	r3, #4
 8005ee6:	4619      	mov	r1, r3
 8005ee8:	4610      	mov	r0, r2
 8005eea:	f7fe f8d4 	bl	8004096 <vListInsert>
}
 8005eee:	e010      	b.n	8005f12 <prvAddCurrentTaskToDelayedList+0xda>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005ef0:	4b0f      	ldr	r3, [pc, #60]	; (8005f30 <prvAddCurrentTaskToDelayedList+0xf8>)
 8005ef2:	681a      	ldr	r2, [r3, #0]
 8005ef4:	4b0a      	ldr	r3, [pc, #40]	; (8005f20 <prvAddCurrentTaskToDelayedList+0xe8>)
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	3304      	adds	r3, #4
 8005efa:	4619      	mov	r1, r3
 8005efc:	4610      	mov	r0, r2
 8005efe:	f7fe f8ca 	bl	8004096 <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 8005f02:	4b0c      	ldr	r3, [pc, #48]	; (8005f34 <prvAddCurrentTaskToDelayedList+0xfc>)
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	68fa      	ldr	r2, [r7, #12]
 8005f08:	429a      	cmp	r2, r3
 8005f0a:	d202      	bcs.n	8005f12 <prvAddCurrentTaskToDelayedList+0xda>
                    xNextTaskUnblockTime = xTimeToWake;
 8005f0c:	4a09      	ldr	r2, [pc, #36]	; (8005f34 <prvAddCurrentTaskToDelayedList+0xfc>)
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	6013      	str	r3, [r2, #0]
}
 8005f12:	bf00      	nop
 8005f14:	3718      	adds	r7, #24
 8005f16:	46bd      	mov	sp, r7
 8005f18:	bd80      	pop	{r7, pc}
 8005f1a:	bf00      	nop
 8005f1c:	200001f4 	.word	0x200001f4
 8005f20:	20000118 	.word	0x20000118
 8005f24:	200001f8 	.word	0x200001f8
 8005f28:	200001dc 	.word	0x200001dc
 8005f2c:	200001ac 	.word	0x200001ac
 8005f30:	200001a8 	.word	0x200001a8
 8005f34:	20000210 	.word	0x20000210

08005f38 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8005f38:	b580      	push	{r7, lr}
 8005f3a:	b084      	sub	sp, #16
 8005f3c:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8005f3e:	2300      	movs	r3, #0
 8005f40:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8005f42:	f000 fa47 	bl	80063d4 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8005f46:	4b11      	ldr	r3, [pc, #68]	; (8005f8c <xTimerCreateTimerTask+0x54>)
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d00a      	beq.n	8005f64 <xTimerCreateTimerTask+0x2c>
                    xReturn = pdPASS;
                }
            }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
            {
                xReturn = xTaskCreate( prvTimerTask,
 8005f4e:	4b10      	ldr	r3, [pc, #64]	; (8005f90 <xTimerCreateTimerTask+0x58>)
 8005f50:	9301      	str	r3, [sp, #4]
 8005f52:	2303      	movs	r3, #3
 8005f54:	9300      	str	r3, [sp, #0]
 8005f56:	2300      	movs	r3, #0
 8005f58:	2280      	movs	r2, #128	; 0x80
 8005f5a:	490e      	ldr	r1, [pc, #56]	; (8005f94 <xTimerCreateTimerTask+0x5c>)
 8005f5c:	480e      	ldr	r0, [pc, #56]	; (8005f98 <xTimerCreateTimerTask+0x60>)
 8005f5e:	f7fe fe65 	bl	8004c2c <xTaskCreate>
 8005f62:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d10a      	bne.n	8005f80 <xTimerCreateTimerTask+0x48>
        __asm volatile
 8005f6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f6e:	f383 8811 	msr	BASEPRI, r3
 8005f72:	f3bf 8f6f 	isb	sy
 8005f76:	f3bf 8f4f 	dsb	sy
 8005f7a:	603b      	str	r3, [r7, #0]
    }
 8005f7c:	bf00      	nop
 8005f7e:	e7fe      	b.n	8005f7e <xTimerCreateTimerTask+0x46>
        return xReturn;
 8005f80:	687b      	ldr	r3, [r7, #4]
    }
 8005f82:	4618      	mov	r0, r3
 8005f84:	3708      	adds	r7, #8
 8005f86:	46bd      	mov	sp, r7
 8005f88:	bd80      	pop	{r7, pc}
 8005f8a:	bf00      	nop
 8005f8c:	2000024c 	.word	0x2000024c
 8005f90:	20000250 	.word	0x20000250
 8005f94:	08006d94 	.word	0x08006d94
 8005f98:	08006041 	.word	0x08006041

08005f9c <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 8005f9c:	b580      	push	{r7, lr}
 8005f9e:	b084      	sub	sp, #16
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	60f8      	str	r0, [r7, #12]
 8005fa4:	60b9      	str	r1, [r7, #8]
 8005fa6:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8005fa8:	e008      	b.n	8005fbc <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	699b      	ldr	r3, [r3, #24]
 8005fae:	68ba      	ldr	r2, [r7, #8]
 8005fb0:	4413      	add	r3, r2
 8005fb2:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	6a1b      	ldr	r3, [r3, #32]
 8005fb8:	68f8      	ldr	r0, [r7, #12]
 8005fba:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	699a      	ldr	r2, [r3, #24]
 8005fc0:	68bb      	ldr	r3, [r7, #8]
 8005fc2:	18d1      	adds	r1, r2, r3
 8005fc4:	68bb      	ldr	r3, [r7, #8]
 8005fc6:	687a      	ldr	r2, [r7, #4]
 8005fc8:	68f8      	ldr	r0, [r7, #12]
 8005fca:	f000 f8dd 	bl	8006188 <prvInsertTimerInActiveList>
 8005fce:	4603      	mov	r3, r0
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d1ea      	bne.n	8005faa <prvReloadTimer+0xe>
        }
    }
 8005fd4:	bf00      	nop
 8005fd6:	bf00      	nop
 8005fd8:	3710      	adds	r7, #16
 8005fda:	46bd      	mov	sp, r7
 8005fdc:	bd80      	pop	{r7, pc}
	...

08005fe0 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8005fe0:	b580      	push	{r7, lr}
 8005fe2:	b084      	sub	sp, #16
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	6078      	str	r0, [r7, #4]
 8005fe8:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005fea:	4b14      	ldr	r3, [pc, #80]	; (800603c <prvProcessExpiredTimer+0x5c>)
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	68db      	ldr	r3, [r3, #12]
 8005ff0:	68db      	ldr	r3, [r3, #12]
 8005ff2:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	3304      	adds	r3, #4
 8005ff8:	4618      	mov	r0, r3
 8005ffa:	f7fe f885 	bl	8004108 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006004:	f003 0304 	and.w	r3, r3, #4
 8006008:	2b00      	cmp	r3, #0
 800600a:	d005      	beq.n	8006018 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 800600c:	683a      	ldr	r2, [r7, #0]
 800600e:	6879      	ldr	r1, [r7, #4]
 8006010:	68f8      	ldr	r0, [r7, #12]
 8006012:	f7ff ffc3 	bl	8005f9c <prvReloadTimer>
 8006016:	e008      	b.n	800602a <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800601e:	f023 0301 	bic.w	r3, r3, #1
 8006022:	b2da      	uxtb	r2, r3
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	6a1b      	ldr	r3, [r3, #32]
 800602e:	68f8      	ldr	r0, [r7, #12]
 8006030:	4798      	blx	r3
    }
 8006032:	bf00      	nop
 8006034:	3710      	adds	r7, #16
 8006036:	46bd      	mov	sp, r7
 8006038:	bd80      	pop	{r7, pc}
 800603a:	bf00      	nop
 800603c:	20000244 	.word	0x20000244

08006040 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8006040:	b580      	push	{r7, lr}
 8006042:	b084      	sub	sp, #16
 8006044:	af00      	add	r7, sp, #0
 8006046:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006048:	f107 0308 	add.w	r3, r7, #8
 800604c:	4618      	mov	r0, r3
 800604e:	f000 f857 	bl	8006100 <prvGetNextExpireTime>
 8006052:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006054:	68bb      	ldr	r3, [r7, #8]
 8006056:	4619      	mov	r1, r3
 8006058:	68f8      	ldr	r0, [r7, #12]
 800605a:	f000 f803 	bl	8006064 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 800605e:	f000 f8d5 	bl	800620c <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006062:	e7f1      	b.n	8006048 <prvTimerTask+0x8>

08006064 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8006064:	b580      	push	{r7, lr}
 8006066:	b084      	sub	sp, #16
 8006068:	af00      	add	r7, sp, #0
 800606a:	6078      	str	r0, [r7, #4]
 800606c:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 800606e:	f7fe ffc1 	bl	8004ff4 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006072:	f107 0308 	add.w	r3, r7, #8
 8006076:	4618      	mov	r0, r3
 8006078:	f000 f866 	bl	8006148 <prvSampleTimeNow>
 800607c:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 800607e:	68bb      	ldr	r3, [r7, #8]
 8006080:	2b00      	cmp	r3, #0
 8006082:	d130      	bne.n	80060e6 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006084:	683b      	ldr	r3, [r7, #0]
 8006086:	2b00      	cmp	r3, #0
 8006088:	d10a      	bne.n	80060a0 <prvProcessTimerOrBlockTask+0x3c>
 800608a:	687a      	ldr	r2, [r7, #4]
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	429a      	cmp	r2, r3
 8006090:	d806      	bhi.n	80060a0 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8006092:	f7fe ffbd 	bl	8005010 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006096:	68f9      	ldr	r1, [r7, #12]
 8006098:	6878      	ldr	r0, [r7, #4]
 800609a:	f7ff ffa1 	bl	8005fe0 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 800609e:	e024      	b.n	80060ea <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 80060a0:	683b      	ldr	r3, [r7, #0]
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d008      	beq.n	80060b8 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80060a6:	4b13      	ldr	r3, [pc, #76]	; (80060f4 <prvProcessTimerOrBlockTask+0x90>)
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d101      	bne.n	80060b4 <prvProcessTimerOrBlockTask+0x50>
 80060b0:	2301      	movs	r3, #1
 80060b2:	e000      	b.n	80060b6 <prvProcessTimerOrBlockTask+0x52>
 80060b4:	2300      	movs	r3, #0
 80060b6:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80060b8:	4b0f      	ldr	r3, [pc, #60]	; (80060f8 <prvProcessTimerOrBlockTask+0x94>)
 80060ba:	6818      	ldr	r0, [r3, #0]
 80060bc:	687a      	ldr	r2, [r7, #4]
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	1ad3      	subs	r3, r2, r3
 80060c2:	683a      	ldr	r2, [r7, #0]
 80060c4:	4619      	mov	r1, r3
 80060c6:	f7fe fd7d 	bl	8004bc4 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 80060ca:	f7fe ffa1 	bl	8005010 <xTaskResumeAll>
 80060ce:	4603      	mov	r3, r0
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d10a      	bne.n	80060ea <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 80060d4:	4b09      	ldr	r3, [pc, #36]	; (80060fc <prvProcessTimerOrBlockTask+0x98>)
 80060d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80060da:	601a      	str	r2, [r3, #0]
 80060dc:	f3bf 8f4f 	dsb	sy
 80060e0:	f3bf 8f6f 	isb	sy
    }
 80060e4:	e001      	b.n	80060ea <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 80060e6:	f7fe ff93 	bl	8005010 <xTaskResumeAll>
    }
 80060ea:	bf00      	nop
 80060ec:	3710      	adds	r7, #16
 80060ee:	46bd      	mov	sp, r7
 80060f0:	bd80      	pop	{r7, pc}
 80060f2:	bf00      	nop
 80060f4:	20000248 	.word	0x20000248
 80060f8:	2000024c 	.word	0x2000024c
 80060fc:	e000ed04 	.word	0xe000ed04

08006100 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8006100:	b480      	push	{r7}
 8006102:	b085      	sub	sp, #20
 8006104:	af00      	add	r7, sp, #0
 8006106:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006108:	4b0e      	ldr	r3, [pc, #56]	; (8006144 <prvGetNextExpireTime+0x44>)
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	2b00      	cmp	r3, #0
 8006110:	d101      	bne.n	8006116 <prvGetNextExpireTime+0x16>
 8006112:	2201      	movs	r2, #1
 8006114:	e000      	b.n	8006118 <prvGetNextExpireTime+0x18>
 8006116:	2200      	movs	r2, #0
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	2b00      	cmp	r3, #0
 8006122:	d105      	bne.n	8006130 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006124:	4b07      	ldr	r3, [pc, #28]	; (8006144 <prvGetNextExpireTime+0x44>)
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	68db      	ldr	r3, [r3, #12]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	60fb      	str	r3, [r7, #12]
 800612e:	e001      	b.n	8006134 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8006130:	2300      	movs	r3, #0
 8006132:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8006134:	68fb      	ldr	r3, [r7, #12]
    }
 8006136:	4618      	mov	r0, r3
 8006138:	3714      	adds	r7, #20
 800613a:	46bd      	mov	sp, r7
 800613c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006140:	4770      	bx	lr
 8006142:	bf00      	nop
 8006144:	20000244 	.word	0x20000244

08006148 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8006148:	b580      	push	{r7, lr}
 800614a:	b084      	sub	sp, #16
 800614c:	af00      	add	r7, sp, #0
 800614e:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8006150:	f7ff f85a 	bl	8005208 <xTaskGetTickCount>
 8006154:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8006156:	4b0b      	ldr	r3, [pc, #44]	; (8006184 <prvSampleTimeNow+0x3c>)
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	68fa      	ldr	r2, [r7, #12]
 800615c:	429a      	cmp	r2, r3
 800615e:	d205      	bcs.n	800616c <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8006160:	f000 f912 	bl	8006388 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	2201      	movs	r2, #1
 8006168:	601a      	str	r2, [r3, #0]
 800616a:	e002      	b.n	8006172 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	2200      	movs	r2, #0
 8006170:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8006172:	4a04      	ldr	r2, [pc, #16]	; (8006184 <prvSampleTimeNow+0x3c>)
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8006178:	68fb      	ldr	r3, [r7, #12]
    }
 800617a:	4618      	mov	r0, r3
 800617c:	3710      	adds	r7, #16
 800617e:	46bd      	mov	sp, r7
 8006180:	bd80      	pop	{r7, pc}
 8006182:	bf00      	nop
 8006184:	20000254 	.word	0x20000254

08006188 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8006188:	b580      	push	{r7, lr}
 800618a:	b086      	sub	sp, #24
 800618c:	af00      	add	r7, sp, #0
 800618e:	60f8      	str	r0, [r7, #12]
 8006190:	60b9      	str	r1, [r7, #8]
 8006192:	607a      	str	r2, [r7, #4]
 8006194:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8006196:	2300      	movs	r3, #0
 8006198:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	68ba      	ldr	r2, [r7, #8]
 800619e:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	68fa      	ldr	r2, [r7, #12]
 80061a4:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 80061a6:	68ba      	ldr	r2, [r7, #8]
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	429a      	cmp	r2, r3
 80061ac:	d812      	bhi.n	80061d4 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80061ae:	687a      	ldr	r2, [r7, #4]
 80061b0:	683b      	ldr	r3, [r7, #0]
 80061b2:	1ad2      	subs	r2, r2, r3
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	699b      	ldr	r3, [r3, #24]
 80061b8:	429a      	cmp	r2, r3
 80061ba:	d302      	bcc.n	80061c2 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 80061bc:	2301      	movs	r3, #1
 80061be:	617b      	str	r3, [r7, #20]
 80061c0:	e01b      	b.n	80061fa <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80061c2:	4b10      	ldr	r3, [pc, #64]	; (8006204 <prvInsertTimerInActiveList+0x7c>)
 80061c4:	681a      	ldr	r2, [r3, #0]
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	3304      	adds	r3, #4
 80061ca:	4619      	mov	r1, r3
 80061cc:	4610      	mov	r0, r2
 80061ce:	f7fd ff62 	bl	8004096 <vListInsert>
 80061d2:	e012      	b.n	80061fa <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80061d4:	687a      	ldr	r2, [r7, #4]
 80061d6:	683b      	ldr	r3, [r7, #0]
 80061d8:	429a      	cmp	r2, r3
 80061da:	d206      	bcs.n	80061ea <prvInsertTimerInActiveList+0x62>
 80061dc:	68ba      	ldr	r2, [r7, #8]
 80061de:	683b      	ldr	r3, [r7, #0]
 80061e0:	429a      	cmp	r2, r3
 80061e2:	d302      	bcc.n	80061ea <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 80061e4:	2301      	movs	r3, #1
 80061e6:	617b      	str	r3, [r7, #20]
 80061e8:	e007      	b.n	80061fa <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80061ea:	4b07      	ldr	r3, [pc, #28]	; (8006208 <prvInsertTimerInActiveList+0x80>)
 80061ec:	681a      	ldr	r2, [r3, #0]
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	3304      	adds	r3, #4
 80061f2:	4619      	mov	r1, r3
 80061f4:	4610      	mov	r0, r2
 80061f6:	f7fd ff4e 	bl	8004096 <vListInsert>
            }
        }

        return xProcessTimerNow;
 80061fa:	697b      	ldr	r3, [r7, #20]
    }
 80061fc:	4618      	mov	r0, r3
 80061fe:	3718      	adds	r7, #24
 8006200:	46bd      	mov	sp, r7
 8006202:	bd80      	pop	{r7, pc}
 8006204:	20000248 	.word	0x20000248
 8006208:	20000244 	.word	0x20000244

0800620c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 800620c:	b580      	push	{r7, lr}
 800620e:	b088      	sub	sp, #32
 8006210:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006212:	e0a6      	b.n	8006362 <prvProcessReceivedCommands+0x156>
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006214:	68bb      	ldr	r3, [r7, #8]
 8006216:	2b00      	cmp	r3, #0
 8006218:	f2c0 80a3 	blt.w	8006362 <prvProcessReceivedCommands+0x156>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800621c:	693b      	ldr	r3, [r7, #16]
 800621e:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006220:	69fb      	ldr	r3, [r7, #28]
 8006222:	695b      	ldr	r3, [r3, #20]
 8006224:	2b00      	cmp	r3, #0
 8006226:	d004      	beq.n	8006232 <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006228:	69fb      	ldr	r3, [r7, #28]
 800622a:	3304      	adds	r3, #4
 800622c:	4618      	mov	r0, r3
 800622e:	f7fd ff6b 	bl	8004108 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006232:	1d3b      	adds	r3, r7, #4
 8006234:	4618      	mov	r0, r3
 8006236:	f7ff ff87 	bl	8006148 <prvSampleTimeNow>
 800623a:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 800623c:	68bb      	ldr	r3, [r7, #8]
 800623e:	3b01      	subs	r3, #1
 8006240:	2b08      	cmp	r3, #8
 8006242:	f200 808d 	bhi.w	8006360 <prvProcessReceivedCommands+0x154>
 8006246:	a201      	add	r2, pc, #4	; (adr r2, 800624c <prvProcessReceivedCommands+0x40>)
 8006248:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800624c:	08006271 	.word	0x08006271
 8006250:	08006271 	.word	0x08006271
 8006254:	080062d9 	.word	0x080062d9
 8006258:	080062ed 	.word	0x080062ed
 800625c:	08006337 	.word	0x08006337
 8006260:	08006271 	.word	0x08006271
 8006264:	08006271 	.word	0x08006271
 8006268:	080062d9 	.word	0x080062d9
 800626c:	080062ed 	.word	0x080062ed
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006270:	69fb      	ldr	r3, [r7, #28]
 8006272:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006276:	f043 0301 	orr.w	r3, r3, #1
 800627a:	b2da      	uxtb	r2, r3
 800627c:	69fb      	ldr	r3, [r7, #28]
 800627e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006282:	68fa      	ldr	r2, [r7, #12]
 8006284:	69fb      	ldr	r3, [r7, #28]
 8006286:	699b      	ldr	r3, [r3, #24]
 8006288:	18d1      	adds	r1, r2, r3
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	69ba      	ldr	r2, [r7, #24]
 800628e:	69f8      	ldr	r0, [r7, #28]
 8006290:	f7ff ff7a 	bl	8006188 <prvInsertTimerInActiveList>
 8006294:	4603      	mov	r3, r0
 8006296:	2b00      	cmp	r3, #0
 8006298:	d063      	beq.n	8006362 <prvProcessReceivedCommands+0x156>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800629a:	69fb      	ldr	r3, [r7, #28]
 800629c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80062a0:	f003 0304 	and.w	r3, r3, #4
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d009      	beq.n	80062bc <prvProcessReceivedCommands+0xb0>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 80062a8:	68fa      	ldr	r2, [r7, #12]
 80062aa:	69fb      	ldr	r3, [r7, #28]
 80062ac:	699b      	ldr	r3, [r3, #24]
 80062ae:	4413      	add	r3, r2
 80062b0:	69ba      	ldr	r2, [r7, #24]
 80062b2:	4619      	mov	r1, r3
 80062b4:	69f8      	ldr	r0, [r7, #28]
 80062b6:	f7ff fe71 	bl	8005f9c <prvReloadTimer>
 80062ba:	e008      	b.n	80062ce <prvProcessReceivedCommands+0xc2>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80062bc:	69fb      	ldr	r3, [r7, #28]
 80062be:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80062c2:	f023 0301 	bic.w	r3, r3, #1
 80062c6:	b2da      	uxtb	r2, r3
 80062c8:	69fb      	ldr	r3, [r7, #28]
 80062ca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80062ce:	69fb      	ldr	r3, [r7, #28]
 80062d0:	6a1b      	ldr	r3, [r3, #32]
 80062d2:	69f8      	ldr	r0, [r7, #28]
 80062d4:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 80062d6:	e044      	b.n	8006362 <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80062d8:	69fb      	ldr	r3, [r7, #28]
 80062da:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80062de:	f023 0301 	bic.w	r3, r3, #1
 80062e2:	b2da      	uxtb	r2, r3
 80062e4:	69fb      	ldr	r3, [r7, #28]
 80062e6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
                        break;
 80062ea:	e03a      	b.n	8006362 <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80062ec:	69fb      	ldr	r3, [r7, #28]
 80062ee:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80062f2:	f043 0301 	orr.w	r3, r3, #1
 80062f6:	b2da      	uxtb	r2, r3
 80062f8:	69fb      	ldr	r3, [r7, #28]
 80062fa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80062fe:	68fa      	ldr	r2, [r7, #12]
 8006300:	69fb      	ldr	r3, [r7, #28]
 8006302:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006304:	69fb      	ldr	r3, [r7, #28]
 8006306:	699b      	ldr	r3, [r3, #24]
 8006308:	2b00      	cmp	r3, #0
 800630a:	d10a      	bne.n	8006322 <prvProcessReceivedCommands+0x116>
        __asm volatile
 800630c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006310:	f383 8811 	msr	BASEPRI, r3
 8006314:	f3bf 8f6f 	isb	sy
 8006318:	f3bf 8f4f 	dsb	sy
 800631c:	617b      	str	r3, [r7, #20]
    }
 800631e:	bf00      	nop
 8006320:	e7fe      	b.n	8006320 <prvProcessReceivedCommands+0x114>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006322:	69fb      	ldr	r3, [r7, #28]
 8006324:	699a      	ldr	r2, [r3, #24]
 8006326:	69bb      	ldr	r3, [r7, #24]
 8006328:	18d1      	adds	r1, r2, r3
 800632a:	69bb      	ldr	r3, [r7, #24]
 800632c:	69ba      	ldr	r2, [r7, #24]
 800632e:	69f8      	ldr	r0, [r7, #28]
 8006330:	f7ff ff2a 	bl	8006188 <prvInsertTimerInActiveList>
                        break;
 8006334:	e015      	b.n	8006362 <prvProcessReceivedCommands+0x156>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006336:	69fb      	ldr	r3, [r7, #28]
 8006338:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800633c:	f003 0302 	and.w	r3, r3, #2
 8006340:	2b00      	cmp	r3, #0
 8006342:	d103      	bne.n	800634c <prvProcessReceivedCommands+0x140>
                            {
                                vPortFree( pxTimer );
 8006344:	69f8      	ldr	r0, [r7, #28]
 8006346:	f000 fb3b 	bl	80069c0 <vPortFree>
 800634a:	e00a      	b.n	8006362 <prvProcessReceivedCommands+0x156>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800634c:	69fb      	ldr	r3, [r7, #28]
 800634e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006352:	f023 0301 	bic.w	r3, r3, #1
 8006356:	b2da      	uxtb	r2, r3
 8006358:	69fb      	ldr	r3, [r7, #28]
 800635a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 800635e:	e000      	b.n	8006362 <prvProcessReceivedCommands+0x156>

                    default:
                        /* Don't expect to get here. */
                        break;
 8006360:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006362:	4b08      	ldr	r3, [pc, #32]	; (8006384 <prvProcessReceivedCommands+0x178>)
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	f107 0108 	add.w	r1, r7, #8
 800636a:	2200      	movs	r2, #0
 800636c:	4618      	mov	r0, r3
 800636e:	f7fe f923 	bl	80045b8 <xQueueReceive>
 8006372:	4603      	mov	r3, r0
 8006374:	2b00      	cmp	r3, #0
 8006376:	f47f af4d 	bne.w	8006214 <prvProcessReceivedCommands+0x8>
                }
            }
        }
    }
 800637a:	bf00      	nop
 800637c:	bf00      	nop
 800637e:	3720      	adds	r7, #32
 8006380:	46bd      	mov	sp, r7
 8006382:	bd80      	pop	{r7, pc}
 8006384:	2000024c 	.word	0x2000024c

08006388 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8006388:	b580      	push	{r7, lr}
 800638a:	b082      	sub	sp, #8
 800638c:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800638e:	e009      	b.n	80063a4 <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006390:	4b0e      	ldr	r3, [pc, #56]	; (80063cc <prvSwitchTimerLists+0x44>)
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	68db      	ldr	r3, [r3, #12]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 800639a:	f04f 31ff 	mov.w	r1, #4294967295
 800639e:	6838      	ldr	r0, [r7, #0]
 80063a0:	f7ff fe1e 	bl	8005fe0 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80063a4:	4b09      	ldr	r3, [pc, #36]	; (80063cc <prvSwitchTimerLists+0x44>)
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d1f0      	bne.n	8006390 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 80063ae:	4b07      	ldr	r3, [pc, #28]	; (80063cc <prvSwitchTimerLists+0x44>)
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 80063b4:	4b06      	ldr	r3, [pc, #24]	; (80063d0 <prvSwitchTimerLists+0x48>)
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	4a04      	ldr	r2, [pc, #16]	; (80063cc <prvSwitchTimerLists+0x44>)
 80063ba:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 80063bc:	4a04      	ldr	r2, [pc, #16]	; (80063d0 <prvSwitchTimerLists+0x48>)
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	6013      	str	r3, [r2, #0]
    }
 80063c2:	bf00      	nop
 80063c4:	3708      	adds	r7, #8
 80063c6:	46bd      	mov	sp, r7
 80063c8:	bd80      	pop	{r7, pc}
 80063ca:	bf00      	nop
 80063cc:	20000244 	.word	0x20000244
 80063d0:	20000248 	.word	0x20000248

080063d4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 80063d4:	b580      	push	{r7, lr}
 80063d6:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 80063d8:	f000 f956 	bl	8006688 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 80063dc:	4b0d      	ldr	r3, [pc, #52]	; (8006414 <prvCheckForValidListAndQueue+0x40>)
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d113      	bne.n	800640c <prvCheckForValidListAndQueue+0x38>
            {
                vListInitialise( &xActiveTimerList1 );
 80063e4:	480c      	ldr	r0, [pc, #48]	; (8006418 <prvCheckForValidListAndQueue+0x44>)
 80063e6:	f7fd fe29 	bl	800403c <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 80063ea:	480c      	ldr	r0, [pc, #48]	; (800641c <prvCheckForValidListAndQueue+0x48>)
 80063ec:	f7fd fe26 	bl	800403c <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 80063f0:	4b0b      	ldr	r3, [pc, #44]	; (8006420 <prvCheckForValidListAndQueue+0x4c>)
 80063f2:	4a09      	ldr	r2, [pc, #36]	; (8006418 <prvCheckForValidListAndQueue+0x44>)
 80063f4:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 80063f6:	4b0b      	ldr	r3, [pc, #44]	; (8006424 <prvCheckForValidListAndQueue+0x50>)
 80063f8:	4a08      	ldr	r2, [pc, #32]	; (800641c <prvCheckForValidListAndQueue+0x48>)
 80063fa:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 80063fc:	2200      	movs	r2, #0
 80063fe:	210c      	movs	r1, #12
 8006400:	2005      	movs	r0, #5
 8006402:	f7fd ff3b 	bl	800427c <xQueueGenericCreate>
 8006406:	4603      	mov	r3, r0
 8006408:	4a02      	ldr	r2, [pc, #8]	; (8006414 <prvCheckForValidListAndQueue+0x40>)
 800640a:	6013      	str	r3, [r2, #0]
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 800640c:	f000 f96c 	bl	80066e8 <vPortExitCritical>
    }
 8006410:	bf00      	nop
 8006412:	bd80      	pop	{r7, pc}
 8006414:	2000024c 	.word	0x2000024c
 8006418:	2000021c 	.word	0x2000021c
 800641c:	20000230 	.word	0x20000230
 8006420:	20000244 	.word	0x20000244
 8006424:	20000248 	.word	0x20000248

08006428 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8006428:	b480      	push	{r7}
 800642a:	b085      	sub	sp, #20
 800642c:	af00      	add	r7, sp, #0
 800642e:	60f8      	str	r0, [r7, #12]
 8006430:	60b9      	str	r1, [r7, #8]
 8006432:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	3b04      	subs	r3, #4
 8006438:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006440:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	3b04      	subs	r3, #4
 8006446:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8006448:	68bb      	ldr	r3, [r7, #8]
 800644a:	f023 0201 	bic.w	r2, r3, #1
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	3b04      	subs	r3, #4
 8006456:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8006458:	4a0c      	ldr	r2, [pc, #48]	; (800648c <pxPortInitialiseStack+0x64>)
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	3b14      	subs	r3, #20
 8006462:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8006464:	687a      	ldr	r2, [r7, #4]
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	3b04      	subs	r3, #4
 800646e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	f06f 0202 	mvn.w	r2, #2
 8006476:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	3b20      	subs	r3, #32
 800647c:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 800647e:	68fb      	ldr	r3, [r7, #12]
}
 8006480:	4618      	mov	r0, r3
 8006482:	3714      	adds	r7, #20
 8006484:	46bd      	mov	sp, r7
 8006486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800648a:	4770      	bx	lr
 800648c:	08006491 	.word	0x08006491

08006490 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006490:	b480      	push	{r7}
 8006492:	b085      	sub	sp, #20
 8006494:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8006496:	2300      	movs	r3, #0
 8006498:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 800649a:	4b12      	ldr	r3, [pc, #72]	; (80064e4 <prvTaskExitError+0x54>)
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064a2:	d00a      	beq.n	80064ba <prvTaskExitError+0x2a>
        __asm volatile
 80064a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064a8:	f383 8811 	msr	BASEPRI, r3
 80064ac:	f3bf 8f6f 	isb	sy
 80064b0:	f3bf 8f4f 	dsb	sy
 80064b4:	60fb      	str	r3, [r7, #12]
    }
 80064b6:	bf00      	nop
 80064b8:	e7fe      	b.n	80064b8 <prvTaskExitError+0x28>
        __asm volatile
 80064ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064be:	f383 8811 	msr	BASEPRI, r3
 80064c2:	f3bf 8f6f 	isb	sy
 80064c6:	f3bf 8f4f 	dsb	sy
 80064ca:	60bb      	str	r3, [r7, #8]
    }
 80064cc:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 80064ce:	bf00      	nop
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d0fc      	beq.n	80064d0 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 80064d6:	bf00      	nop
 80064d8:	bf00      	nop
 80064da:	3714      	adds	r7, #20
 80064dc:	46bd      	mov	sp, r7
 80064de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e2:	4770      	bx	lr
 80064e4:	20000010 	.word	0x20000010
	...

080064f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 80064f0:	4b07      	ldr	r3, [pc, #28]	; (8006510 <pxCurrentTCBConst2>)
 80064f2:	6819      	ldr	r1, [r3, #0]
 80064f4:	6808      	ldr	r0, [r1, #0]
 80064f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064fa:	f380 8809 	msr	PSP, r0
 80064fe:	f3bf 8f6f 	isb	sy
 8006502:	f04f 0000 	mov.w	r0, #0
 8006506:	f380 8811 	msr	BASEPRI, r0
 800650a:	4770      	bx	lr
 800650c:	f3af 8000 	nop.w

08006510 <pxCurrentTCBConst2>:
 8006510:	20000118 	.word	0x20000118
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8006514:	bf00      	nop
 8006516:	bf00      	nop

08006518 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8006518:	4808      	ldr	r0, [pc, #32]	; (800653c <prvPortStartFirstTask+0x24>)
 800651a:	6800      	ldr	r0, [r0, #0]
 800651c:	6800      	ldr	r0, [r0, #0]
 800651e:	f380 8808 	msr	MSP, r0
 8006522:	f04f 0000 	mov.w	r0, #0
 8006526:	f380 8814 	msr	CONTROL, r0
 800652a:	b662      	cpsie	i
 800652c:	b661      	cpsie	f
 800652e:	f3bf 8f4f 	dsb	sy
 8006532:	f3bf 8f6f 	isb	sy
 8006536:	df00      	svc	0
 8006538:	bf00      	nop
 800653a:	0000      	.short	0x0000
 800653c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8006540:	bf00      	nop
 8006542:	bf00      	nop

08006544 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006544:	b580      	push	{r7, lr}
 8006546:	b086      	sub	sp, #24
 8006548:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800654a:	4b46      	ldr	r3, [pc, #280]	; (8006664 <xPortStartScheduler+0x120>)
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	4a46      	ldr	r2, [pc, #280]	; (8006668 <xPortStartScheduler+0x124>)
 8006550:	4293      	cmp	r3, r2
 8006552:	d10a      	bne.n	800656a <xPortStartScheduler+0x26>
        __asm volatile
 8006554:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006558:	f383 8811 	msr	BASEPRI, r3
 800655c:	f3bf 8f6f 	isb	sy
 8006560:	f3bf 8f4f 	dsb	sy
 8006564:	613b      	str	r3, [r7, #16]
    }
 8006566:	bf00      	nop
 8006568:	e7fe      	b.n	8006568 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800656a:	4b3e      	ldr	r3, [pc, #248]	; (8006664 <xPortStartScheduler+0x120>)
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	4a3f      	ldr	r2, [pc, #252]	; (800666c <xPortStartScheduler+0x128>)
 8006570:	4293      	cmp	r3, r2
 8006572:	d10a      	bne.n	800658a <xPortStartScheduler+0x46>
        __asm volatile
 8006574:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006578:	f383 8811 	msr	BASEPRI, r3
 800657c:	f3bf 8f6f 	isb	sy
 8006580:	f3bf 8f4f 	dsb	sy
 8006584:	60fb      	str	r3, [r7, #12]
    }
 8006586:	bf00      	nop
 8006588:	e7fe      	b.n	8006588 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint32_t ulOriginalPriority;
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800658a:	4b39      	ldr	r3, [pc, #228]	; (8006670 <xPortStartScheduler+0x12c>)
 800658c:	617b      	str	r3, [r7, #20]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ulOriginalPriority = *pucFirstUserPriorityRegister;
 800658e:	697b      	ldr	r3, [r7, #20]
 8006590:	781b      	ldrb	r3, [r3, #0]
 8006592:	b2db      	uxtb	r3, r3
 8006594:	607b      	str	r3, [r7, #4]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006596:	697b      	ldr	r3, [r7, #20]
 8006598:	22ff      	movs	r2, #255	; 0xff
 800659a:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800659c:	697b      	ldr	r3, [r7, #20]
 800659e:	781b      	ldrb	r3, [r3, #0]
 80065a0:	b2db      	uxtb	r3, r3
 80065a2:	70fb      	strb	r3, [r7, #3]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80065a4:	78fb      	ldrb	r3, [r7, #3]
 80065a6:	b2db      	uxtb	r3, r3
 80065a8:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80065ac:	b2da      	uxtb	r2, r3
 80065ae:	4b31      	ldr	r3, [pc, #196]	; (8006674 <xPortStartScheduler+0x130>)
 80065b0:	701a      	strb	r2, [r3, #0]

        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */
        ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80065b2:	4b31      	ldr	r3, [pc, #196]	; (8006678 <xPortStartScheduler+0x134>)
 80065b4:	2207      	movs	r2, #7
 80065b6:	601a      	str	r2, [r3, #0]

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80065b8:	e009      	b.n	80065ce <xPortStartScheduler+0x8a>
        {
            ulMaxPRIGROUPValue--;
 80065ba:	4b2f      	ldr	r3, [pc, #188]	; (8006678 <xPortStartScheduler+0x134>)
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	3b01      	subs	r3, #1
 80065c0:	4a2d      	ldr	r2, [pc, #180]	; (8006678 <xPortStartScheduler+0x134>)
 80065c2:	6013      	str	r3, [r2, #0]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80065c4:	78fb      	ldrb	r3, [r7, #3]
 80065c6:	b2db      	uxtb	r3, r3
 80065c8:	005b      	lsls	r3, r3, #1
 80065ca:	b2db      	uxtb	r3, r3
 80065cc:	70fb      	strb	r3, [r7, #3]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80065ce:	78fb      	ldrb	r3, [r7, #3]
 80065d0:	b2db      	uxtb	r3, r3
 80065d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065d6:	2b80      	cmp	r3, #128	; 0x80
 80065d8:	d0ef      	beq.n	80065ba <xPortStartScheduler+0x76>
        #ifdef configPRIO_BITS
        {
            /* Check the FreeRTOS configuration that defines the number of
             * priority bits matches the number of priority bits actually queried
             * from the hardware. */
            configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80065da:	4b27      	ldr	r3, [pc, #156]	; (8006678 <xPortStartScheduler+0x134>)
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	f1c3 0307 	rsb	r3, r3, #7
 80065e2:	2b04      	cmp	r3, #4
 80065e4:	d00a      	beq.n	80065fc <xPortStartScheduler+0xb8>
        __asm volatile
 80065e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065ea:	f383 8811 	msr	BASEPRI, r3
 80065ee:	f3bf 8f6f 	isb	sy
 80065f2:	f3bf 8f4f 	dsb	sy
 80065f6:	60bb      	str	r3, [r7, #8]
    }
 80065f8:	bf00      	nop
 80065fa:	e7fe      	b.n	80065fa <xPortStartScheduler+0xb6>
        }
        #endif

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80065fc:	4b1e      	ldr	r3, [pc, #120]	; (8006678 <xPortStartScheduler+0x134>)
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	021b      	lsls	r3, r3, #8
 8006602:	4a1d      	ldr	r2, [pc, #116]	; (8006678 <xPortStartScheduler+0x134>)
 8006604:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006606:	4b1c      	ldr	r3, [pc, #112]	; (8006678 <xPortStartScheduler+0x134>)
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800660e:	4a1a      	ldr	r2, [pc, #104]	; (8006678 <xPortStartScheduler+0x134>)
 8006610:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ulOriginalPriority;
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	b2da      	uxtb	r2, r3
 8006616:	697b      	ldr	r3, [r7, #20]
 8006618:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 800661a:	4b18      	ldr	r3, [pc, #96]	; (800667c <xPortStartScheduler+0x138>)
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	4a17      	ldr	r2, [pc, #92]	; (800667c <xPortStartScheduler+0x138>)
 8006620:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006624:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8006626:	4b15      	ldr	r3, [pc, #84]	; (800667c <xPortStartScheduler+0x138>)
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	4a14      	ldr	r2, [pc, #80]	; (800667c <xPortStartScheduler+0x138>)
 800662c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006630:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8006632:	f000 f8db 	bl	80067ec <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8006636:	4b12      	ldr	r3, [pc, #72]	; (8006680 <xPortStartScheduler+0x13c>)
 8006638:	2200      	movs	r2, #0
 800663a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 800663c:	f000 f8fa 	bl	8006834 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006640:	4b10      	ldr	r3, [pc, #64]	; (8006684 <xPortStartScheduler+0x140>)
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	4a0f      	ldr	r2, [pc, #60]	; (8006684 <xPortStartScheduler+0x140>)
 8006646:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800664a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 800664c:	f7ff ff64 	bl	8006518 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8006650:	f7fe ff00 	bl	8005454 <vTaskSwitchContext>
    prvTaskExitError();
 8006654:	f7ff ff1c 	bl	8006490 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8006658:	2300      	movs	r3, #0
}
 800665a:	4618      	mov	r0, r3
 800665c:	3718      	adds	r7, #24
 800665e:	46bd      	mov	sp, r7
 8006660:	bd80      	pop	{r7, pc}
 8006662:	bf00      	nop
 8006664:	e000ed00 	.word	0xe000ed00
 8006668:	410fc271 	.word	0x410fc271
 800666c:	410fc270 	.word	0x410fc270
 8006670:	e000e400 	.word	0xe000e400
 8006674:	20000258 	.word	0x20000258
 8006678:	2000025c 	.word	0x2000025c
 800667c:	e000ed20 	.word	0xe000ed20
 8006680:	20000010 	.word	0x20000010
 8006684:	e000ef34 	.word	0xe000ef34

08006688 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006688:	b480      	push	{r7}
 800668a:	b083      	sub	sp, #12
 800668c:	af00      	add	r7, sp, #0
        __asm volatile
 800668e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006692:	f383 8811 	msr	BASEPRI, r3
 8006696:	f3bf 8f6f 	isb	sy
 800669a:	f3bf 8f4f 	dsb	sy
 800669e:	607b      	str	r3, [r7, #4]
    }
 80066a0:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 80066a2:	4b0f      	ldr	r3, [pc, #60]	; (80066e0 <vPortEnterCritical+0x58>)
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	3301      	adds	r3, #1
 80066a8:	4a0d      	ldr	r2, [pc, #52]	; (80066e0 <vPortEnterCritical+0x58>)
 80066aa:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 80066ac:	4b0c      	ldr	r3, [pc, #48]	; (80066e0 <vPortEnterCritical+0x58>)
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	2b01      	cmp	r3, #1
 80066b2:	d10f      	bne.n	80066d4 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80066b4:	4b0b      	ldr	r3, [pc, #44]	; (80066e4 <vPortEnterCritical+0x5c>)
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	b2db      	uxtb	r3, r3
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d00a      	beq.n	80066d4 <vPortEnterCritical+0x4c>
        __asm volatile
 80066be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066c2:	f383 8811 	msr	BASEPRI, r3
 80066c6:	f3bf 8f6f 	isb	sy
 80066ca:	f3bf 8f4f 	dsb	sy
 80066ce:	603b      	str	r3, [r7, #0]
    }
 80066d0:	bf00      	nop
 80066d2:	e7fe      	b.n	80066d2 <vPortEnterCritical+0x4a>
    }
}
 80066d4:	bf00      	nop
 80066d6:	370c      	adds	r7, #12
 80066d8:	46bd      	mov	sp, r7
 80066da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066de:	4770      	bx	lr
 80066e0:	20000010 	.word	0x20000010
 80066e4:	e000ed04 	.word	0xe000ed04

080066e8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80066e8:	b480      	push	{r7}
 80066ea:	b083      	sub	sp, #12
 80066ec:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 80066ee:	4b12      	ldr	r3, [pc, #72]	; (8006738 <vPortExitCritical+0x50>)
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d10a      	bne.n	800670c <vPortExitCritical+0x24>
        __asm volatile
 80066f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066fa:	f383 8811 	msr	BASEPRI, r3
 80066fe:	f3bf 8f6f 	isb	sy
 8006702:	f3bf 8f4f 	dsb	sy
 8006706:	607b      	str	r3, [r7, #4]
    }
 8006708:	bf00      	nop
 800670a:	e7fe      	b.n	800670a <vPortExitCritical+0x22>
    uxCriticalNesting--;
 800670c:	4b0a      	ldr	r3, [pc, #40]	; (8006738 <vPortExitCritical+0x50>)
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	3b01      	subs	r3, #1
 8006712:	4a09      	ldr	r2, [pc, #36]	; (8006738 <vPortExitCritical+0x50>)
 8006714:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8006716:	4b08      	ldr	r3, [pc, #32]	; (8006738 <vPortExitCritical+0x50>)
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	2b00      	cmp	r3, #0
 800671c:	d105      	bne.n	800672a <vPortExitCritical+0x42>
 800671e:	2300      	movs	r3, #0
 8006720:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8006722:	683b      	ldr	r3, [r7, #0]
 8006724:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8006728:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 800672a:	bf00      	nop
 800672c:	370c      	adds	r7, #12
 800672e:	46bd      	mov	sp, r7
 8006730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006734:	4770      	bx	lr
 8006736:	bf00      	nop
 8006738:	20000010 	.word	0x20000010
 800673c:	00000000 	.word	0x00000000

08006740 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8006740:	f3ef 8009 	mrs	r0, PSP
 8006744:	f3bf 8f6f 	isb	sy
 8006748:	4b15      	ldr	r3, [pc, #84]	; (80067a0 <pxCurrentTCBConst>)
 800674a:	681a      	ldr	r2, [r3, #0]
 800674c:	f01e 0f10 	tst.w	lr, #16
 8006750:	bf08      	it	eq
 8006752:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006756:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800675a:	6010      	str	r0, [r2, #0]
 800675c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006760:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006764:	f380 8811 	msr	BASEPRI, r0
 8006768:	f3bf 8f4f 	dsb	sy
 800676c:	f3bf 8f6f 	isb	sy
 8006770:	f7fe fe70 	bl	8005454 <vTaskSwitchContext>
 8006774:	f04f 0000 	mov.w	r0, #0
 8006778:	f380 8811 	msr	BASEPRI, r0
 800677c:	bc09      	pop	{r0, r3}
 800677e:	6819      	ldr	r1, [r3, #0]
 8006780:	6808      	ldr	r0, [r1, #0]
 8006782:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006786:	f01e 0f10 	tst.w	lr, #16
 800678a:	bf08      	it	eq
 800678c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006790:	f380 8809 	msr	PSP, r0
 8006794:	f3bf 8f6f 	isb	sy
 8006798:	4770      	bx	lr
 800679a:	bf00      	nop
 800679c:	f3af 8000 	nop.w

080067a0 <pxCurrentTCBConst>:
 80067a0:	20000118 	.word	0x20000118
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 80067a4:	bf00      	nop
 80067a6:	bf00      	nop

080067a8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80067a8:	b580      	push	{r7, lr}
 80067aa:	b082      	sub	sp, #8
 80067ac:	af00      	add	r7, sp, #0
        __asm volatile
 80067ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067b2:	f383 8811 	msr	BASEPRI, r3
 80067b6:	f3bf 8f6f 	isb	sy
 80067ba:	f3bf 8f4f 	dsb	sy
 80067be:	607b      	str	r3, [r7, #4]
    }
 80067c0:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 80067c2:	f7fe fd31 	bl	8005228 <xTaskIncrementTick>
 80067c6:	4603      	mov	r3, r0
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d003      	beq.n	80067d4 <SysTick_Handler+0x2c>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80067cc:	4b06      	ldr	r3, [pc, #24]	; (80067e8 <SysTick_Handler+0x40>)
 80067ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80067d2:	601a      	str	r2, [r3, #0]
 80067d4:	2300      	movs	r3, #0
 80067d6:	603b      	str	r3, [r7, #0]
        __asm volatile
 80067d8:	683b      	ldr	r3, [r7, #0]
 80067da:	f383 8811 	msr	BASEPRI, r3
    }
 80067de:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 80067e0:	bf00      	nop
 80067e2:	3708      	adds	r7, #8
 80067e4:	46bd      	mov	sp, r7
 80067e6:	bd80      	pop	{r7, pc}
 80067e8:	e000ed04 	.word	0xe000ed04

080067ec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 80067ec:	b480      	push	{r7}
 80067ee:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 80067f0:	4b0b      	ldr	r3, [pc, #44]	; (8006820 <vPortSetupTimerInterrupt+0x34>)
 80067f2:	2200      	movs	r2, #0
 80067f4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80067f6:	4b0b      	ldr	r3, [pc, #44]	; (8006824 <vPortSetupTimerInterrupt+0x38>)
 80067f8:	2200      	movs	r2, #0
 80067fa:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80067fc:	4b0a      	ldr	r3, [pc, #40]	; (8006828 <vPortSetupTimerInterrupt+0x3c>)
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	4a0a      	ldr	r2, [pc, #40]	; (800682c <vPortSetupTimerInterrupt+0x40>)
 8006802:	fba2 2303 	umull	r2, r3, r2, r3
 8006806:	099b      	lsrs	r3, r3, #6
 8006808:	4a09      	ldr	r2, [pc, #36]	; (8006830 <vPortSetupTimerInterrupt+0x44>)
 800680a:	3b01      	subs	r3, #1
 800680c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800680e:	4b04      	ldr	r3, [pc, #16]	; (8006820 <vPortSetupTimerInterrupt+0x34>)
 8006810:	2207      	movs	r2, #7
 8006812:	601a      	str	r2, [r3, #0]
}
 8006814:	bf00      	nop
 8006816:	46bd      	mov	sp, r7
 8006818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800681c:	4770      	bx	lr
 800681e:	bf00      	nop
 8006820:	e000e010 	.word	0xe000e010
 8006824:	e000e018 	.word	0xe000e018
 8006828:	20000000 	.word	0x20000000
 800682c:	10624dd3 	.word	0x10624dd3
 8006830:	e000e014 	.word	0xe000e014

08006834 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8006834:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006844 <vPortEnableVFP+0x10>
 8006838:	6801      	ldr	r1, [r0, #0]
 800683a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800683e:	6001      	str	r1, [r0, #0]
 8006840:	4770      	bx	lr
 8006842:	0000      	.short	0x0000
 8006844:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8006848:	bf00      	nop
 800684a:	bf00      	nop

0800684c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800684c:	b580      	push	{r7, lr}
 800684e:	b08a      	sub	sp, #40	; 0x28
 8006850:	af00      	add	r7, sp, #0
 8006852:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 8006854:	2300      	movs	r3, #0
 8006856:	61fb      	str	r3, [r7, #28]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 8006858:	f7fe fbcc 	bl	8004ff4 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 800685c:	4b53      	ldr	r3, [pc, #332]	; (80069ac <pvPortMalloc+0x160>)
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	2b00      	cmp	r3, #0
 8006862:	d101      	bne.n	8006868 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8006864:	f000 f908 	bl	8006a78 <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	2b00      	cmp	r3, #0
 800686c:	d012      	beq.n	8006894 <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 800686e:	2208      	movs	r2, #8
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	f003 0307 	and.w	r3, r3, #7
 8006876:	1ad3      	subs	r3, r2, r3
 8006878:	3308      	adds	r3, #8
 800687a:	61bb      	str	r3, [r7, #24]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 800687c:	69bb      	ldr	r3, [r7, #24]
 800687e:	43db      	mvns	r3, r3
 8006880:	687a      	ldr	r2, [r7, #4]
 8006882:	429a      	cmp	r2, r3
 8006884:	d804      	bhi.n	8006890 <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 8006886:	687a      	ldr	r2, [r7, #4]
 8006888:	69bb      	ldr	r3, [r7, #24]
 800688a:	4413      	add	r3, r2
 800688c:	607b      	str	r3, [r7, #4]
 800688e:	e001      	b.n	8006894 <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 8006890:	2300      	movs	r3, #0
 8006892:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	2b00      	cmp	r3, #0
 8006898:	db70      	blt.n	800697c <pvPortMalloc+0x130>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	2b00      	cmp	r3, #0
 800689e:	d06d      	beq.n	800697c <pvPortMalloc+0x130>
 80068a0:	4b43      	ldr	r3, [pc, #268]	; (80069b0 <pvPortMalloc+0x164>)
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	687a      	ldr	r2, [r7, #4]
 80068a6:	429a      	cmp	r2, r3
 80068a8:	d868      	bhi.n	800697c <pvPortMalloc+0x130>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 80068aa:	4b42      	ldr	r3, [pc, #264]	; (80069b4 <pvPortMalloc+0x168>)
 80068ac:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 80068ae:	4b41      	ldr	r3, [pc, #260]	; (80069b4 <pvPortMalloc+0x168>)
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80068b4:	e004      	b.n	80068c0 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 80068b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068b8:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 80068ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80068c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068c2:	685b      	ldr	r3, [r3, #4]
 80068c4:	687a      	ldr	r2, [r7, #4]
 80068c6:	429a      	cmp	r2, r3
 80068c8:	d903      	bls.n	80068d2 <pvPortMalloc+0x86>
 80068ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d1f1      	bne.n	80068b6 <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 80068d2:	4b36      	ldr	r3, [pc, #216]	; (80069ac <pvPortMalloc+0x160>)
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80068d8:	429a      	cmp	r2, r3
 80068da:	d04f      	beq.n	800697c <pvPortMalloc+0x130>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80068dc:	6a3b      	ldr	r3, [r7, #32]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	2208      	movs	r2, #8
 80068e2:	4413      	add	r3, r2
 80068e4:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80068e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068e8:	681a      	ldr	r2, [r3, #0]
 80068ea:	6a3b      	ldr	r3, [r7, #32]
 80068ec:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80068ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068f0:	685a      	ldr	r2, [r3, #4]
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	1ad2      	subs	r2, r2, r3
 80068f6:	2308      	movs	r3, #8
 80068f8:	005b      	lsls	r3, r3, #1
 80068fa:	429a      	cmp	r2, r3
 80068fc:	d91f      	bls.n	800693e <pvPortMalloc+0xf2>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80068fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	4413      	add	r3, r2
 8006904:	617b      	str	r3, [r7, #20]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006906:	697b      	ldr	r3, [r7, #20]
 8006908:	f003 0307 	and.w	r3, r3, #7
 800690c:	2b00      	cmp	r3, #0
 800690e:	d00a      	beq.n	8006926 <pvPortMalloc+0xda>
        __asm volatile
 8006910:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006914:	f383 8811 	msr	BASEPRI, r3
 8006918:	f3bf 8f6f 	isb	sy
 800691c:	f3bf 8f4f 	dsb	sy
 8006920:	613b      	str	r3, [r7, #16]
    }
 8006922:	bf00      	nop
 8006924:	e7fe      	b.n	8006924 <pvPortMalloc+0xd8>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006928:	685a      	ldr	r2, [r3, #4]
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	1ad2      	subs	r2, r2, r3
 800692e:	697b      	ldr	r3, [r7, #20]
 8006930:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8006932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006934:	687a      	ldr	r2, [r7, #4]
 8006936:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006938:	6978      	ldr	r0, [r7, #20]
 800693a:	f000 f8f9 	bl	8006b30 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 800693e:	4b1c      	ldr	r3, [pc, #112]	; (80069b0 <pvPortMalloc+0x164>)
 8006940:	681a      	ldr	r2, [r3, #0]
 8006942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006944:	685b      	ldr	r3, [r3, #4]
 8006946:	1ad3      	subs	r3, r2, r3
 8006948:	4a19      	ldr	r2, [pc, #100]	; (80069b0 <pvPortMalloc+0x164>)
 800694a:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800694c:	4b18      	ldr	r3, [pc, #96]	; (80069b0 <pvPortMalloc+0x164>)
 800694e:	681a      	ldr	r2, [r3, #0]
 8006950:	4b19      	ldr	r3, [pc, #100]	; (80069b8 <pvPortMalloc+0x16c>)
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	429a      	cmp	r2, r3
 8006956:	d203      	bcs.n	8006960 <pvPortMalloc+0x114>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006958:	4b15      	ldr	r3, [pc, #84]	; (80069b0 <pvPortMalloc+0x164>)
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	4a16      	ldr	r2, [pc, #88]	; (80069b8 <pvPortMalloc+0x16c>)
 800695e:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 8006960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006962:	685b      	ldr	r3, [r3, #4]
 8006964:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8006968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800696a:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 800696c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800696e:	2200      	movs	r2, #0
 8006970:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8006972:	4b12      	ldr	r3, [pc, #72]	; (80069bc <pvPortMalloc+0x170>)
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	3301      	adds	r3, #1
 8006978:	4a10      	ldr	r2, [pc, #64]	; (80069bc <pvPortMalloc+0x170>)
 800697a:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 800697c:	f7fe fb48 	bl	8005010 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006980:	69fb      	ldr	r3, [r7, #28]
 8006982:	f003 0307 	and.w	r3, r3, #7
 8006986:	2b00      	cmp	r3, #0
 8006988:	d00a      	beq.n	80069a0 <pvPortMalloc+0x154>
        __asm volatile
 800698a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800698e:	f383 8811 	msr	BASEPRI, r3
 8006992:	f3bf 8f6f 	isb	sy
 8006996:	f3bf 8f4f 	dsb	sy
 800699a:	60fb      	str	r3, [r7, #12]
    }
 800699c:	bf00      	nop
 800699e:	e7fe      	b.n	800699e <pvPortMalloc+0x152>
    return pvReturn;
 80069a0:	69fb      	ldr	r3, [r7, #28]
}
 80069a2:	4618      	mov	r0, r3
 80069a4:	3728      	adds	r7, #40	; 0x28
 80069a6:	46bd      	mov	sp, r7
 80069a8:	bd80      	pop	{r7, pc}
 80069aa:	bf00      	nop
 80069ac:	2001e268 	.word	0x2001e268
 80069b0:	2001e26c 	.word	0x2001e26c
 80069b4:	2001e260 	.word	0x2001e260
 80069b8:	2001e270 	.word	0x2001e270
 80069bc:	2001e274 	.word	0x2001e274

080069c0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 80069c0:	b580      	push	{r7, lr}
 80069c2:	b086      	sub	sp, #24
 80069c4:	af00      	add	r7, sp, #0
 80069c6:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d049      	beq.n	8006a66 <vPortFree+0xa6>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 80069d2:	2308      	movs	r3, #8
 80069d4:	425b      	negs	r3, r3
 80069d6:	697a      	ldr	r2, [r7, #20]
 80069d8:	4413      	add	r3, r2
 80069da:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 80069dc:	697b      	ldr	r3, [r7, #20]
 80069de:	613b      	str	r3, [r7, #16]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 80069e0:	693b      	ldr	r3, [r7, #16]
 80069e2:	685b      	ldr	r3, [r3, #4]
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	db0a      	blt.n	80069fe <vPortFree+0x3e>
        __asm volatile
 80069e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069ec:	f383 8811 	msr	BASEPRI, r3
 80069f0:	f3bf 8f6f 	isb	sy
 80069f4:	f3bf 8f4f 	dsb	sy
 80069f8:	60fb      	str	r3, [r7, #12]
    }
 80069fa:	bf00      	nop
 80069fc:	e7fe      	b.n	80069fc <vPortFree+0x3c>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 80069fe:	693b      	ldr	r3, [r7, #16]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d00a      	beq.n	8006a1c <vPortFree+0x5c>
        __asm volatile
 8006a06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a0a:	f383 8811 	msr	BASEPRI, r3
 8006a0e:	f3bf 8f6f 	isb	sy
 8006a12:	f3bf 8f4f 	dsb	sy
 8006a16:	60bb      	str	r3, [r7, #8]
    }
 8006a18:	bf00      	nop
 8006a1a:	e7fe      	b.n	8006a1a <vPortFree+0x5a>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 8006a1c:	693b      	ldr	r3, [r7, #16]
 8006a1e:	685b      	ldr	r3, [r3, #4]
 8006a20:	0fdb      	lsrs	r3, r3, #31
 8006a22:	f003 0301 	and.w	r3, r3, #1
 8006a26:	b2db      	uxtb	r3, r3
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d01c      	beq.n	8006a66 <vPortFree+0xa6>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8006a2c:	693b      	ldr	r3, [r7, #16]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d118      	bne.n	8006a66 <vPortFree+0xa6>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 8006a34:	693b      	ldr	r3, [r7, #16]
 8006a36:	685b      	ldr	r3, [r3, #4]
 8006a38:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006a3c:	693b      	ldr	r3, [r7, #16]
 8006a3e:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 8006a40:	f7fe fad8 	bl	8004ff4 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8006a44:	693b      	ldr	r3, [r7, #16]
 8006a46:	685a      	ldr	r2, [r3, #4]
 8006a48:	4b09      	ldr	r3, [pc, #36]	; (8006a70 <vPortFree+0xb0>)
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	4413      	add	r3, r2
 8006a4e:	4a08      	ldr	r2, [pc, #32]	; (8006a70 <vPortFree+0xb0>)
 8006a50:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006a52:	6938      	ldr	r0, [r7, #16]
 8006a54:	f000 f86c 	bl	8006b30 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8006a58:	4b06      	ldr	r3, [pc, #24]	; (8006a74 <vPortFree+0xb4>)
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	3301      	adds	r3, #1
 8006a5e:	4a05      	ldr	r2, [pc, #20]	; (8006a74 <vPortFree+0xb4>)
 8006a60:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8006a62:	f7fe fad5 	bl	8005010 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8006a66:	bf00      	nop
 8006a68:	3718      	adds	r7, #24
 8006a6a:	46bd      	mov	sp, r7
 8006a6c:	bd80      	pop	{r7, pc}
 8006a6e:	bf00      	nop
 8006a70:	2001e26c 	.word	0x2001e26c
 8006a74:	2001e278 	.word	0x2001e278

08006a78 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8006a78:	b480      	push	{r7}
 8006a7a:	b085      	sub	sp, #20
 8006a7c:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006a7e:	f44f 33f0 	mov.w	r3, #122880	; 0x1e000
 8006a82:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 8006a84:	4b25      	ldr	r3, [pc, #148]	; (8006b1c <prvHeapInit+0xa4>)
 8006a86:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	f003 0307 	and.w	r3, r3, #7
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d00c      	beq.n	8006aac <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	3307      	adds	r3, #7
 8006a96:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	f023 0307 	bic.w	r3, r3, #7
 8006a9e:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 8006aa0:	68ba      	ldr	r2, [r7, #8]
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	1ad3      	subs	r3, r2, r3
 8006aa6:	4a1d      	ldr	r2, [pc, #116]	; (8006b1c <prvHeapInit+0xa4>)
 8006aa8:	4413      	add	r3, r2
 8006aaa:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006ab0:	4a1b      	ldr	r2, [pc, #108]	; (8006b20 <prvHeapInit+0xa8>)
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8006ab6:	4b1a      	ldr	r3, [pc, #104]	; (8006b20 <prvHeapInit+0xa8>)
 8006ab8:	2200      	movs	r2, #0
 8006aba:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	68ba      	ldr	r2, [r7, #8]
 8006ac0:	4413      	add	r3, r2
 8006ac2:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8006ac4:	2208      	movs	r2, #8
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	1a9b      	subs	r3, r3, r2
 8006aca:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	f023 0307 	bic.w	r3, r3, #7
 8006ad2:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	4a13      	ldr	r2, [pc, #76]	; (8006b24 <prvHeapInit+0xac>)
 8006ad8:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8006ada:	4b12      	ldr	r3, [pc, #72]	; (8006b24 <prvHeapInit+0xac>)
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	2200      	movs	r2, #0
 8006ae0:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8006ae2:	4b10      	ldr	r3, [pc, #64]	; (8006b24 <prvHeapInit+0xac>)
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	2200      	movs	r2, #0
 8006ae8:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 8006aee:	683b      	ldr	r3, [r7, #0]
 8006af0:	68fa      	ldr	r2, [r7, #12]
 8006af2:	1ad2      	subs	r2, r2, r3
 8006af4:	683b      	ldr	r3, [r7, #0]
 8006af6:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006af8:	4b0a      	ldr	r3, [pc, #40]	; (8006b24 <prvHeapInit+0xac>)
 8006afa:	681a      	ldr	r2, [r3, #0]
 8006afc:	683b      	ldr	r3, [r7, #0]
 8006afe:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006b00:	683b      	ldr	r3, [r7, #0]
 8006b02:	685b      	ldr	r3, [r3, #4]
 8006b04:	4a08      	ldr	r2, [pc, #32]	; (8006b28 <prvHeapInit+0xb0>)
 8006b06:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006b08:	683b      	ldr	r3, [r7, #0]
 8006b0a:	685b      	ldr	r3, [r3, #4]
 8006b0c:	4a07      	ldr	r2, [pc, #28]	; (8006b2c <prvHeapInit+0xb4>)
 8006b0e:	6013      	str	r3, [r2, #0]
}
 8006b10:	bf00      	nop
 8006b12:	3714      	adds	r7, #20
 8006b14:	46bd      	mov	sp, r7
 8006b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b1a:	4770      	bx	lr
 8006b1c:	20000260 	.word	0x20000260
 8006b20:	2001e260 	.word	0x2001e260
 8006b24:	2001e268 	.word	0x2001e268
 8006b28:	2001e270 	.word	0x2001e270
 8006b2c:	2001e26c 	.word	0x2001e26c

08006b30 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8006b30:	b480      	push	{r7}
 8006b32:	b085      	sub	sp, #20
 8006b34:	af00      	add	r7, sp, #0
 8006b36:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006b38:	4b28      	ldr	r3, [pc, #160]	; (8006bdc <prvInsertBlockIntoFreeList+0xac>)
 8006b3a:	60fb      	str	r3, [r7, #12]
 8006b3c:	e002      	b.n	8006b44 <prvInsertBlockIntoFreeList+0x14>
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	60fb      	str	r3, [r7, #12]
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	687a      	ldr	r2, [r7, #4]
 8006b4a:	429a      	cmp	r2, r3
 8006b4c:	d8f7      	bhi.n	8006b3e <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	685b      	ldr	r3, [r3, #4]
 8006b56:	68ba      	ldr	r2, [r7, #8]
 8006b58:	4413      	add	r3, r2
 8006b5a:	687a      	ldr	r2, [r7, #4]
 8006b5c:	429a      	cmp	r2, r3
 8006b5e:	d108      	bne.n	8006b72 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	685a      	ldr	r2, [r3, #4]
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	685b      	ldr	r3, [r3, #4]
 8006b68:	441a      	add	r2, r3
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	685b      	ldr	r3, [r3, #4]
 8006b7a:	68ba      	ldr	r2, [r7, #8]
 8006b7c:	441a      	add	r2, r3
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	429a      	cmp	r2, r3
 8006b84:	d118      	bne.n	8006bb8 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	681a      	ldr	r2, [r3, #0]
 8006b8a:	4b15      	ldr	r3, [pc, #84]	; (8006be0 <prvInsertBlockIntoFreeList+0xb0>)
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	429a      	cmp	r2, r3
 8006b90:	d00d      	beq.n	8006bae <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	685a      	ldr	r2, [r3, #4]
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	685b      	ldr	r3, [r3, #4]
 8006b9c:	441a      	add	r2, r3
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	681a      	ldr	r2, [r3, #0]
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	601a      	str	r2, [r3, #0]
 8006bac:	e008      	b.n	8006bc0 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006bae:	4b0c      	ldr	r3, [pc, #48]	; (8006be0 <prvInsertBlockIntoFreeList+0xb0>)
 8006bb0:	681a      	ldr	r2, [r3, #0]
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	601a      	str	r2, [r3, #0]
 8006bb6:	e003      	b.n	8006bc0 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	681a      	ldr	r2, [r3, #0]
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8006bc0:	68fa      	ldr	r2, [r7, #12]
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	429a      	cmp	r2, r3
 8006bc6:	d002      	beq.n	8006bce <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	687a      	ldr	r2, [r7, #4]
 8006bcc:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8006bce:	bf00      	nop
 8006bd0:	3714      	adds	r7, #20
 8006bd2:	46bd      	mov	sp, r7
 8006bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd8:	4770      	bx	lr
 8006bda:	bf00      	nop
 8006bdc:	2001e260 	.word	0x2001e260
 8006be0:	2001e268 	.word	0x2001e268

08006be4 <memset>:
 8006be4:	4402      	add	r2, r0
 8006be6:	4603      	mov	r3, r0
 8006be8:	4293      	cmp	r3, r2
 8006bea:	d100      	bne.n	8006bee <memset+0xa>
 8006bec:	4770      	bx	lr
 8006bee:	f803 1b01 	strb.w	r1, [r3], #1
 8006bf2:	e7f9      	b.n	8006be8 <memset+0x4>

08006bf4 <__libc_init_array>:
 8006bf4:	b570      	push	{r4, r5, r6, lr}
 8006bf6:	4d0d      	ldr	r5, [pc, #52]	; (8006c2c <__libc_init_array+0x38>)
 8006bf8:	4c0d      	ldr	r4, [pc, #52]	; (8006c30 <__libc_init_array+0x3c>)
 8006bfa:	1b64      	subs	r4, r4, r5
 8006bfc:	10a4      	asrs	r4, r4, #2
 8006bfe:	2600      	movs	r6, #0
 8006c00:	42a6      	cmp	r6, r4
 8006c02:	d109      	bne.n	8006c18 <__libc_init_array+0x24>
 8006c04:	4d0b      	ldr	r5, [pc, #44]	; (8006c34 <__libc_init_array+0x40>)
 8006c06:	4c0c      	ldr	r4, [pc, #48]	; (8006c38 <__libc_init_array+0x44>)
 8006c08:	f000 f826 	bl	8006c58 <_init>
 8006c0c:	1b64      	subs	r4, r4, r5
 8006c0e:	10a4      	asrs	r4, r4, #2
 8006c10:	2600      	movs	r6, #0
 8006c12:	42a6      	cmp	r6, r4
 8006c14:	d105      	bne.n	8006c22 <__libc_init_array+0x2e>
 8006c16:	bd70      	pop	{r4, r5, r6, pc}
 8006c18:	f855 3b04 	ldr.w	r3, [r5], #4
 8006c1c:	4798      	blx	r3
 8006c1e:	3601      	adds	r6, #1
 8006c20:	e7ee      	b.n	8006c00 <__libc_init_array+0xc>
 8006c22:	f855 3b04 	ldr.w	r3, [r5], #4
 8006c26:	4798      	blx	r3
 8006c28:	3601      	adds	r6, #1
 8006c2a:	e7f2      	b.n	8006c12 <__libc_init_array+0x1e>
 8006c2c:	08006e14 	.word	0x08006e14
 8006c30:	08006e14 	.word	0x08006e14
 8006c34:	08006e14 	.word	0x08006e14
 8006c38:	08006e18 	.word	0x08006e18

08006c3c <memcpy>:
 8006c3c:	440a      	add	r2, r1
 8006c3e:	4291      	cmp	r1, r2
 8006c40:	f100 33ff 	add.w	r3, r0, #4294967295
 8006c44:	d100      	bne.n	8006c48 <memcpy+0xc>
 8006c46:	4770      	bx	lr
 8006c48:	b510      	push	{r4, lr}
 8006c4a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006c4e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006c52:	4291      	cmp	r1, r2
 8006c54:	d1f9      	bne.n	8006c4a <memcpy+0xe>
 8006c56:	bd10      	pop	{r4, pc}

08006c58 <_init>:
 8006c58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c5a:	bf00      	nop
 8006c5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c5e:	bc08      	pop	{r3}
 8006c60:	469e      	mov	lr, r3
 8006c62:	4770      	bx	lr

08006c64 <_fini>:
 8006c64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c66:	bf00      	nop
 8006c68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c6a:	bc08      	pop	{r3}
 8006c6c:	469e      	mov	lr, r3
 8006c6e:	4770      	bx	lr
