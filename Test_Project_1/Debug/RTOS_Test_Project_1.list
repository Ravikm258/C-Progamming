
RTOS_Test_Project_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008dd4  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f0  08008f94  08008f94  00018f94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009084  08009084  00020064  2**0
                  CONTENTS
  4 .ARM          00000008  08009084  08009084  00019084  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800908c  0800908c  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800908c  0800908c  0001908c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009090  08009090  00019090  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  08009094  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0001e428  20000064  080090f8  00020064  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2001e48c  080090f8  0002e48c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001c22d  00000000  00000000  000200d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003825  00000000  00000000  0003c304  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000017f8  00000000  00000000  0003fb30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000012a3  00000000  00000000  00041328  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002dba8  00000000  00000000  000425cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001c2c8  00000000  00000000  00070173  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    001221df  00000000  00000000  0008c43b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006ab4  00000000  00000000  001ae61c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000059  00000000  00000000  001b50d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000064 	.word	0x20000064
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08008f7c 	.word	0x08008f7c

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000068 	.word	0x20000068
 80001fc:	08008f7c 	.word	0x08008f7c

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b970 	b.w	8000598 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9e08      	ldr	r6, [sp, #32]
 80002d6:	460d      	mov	r5, r1
 80002d8:	4604      	mov	r4, r0
 80002da:	460f      	mov	r7, r1
 80002dc:	2b00      	cmp	r3, #0
 80002de:	d14a      	bne.n	8000376 <__udivmoddi4+0xa6>
 80002e0:	428a      	cmp	r2, r1
 80002e2:	4694      	mov	ip, r2
 80002e4:	d965      	bls.n	80003b2 <__udivmoddi4+0xe2>
 80002e6:	fab2 f382 	clz	r3, r2
 80002ea:	b143      	cbz	r3, 80002fe <__udivmoddi4+0x2e>
 80002ec:	fa02 fc03 	lsl.w	ip, r2, r3
 80002f0:	f1c3 0220 	rsb	r2, r3, #32
 80002f4:	409f      	lsls	r7, r3
 80002f6:	fa20 f202 	lsr.w	r2, r0, r2
 80002fa:	4317      	orrs	r7, r2
 80002fc:	409c      	lsls	r4, r3
 80002fe:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000302:	fa1f f58c 	uxth.w	r5, ip
 8000306:	fbb7 f1fe 	udiv	r1, r7, lr
 800030a:	0c22      	lsrs	r2, r4, #16
 800030c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000310:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000314:	fb01 f005 	mul.w	r0, r1, r5
 8000318:	4290      	cmp	r0, r2
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x62>
 800031c:	eb1c 0202 	adds.w	r2, ip, r2
 8000320:	f101 37ff 	add.w	r7, r1, #4294967295
 8000324:	f080 811c 	bcs.w	8000560 <__udivmoddi4+0x290>
 8000328:	4290      	cmp	r0, r2
 800032a:	f240 8119 	bls.w	8000560 <__udivmoddi4+0x290>
 800032e:	3902      	subs	r1, #2
 8000330:	4462      	add	r2, ip
 8000332:	1a12      	subs	r2, r2, r0
 8000334:	b2a4      	uxth	r4, r4
 8000336:	fbb2 f0fe 	udiv	r0, r2, lr
 800033a:	fb0e 2210 	mls	r2, lr, r0, r2
 800033e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000342:	fb00 f505 	mul.w	r5, r0, r5
 8000346:	42a5      	cmp	r5, r4
 8000348:	d90a      	bls.n	8000360 <__udivmoddi4+0x90>
 800034a:	eb1c 0404 	adds.w	r4, ip, r4
 800034e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000352:	f080 8107 	bcs.w	8000564 <__udivmoddi4+0x294>
 8000356:	42a5      	cmp	r5, r4
 8000358:	f240 8104 	bls.w	8000564 <__udivmoddi4+0x294>
 800035c:	4464      	add	r4, ip
 800035e:	3802      	subs	r0, #2
 8000360:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000364:	1b64      	subs	r4, r4, r5
 8000366:	2100      	movs	r1, #0
 8000368:	b11e      	cbz	r6, 8000372 <__udivmoddi4+0xa2>
 800036a:	40dc      	lsrs	r4, r3
 800036c:	2300      	movs	r3, #0
 800036e:	e9c6 4300 	strd	r4, r3, [r6]
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	428b      	cmp	r3, r1
 8000378:	d908      	bls.n	800038c <__udivmoddi4+0xbc>
 800037a:	2e00      	cmp	r6, #0
 800037c:	f000 80ed 	beq.w	800055a <__udivmoddi4+0x28a>
 8000380:	2100      	movs	r1, #0
 8000382:	e9c6 0500 	strd	r0, r5, [r6]
 8000386:	4608      	mov	r0, r1
 8000388:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038c:	fab3 f183 	clz	r1, r3
 8000390:	2900      	cmp	r1, #0
 8000392:	d149      	bne.n	8000428 <__udivmoddi4+0x158>
 8000394:	42ab      	cmp	r3, r5
 8000396:	d302      	bcc.n	800039e <__udivmoddi4+0xce>
 8000398:	4282      	cmp	r2, r0
 800039a:	f200 80f8 	bhi.w	800058e <__udivmoddi4+0x2be>
 800039e:	1a84      	subs	r4, r0, r2
 80003a0:	eb65 0203 	sbc.w	r2, r5, r3
 80003a4:	2001      	movs	r0, #1
 80003a6:	4617      	mov	r7, r2
 80003a8:	2e00      	cmp	r6, #0
 80003aa:	d0e2      	beq.n	8000372 <__udivmoddi4+0xa2>
 80003ac:	e9c6 4700 	strd	r4, r7, [r6]
 80003b0:	e7df      	b.n	8000372 <__udivmoddi4+0xa2>
 80003b2:	b902      	cbnz	r2, 80003b6 <__udivmoddi4+0xe6>
 80003b4:	deff      	udf	#255	; 0xff
 80003b6:	fab2 f382 	clz	r3, r2
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	f040 8090 	bne.w	80004e0 <__udivmoddi4+0x210>
 80003c0:	1a8a      	subs	r2, r1, r2
 80003c2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003c6:	fa1f fe8c 	uxth.w	lr, ip
 80003ca:	2101      	movs	r1, #1
 80003cc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003d0:	fb07 2015 	mls	r0, r7, r5, r2
 80003d4:	0c22      	lsrs	r2, r4, #16
 80003d6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003da:	fb0e f005 	mul.w	r0, lr, r5
 80003de:	4290      	cmp	r0, r2
 80003e0:	d908      	bls.n	80003f4 <__udivmoddi4+0x124>
 80003e2:	eb1c 0202 	adds.w	r2, ip, r2
 80003e6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x122>
 80003ec:	4290      	cmp	r0, r2
 80003ee:	f200 80cb 	bhi.w	8000588 <__udivmoddi4+0x2b8>
 80003f2:	4645      	mov	r5, r8
 80003f4:	1a12      	subs	r2, r2, r0
 80003f6:	b2a4      	uxth	r4, r4
 80003f8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003fc:	fb07 2210 	mls	r2, r7, r0, r2
 8000400:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000404:	fb0e fe00 	mul.w	lr, lr, r0
 8000408:	45a6      	cmp	lr, r4
 800040a:	d908      	bls.n	800041e <__udivmoddi4+0x14e>
 800040c:	eb1c 0404 	adds.w	r4, ip, r4
 8000410:	f100 32ff 	add.w	r2, r0, #4294967295
 8000414:	d202      	bcs.n	800041c <__udivmoddi4+0x14c>
 8000416:	45a6      	cmp	lr, r4
 8000418:	f200 80bb 	bhi.w	8000592 <__udivmoddi4+0x2c2>
 800041c:	4610      	mov	r0, r2
 800041e:	eba4 040e 	sub.w	r4, r4, lr
 8000422:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000426:	e79f      	b.n	8000368 <__udivmoddi4+0x98>
 8000428:	f1c1 0720 	rsb	r7, r1, #32
 800042c:	408b      	lsls	r3, r1
 800042e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000432:	ea4c 0c03 	orr.w	ip, ip, r3
 8000436:	fa05 f401 	lsl.w	r4, r5, r1
 800043a:	fa20 f307 	lsr.w	r3, r0, r7
 800043e:	40fd      	lsrs	r5, r7
 8000440:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000444:	4323      	orrs	r3, r4
 8000446:	fbb5 f8f9 	udiv	r8, r5, r9
 800044a:	fa1f fe8c 	uxth.w	lr, ip
 800044e:	fb09 5518 	mls	r5, r9, r8, r5
 8000452:	0c1c      	lsrs	r4, r3, #16
 8000454:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000458:	fb08 f50e 	mul.w	r5, r8, lr
 800045c:	42a5      	cmp	r5, r4
 800045e:	fa02 f201 	lsl.w	r2, r2, r1
 8000462:	fa00 f001 	lsl.w	r0, r0, r1
 8000466:	d90b      	bls.n	8000480 <__udivmoddi4+0x1b0>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000470:	f080 8088 	bcs.w	8000584 <__udivmoddi4+0x2b4>
 8000474:	42a5      	cmp	r5, r4
 8000476:	f240 8085 	bls.w	8000584 <__udivmoddi4+0x2b4>
 800047a:	f1a8 0802 	sub.w	r8, r8, #2
 800047e:	4464      	add	r4, ip
 8000480:	1b64      	subs	r4, r4, r5
 8000482:	b29d      	uxth	r5, r3
 8000484:	fbb4 f3f9 	udiv	r3, r4, r9
 8000488:	fb09 4413 	mls	r4, r9, r3, r4
 800048c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000490:	fb03 fe0e 	mul.w	lr, r3, lr
 8000494:	45a6      	cmp	lr, r4
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x1da>
 8000498:	eb1c 0404 	adds.w	r4, ip, r4
 800049c:	f103 35ff 	add.w	r5, r3, #4294967295
 80004a0:	d26c      	bcs.n	800057c <__udivmoddi4+0x2ac>
 80004a2:	45a6      	cmp	lr, r4
 80004a4:	d96a      	bls.n	800057c <__udivmoddi4+0x2ac>
 80004a6:	3b02      	subs	r3, #2
 80004a8:	4464      	add	r4, ip
 80004aa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004ae:	fba3 9502 	umull	r9, r5, r3, r2
 80004b2:	eba4 040e 	sub.w	r4, r4, lr
 80004b6:	42ac      	cmp	r4, r5
 80004b8:	46c8      	mov	r8, r9
 80004ba:	46ae      	mov	lr, r5
 80004bc:	d356      	bcc.n	800056c <__udivmoddi4+0x29c>
 80004be:	d053      	beq.n	8000568 <__udivmoddi4+0x298>
 80004c0:	b156      	cbz	r6, 80004d8 <__udivmoddi4+0x208>
 80004c2:	ebb0 0208 	subs.w	r2, r0, r8
 80004c6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ca:	fa04 f707 	lsl.w	r7, r4, r7
 80004ce:	40ca      	lsrs	r2, r1
 80004d0:	40cc      	lsrs	r4, r1
 80004d2:	4317      	orrs	r7, r2
 80004d4:	e9c6 7400 	strd	r7, r4, [r6]
 80004d8:	4618      	mov	r0, r3
 80004da:	2100      	movs	r1, #0
 80004dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004e0:	f1c3 0120 	rsb	r1, r3, #32
 80004e4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004e8:	fa20 f201 	lsr.w	r2, r0, r1
 80004ec:	fa25 f101 	lsr.w	r1, r5, r1
 80004f0:	409d      	lsls	r5, r3
 80004f2:	432a      	orrs	r2, r5
 80004f4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f8:	fa1f fe8c 	uxth.w	lr, ip
 80004fc:	fbb1 f0f7 	udiv	r0, r1, r7
 8000500:	fb07 1510 	mls	r5, r7, r0, r1
 8000504:	0c11      	lsrs	r1, r2, #16
 8000506:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800050a:	fb00 f50e 	mul.w	r5, r0, lr
 800050e:	428d      	cmp	r5, r1
 8000510:	fa04 f403 	lsl.w	r4, r4, r3
 8000514:	d908      	bls.n	8000528 <__udivmoddi4+0x258>
 8000516:	eb1c 0101 	adds.w	r1, ip, r1
 800051a:	f100 38ff 	add.w	r8, r0, #4294967295
 800051e:	d22f      	bcs.n	8000580 <__udivmoddi4+0x2b0>
 8000520:	428d      	cmp	r5, r1
 8000522:	d92d      	bls.n	8000580 <__udivmoddi4+0x2b0>
 8000524:	3802      	subs	r0, #2
 8000526:	4461      	add	r1, ip
 8000528:	1b49      	subs	r1, r1, r5
 800052a:	b292      	uxth	r2, r2
 800052c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000530:	fb07 1115 	mls	r1, r7, r5, r1
 8000534:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000538:	fb05 f10e 	mul.w	r1, r5, lr
 800053c:	4291      	cmp	r1, r2
 800053e:	d908      	bls.n	8000552 <__udivmoddi4+0x282>
 8000540:	eb1c 0202 	adds.w	r2, ip, r2
 8000544:	f105 38ff 	add.w	r8, r5, #4294967295
 8000548:	d216      	bcs.n	8000578 <__udivmoddi4+0x2a8>
 800054a:	4291      	cmp	r1, r2
 800054c:	d914      	bls.n	8000578 <__udivmoddi4+0x2a8>
 800054e:	3d02      	subs	r5, #2
 8000550:	4462      	add	r2, ip
 8000552:	1a52      	subs	r2, r2, r1
 8000554:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000558:	e738      	b.n	80003cc <__udivmoddi4+0xfc>
 800055a:	4631      	mov	r1, r6
 800055c:	4630      	mov	r0, r6
 800055e:	e708      	b.n	8000372 <__udivmoddi4+0xa2>
 8000560:	4639      	mov	r1, r7
 8000562:	e6e6      	b.n	8000332 <__udivmoddi4+0x62>
 8000564:	4610      	mov	r0, r2
 8000566:	e6fb      	b.n	8000360 <__udivmoddi4+0x90>
 8000568:	4548      	cmp	r0, r9
 800056a:	d2a9      	bcs.n	80004c0 <__udivmoddi4+0x1f0>
 800056c:	ebb9 0802 	subs.w	r8, r9, r2
 8000570:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000574:	3b01      	subs	r3, #1
 8000576:	e7a3      	b.n	80004c0 <__udivmoddi4+0x1f0>
 8000578:	4645      	mov	r5, r8
 800057a:	e7ea      	b.n	8000552 <__udivmoddi4+0x282>
 800057c:	462b      	mov	r3, r5
 800057e:	e794      	b.n	80004aa <__udivmoddi4+0x1da>
 8000580:	4640      	mov	r0, r8
 8000582:	e7d1      	b.n	8000528 <__udivmoddi4+0x258>
 8000584:	46d0      	mov	r8, sl
 8000586:	e77b      	b.n	8000480 <__udivmoddi4+0x1b0>
 8000588:	3d02      	subs	r5, #2
 800058a:	4462      	add	r2, ip
 800058c:	e732      	b.n	80003f4 <__udivmoddi4+0x124>
 800058e:	4608      	mov	r0, r1
 8000590:	e70a      	b.n	80003a8 <__udivmoddi4+0xd8>
 8000592:	4464      	add	r4, ip
 8000594:	3802      	subs	r0, #2
 8000596:	e742      	b.n	800041e <__udivmoddi4+0x14e>

08000598 <__aeabi_idiv0>:
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop

0800059c <HAL_ADC_ConvCpltCallback>:
/* USER CODE BEGIN 0 */

/* ---- callback function for ADC conversion complete */

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b084      	sub	sp, #16
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	6078      	str	r0, [r7, #4]
	BaseType_t xHigherPriortyTaskWoken = pdFALSE;
 80005a4:	2300      	movs	r3, #0
 80005a6:	60fb      	str	r3, [r7, #12]
	xSemaphoreGiveFromISR(adc_sema, &xHigherPriortyTaskWoken);
 80005a8:	4b0b      	ldr	r3, [pc, #44]	; (80005d8 <HAL_ADC_ConvCpltCallback+0x3c>)
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	f107 020c 	add.w	r2, r7, #12
 80005b0:	4611      	mov	r1, r2
 80005b2:	4618      	mov	r0, r3
 80005b4:	f005 fc3a 	bl	8005e2c <xQueueGiveFromISR>
	portEND_SWITCHING_ISR(xHigherPriortyTaskWoken);
 80005b8:	68fb      	ldr	r3, [r7, #12]
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d007      	beq.n	80005ce <HAL_ADC_ConvCpltCallback+0x32>
 80005be:	4b07      	ldr	r3, [pc, #28]	; (80005dc <HAL_ADC_ConvCpltCallback+0x40>)
 80005c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80005c4:	601a      	str	r2, [r3, #0]
 80005c6:	f3bf 8f4f 	dsb	sy
 80005ca:	f3bf 8f6f 	isb	sy

}
 80005ce:	bf00      	nop
 80005d0:	3710      	adds	r7, #16
 80005d2:	46bd      	mov	sp, r7
 80005d4:	bd80      	pop	{r7, pc}
 80005d6:	bf00      	nop
 80005d8:	20000180 	.word	0x20000180
 80005dc:	e000ed04 	.word	0xe000ed04

080005e0 <HAL_GPIO_EXTI_Callback>:

/* ---- callback function for button press detection ----*/

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b084      	sub	sp, #16
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	4603      	mov	r3, r0
 80005e8:	80fb      	strh	r3, [r7, #6]
	BaseType_t xHigherPriortyTaskWoken = pdFALSE;
 80005ea:	2300      	movs	r3, #0
 80005ec:	60fb      	str	r3, [r7, #12]
	if(GPIO_Pin == B1_Pin)
 80005ee:	88fb      	ldrh	r3, [r7, #6]
 80005f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80005f4:	d112      	bne.n	800061c <HAL_GPIO_EXTI_Callback+0x3c>
	{
		xSemaphoreGiveFromISR(b1_sem,&xHigherPriortyTaskWoken);
 80005f6:	4b0b      	ldr	r3, [pc, #44]	; (8000624 <HAL_GPIO_EXTI_Callback+0x44>)
 80005f8:	681b      	ldr	r3, [r3, #0]
 80005fa:	f107 020c 	add.w	r2, r7, #12
 80005fe:	4611      	mov	r1, r2
 8000600:	4618      	mov	r0, r3
 8000602:	f005 fc13 	bl	8005e2c <xQueueGiveFromISR>
		portEND_SWITCHING_ISR(xHigherPriortyTaskWoken);
 8000606:	68fb      	ldr	r3, [r7, #12]
 8000608:	2b00      	cmp	r3, #0
 800060a:	d007      	beq.n	800061c <HAL_GPIO_EXTI_Callback+0x3c>
 800060c:	4b06      	ldr	r3, [pc, #24]	; (8000628 <HAL_GPIO_EXTI_Callback+0x48>)
 800060e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000612:	601a      	str	r2, [r3, #0]
 8000614:	f3bf 8f4f 	dsb	sy
 8000618:	f3bf 8f6f 	isb	sy
	}
}
 800061c:	bf00      	nop
 800061e:	3710      	adds	r7, #16
 8000620:	46bd      	mov	sp, r7
 8000622:	bd80      	pop	{r7, pc}
 8000624:	20000184 	.word	0x20000184
 8000628:	e000ed04 	.word	0xe000ed04

0800062c <ADC_task>:

/* ----- ADC Task ------ */
void ADC_task(void *params)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b084      	sub	sp, #16
 8000630:	af00      	add	r7, sp, #0
 8000632:	6078      	str	r0, [r7, #4]
	uint32_t voltage = 0;
 8000634:	2300      	movs	r3, #0
 8000636:	60fb      	str	r3, [r7, #12]
	HAL_ADC_Start_IT(&hadc1);
 8000638:	4815      	ldr	r0, [pc, #84]	; (8000690 <ADC_task+0x64>)
 800063a:	f001 f8b5 	bl	80017a8 <HAL_ADC_Start_IT>
	while(1)
	{
		xSemaphoreTake(adc_sema,0);
 800063e:	4b15      	ldr	r3, [pc, #84]	; (8000694 <ADC_task+0x68>)
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	2100      	movs	r1, #0
 8000644:	4618      	mov	r0, r3
 8000646:	f005 fd75 	bl	8006134 <xQueueSemaphoreTake>
		data = HAL_ADC_GetValue(&hadc1);
 800064a:	4811      	ldr	r0, [pc, #68]	; (8000690 <ADC_task+0x64>)
 800064c:	f001 f960 	bl	8001910 <HAL_ADC_GetValue>
 8000650:	4603      	mov	r3, r0
 8000652:	4a11      	ldr	r2, [pc, #68]	; (8000698 <ADC_task+0x6c>)
 8000654:	6013      	str	r3, [r2, #0]
		voltage = (data * 3300) / 4095;
 8000656:	4b10      	ldr	r3, [pc, #64]	; (8000698 <ADC_task+0x6c>)
 8000658:	681b      	ldr	r3, [r3, #0]
 800065a:	f640 42e4 	movw	r2, #3300	; 0xce4
 800065e:	fb03 f202 	mul.w	r2, r3, r2
 8000662:	4b0e      	ldr	r3, [pc, #56]	; (800069c <ADC_task+0x70>)
 8000664:	fba3 1302 	umull	r1, r3, r3, r2
 8000668:	1ad2      	subs	r2, r2, r3
 800066a:	0852      	lsrs	r2, r2, #1
 800066c:	4413      	add	r3, r2
 800066e:	0adb      	lsrs	r3, r3, #11
 8000670:	60fb      	str	r3, [r7, #12]
		xQueueSend(adc_queue,&voltage,1000);
 8000672:	4b0b      	ldr	r3, [pc, #44]	; (80006a0 <ADC_task+0x74>)
 8000674:	6818      	ldr	r0, [r3, #0]
 8000676:	f107 010c 	add.w	r1, r7, #12
 800067a:	2300      	movs	r3, #0
 800067c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000680:	f005 fad6 	bl	8005c30 <xQueueGenericSend>
		vTaskDelay(pdMS_TO_TICKS(2000));
 8000684:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000688:	f006 f90c 	bl	80068a4 <vTaskDelay>
		xSemaphoreTake(adc_sema,0);
 800068c:	e7d7      	b.n	800063e <ADC_task+0x12>
 800068e:	bf00      	nop
 8000690:	20000080 	.word	0x20000080
 8000694:	20000180 	.word	0x20000180
 8000698:	2000017c 	.word	0x2000017c
 800069c:	00100101 	.word	0x00100101
 80006a0:	20000188 	.word	0x20000188

080006a4 <Display_task>:
	}
}

/* ------  Display value in UART terminal ----------- */
void Display_task(void *params)
{
 80006a4:	b590      	push	{r4, r7, lr}
 80006a6:	b08f      	sub	sp, #60	; 0x3c
 80006a8:	af02      	add	r7, sp, #8
 80006aa:	6078      	str	r0, [r7, #4]
	uint32_t value;
	char str[30];
	while(1)
	{
		if(xQueueReceive(adc_queue, &value, portMAX_DELAY) == pdTRUE)
 80006ac:	4b1e      	ldr	r3, [pc, #120]	; (8000728 <Display_task+0x84>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80006b4:	f04f 32ff 	mov.w	r2, #4294967295
 80006b8:	4618      	mov	r0, r3
 80006ba:	f005 fc5b 	bl	8005f74 <xQueueReceive>
 80006be:	4603      	mov	r3, r0
 80006c0:	2b01      	cmp	r3, #1
 80006c2:	d1f3      	bne.n	80006ac <Display_task+0x8>
		{
			int len = sprintf(str,"ADC count = %ld Voltage = %ld.%ld\n\r",((value*4095)/3300),value/1000,value % 1000);
 80006c4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80006c6:	4613      	mov	r3, r2
 80006c8:	031b      	lsls	r3, r3, #12
 80006ca:	1a9b      	subs	r3, r3, r2
 80006cc:	089b      	lsrs	r3, r3, #2
 80006ce:	4a17      	ldr	r2, [pc, #92]	; (800072c <Display_task+0x88>)
 80006d0:	fba2 2303 	umull	r2, r3, r2, r3
 80006d4:	0959      	lsrs	r1, r3, #5
 80006d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80006d8:	4a15      	ldr	r2, [pc, #84]	; (8000730 <Display_task+0x8c>)
 80006da:	fba2 2303 	umull	r2, r3, r2, r3
 80006de:	099c      	lsrs	r4, r3, #6
 80006e0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80006e2:	4b13      	ldr	r3, [pc, #76]	; (8000730 <Display_task+0x8c>)
 80006e4:	fba3 0302 	umull	r0, r3, r3, r2
 80006e8:	099b      	lsrs	r3, r3, #6
 80006ea:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80006ee:	fb00 f303 	mul.w	r3, r0, r3
 80006f2:	1ad3      	subs	r3, r2, r3
 80006f4:	f107 0008 	add.w	r0, r7, #8
 80006f8:	9300      	str	r3, [sp, #0]
 80006fa:	4623      	mov	r3, r4
 80006fc:	460a      	mov	r2, r1
 80006fe:	490d      	ldr	r1, [pc, #52]	; (8000734 <Display_task+0x90>)
 8000700:	f007 ff98 	bl	8008634 <siprintf>
 8000704:	62f8      	str	r0, [r7, #44]	; 0x2c
			HAL_UART_Transmit(&hlpuart1, (uint8_t*)str, len, 100);
 8000706:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000708:	b29a      	uxth	r2, r3
 800070a:	f107 0108 	add.w	r1, r7, #8
 800070e:	2364      	movs	r3, #100	; 0x64
 8000710:	4809      	ldr	r0, [pc, #36]	; (8000738 <Display_task+0x94>)
 8000712:	f004 fa57 	bl	8004bc4 <HAL_UART_Transmit>
			HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000716:	2180      	movs	r1, #128	; 0x80
 8000718:	4808      	ldr	r0, [pc, #32]	; (800073c <Display_task+0x98>)
 800071a:	f002 fa27 	bl	8002b6c <HAL_GPIO_TogglePin>
			vTaskDelay(pdMS_TO_TICKS(1000));
 800071e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000722:	f006 f8bf 	bl	80068a4 <vTaskDelay>
		if(xQueueReceive(adc_queue, &value, portMAX_DELAY) == pdTRUE)
 8000726:	e7c1      	b.n	80006ac <Display_task+0x8>
 8000728:	20000188 	.word	0x20000188
 800072c:	09ee009f 	.word	0x09ee009f
 8000730:	10624dd3 	.word	0x10624dd3
 8000734:	08008f94 	.word	0x08008f94
 8000738:	200000e8 	.word	0x200000e8
 800073c:	48000400 	.word	0x48000400

08000740 <LED_task>:
	}
}

/* ----------- LED blink task ----------- */
void LED_task(void *params)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b082      	sub	sp, #8
 8000744:	af00      	add	r7, sp, #0
 8000746:	6078      	str	r0, [r7, #4]
	while(1)
	{
		HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8000748:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800074c:	4803      	ldr	r0, [pc, #12]	; (800075c <LED_task+0x1c>)
 800074e:	f002 fa0d 	bl	8002b6c <HAL_GPIO_TogglePin>
		vTaskDelay(500);
 8000752:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000756:	f006 f8a5 	bl	80068a4 <vTaskDelay>
		HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 800075a:	e7f5      	b.n	8000748 <LED_task+0x8>
 800075c:	48000400 	.word	0x48000400

08000760 <Button_task>:
	}
}

/* ----- Button press with debounce ------ */
void Button_task(void *params)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b082      	sub	sp, #8
 8000764:	af00      	add	r7, sp, #0
 8000766:	6078      	str	r0, [r7, #4]
	while(1)
	{
		xSemaphoreTake(b1_sem,portMAX_DELAY);
 8000768:	4b0b      	ldr	r3, [pc, #44]	; (8000798 <Button_task+0x38>)
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	f04f 31ff 	mov.w	r1, #4294967295
 8000770:	4618      	mov	r0, r3
 8000772:	f005 fcdf 	bl	8006134 <xQueueSemaphoreTake>
		vTaskDelay(pdMS_TO_TICKS(20));
 8000776:	2014      	movs	r0, #20
 8000778:	f006 f894 	bl	80068a4 <vTaskDelay>
		if(HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) == GPIO_PIN_SET)
 800077c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000780:	4806      	ldr	r0, [pc, #24]	; (800079c <Button_task+0x3c>)
 8000782:	f002 f9c3 	bl	8002b0c <HAL_GPIO_ReadPin>
 8000786:	4603      	mov	r3, r0
 8000788:	2b01      	cmp	r3, #1
 800078a:	d1ed      	bne.n	8000768 <Button_task+0x8>
			HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 800078c:	2180      	movs	r1, #128	; 0x80
 800078e:	4803      	ldr	r0, [pc, #12]	; (800079c <Button_task+0x3c>)
 8000790:	f002 f9ec 	bl	8002b6c <HAL_GPIO_TogglePin>
		xSemaphoreTake(b1_sem,portMAX_DELAY);
 8000794:	e7e8      	b.n	8000768 <Button_task+0x8>
 8000796:	bf00      	nop
 8000798:	20000184 	.word	0x20000184
 800079c:	48000800 	.word	0x48000800

080007a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b082      	sub	sp, #8
 80007a4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007a6:	f000 fc92 	bl	80010ce <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007aa:	f000 f86b 	bl	8000884 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007ae:	f000 f96d 	bl	8000a8c <MX_GPIO_Init>
  MX_ADC1_Init();
 80007b2:	f000 f8bb 	bl	800092c <MX_ADC1_Init>
  MX_LPUART1_UART_Init();
 80007b6:	f000 f91d 	bl	80009f4 <MX_LPUART1_UART_Init>
  /* USER CODE BEGIN 2 */
  adc_queue = xQueueCreate(2,sizeof(uint32_t));
 80007ba:	2200      	movs	r2, #0
 80007bc:	2104      	movs	r1, #4
 80007be:	2002      	movs	r0, #2
 80007c0:	f005 f9c8 	bl	8005b54 <xQueueGenericCreate>
 80007c4:	4603      	mov	r3, r0
 80007c6:	4a24      	ldr	r2, [pc, #144]	; (8000858 <main+0xb8>)
 80007c8:	6013      	str	r3, [r2, #0]
  adc_sema = xSemaphoreCreateBinary();
 80007ca:	2203      	movs	r2, #3
 80007cc:	2100      	movs	r1, #0
 80007ce:	2001      	movs	r0, #1
 80007d0:	f005 f9c0 	bl	8005b54 <xQueueGenericCreate>
 80007d4:	4603      	mov	r3, r0
 80007d6:	4a21      	ldr	r2, [pc, #132]	; (800085c <main+0xbc>)
 80007d8:	6013      	str	r3, [r2, #0]
  b1_sem = xSemaphoreCreateBinary();
 80007da:	2203      	movs	r2, #3
 80007dc:	2100      	movs	r1, #0
 80007de:	2001      	movs	r0, #1
 80007e0:	f005 f9b8 	bl	8005b54 <xQueueGenericCreate>
 80007e4:	4603      	mov	r3, r0
 80007e6:	4a1e      	ldr	r2, [pc, #120]	; (8000860 <main+0xc0>)
 80007e8:	6013      	str	r3, [r2, #0]
  if(adc_sema != NULL && adc_queue != NULL && b1_sem != NULL)
 80007ea:	4b1c      	ldr	r3, [pc, #112]	; (800085c <main+0xbc>)
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d031      	beq.n	8000856 <main+0xb6>
 80007f2:	4b19      	ldr	r3, [pc, #100]	; (8000858 <main+0xb8>)
 80007f4:	681b      	ldr	r3, [r3, #0]
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d02d      	beq.n	8000856 <main+0xb6>
 80007fa:	4b19      	ldr	r3, [pc, #100]	; (8000860 <main+0xc0>)
 80007fc:	681b      	ldr	r3, [r3, #0]
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d029      	beq.n	8000856 <main+0xb6>
  {
	  xTaskCreate(ADC_task, "ADC", configMINIMAL_STACK_SIZE, NULL, 2, NULL);
 8000802:	2300      	movs	r3, #0
 8000804:	9301      	str	r3, [sp, #4]
 8000806:	2302      	movs	r3, #2
 8000808:	9300      	str	r3, [sp, #0]
 800080a:	2300      	movs	r3, #0
 800080c:	2280      	movs	r2, #128	; 0x80
 800080e:	4915      	ldr	r1, [pc, #84]	; (8000864 <main+0xc4>)
 8000810:	4815      	ldr	r0, [pc, #84]	; (8000868 <main+0xc8>)
 8000812:	f005 fee9 	bl	80065e8 <xTaskCreate>
	  xTaskCreate(LED_task, "LED", configMINIMAL_STACK_SIZE, NULL, 1, NULL);
 8000816:	2300      	movs	r3, #0
 8000818:	9301      	str	r3, [sp, #4]
 800081a:	2301      	movs	r3, #1
 800081c:	9300      	str	r3, [sp, #0]
 800081e:	2300      	movs	r3, #0
 8000820:	2280      	movs	r2, #128	; 0x80
 8000822:	4912      	ldr	r1, [pc, #72]	; (800086c <main+0xcc>)
 8000824:	4812      	ldr	r0, [pc, #72]	; (8000870 <main+0xd0>)
 8000826:	f005 fedf 	bl	80065e8 <xTaskCreate>
	  xTaskCreate(Display_task, "DISP", configMINIMAL_STACK_SIZE, NULL, 3, NULL);
 800082a:	2300      	movs	r3, #0
 800082c:	9301      	str	r3, [sp, #4]
 800082e:	2303      	movs	r3, #3
 8000830:	9300      	str	r3, [sp, #0]
 8000832:	2300      	movs	r3, #0
 8000834:	2280      	movs	r2, #128	; 0x80
 8000836:	490f      	ldr	r1, [pc, #60]	; (8000874 <main+0xd4>)
 8000838:	480f      	ldr	r0, [pc, #60]	; (8000878 <main+0xd8>)
 800083a:	f005 fed5 	bl	80065e8 <xTaskCreate>
	  xTaskCreate(Button_task, "button", configMINIMAL_STACK_SIZE, NULL, 1, NULL);
 800083e:	2300      	movs	r3, #0
 8000840:	9301      	str	r3, [sp, #4]
 8000842:	2301      	movs	r3, #1
 8000844:	9300      	str	r3, [sp, #0]
 8000846:	2300      	movs	r3, #0
 8000848:	2280      	movs	r2, #128	; 0x80
 800084a:	490c      	ldr	r1, [pc, #48]	; (800087c <main+0xdc>)
 800084c:	480c      	ldr	r0, [pc, #48]	; (8000880 <main+0xe0>)
 800084e:	f005 fecb 	bl	80065e8 <xTaskCreate>
	  vTaskStartScheduler();
 8000852:	f006 f85b 	bl	800690c <vTaskStartScheduler>
  }
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000856:	e7fe      	b.n	8000856 <main+0xb6>
 8000858:	20000188 	.word	0x20000188
 800085c:	20000180 	.word	0x20000180
 8000860:	20000184 	.word	0x20000184
 8000864:	08008fb8 	.word	0x08008fb8
 8000868:	0800062d 	.word	0x0800062d
 800086c:	08008fbc 	.word	0x08008fbc
 8000870:	08000741 	.word	0x08000741
 8000874:	08008fc0 	.word	0x08008fc0
 8000878:	080006a5 	.word	0x080006a5
 800087c:	08008fc8 	.word	0x08008fc8
 8000880:	08000761 	.word	0x08000761

08000884 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b096      	sub	sp, #88	; 0x58
 8000888:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800088a:	f107 0314 	add.w	r3, r7, #20
 800088e:	2244      	movs	r2, #68	; 0x44
 8000890:	2100      	movs	r1, #0
 8000892:	4618      	mov	r0, r3
 8000894:	f007 feee 	bl	8008674 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000898:	463b      	mov	r3, r7
 800089a:	2200      	movs	r2, #0
 800089c:	601a      	str	r2, [r3, #0]
 800089e:	605a      	str	r2, [r3, #4]
 80008a0:	609a      	str	r2, [r3, #8]
 80008a2:	60da      	str	r2, [r3, #12]
 80008a4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80008a6:	f44f 7000 	mov.w	r0, #512	; 0x200
 80008aa:	f002 f9b1 	bl	8002c10 <HAL_PWREx_ControlVoltageScaling>
 80008ae:	4603      	mov	r3, r0
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d001      	beq.n	80008b8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80008b4:	f000 f9fe 	bl	8000cb4 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80008b8:	2310      	movs	r3, #16
 80008ba:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80008bc:	2301      	movs	r3, #1
 80008be:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80008c0:	2300      	movs	r3, #0
 80008c2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80008c4:	2360      	movs	r3, #96	; 0x60
 80008c6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008c8:	2302      	movs	r3, #2
 80008ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80008cc:	2301      	movs	r3, #1
 80008ce:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80008d0:	2301      	movs	r3, #1
 80008d2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 80008d4:	2328      	movs	r3, #40	; 0x28
 80008d6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80008d8:	2302      	movs	r3, #2
 80008da:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80008dc:	2302      	movs	r3, #2
 80008de:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80008e0:	2302      	movs	r3, #2
 80008e2:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008e4:	f107 0314 	add.w	r3, r7, #20
 80008e8:	4618      	mov	r0, r3
 80008ea:	f002 fa45 	bl	8002d78 <HAL_RCC_OscConfig>
 80008ee:	4603      	mov	r3, r0
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d001      	beq.n	80008f8 <SystemClock_Config+0x74>
  {
    Error_Handler();
 80008f4:	f000 f9de 	bl	8000cb4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008f8:	230f      	movs	r3, #15
 80008fa:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008fc:	2303      	movs	r3, #3
 80008fe:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000900:	2300      	movs	r3, #0
 8000902:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000904:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000908:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800090a:	2300      	movs	r3, #0
 800090c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800090e:	463b      	mov	r3, r7
 8000910:	2103      	movs	r1, #3
 8000912:	4618      	mov	r0, r3
 8000914:	f002 fe4a 	bl	80035ac <HAL_RCC_ClockConfig>
 8000918:	4603      	mov	r3, r0
 800091a:	2b00      	cmp	r3, #0
 800091c:	d001      	beq.n	8000922 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800091e:	f000 f9c9 	bl	8000cb4 <Error_Handler>
  }
}
 8000922:	bf00      	nop
 8000924:	3758      	adds	r7, #88	; 0x58
 8000926:	46bd      	mov	sp, r7
 8000928:	bd80      	pop	{r7, pc}
	...

0800092c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b086      	sub	sp, #24
 8000930:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000932:	463b      	mov	r3, r7
 8000934:	2200      	movs	r2, #0
 8000936:	601a      	str	r2, [r3, #0]
 8000938:	605a      	str	r2, [r3, #4]
 800093a:	609a      	str	r2, [r3, #8]
 800093c:	60da      	str	r2, [r3, #12]
 800093e:	611a      	str	r2, [r3, #16]
 8000940:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000942:	4b29      	ldr	r3, [pc, #164]	; (80009e8 <MX_ADC1_Init+0xbc>)
 8000944:	4a29      	ldr	r2, [pc, #164]	; (80009ec <MX_ADC1_Init+0xc0>)
 8000946:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV10;
 8000948:	4b27      	ldr	r3, [pc, #156]	; (80009e8 <MX_ADC1_Init+0xbc>)
 800094a:	f44f 12a0 	mov.w	r2, #1310720	; 0x140000
 800094e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000950:	4b25      	ldr	r3, [pc, #148]	; (80009e8 <MX_ADC1_Init+0xbc>)
 8000952:	2200      	movs	r2, #0
 8000954:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000956:	4b24      	ldr	r3, [pc, #144]	; (80009e8 <MX_ADC1_Init+0xbc>)
 8000958:	2200      	movs	r2, #0
 800095a:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800095c:	4b22      	ldr	r3, [pc, #136]	; (80009e8 <MX_ADC1_Init+0xbc>)
 800095e:	2200      	movs	r2, #0
 8000960:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000962:	4b21      	ldr	r3, [pc, #132]	; (80009e8 <MX_ADC1_Init+0xbc>)
 8000964:	2204      	movs	r2, #4
 8000966:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000968:	4b1f      	ldr	r3, [pc, #124]	; (80009e8 <MX_ADC1_Init+0xbc>)
 800096a:	2200      	movs	r2, #0
 800096c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800096e:	4b1e      	ldr	r3, [pc, #120]	; (80009e8 <MX_ADC1_Init+0xbc>)
 8000970:	2201      	movs	r2, #1
 8000972:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000974:	4b1c      	ldr	r3, [pc, #112]	; (80009e8 <MX_ADC1_Init+0xbc>)
 8000976:	2201      	movs	r2, #1
 8000978:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800097a:	4b1b      	ldr	r3, [pc, #108]	; (80009e8 <MX_ADC1_Init+0xbc>)
 800097c:	2200      	movs	r2, #0
 800097e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000982:	4b19      	ldr	r3, [pc, #100]	; (80009e8 <MX_ADC1_Init+0xbc>)
 8000984:	2200      	movs	r2, #0
 8000986:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000988:	4b17      	ldr	r3, [pc, #92]	; (80009e8 <MX_ADC1_Init+0xbc>)
 800098a:	2200      	movs	r2, #0
 800098c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800098e:	4b16      	ldr	r3, [pc, #88]	; (80009e8 <MX_ADC1_Init+0xbc>)
 8000990:	2200      	movs	r2, #0
 8000992:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000996:	4b14      	ldr	r3, [pc, #80]	; (80009e8 <MX_ADC1_Init+0xbc>)
 8000998:	2200      	movs	r2, #0
 800099a:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800099c:	4b12      	ldr	r3, [pc, #72]	; (80009e8 <MX_ADC1_Init+0xbc>)
 800099e:	2200      	movs	r2, #0
 80009a0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80009a4:	4810      	ldr	r0, [pc, #64]	; (80009e8 <MX_ADC1_Init+0xbc>)
 80009a6:	f000 fdb9 	bl	800151c <HAL_ADC_Init>
 80009aa:	4603      	mov	r3, r0
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d001      	beq.n	80009b4 <MX_ADC1_Init+0x88>
  {
    Error_Handler();
 80009b0:	f000 f980 	bl	8000cb4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80009b4:	4b0e      	ldr	r3, [pc, #56]	; (80009f0 <MX_ADC1_Init+0xc4>)
 80009b6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80009b8:	2306      	movs	r3, #6
 80009ba:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80009bc:	2300      	movs	r3, #0
 80009be:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80009c0:	237f      	movs	r3, #127	; 0x7f
 80009c2:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80009c4:	2304      	movs	r3, #4
 80009c6:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80009c8:	2300      	movs	r3, #0
 80009ca:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009cc:	463b      	mov	r3, r7
 80009ce:	4619      	mov	r1, r3
 80009d0:	4805      	ldr	r0, [pc, #20]	; (80009e8 <MX_ADC1_Init+0xbc>)
 80009d2:	f001 f973 	bl	8001cbc <HAL_ADC_ConfigChannel>
 80009d6:	4603      	mov	r3, r0
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d001      	beq.n	80009e0 <MX_ADC1_Init+0xb4>
  {
    Error_Handler();
 80009dc:	f000 f96a 	bl	8000cb4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80009e0:	bf00      	nop
 80009e2:	3718      	adds	r7, #24
 80009e4:	46bd      	mov	sp, r7
 80009e6:	bd80      	pop	{r7, pc}
 80009e8:	20000080 	.word	0x20000080
 80009ec:	50040000 	.word	0x50040000
 80009f0:	04300002 	.word	0x04300002

080009f4 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80009f8:	4b22      	ldr	r3, [pc, #136]	; (8000a84 <MX_LPUART1_UART_Init+0x90>)
 80009fa:	4a23      	ldr	r2, [pc, #140]	; (8000a88 <MX_LPUART1_UART_Init+0x94>)
 80009fc:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 80009fe:	4b21      	ldr	r3, [pc, #132]	; (8000a84 <MX_LPUART1_UART_Init+0x90>)
 8000a00:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a04:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000a06:	4b1f      	ldr	r3, [pc, #124]	; (8000a84 <MX_LPUART1_UART_Init+0x90>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000a0c:	4b1d      	ldr	r3, [pc, #116]	; (8000a84 <MX_LPUART1_UART_Init+0x90>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000a12:	4b1c      	ldr	r3, [pc, #112]	; (8000a84 <MX_LPUART1_UART_Init+0x90>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000a18:	4b1a      	ldr	r3, [pc, #104]	; (8000a84 <MX_LPUART1_UART_Init+0x90>)
 8000a1a:	220c      	movs	r2, #12
 8000a1c:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a1e:	4b19      	ldr	r3, [pc, #100]	; (8000a84 <MX_LPUART1_UART_Init+0x90>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a24:	4b17      	ldr	r3, [pc, #92]	; (8000a84 <MX_LPUART1_UART_Init+0x90>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a2a:	4b16      	ldr	r3, [pc, #88]	; (8000a84 <MX_LPUART1_UART_Init+0x90>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a30:	4b14      	ldr	r3, [pc, #80]	; (8000a84 <MX_LPUART1_UART_Init+0x90>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8000a36:	4b13      	ldr	r3, [pc, #76]	; (8000a84 <MX_LPUART1_UART_Init+0x90>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000a3c:	4811      	ldr	r0, [pc, #68]	; (8000a84 <MX_LPUART1_UART_Init+0x90>)
 8000a3e:	f004 f871 	bl	8004b24 <HAL_UART_Init>
 8000a42:	4603      	mov	r3, r0
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d001      	beq.n	8000a4c <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 8000a48:	f000 f934 	bl	8000cb4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a4c:	2100      	movs	r1, #0
 8000a4e:	480d      	ldr	r0, [pc, #52]	; (8000a84 <MX_LPUART1_UART_Init+0x90>)
 8000a50:	f004 fe96 	bl	8005780 <HAL_UARTEx_SetTxFifoThreshold>
 8000a54:	4603      	mov	r3, r0
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d001      	beq.n	8000a5e <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000a5a:	f000 f92b 	bl	8000cb4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a5e:	2100      	movs	r1, #0
 8000a60:	4808      	ldr	r0, [pc, #32]	; (8000a84 <MX_LPUART1_UART_Init+0x90>)
 8000a62:	f004 fecb 	bl	80057fc <HAL_UARTEx_SetRxFifoThreshold>
 8000a66:	4603      	mov	r3, r0
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d001      	beq.n	8000a70 <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000a6c:	f000 f922 	bl	8000cb4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000a70:	4804      	ldr	r0, [pc, #16]	; (8000a84 <MX_LPUART1_UART_Init+0x90>)
 8000a72:	f004 fe4c 	bl	800570e <HAL_UARTEx_DisableFifoMode>
 8000a76:	4603      	mov	r3, r0
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d001      	beq.n	8000a80 <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000a7c:	f000 f91a 	bl	8000cb4 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000a80:	bf00      	nop
 8000a82:	bd80      	pop	{r7, pc}
 8000a84:	200000e8 	.word	0x200000e8
 8000a88:	40008000 	.word	0x40008000

08000a8c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b08c      	sub	sp, #48	; 0x30
 8000a90:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a92:	f107 031c 	add.w	r3, r7, #28
 8000a96:	2200      	movs	r2, #0
 8000a98:	601a      	str	r2, [r3, #0]
 8000a9a:	605a      	str	r2, [r3, #4]
 8000a9c:	609a      	str	r2, [r3, #8]
 8000a9e:	60da      	str	r2, [r3, #12]
 8000aa0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000aa2:	4b76      	ldr	r3, [pc, #472]	; (8000c7c <MX_GPIO_Init+0x1f0>)
 8000aa4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aa6:	4a75      	ldr	r2, [pc, #468]	; (8000c7c <MX_GPIO_Init+0x1f0>)
 8000aa8:	f043 0304 	orr.w	r3, r3, #4
 8000aac:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000aae:	4b73      	ldr	r3, [pc, #460]	; (8000c7c <MX_GPIO_Init+0x1f0>)
 8000ab0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ab2:	f003 0304 	and.w	r3, r3, #4
 8000ab6:	61bb      	str	r3, [r7, #24]
 8000ab8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000aba:	4b70      	ldr	r3, [pc, #448]	; (8000c7c <MX_GPIO_Init+0x1f0>)
 8000abc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000abe:	4a6f      	ldr	r2, [pc, #444]	; (8000c7c <MX_GPIO_Init+0x1f0>)
 8000ac0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ac4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ac6:	4b6d      	ldr	r3, [pc, #436]	; (8000c7c <MX_GPIO_Init+0x1f0>)
 8000ac8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ace:	617b      	str	r3, [r7, #20]
 8000ad0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ad2:	4b6a      	ldr	r3, [pc, #424]	; (8000c7c <MX_GPIO_Init+0x1f0>)
 8000ad4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ad6:	4a69      	ldr	r2, [pc, #420]	; (8000c7c <MX_GPIO_Init+0x1f0>)
 8000ad8:	f043 0302 	orr.w	r3, r3, #2
 8000adc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ade:	4b67      	ldr	r3, [pc, #412]	; (8000c7c <MX_GPIO_Init+0x1f0>)
 8000ae0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ae2:	f003 0302 	and.w	r3, r3, #2
 8000ae6:	613b      	str	r3, [r7, #16]
 8000ae8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000aea:	4b64      	ldr	r3, [pc, #400]	; (8000c7c <MX_GPIO_Init+0x1f0>)
 8000aec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aee:	4a63      	ldr	r2, [pc, #396]	; (8000c7c <MX_GPIO_Init+0x1f0>)
 8000af0:	f043 0308 	orr.w	r3, r3, #8
 8000af4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000af6:	4b61      	ldr	r3, [pc, #388]	; (8000c7c <MX_GPIO_Init+0x1f0>)
 8000af8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000afa:	f003 0308 	and.w	r3, r3, #8
 8000afe:	60fb      	str	r3, [r7, #12]
 8000b00:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b02:	4b5e      	ldr	r3, [pc, #376]	; (8000c7c <MX_GPIO_Init+0x1f0>)
 8000b04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b06:	4a5d      	ldr	r2, [pc, #372]	; (8000c7c <MX_GPIO_Init+0x1f0>)
 8000b08:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b0c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b0e:	4b5b      	ldr	r3, [pc, #364]	; (8000c7c <MX_GPIO_Init+0x1f0>)
 8000b10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b16:	60bb      	str	r3, [r7, #8]
 8000b18:	68bb      	ldr	r3, [r7, #8]
  HAL_PWREx_EnableVddIO2();
 8000b1a:	f002 f91d 	bl	8002d58 <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b1e:	4b57      	ldr	r3, [pc, #348]	; (8000c7c <MX_GPIO_Init+0x1f0>)
 8000b20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b22:	4a56      	ldr	r2, [pc, #344]	; (8000c7c <MX_GPIO_Init+0x1f0>)
 8000b24:	f043 0301 	orr.w	r3, r3, #1
 8000b28:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b2a:	4b54      	ldr	r3, [pc, #336]	; (8000c7c <MX_GPIO_Init+0x1f0>)
 8000b2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b2e:	f003 0301 	and.w	r3, r3, #1
 8000b32:	607b      	str	r3, [r7, #4]
 8000b34:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000b36:	2200      	movs	r2, #0
 8000b38:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 8000b3c:	4850      	ldr	r0, [pc, #320]	; (8000c80 <MX_GPIO_Init+0x1f4>)
 8000b3e:	f001 fffd 	bl	8002b3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000b42:	2200      	movs	r2, #0
 8000b44:	2140      	movs	r1, #64	; 0x40
 8000b46:	484f      	ldr	r0, [pc, #316]	; (8000c84 <MX_GPIO_Init+0x1f8>)
 8000b48:	f001 fff8 	bl	8002b3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	2180      	movs	r1, #128	; 0x80
 8000b50:	484d      	ldr	r0, [pc, #308]	; (8000c88 <MX_GPIO_Init+0x1fc>)
 8000b52:	f001 fff3 	bl	8002b3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000b56:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b5a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b5c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000b60:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b62:	2300      	movs	r3, #0
 8000b64:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000b66:	f107 031c 	add.w	r3, r7, #28
 8000b6a:	4619      	mov	r1, r3
 8000b6c:	4846      	ldr	r0, [pc, #280]	; (8000c88 <MX_GPIO_Init+0x1fc>)
 8000b6e:	f001 fe3b 	bl	80027e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 8000b72:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 8000b76:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b78:	2301      	movs	r3, #1
 8000b7a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b80:	2300      	movs	r3, #0
 8000b82:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b84:	f107 031c 	add.w	r3, r7, #28
 8000b88:	4619      	mov	r1, r3
 8000b8a:	483d      	ldr	r0, [pc, #244]	; (8000c80 <MX_GPIO_Init+0x1f4>)
 8000b8c:	f001 fe2c 	bl	80027e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : STLK_RX_Pin STLK_TX_Pin */
  GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000b90:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000b94:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b96:	2302      	movs	r3, #2
 8000b98:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b9e:	2303      	movs	r3, #3
 8000ba0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000ba2:	2307      	movs	r3, #7
 8000ba4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ba6:	f107 031c 	add.w	r3, r7, #28
 8000baa:	4619      	mov	r1, r3
 8000bac:	4837      	ldr	r0, [pc, #220]	; (8000c8c <MX_GPIO_Init+0x200>)
 8000bae:	f001 fe1b 	bl	80027e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000bb2:	2320      	movs	r3, #32
 8000bb4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000bbe:	f107 031c 	add.w	r3, r7, #28
 8000bc2:	4619      	mov	r1, r3
 8000bc4:	482f      	ldr	r0, [pc, #188]	; (8000c84 <MX_GPIO_Init+0x1f8>)
 8000bc6:	f001 fe0f 	bl	80027e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000bca:	2340      	movs	r3, #64	; 0x40
 8000bcc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bce:	2301      	movs	r3, #1
 8000bd0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000bda:	f107 031c 	add.w	r3, r7, #28
 8000bde:	4619      	mov	r1, r3
 8000be0:	4828      	ldr	r0, [pc, #160]	; (8000c84 <MX_GPIO_Init+0x1f8>)
 8000be2:	f001 fe01 	bl	80027e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD1_Pin */
  GPIO_InitStruct.Pin = LD1_Pin;
 8000be6:	2380      	movs	r3, #128	; 0x80
 8000be8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bea:	2301      	movs	r3, #1
 8000bec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD1_GPIO_Port, &GPIO_InitStruct);
 8000bf6:	f107 031c 	add.w	r3, r7, #28
 8000bfa:	4619      	mov	r1, r3
 8000bfc:	4822      	ldr	r0, [pc, #136]	; (8000c88 <MX_GPIO_Init+0x1fc>)
 8000bfe:	f001 fdf3 	bl	80027e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000c02:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000c06:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c08:	2302      	movs	r3, #2
 8000c0a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c10:	2303      	movs	r3, #3
 8000c12:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000c14:	230a      	movs	r3, #10
 8000c16:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c18:	f107 031c 	add.w	r3, r7, #28
 8000c1c:	4619      	mov	r1, r3
 8000c1e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c22:	f001 fde1 	bl	80027e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000c26:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000c2a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c30:	2300      	movs	r3, #0
 8000c32:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000c34:	f107 031c 	add.w	r3, r7, #28
 8000c38:	4619      	mov	r1, r3
 8000c3a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c3e:	f001 fdd3 	bl	80027e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000c42:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000c46:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c48:	2312      	movs	r3, #18
 8000c4a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c50:	2303      	movs	r3, #3
 8000c52:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000c54:	2304      	movs	r3, #4
 8000c56:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c58:	f107 031c 	add.w	r3, r7, #28
 8000c5c:	4619      	mov	r1, r3
 8000c5e:	4808      	ldr	r0, [pc, #32]	; (8000c80 <MX_GPIO_Init+0x1f4>)
 8000c60:	f001 fdc2 	bl	80027e8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8000c64:	2200      	movs	r2, #0
 8000c66:	2105      	movs	r1, #5
 8000c68:	2028      	movs	r0, #40	; 0x28
 8000c6a:	f001 fd93 	bl	8002794 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000c6e:	2028      	movs	r0, #40	; 0x28
 8000c70:	f001 fdac 	bl	80027cc <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c74:	bf00      	nop
 8000c76:	3730      	adds	r7, #48	; 0x30
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	bd80      	pop	{r7, pc}
 8000c7c:	40021000 	.word	0x40021000
 8000c80:	48000400 	.word	0x48000400
 8000c84:	48001800 	.word	0x48001800
 8000c88:	48000800 	.word	0x48000800
 8000c8c:	48000c00 	.word	0x48000c00

08000c90 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b082      	sub	sp, #8
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	4a04      	ldr	r2, [pc, #16]	; (8000cb0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000c9e:	4293      	cmp	r3, r2
 8000ca0:	d101      	bne.n	8000ca6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000ca2:	f000 fa2d 	bl	8001100 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000ca6:	bf00      	nop
 8000ca8:	3708      	adds	r7, #8
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bd80      	pop	{r7, pc}
 8000cae:	bf00      	nop
 8000cb0:	40012c00 	.word	0x40012c00

08000cb4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cb8:	b672      	cpsid	i
}
 8000cba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cbc:	e7fe      	b.n	8000cbc <Error_Handler+0x8>
	...

08000cc0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	b083      	sub	sp, #12
 8000cc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cc6:	4b0f      	ldr	r3, [pc, #60]	; (8000d04 <HAL_MspInit+0x44>)
 8000cc8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000cca:	4a0e      	ldr	r2, [pc, #56]	; (8000d04 <HAL_MspInit+0x44>)
 8000ccc:	f043 0301 	orr.w	r3, r3, #1
 8000cd0:	6613      	str	r3, [r2, #96]	; 0x60
 8000cd2:	4b0c      	ldr	r3, [pc, #48]	; (8000d04 <HAL_MspInit+0x44>)
 8000cd4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000cd6:	f003 0301 	and.w	r3, r3, #1
 8000cda:	607b      	str	r3, [r7, #4]
 8000cdc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cde:	4b09      	ldr	r3, [pc, #36]	; (8000d04 <HAL_MspInit+0x44>)
 8000ce0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ce2:	4a08      	ldr	r2, [pc, #32]	; (8000d04 <HAL_MspInit+0x44>)
 8000ce4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ce8:	6593      	str	r3, [r2, #88]	; 0x58
 8000cea:	4b06      	ldr	r3, [pc, #24]	; (8000d04 <HAL_MspInit+0x44>)
 8000cec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cf2:	603b      	str	r3, [r7, #0]
 8000cf4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cf6:	bf00      	nop
 8000cf8:	370c      	adds	r7, #12
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d00:	4770      	bx	lr
 8000d02:	bf00      	nop
 8000d04:	40021000 	.word	0x40021000

08000d08 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b0ae      	sub	sp, #184	; 0xb8
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d10:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000d14:	2200      	movs	r2, #0
 8000d16:	601a      	str	r2, [r3, #0]
 8000d18:	605a      	str	r2, [r3, #4]
 8000d1a:	609a      	str	r2, [r3, #8]
 8000d1c:	60da      	str	r2, [r3, #12]
 8000d1e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d20:	f107 0310 	add.w	r3, r7, #16
 8000d24:	2294      	movs	r2, #148	; 0x94
 8000d26:	2100      	movs	r1, #0
 8000d28:	4618      	mov	r0, r3
 8000d2a:	f007 fca3 	bl	8008674 <memset>
  if(hadc->Instance==ADC1)
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	4a2b      	ldr	r2, [pc, #172]	; (8000de0 <HAL_ADC_MspInit+0xd8>)
 8000d34:	4293      	cmp	r3, r2
 8000d36:	d14e      	bne.n	8000dd6 <HAL_ADC_MspInit+0xce>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000d38:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000d3c:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000d3e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000d42:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8000d46:	2301      	movs	r3, #1
 8000d48:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000d4a:	2301      	movs	r3, #1
 8000d4c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 8000d4e:	2310      	movs	r3, #16
 8000d50:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 8000d52:	2302      	movs	r3, #2
 8000d54:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000d56:	2302      	movs	r3, #2
 8000d58:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000d5a:	2302      	movs	r3, #2
 8000d5c:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8000d5e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000d62:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d64:	f107 0310 	add.w	r3, r7, #16
 8000d68:	4618      	mov	r0, r3
 8000d6a:	f002 ff0f 	bl	8003b8c <HAL_RCCEx_PeriphCLKConfig>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d001      	beq.n	8000d78 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 8000d74:	f7ff ff9e 	bl	8000cb4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000d78:	4b1a      	ldr	r3, [pc, #104]	; (8000de4 <HAL_ADC_MspInit+0xdc>)
 8000d7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d7c:	4a19      	ldr	r2, [pc, #100]	; (8000de4 <HAL_ADC_MspInit+0xdc>)
 8000d7e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000d82:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d84:	4b17      	ldr	r3, [pc, #92]	; (8000de4 <HAL_ADC_MspInit+0xdc>)
 8000d86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d88:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000d8c:	60fb      	str	r3, [r7, #12]
 8000d8e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d90:	4b14      	ldr	r3, [pc, #80]	; (8000de4 <HAL_ADC_MspInit+0xdc>)
 8000d92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d94:	4a13      	ldr	r2, [pc, #76]	; (8000de4 <HAL_ADC_MspInit+0xdc>)
 8000d96:	f043 0304 	orr.w	r3, r3, #4
 8000d9a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d9c:	4b11      	ldr	r3, [pc, #68]	; (8000de4 <HAL_ADC_MspInit+0xdc>)
 8000d9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000da0:	f003 0304 	and.w	r3, r3, #4
 8000da4:	60bb      	str	r3, [r7, #8]
 8000da6:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000da8:	2301      	movs	r3, #1
 8000daa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000dae:	230b      	movs	r3, #11
 8000db0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db4:	2300      	movs	r3, #0
 8000db6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000dba:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000dbe:	4619      	mov	r1, r3
 8000dc0:	4809      	ldr	r0, [pc, #36]	; (8000de8 <HAL_ADC_MspInit+0xe0>)
 8000dc2:	f001 fd11 	bl	80027e8 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 6, 0);
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	2106      	movs	r1, #6
 8000dca:	2012      	movs	r0, #18
 8000dcc:	f001 fce2 	bl	8002794 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 8000dd0:	2012      	movs	r0, #18
 8000dd2:	f001 fcfb 	bl	80027cc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000dd6:	bf00      	nop
 8000dd8:	37b8      	adds	r7, #184	; 0xb8
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bd80      	pop	{r7, pc}
 8000dde:	bf00      	nop
 8000de0:	50040000 	.word	0x50040000
 8000de4:	40021000 	.word	0x40021000
 8000de8:	48000800 	.word	0x48000800

08000dec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b0ae      	sub	sp, #184	; 0xb8
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000df4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000df8:	2200      	movs	r2, #0
 8000dfa:	601a      	str	r2, [r3, #0]
 8000dfc:	605a      	str	r2, [r3, #4]
 8000dfe:	609a      	str	r2, [r3, #8]
 8000e00:	60da      	str	r2, [r3, #12]
 8000e02:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e04:	f107 0310 	add.w	r3, r7, #16
 8000e08:	2294      	movs	r2, #148	; 0x94
 8000e0a:	2100      	movs	r1, #0
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	f007 fc31 	bl	8008674 <memset>
  if(huart->Instance==LPUART1)
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	4a22      	ldr	r2, [pc, #136]	; (8000ea0 <HAL_UART_MspInit+0xb4>)
 8000e18:	4293      	cmp	r3, r2
 8000e1a:	d13d      	bne.n	8000e98 <HAL_UART_MspInit+0xac>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000e1c:	2320      	movs	r3, #32
 8000e1e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000e20:	2300      	movs	r3, #0
 8000e22:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e24:	f107 0310 	add.w	r3, r7, #16
 8000e28:	4618      	mov	r0, r3
 8000e2a:	f002 feaf 	bl	8003b8c <HAL_RCCEx_PeriphCLKConfig>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d001      	beq.n	8000e38 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000e34:	f7ff ff3e 	bl	8000cb4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000e38:	4b1a      	ldr	r3, [pc, #104]	; (8000ea4 <HAL_UART_MspInit+0xb8>)
 8000e3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000e3c:	4a19      	ldr	r2, [pc, #100]	; (8000ea4 <HAL_UART_MspInit+0xb8>)
 8000e3e:	f043 0301 	orr.w	r3, r3, #1
 8000e42:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000e44:	4b17      	ldr	r3, [pc, #92]	; (8000ea4 <HAL_UART_MspInit+0xb8>)
 8000e46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000e48:	f003 0301 	and.w	r3, r3, #1
 8000e4c:	60fb      	str	r3, [r7, #12]
 8000e4e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000e50:	4b14      	ldr	r3, [pc, #80]	; (8000ea4 <HAL_UART_MspInit+0xb8>)
 8000e52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e54:	4a13      	ldr	r2, [pc, #76]	; (8000ea4 <HAL_UART_MspInit+0xb8>)
 8000e56:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e5a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e5c:	4b11      	ldr	r3, [pc, #68]	; (8000ea4 <HAL_UART_MspInit+0xb8>)
 8000e5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e64:	60bb      	str	r3, [r7, #8]
 8000e66:	68bb      	ldr	r3, [r7, #8]
    HAL_PWREx_EnableVddIO2();
 8000e68:	f001 ff76 	bl	8002d58 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_TX_Pin|STLINK_RX_Pin;
 8000e6c:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000e70:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e74:	2302      	movs	r3, #2
 8000e76:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e80:	2303      	movs	r3, #3
 8000e82:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8000e86:	2308      	movs	r3, #8
 8000e88:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000e8c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000e90:	4619      	mov	r1, r3
 8000e92:	4805      	ldr	r0, [pc, #20]	; (8000ea8 <HAL_UART_MspInit+0xbc>)
 8000e94:	f001 fca8 	bl	80027e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8000e98:	bf00      	nop
 8000e9a:	37b8      	adds	r7, #184	; 0xb8
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	bd80      	pop	{r7, pc}
 8000ea0:	40008000 	.word	0x40008000
 8000ea4:	40021000 	.word	0x40021000
 8000ea8:	48001800 	.word	0x48001800

08000eac <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b08c      	sub	sp, #48	; 0x30
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000eba:	4b2e      	ldr	r3, [pc, #184]	; (8000f74 <HAL_InitTick+0xc8>)
 8000ebc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ebe:	4a2d      	ldr	r2, [pc, #180]	; (8000f74 <HAL_InitTick+0xc8>)
 8000ec0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000ec4:	6613      	str	r3, [r2, #96]	; 0x60
 8000ec6:	4b2b      	ldr	r3, [pc, #172]	; (8000f74 <HAL_InitTick+0xc8>)
 8000ec8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000eca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000ece:	60bb      	str	r3, [r7, #8]
 8000ed0:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000ed2:	f107 020c 	add.w	r2, r7, #12
 8000ed6:	f107 0310 	add.w	r3, r7, #16
 8000eda:	4611      	mov	r1, r2
 8000edc:	4618      	mov	r0, r3
 8000ede:	f002 fd63 	bl	80039a8 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000ee2:	f002 fd4b 	bl	800397c <HAL_RCC_GetPCLK2Freq>
 8000ee6:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000ee8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000eea:	4a23      	ldr	r2, [pc, #140]	; (8000f78 <HAL_InitTick+0xcc>)
 8000eec:	fba2 2303 	umull	r2, r3, r2, r3
 8000ef0:	0c9b      	lsrs	r3, r3, #18
 8000ef2:	3b01      	subs	r3, #1
 8000ef4:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000ef6:	4b21      	ldr	r3, [pc, #132]	; (8000f7c <HAL_InitTick+0xd0>)
 8000ef8:	4a21      	ldr	r2, [pc, #132]	; (8000f80 <HAL_InitTick+0xd4>)
 8000efa:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000efc:	4b1f      	ldr	r3, [pc, #124]	; (8000f7c <HAL_InitTick+0xd0>)
 8000efe:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000f02:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000f04:	4a1d      	ldr	r2, [pc, #116]	; (8000f7c <HAL_InitTick+0xd0>)
 8000f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f08:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000f0a:	4b1c      	ldr	r3, [pc, #112]	; (8000f7c <HAL_InitTick+0xd0>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f10:	4b1a      	ldr	r3, [pc, #104]	; (8000f7c <HAL_InitTick+0xd0>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f16:	4b19      	ldr	r3, [pc, #100]	; (8000f7c <HAL_InitTick+0xd0>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000f1c:	4817      	ldr	r0, [pc, #92]	; (8000f7c <HAL_InitTick+0xd0>)
 8000f1e:	f003 fb4d 	bl	80045bc <HAL_TIM_Base_Init>
 8000f22:	4603      	mov	r3, r0
 8000f24:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8000f28:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d11b      	bne.n	8000f68 <HAL_InitTick+0xbc>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000f30:	4812      	ldr	r0, [pc, #72]	; (8000f7c <HAL_InitTick+0xd0>)
 8000f32:	f003 fba5 	bl	8004680 <HAL_TIM_Base_Start_IT>
 8000f36:	4603      	mov	r3, r0
 8000f38:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8000f3c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d111      	bne.n	8000f68 <HAL_InitTick+0xbc>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000f44:	2019      	movs	r0, #25
 8000f46:	f001 fc41 	bl	80027cc <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	2b0f      	cmp	r3, #15
 8000f4e:	d808      	bhi.n	8000f62 <HAL_InitTick+0xb6>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 8000f50:	2200      	movs	r2, #0
 8000f52:	6879      	ldr	r1, [r7, #4]
 8000f54:	2019      	movs	r0, #25
 8000f56:	f001 fc1d 	bl	8002794 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000f5a:	4a0a      	ldr	r2, [pc, #40]	; (8000f84 <HAL_InitTick+0xd8>)
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	6013      	str	r3, [r2, #0]
 8000f60:	e002      	b.n	8000f68 <HAL_InitTick+0xbc>
      }
      else
      {
        status = HAL_ERROR;
 8000f62:	2301      	movs	r3, #1
 8000f64:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000f68:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	3730      	adds	r7, #48	; 0x30
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bd80      	pop	{r7, pc}
 8000f74:	40021000 	.word	0x40021000
 8000f78:	431bde83 	.word	0x431bde83
 8000f7c:	2000018c 	.word	0x2000018c
 8000f80:	40012c00 	.word	0x40012c00
 8000f84:	20000004 	.word	0x20000004

08000f88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f8c:	e7fe      	b.n	8000f8c <NMI_Handler+0x4>

08000f8e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f8e:	b480      	push	{r7}
 8000f90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f92:	e7fe      	b.n	8000f92 <HardFault_Handler+0x4>

08000f94 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f94:	b480      	push	{r7}
 8000f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f98:	e7fe      	b.n	8000f98 <MemManage_Handler+0x4>

08000f9a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f9a:	b480      	push	{r7}
 8000f9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f9e:	e7fe      	b.n	8000f9e <BusFault_Handler+0x4>

08000fa0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fa4:	e7fe      	b.n	8000fa4 <UsageFault_Handler+0x4>

08000fa6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fa6:	b480      	push	{r7}
 8000fa8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000faa:	bf00      	nop
 8000fac:	46bd      	mov	sp, r7
 8000fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb2:	4770      	bx	lr

08000fb4 <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC1_IRQHandler(void)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000fb8:	4802      	ldr	r0, [pc, #8]	; (8000fc4 <ADC1_IRQHandler+0x10>)
 8000fba:	f000 fcb6 	bl	800192a <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 8000fbe:	bf00      	nop
 8000fc0:	bd80      	pop	{r7, pc}
 8000fc2:	bf00      	nop
 8000fc4:	20000080 	.word	0x20000080

08000fc8 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000fcc:	4802      	ldr	r0, [pc, #8]	; (8000fd8 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8000fce:	f003 fbc7 	bl	8004760 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000fd2:	bf00      	nop
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	2000018c 	.word	0x2000018c

08000fdc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000fe0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000fe4:	f001 fddc 	bl	8002ba0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000fe8:	bf00      	nop
 8000fea:	bd80      	pop	{r7, pc}

08000fec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b086      	sub	sp, #24
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ff4:	4a14      	ldr	r2, [pc, #80]	; (8001048 <_sbrk+0x5c>)
 8000ff6:	4b15      	ldr	r3, [pc, #84]	; (800104c <_sbrk+0x60>)
 8000ff8:	1ad3      	subs	r3, r2, r3
 8000ffa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ffc:	697b      	ldr	r3, [r7, #20]
 8000ffe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001000:	4b13      	ldr	r3, [pc, #76]	; (8001050 <_sbrk+0x64>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	2b00      	cmp	r3, #0
 8001006:	d102      	bne.n	800100e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001008:	4b11      	ldr	r3, [pc, #68]	; (8001050 <_sbrk+0x64>)
 800100a:	4a12      	ldr	r2, [pc, #72]	; (8001054 <_sbrk+0x68>)
 800100c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800100e:	4b10      	ldr	r3, [pc, #64]	; (8001050 <_sbrk+0x64>)
 8001010:	681a      	ldr	r2, [r3, #0]
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	4413      	add	r3, r2
 8001016:	693a      	ldr	r2, [r7, #16]
 8001018:	429a      	cmp	r2, r3
 800101a:	d207      	bcs.n	800102c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800101c:	f007 fb32 	bl	8008684 <__errno>
 8001020:	4603      	mov	r3, r0
 8001022:	220c      	movs	r2, #12
 8001024:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001026:	f04f 33ff 	mov.w	r3, #4294967295
 800102a:	e009      	b.n	8001040 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800102c:	4b08      	ldr	r3, [pc, #32]	; (8001050 <_sbrk+0x64>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001032:	4b07      	ldr	r3, [pc, #28]	; (8001050 <_sbrk+0x64>)
 8001034:	681a      	ldr	r2, [r3, #0]
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	4413      	add	r3, r2
 800103a:	4a05      	ldr	r2, [pc, #20]	; (8001050 <_sbrk+0x64>)
 800103c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800103e:	68fb      	ldr	r3, [r7, #12]
}
 8001040:	4618      	mov	r0, r3
 8001042:	3718      	adds	r7, #24
 8001044:	46bd      	mov	sp, r7
 8001046:	bd80      	pop	{r7, pc}
 8001048:	200a0000 	.word	0x200a0000
 800104c:	00000400 	.word	0x00000400
 8001050:	200001d8 	.word	0x200001d8
 8001054:	2001e490 	.word	0x2001e490

08001058 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001058:	b480      	push	{r7}
 800105a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800105c:	4b06      	ldr	r3, [pc, #24]	; (8001078 <SystemInit+0x20>)
 800105e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001062:	4a05      	ldr	r2, [pc, #20]	; (8001078 <SystemInit+0x20>)
 8001064:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001068:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 800106c:	bf00      	nop
 800106e:	46bd      	mov	sp, r7
 8001070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001074:	4770      	bx	lr
 8001076:	bf00      	nop
 8001078:	e000ed00 	.word	0xe000ed00

0800107c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800107c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80010b4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001080:	f7ff ffea 	bl	8001058 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001084:	480c      	ldr	r0, [pc, #48]	; (80010b8 <LoopForever+0x6>)
  ldr r1, =_edata
 8001086:	490d      	ldr	r1, [pc, #52]	; (80010bc <LoopForever+0xa>)
  ldr r2, =_sidata
 8001088:	4a0d      	ldr	r2, [pc, #52]	; (80010c0 <LoopForever+0xe>)
  movs r3, #0
 800108a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800108c:	e002      	b.n	8001094 <LoopCopyDataInit>

0800108e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800108e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001090:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001092:	3304      	adds	r3, #4

08001094 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001094:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001096:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001098:	d3f9      	bcc.n	800108e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800109a:	4a0a      	ldr	r2, [pc, #40]	; (80010c4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800109c:	4c0a      	ldr	r4, [pc, #40]	; (80010c8 <LoopForever+0x16>)
  movs r3, #0
 800109e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010a0:	e001      	b.n	80010a6 <LoopFillZerobss>

080010a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010a4:	3204      	adds	r2, #4

080010a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010a8:	d3fb      	bcc.n	80010a2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80010aa:	f007 faf1 	bl	8008690 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80010ae:	f7ff fb77 	bl	80007a0 <main>

080010b2 <LoopForever>:

LoopForever:
    b LoopForever
 80010b2:	e7fe      	b.n	80010b2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80010b4:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 80010b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010bc:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 80010c0:	08009094 	.word	0x08009094
  ldr r2, =_sbss
 80010c4:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 80010c8:	2001e48c 	.word	0x2001e48c

080010cc <CAN1_RX0_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80010cc:	e7fe      	b.n	80010cc <CAN1_RX0_IRQHandler>

080010ce <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010ce:	b580      	push	{r7, lr}
 80010d0:	b082      	sub	sp, #8
 80010d2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80010d4:	2300      	movs	r3, #0
 80010d6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010d8:	2003      	movs	r0, #3
 80010da:	f001 fb50 	bl	800277e <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80010de:	200f      	movs	r0, #15
 80010e0:	f7ff fee4 	bl	8000eac <HAL_InitTick>
 80010e4:	4603      	mov	r3, r0
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d002      	beq.n	80010f0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80010ea:	2301      	movs	r3, #1
 80010ec:	71fb      	strb	r3, [r7, #7]
 80010ee:	e001      	b.n	80010f4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80010f0:	f7ff fde6 	bl	8000cc0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80010f4:	79fb      	ldrb	r3, [r7, #7]
}
 80010f6:	4618      	mov	r0, r3
 80010f8:	3708      	adds	r7, #8
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}
	...

08001100 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001100:	b480      	push	{r7}
 8001102:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001104:	4b06      	ldr	r3, [pc, #24]	; (8001120 <HAL_IncTick+0x20>)
 8001106:	781b      	ldrb	r3, [r3, #0]
 8001108:	461a      	mov	r2, r3
 800110a:	4b06      	ldr	r3, [pc, #24]	; (8001124 <HAL_IncTick+0x24>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	4413      	add	r3, r2
 8001110:	4a04      	ldr	r2, [pc, #16]	; (8001124 <HAL_IncTick+0x24>)
 8001112:	6013      	str	r3, [r2, #0]
}
 8001114:	bf00      	nop
 8001116:	46bd      	mov	sp, r7
 8001118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111c:	4770      	bx	lr
 800111e:	bf00      	nop
 8001120:	20000008 	.word	0x20000008
 8001124:	200001dc 	.word	0x200001dc

08001128 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001128:	b480      	push	{r7}
 800112a:	af00      	add	r7, sp, #0
  return uwTick;
 800112c:	4b03      	ldr	r3, [pc, #12]	; (800113c <HAL_GetTick+0x14>)
 800112e:	681b      	ldr	r3, [r3, #0]
}
 8001130:	4618      	mov	r0, r3
 8001132:	46bd      	mov	sp, r7
 8001134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001138:	4770      	bx	lr
 800113a:	bf00      	nop
 800113c:	200001dc 	.word	0x200001dc

08001140 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001140:	b480      	push	{r7}
 8001142:	b083      	sub	sp, #12
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
 8001148:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	689b      	ldr	r3, [r3, #8]
 800114e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001152:	683b      	ldr	r3, [r7, #0]
 8001154:	431a      	orrs	r2, r3
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	609a      	str	r2, [r3, #8]
}
 800115a:	bf00      	nop
 800115c:	370c      	adds	r7, #12
 800115e:	46bd      	mov	sp, r7
 8001160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001164:	4770      	bx	lr

08001166 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001166:	b480      	push	{r7}
 8001168:	b083      	sub	sp, #12
 800116a:	af00      	add	r7, sp, #0
 800116c:	6078      	str	r0, [r7, #4]
 800116e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	689b      	ldr	r3, [r3, #8]
 8001174:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	431a      	orrs	r2, r3
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	609a      	str	r2, [r3, #8]
}
 8001180:	bf00      	nop
 8001182:	370c      	adds	r7, #12
 8001184:	46bd      	mov	sp, r7
 8001186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118a:	4770      	bx	lr

0800118c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800118c:	b480      	push	{r7}
 800118e:	b083      	sub	sp, #12
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	689b      	ldr	r3, [r3, #8]
 8001198:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800119c:	4618      	mov	r0, r3
 800119e:	370c      	adds	r7, #12
 80011a0:	46bd      	mov	sp, r7
 80011a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a6:	4770      	bx	lr

080011a8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80011a8:	b480      	push	{r7}
 80011aa:	b087      	sub	sp, #28
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	60f8      	str	r0, [r7, #12]
 80011b0:	60b9      	str	r1, [r7, #8]
 80011b2:	607a      	str	r2, [r7, #4]
 80011b4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	3360      	adds	r3, #96	; 0x60
 80011ba:	461a      	mov	r2, r3
 80011bc:	68bb      	ldr	r3, [r7, #8]
 80011be:	009b      	lsls	r3, r3, #2
 80011c0:	4413      	add	r3, r2
 80011c2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80011c4:	697b      	ldr	r3, [r7, #20]
 80011c6:	681a      	ldr	r2, [r3, #0]
 80011c8:	4b08      	ldr	r3, [pc, #32]	; (80011ec <LL_ADC_SetOffset+0x44>)
 80011ca:	4013      	ands	r3, r2
 80011cc:	687a      	ldr	r2, [r7, #4]
 80011ce:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80011d2:	683a      	ldr	r2, [r7, #0]
 80011d4:	430a      	orrs	r2, r1
 80011d6:	4313      	orrs	r3, r2
 80011d8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80011dc:	697b      	ldr	r3, [r7, #20]
 80011de:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80011e0:	bf00      	nop
 80011e2:	371c      	adds	r7, #28
 80011e4:	46bd      	mov	sp, r7
 80011e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ea:	4770      	bx	lr
 80011ec:	03fff000 	.word	0x03fff000

080011f0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80011f0:	b480      	push	{r7}
 80011f2:	b085      	sub	sp, #20
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
 80011f8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	3360      	adds	r3, #96	; 0x60
 80011fe:	461a      	mov	r2, r3
 8001200:	683b      	ldr	r3, [r7, #0]
 8001202:	009b      	lsls	r3, r3, #2
 8001204:	4413      	add	r3, r2
 8001206:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001210:	4618      	mov	r0, r3
 8001212:	3714      	adds	r7, #20
 8001214:	46bd      	mov	sp, r7
 8001216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121a:	4770      	bx	lr

0800121c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800121c:	b480      	push	{r7}
 800121e:	b087      	sub	sp, #28
 8001220:	af00      	add	r7, sp, #0
 8001222:	60f8      	str	r0, [r7, #12]
 8001224:	60b9      	str	r1, [r7, #8]
 8001226:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	3360      	adds	r3, #96	; 0x60
 800122c:	461a      	mov	r2, r3
 800122e:	68bb      	ldr	r3, [r7, #8]
 8001230:	009b      	lsls	r3, r3, #2
 8001232:	4413      	add	r3, r2
 8001234:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001236:	697b      	ldr	r3, [r7, #20]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	431a      	orrs	r2, r3
 8001242:	697b      	ldr	r3, [r7, #20]
 8001244:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001246:	bf00      	nop
 8001248:	371c      	adds	r7, #28
 800124a:	46bd      	mov	sp, r7
 800124c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001250:	4770      	bx	lr

08001252 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001252:	b480      	push	{r7}
 8001254:	b083      	sub	sp, #12
 8001256:	af00      	add	r7, sp, #0
 8001258:	6078      	str	r0, [r7, #4]
 800125a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	695b      	ldr	r3, [r3, #20]
 8001260:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	431a      	orrs	r2, r3
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	615a      	str	r2, [r3, #20]
}
 800126c:	bf00      	nop
 800126e:	370c      	adds	r7, #12
 8001270:	46bd      	mov	sp, r7
 8001272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001276:	4770      	bx	lr

08001278 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001278:	b480      	push	{r7}
 800127a:	b083      	sub	sp, #12
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	68db      	ldr	r3, [r3, #12]
 8001284:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001288:	2b00      	cmp	r3, #0
 800128a:	d101      	bne.n	8001290 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800128c:	2301      	movs	r3, #1
 800128e:	e000      	b.n	8001292 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001290:	2300      	movs	r3, #0
}
 8001292:	4618      	mov	r0, r3
 8001294:	370c      	adds	r7, #12
 8001296:	46bd      	mov	sp, r7
 8001298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129c:	4770      	bx	lr

0800129e <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800129e:	b480      	push	{r7}
 80012a0:	b087      	sub	sp, #28
 80012a2:	af00      	add	r7, sp, #0
 80012a4:	60f8      	str	r0, [r7, #12]
 80012a6:	60b9      	str	r1, [r7, #8]
 80012a8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	3330      	adds	r3, #48	; 0x30
 80012ae:	461a      	mov	r2, r3
 80012b0:	68bb      	ldr	r3, [r7, #8]
 80012b2:	0a1b      	lsrs	r3, r3, #8
 80012b4:	009b      	lsls	r3, r3, #2
 80012b6:	f003 030c 	and.w	r3, r3, #12
 80012ba:	4413      	add	r3, r2
 80012bc:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80012be:	697b      	ldr	r3, [r7, #20]
 80012c0:	681a      	ldr	r2, [r3, #0]
 80012c2:	68bb      	ldr	r3, [r7, #8]
 80012c4:	f003 031f 	and.w	r3, r3, #31
 80012c8:	211f      	movs	r1, #31
 80012ca:	fa01 f303 	lsl.w	r3, r1, r3
 80012ce:	43db      	mvns	r3, r3
 80012d0:	401a      	ands	r2, r3
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	0e9b      	lsrs	r3, r3, #26
 80012d6:	f003 011f 	and.w	r1, r3, #31
 80012da:	68bb      	ldr	r3, [r7, #8]
 80012dc:	f003 031f 	and.w	r3, r3, #31
 80012e0:	fa01 f303 	lsl.w	r3, r1, r3
 80012e4:	431a      	orrs	r2, r3
 80012e6:	697b      	ldr	r3, [r7, #20]
 80012e8:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80012ea:	bf00      	nop
 80012ec:	371c      	adds	r7, #28
 80012ee:	46bd      	mov	sp, r7
 80012f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f4:	4770      	bx	lr

080012f6 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80012f6:	b480      	push	{r7}
 80012f8:	b083      	sub	sp, #12
 80012fa:	af00      	add	r7, sp, #0
 80012fc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001302:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8001306:	2b00      	cmp	r3, #0
 8001308:	d101      	bne.n	800130e <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 800130a:	2301      	movs	r3, #1
 800130c:	e000      	b.n	8001310 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 800130e:	2300      	movs	r3, #0
}
 8001310:	4618      	mov	r0, r3
 8001312:	370c      	adds	r7, #12
 8001314:	46bd      	mov	sp, r7
 8001316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131a:	4770      	bx	lr

0800131c <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800131c:	b480      	push	{r7}
 800131e:	b087      	sub	sp, #28
 8001320:	af00      	add	r7, sp, #0
 8001322:	60f8      	str	r0, [r7, #12]
 8001324:	60b9      	str	r1, [r7, #8]
 8001326:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	3314      	adds	r3, #20
 800132c:	461a      	mov	r2, r3
 800132e:	68bb      	ldr	r3, [r7, #8]
 8001330:	0e5b      	lsrs	r3, r3, #25
 8001332:	009b      	lsls	r3, r3, #2
 8001334:	f003 0304 	and.w	r3, r3, #4
 8001338:	4413      	add	r3, r2
 800133a:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800133c:	697b      	ldr	r3, [r7, #20]
 800133e:	681a      	ldr	r2, [r3, #0]
 8001340:	68bb      	ldr	r3, [r7, #8]
 8001342:	0d1b      	lsrs	r3, r3, #20
 8001344:	f003 031f 	and.w	r3, r3, #31
 8001348:	2107      	movs	r1, #7
 800134a:	fa01 f303 	lsl.w	r3, r1, r3
 800134e:	43db      	mvns	r3, r3
 8001350:	401a      	ands	r2, r3
 8001352:	68bb      	ldr	r3, [r7, #8]
 8001354:	0d1b      	lsrs	r3, r3, #20
 8001356:	f003 031f 	and.w	r3, r3, #31
 800135a:	6879      	ldr	r1, [r7, #4]
 800135c:	fa01 f303 	lsl.w	r3, r1, r3
 8001360:	431a      	orrs	r2, r3
 8001362:	697b      	ldr	r3, [r7, #20]
 8001364:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001366:	bf00      	nop
 8001368:	371c      	adds	r7, #28
 800136a:	46bd      	mov	sp, r7
 800136c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001370:	4770      	bx	lr
	...

08001374 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001374:	b480      	push	{r7}
 8001376:	b085      	sub	sp, #20
 8001378:	af00      	add	r7, sp, #0
 800137a:	60f8      	str	r0, [r7, #12]
 800137c:	60b9      	str	r1, [r7, #8]
 800137e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001386:	68bb      	ldr	r3, [r7, #8]
 8001388:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800138c:	43db      	mvns	r3, r3
 800138e:	401a      	ands	r2, r3
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	f003 0318 	and.w	r3, r3, #24
 8001396:	4908      	ldr	r1, [pc, #32]	; (80013b8 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001398:	40d9      	lsrs	r1, r3
 800139a:	68bb      	ldr	r3, [r7, #8]
 800139c:	400b      	ands	r3, r1
 800139e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80013a2:	431a      	orrs	r2, r3
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80013aa:	bf00      	nop
 80013ac:	3714      	adds	r7, #20
 80013ae:	46bd      	mov	sp, r7
 80013b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b4:	4770      	bx	lr
 80013b6:	bf00      	nop
 80013b8:	0007ffff 	.word	0x0007ffff

080013bc <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80013bc:	b480      	push	{r7}
 80013be:	b083      	sub	sp, #12
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	689b      	ldr	r3, [r3, #8]
 80013c8:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80013cc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80013d0:	687a      	ldr	r2, [r7, #4]
 80013d2:	6093      	str	r3, [r2, #8]
}
 80013d4:	bf00      	nop
 80013d6:	370c      	adds	r7, #12
 80013d8:	46bd      	mov	sp, r7
 80013da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013de:	4770      	bx	lr

080013e0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80013e0:	b480      	push	{r7}
 80013e2:	b083      	sub	sp, #12
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	689b      	ldr	r3, [r3, #8]
 80013ec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80013f0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80013f4:	d101      	bne.n	80013fa <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80013f6:	2301      	movs	r3, #1
 80013f8:	e000      	b.n	80013fc <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80013fa:	2300      	movs	r3, #0
}
 80013fc:	4618      	mov	r0, r3
 80013fe:	370c      	adds	r7, #12
 8001400:	46bd      	mov	sp, r7
 8001402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001406:	4770      	bx	lr

08001408 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001408:	b480      	push	{r7}
 800140a:	b083      	sub	sp, #12
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	689b      	ldr	r3, [r3, #8]
 8001414:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001418:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800141c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001424:	bf00      	nop
 8001426:	370c      	adds	r7, #12
 8001428:	46bd      	mov	sp, r7
 800142a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142e:	4770      	bx	lr

08001430 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001430:	b480      	push	{r7}
 8001432:	b083      	sub	sp, #12
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	689b      	ldr	r3, [r3, #8]
 800143c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001440:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001444:	d101      	bne.n	800144a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001446:	2301      	movs	r3, #1
 8001448:	e000      	b.n	800144c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800144a:	2300      	movs	r3, #0
}
 800144c:	4618      	mov	r0, r3
 800144e:	370c      	adds	r7, #12
 8001450:	46bd      	mov	sp, r7
 8001452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001456:	4770      	bx	lr

08001458 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001458:	b480      	push	{r7}
 800145a:	b083      	sub	sp, #12
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	689b      	ldr	r3, [r3, #8]
 8001464:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001468:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800146c:	f043 0201 	orr.w	r2, r3, #1
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001474:	bf00      	nop
 8001476:	370c      	adds	r7, #12
 8001478:	46bd      	mov	sp, r7
 800147a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147e:	4770      	bx	lr

08001480 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001480:	b480      	push	{r7}
 8001482:	b083      	sub	sp, #12
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	689b      	ldr	r3, [r3, #8]
 800148c:	f003 0301 	and.w	r3, r3, #1
 8001490:	2b01      	cmp	r3, #1
 8001492:	d101      	bne.n	8001498 <LL_ADC_IsEnabled+0x18>
 8001494:	2301      	movs	r3, #1
 8001496:	e000      	b.n	800149a <LL_ADC_IsEnabled+0x1a>
 8001498:	2300      	movs	r3, #0
}
 800149a:	4618      	mov	r0, r3
 800149c:	370c      	adds	r7, #12
 800149e:	46bd      	mov	sp, r7
 80014a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a4:	4770      	bx	lr

080014a6 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80014a6:	b480      	push	{r7}
 80014a8:	b083      	sub	sp, #12
 80014aa:	af00      	add	r7, sp, #0
 80014ac:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	689b      	ldr	r3, [r3, #8]
 80014b2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80014b6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80014ba:	f043 0204 	orr.w	r2, r3, #4
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80014c2:	bf00      	nop
 80014c4:	370c      	adds	r7, #12
 80014c6:	46bd      	mov	sp, r7
 80014c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014cc:	4770      	bx	lr

080014ce <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80014ce:	b480      	push	{r7}
 80014d0:	b083      	sub	sp, #12
 80014d2:	af00      	add	r7, sp, #0
 80014d4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	689b      	ldr	r3, [r3, #8]
 80014da:	f003 0304 	and.w	r3, r3, #4
 80014de:	2b04      	cmp	r3, #4
 80014e0:	d101      	bne.n	80014e6 <LL_ADC_REG_IsConversionOngoing+0x18>
 80014e2:	2301      	movs	r3, #1
 80014e4:	e000      	b.n	80014e8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80014e6:	2300      	movs	r3, #0
}
 80014e8:	4618      	mov	r0, r3
 80014ea:	370c      	adds	r7, #12
 80014ec:	46bd      	mov	sp, r7
 80014ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f2:	4770      	bx	lr

080014f4 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80014f4:	b480      	push	{r7}
 80014f6:	b083      	sub	sp, #12
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	689b      	ldr	r3, [r3, #8]
 8001500:	f003 0308 	and.w	r3, r3, #8
 8001504:	2b08      	cmp	r3, #8
 8001506:	d101      	bne.n	800150c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001508:	2301      	movs	r3, #1
 800150a:	e000      	b.n	800150e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800150c:	2300      	movs	r3, #0
}
 800150e:	4618      	mov	r0, r3
 8001510:	370c      	adds	r7, #12
 8001512:	46bd      	mov	sp, r7
 8001514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001518:	4770      	bx	lr
	...

0800151c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b088      	sub	sp, #32
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001524:	2300      	movs	r3, #0
 8001526:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001528:	2300      	movs	r3, #0
 800152a:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	2b00      	cmp	r3, #0
 8001530:	d101      	bne.n	8001536 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001532:	2301      	movs	r3, #1
 8001534:	e129      	b.n	800178a <HAL_ADC_Init+0x26e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	691b      	ldr	r3, [r3, #16]
 800153a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001540:	2b00      	cmp	r3, #0
 8001542:	d109      	bne.n	8001558 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001544:	6878      	ldr	r0, [r7, #4]
 8001546:	f7ff fbdf 	bl	8000d08 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	2200      	movs	r2, #0
 800154e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	2200      	movs	r2, #0
 8001554:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	4618      	mov	r0, r3
 800155e:	f7ff ff3f 	bl	80013e0 <LL_ADC_IsDeepPowerDownEnabled>
 8001562:	4603      	mov	r3, r0
 8001564:	2b00      	cmp	r3, #0
 8001566:	d004      	beq.n	8001572 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	4618      	mov	r0, r3
 800156e:	f7ff ff25 	bl	80013bc <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	4618      	mov	r0, r3
 8001578:	f7ff ff5a 	bl	8001430 <LL_ADC_IsInternalRegulatorEnabled>
 800157c:	4603      	mov	r3, r0
 800157e:	2b00      	cmp	r3, #0
 8001580:	d115      	bne.n	80015ae <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	4618      	mov	r0, r3
 8001588:	f7ff ff3e 	bl	8001408 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800158c:	4b81      	ldr	r3, [pc, #516]	; (8001794 <HAL_ADC_Init+0x278>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	099b      	lsrs	r3, r3, #6
 8001592:	4a81      	ldr	r2, [pc, #516]	; (8001798 <HAL_ADC_Init+0x27c>)
 8001594:	fba2 2303 	umull	r2, r3, r2, r3
 8001598:	099b      	lsrs	r3, r3, #6
 800159a:	3301      	adds	r3, #1
 800159c:	005b      	lsls	r3, r3, #1
 800159e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80015a0:	e002      	b.n	80015a8 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	3b01      	subs	r3, #1
 80015a6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d1f9      	bne.n	80015a2 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	4618      	mov	r0, r3
 80015b4:	f7ff ff3c 	bl	8001430 <LL_ADC_IsInternalRegulatorEnabled>
 80015b8:	4603      	mov	r3, r0
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d10d      	bne.n	80015da <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015c2:	f043 0210 	orr.w	r2, r3, #16
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015ce:	f043 0201 	orr.w	r2, r3, #1
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80015d6:	2301      	movs	r3, #1
 80015d8:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	4618      	mov	r0, r3
 80015e0:	f7ff ff75 	bl	80014ce <LL_ADC_REG_IsConversionOngoing>
 80015e4:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015ea:	f003 0310 	and.w	r3, r3, #16
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	f040 80c2 	bne.w	8001778 <HAL_ADC_Init+0x25c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80015f4:	697b      	ldr	r3, [r7, #20]
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	f040 80be 	bne.w	8001778 <HAL_ADC_Init+0x25c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001600:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001604:	f043 0202 	orr.w	r2, r3, #2
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	4618      	mov	r0, r3
 8001612:	f7ff ff35 	bl	8001480 <LL_ADC_IsEnabled>
 8001616:	4603      	mov	r3, r0
 8001618:	2b00      	cmp	r3, #0
 800161a:	d10b      	bne.n	8001634 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800161c:	485f      	ldr	r0, [pc, #380]	; (800179c <HAL_ADC_Init+0x280>)
 800161e:	f7ff ff2f 	bl	8001480 <LL_ADC_IsEnabled>
 8001622:	4603      	mov	r3, r0
 8001624:	2b00      	cmp	r3, #0
 8001626:	d105      	bne.n	8001634 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	685b      	ldr	r3, [r3, #4]
 800162c:	4619      	mov	r1, r3
 800162e:	485c      	ldr	r0, [pc, #368]	; (80017a0 <HAL_ADC_Init+0x284>)
 8001630:	f7ff fd86 	bl	8001140 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	7e5b      	ldrb	r3, [r3, #25]
 8001638:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800163e:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001644:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800164a:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001652:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001654:	4313      	orrs	r3, r2
 8001656:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800165e:	2b01      	cmp	r3, #1
 8001660:	d106      	bne.n	8001670 <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001666:	3b01      	subs	r3, #1
 8001668:	045b      	lsls	r3, r3, #17
 800166a:	69ba      	ldr	r2, [r7, #24]
 800166c:	4313      	orrs	r3, r2
 800166e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001674:	2b00      	cmp	r3, #0
 8001676:	d009      	beq.n	800168c <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800167c:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001684:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001686:	69ba      	ldr	r2, [r7, #24]
 8001688:	4313      	orrs	r3, r2
 800168a:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	68da      	ldr	r2, [r3, #12]
 8001692:	4b44      	ldr	r3, [pc, #272]	; (80017a4 <HAL_ADC_Init+0x288>)
 8001694:	4013      	ands	r3, r2
 8001696:	687a      	ldr	r2, [r7, #4]
 8001698:	6812      	ldr	r2, [r2, #0]
 800169a:	69b9      	ldr	r1, [r7, #24]
 800169c:	430b      	orrs	r3, r1
 800169e:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	4618      	mov	r0, r3
 80016a6:	f7ff ff25 	bl	80014f4 <LL_ADC_INJ_IsConversionOngoing>
 80016aa:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80016ac:	697b      	ldr	r3, [r7, #20]
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d140      	bne.n	8001734 <HAL_ADC_Init+0x218>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80016b2:	693b      	ldr	r3, [r7, #16]
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d13d      	bne.n	8001734 <HAL_ADC_Init+0x218>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	7e1b      	ldrb	r3, [r3, #24]
 80016c0:	039b      	lsls	r3, r3, #14
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80016c2:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80016ca:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80016cc:	4313      	orrs	r3, r2
 80016ce:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	68db      	ldr	r3, [r3, #12]
 80016d6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80016da:	f023 0306 	bic.w	r3, r3, #6
 80016de:	687a      	ldr	r2, [r7, #4]
 80016e0:	6812      	ldr	r2, [r2, #0]
 80016e2:	69b9      	ldr	r1, [r7, #24]
 80016e4:	430b      	orrs	r3, r1
 80016e6:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80016ee:	2b01      	cmp	r3, #1
 80016f0:	d118      	bne.n	8001724 <HAL_ADC_Init+0x208>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	691b      	ldr	r3, [r3, #16]
 80016f8:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80016fc:	f023 0304 	bic.w	r3, r3, #4
 8001700:	687a      	ldr	r2, [r7, #4]
 8001702:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8001704:	687a      	ldr	r2, [r7, #4]
 8001706:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001708:	4311      	orrs	r1, r2
 800170a:	687a      	ldr	r2, [r7, #4]
 800170c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800170e:	4311      	orrs	r1, r2
 8001710:	687a      	ldr	r2, [r7, #4]
 8001712:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001714:	430a      	orrs	r2, r1
 8001716:	431a      	orrs	r2, r3
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	f042 0201 	orr.w	r2, r2, #1
 8001720:	611a      	str	r2, [r3, #16]
 8001722:	e007      	b.n	8001734 <HAL_ADC_Init+0x218>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	691a      	ldr	r2, [r3, #16]
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f022 0201 	bic.w	r2, r2, #1
 8001732:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	691b      	ldr	r3, [r3, #16]
 8001738:	2b01      	cmp	r3, #1
 800173a:	d10c      	bne.n	8001756 <HAL_ADC_Init+0x23a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001742:	f023 010f 	bic.w	r1, r3, #15
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	69db      	ldr	r3, [r3, #28]
 800174a:	1e5a      	subs	r2, r3, #1
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	430a      	orrs	r2, r1
 8001752:	631a      	str	r2, [r3, #48]	; 0x30
 8001754:	e007      	b.n	8001766 <HAL_ADC_Init+0x24a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f022 020f 	bic.w	r2, r2, #15
 8001764:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800176a:	f023 0303 	bic.w	r3, r3, #3
 800176e:	f043 0201 	orr.w	r2, r3, #1
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	659a      	str	r2, [r3, #88]	; 0x58
 8001776:	e007      	b.n	8001788 <HAL_ADC_Init+0x26c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800177c:	f043 0210 	orr.w	r2, r3, #16
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001784:	2301      	movs	r3, #1
 8001786:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001788:	7ffb      	ldrb	r3, [r7, #31]
}
 800178a:	4618      	mov	r0, r3
 800178c:	3720      	adds	r7, #32
 800178e:	46bd      	mov	sp, r7
 8001790:	bd80      	pop	{r7, pc}
 8001792:	bf00      	nop
 8001794:	20000000 	.word	0x20000000
 8001798:	053e2d63 	.word	0x053e2d63
 800179c:	50040000 	.word	0x50040000
 80017a0:	50040300 	.word	0x50040300
 80017a4:	fff0c007 	.word	0xfff0c007

080017a8 <HAL_ADC_Start_IT>:
  *          before calling HAL_ADC_Start_IT().
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b084      	sub	sp, #16
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	4618      	mov	r0, r3
 80017b6:	f7ff fe8a 	bl	80014ce <LL_ADC_REG_IsConversionOngoing>
 80017ba:	4603      	mov	r3, r0
 80017bc:	2b00      	cmp	r3, #0
 80017be:	f040 80a0 	bne.w	8001902 <HAL_ADC_Start_IT+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80017c8:	2b01      	cmp	r3, #1
 80017ca:	d101      	bne.n	80017d0 <HAL_ADC_Start_IT+0x28>
 80017cc:	2302      	movs	r3, #2
 80017ce:	e09b      	b.n	8001908 <HAL_ADC_Start_IT+0x160>
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	2201      	movs	r2, #1
 80017d4:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80017d8:	6878      	ldr	r0, [r7, #4]
 80017da:	f000 fe6b 	bl	80024b4 <ADC_Enable>
 80017de:	4603      	mov	r3, r0
 80017e0:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80017e2:	7bfb      	ldrb	r3, [r7, #15]
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	f040 8087 	bne.w	80018f8 <HAL_ADC_Start_IT+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017ee:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80017f2:	f023 0301 	bic.w	r3, r3, #1
 80017f6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	659a      	str	r2, [r3, #88]	; 0x58
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001802:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001806:	2b00      	cmp	r3, #0
 8001808:	d006      	beq.n	8001818 <HAL_ADC_Start_IT+0x70>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800180e:	f023 0206 	bic.w	r2, r3, #6
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	65da      	str	r2, [r3, #92]	; 0x5c
 8001816:	e002      	b.n	800181e <HAL_ADC_Start_IT+0x76>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	2200      	movs	r2, #0
 800181c:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	221c      	movs	r2, #28
 8001824:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	2200      	movs	r2, #0
 800182a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

      /* Disable all interruptions before enabling the desired ones */
      __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	685a      	ldr	r2, [r3, #4]
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f022 021c 	bic.w	r2, r2, #28
 800183c:	605a      	str	r2, [r3, #4]

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	695b      	ldr	r3, [r3, #20]
 8001842:	2b08      	cmp	r3, #8
 8001844:	d108      	bne.n	8001858 <HAL_ADC_Start_IT+0xb0>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	685a      	ldr	r2, [r3, #4]
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f042 0208 	orr.w	r2, r2, #8
 8001854:	605a      	str	r2, [r3, #4]
          break;
 8001856:	e008      	b.n	800186a <HAL_ADC_Start_IT+0xc2>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	685a      	ldr	r2, [r3, #4]
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f042 0204 	orr.w	r2, r2, #4
 8001866:	605a      	str	r2, [r3, #4]
          break;
 8001868:	bf00      	nop

      /* Enable ADC overrun interrupt */
      /* If hadc->Init.Overrun is set to ADC_OVR_DATA_PRESERVED, only then is
         ADC_IT_OVR enabled; otherwise data overwrite is considered as normal
         behavior and no CPU time is lost for a non-processed interruption */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800186e:	2b00      	cmp	r3, #0
 8001870:	d107      	bne.n	8001882 <HAL_ADC_Start_IT+0xda>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	685a      	ldr	r2, [r3, #4]
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f042 0210 	orr.w	r2, r2, #16
 8001880:	605a      	str	r2, [r3, #4]
          }
        }
      }
#else
      /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	68db      	ldr	r3, [r3, #12]
 8001888:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800188c:	2b00      	cmp	r3, #0
 800188e:	d02d      	beq.n	80018ec <HAL_ADC_Start_IT+0x144>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001894:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001898:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	659a      	str	r2, [r3, #88]	; 0x58

        /* Enable as well injected interruptions in case
         HAL_ADCEx_InjectedStart_IT() has not been called beforehand. This
         allows to start regular and injected conversions when JAUTO is
         set with a single call to HAL_ADC_Start_IT() */
        switch (hadc->Init.EOCSelection)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	695b      	ldr	r3, [r3, #20]
 80018a4:	2b08      	cmp	r3, #8
 80018a6:	d110      	bne.n	80018ca <HAL_ADC_Start_IT+0x122>
        {
          case ADC_EOC_SEQ_CONV:
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	685a      	ldr	r2, [r3, #4]
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f022 0220 	bic.w	r2, r2, #32
 80018b6:	605a      	str	r2, [r3, #4]
            __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	685a      	ldr	r2, [r3, #4]
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80018c6:	605a      	str	r2, [r3, #4]
            break;
 80018c8:	e010      	b.n	80018ec <HAL_ADC_Start_IT+0x144>
          /* case ADC_EOC_SINGLE_CONV */
          default:
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	685a      	ldr	r2, [r3, #4]
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80018d8:	605a      	str	r2, [r3, #4]
            __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	685a      	ldr	r2, [r3, #4]
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f042 0220 	orr.w	r2, r2, #32
 80018e8:	605a      	str	r2, [r3, #4]
            break;
 80018ea:	bf00      	nop
        }
      }

      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	4618      	mov	r0, r3
 80018f2:	f7ff fdd8 	bl	80014a6 <LL_ADC_REG_StartConversion>
 80018f6:	e006      	b.n	8001906 <HAL_ADC_Start_IT+0x15e>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	2200      	movs	r2, #0
 80018fc:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 8001900:	e001      	b.n	8001906 <HAL_ADC_Start_IT+0x15e>
    }

  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001902:	2302      	movs	r3, #2
 8001904:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return tmp_hal_status;
 8001906:	7bfb      	ldrb	r3, [r7, #15]
}
 8001908:	4618      	mov	r0, r3
 800190a:	3710      	adds	r7, #16
 800190c:	46bd      	mov	sp, r7
 800190e:	bd80      	pop	{r7, pc}

08001910 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8001910:	b480      	push	{r7}
 8001912:	b083      	sub	sp, #12
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800191e:	4618      	mov	r0, r3
 8001920:	370c      	adds	r7, #12
 8001922:	46bd      	mov	sp, r7
 8001924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001928:	4770      	bx	lr

0800192a <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 800192a:	b580      	push	{r7, lr}
 800192c:	b088      	sub	sp, #32
 800192e:	af00      	add	r7, sp, #0
 8001930:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8001932:	2300      	movs	r3, #0
 8001934:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_isr = hadc->Instance->ISR;
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_ier = hadc->Instance->IER;
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	685b      	ldr	r3, [r3, #4]
 8001944:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8001946:	69bb      	ldr	r3, [r7, #24]
 8001948:	f003 0302 	and.w	r3, r3, #2
 800194c:	2b00      	cmp	r3, #0
 800194e:	d017      	beq.n	8001980 <HAL_ADC_IRQHandler+0x56>
 8001950:	697b      	ldr	r3, [r7, #20]
 8001952:	f003 0302 	and.w	r3, r3, #2
 8001956:	2b00      	cmp	r3, #0
 8001958:	d012      	beq.n	8001980 <HAL_ADC_IRQHandler+0x56>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800195e:	f003 0310 	and.w	r3, r3, #16
 8001962:	2b00      	cmp	r3, #0
 8001964:	d105      	bne.n	8001972 <HAL_ADC_IRQHandler+0x48>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800196a:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	659a      	str	r2, [r3, #88]	; 0x58

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8001972:	6878      	ldr	r0, [r7, #4]
 8001974:	f000 fe4c 	bl	8002610 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	2202      	movs	r2, #2
 800197e:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001980:	69bb      	ldr	r3, [r7, #24]
 8001982:	f003 0304 	and.w	r3, r3, #4
 8001986:	2b00      	cmp	r3, #0
 8001988:	d004      	beq.n	8001994 <HAL_ADC_IRQHandler+0x6a>
 800198a:	697b      	ldr	r3, [r7, #20]
 800198c:	f003 0304 	and.w	r3, r3, #4
 8001990:	2b00      	cmp	r3, #0
 8001992:	d109      	bne.n	80019a8 <HAL_ADC_IRQHandler+0x7e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001994:	69bb      	ldr	r3, [r7, #24]
 8001996:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800199a:	2b00      	cmp	r3, #0
 800199c:	d05e      	beq.n	8001a5c <HAL_ADC_IRQHandler+0x132>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800199e:	697b      	ldr	r3, [r7, #20]
 80019a0:	f003 0308 	and.w	r3, r3, #8
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d059      	beq.n	8001a5c <HAL_ADC_IRQHandler+0x132>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019ac:	f003 0310 	and.w	r3, r3, #16
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d105      	bne.n	80019c0 <HAL_ADC_IRQHandler+0x96>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019b8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	4618      	mov	r0, r3
 80019c6:	f7ff fc57 	bl	8001278 <LL_ADC_REG_IsTriggerSourceSWStart>
 80019ca:	4603      	mov	r3, r0
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d03e      	beq.n	8001a4e <HAL_ADC_IRQHandler+0x124>
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
      }
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	68db      	ldr	r3, [r3, #12]
 80019d6:	613b      	str	r3, [r7, #16]
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 80019d8:	693b      	ldr	r3, [r7, #16]
 80019da:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d135      	bne.n	8001a4e <HAL_ADC_IRQHandler+0x124>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f003 0308 	and.w	r3, r3, #8
 80019ec:	2b08      	cmp	r3, #8
 80019ee:	d12e      	bne.n	8001a4e <HAL_ADC_IRQHandler+0x124>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	4618      	mov	r0, r3
 80019f6:	f7ff fd6a 	bl	80014ce <LL_ADC_REG_IsConversionOngoing>
 80019fa:	4603      	mov	r3, r0
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d11a      	bne.n	8001a36 <HAL_ADC_IRQHandler+0x10c>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	685a      	ldr	r2, [r3, #4]
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f022 020c 	bic.w	r2, r2, #12
 8001a0e:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a14:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	659a      	str	r2, [r3, #88]	; 0x58

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a20:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d112      	bne.n	8001a4e <HAL_ADC_IRQHandler+0x124>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a2c:	f043 0201 	orr.w	r2, r3, #1
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	659a      	str	r2, [r3, #88]	; 0x58
 8001a34:	e00b      	b.n	8001a4e <HAL_ADC_IRQHandler+0x124>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a3a:	f043 0210 	orr.w	r2, r3, #16
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a46:	f043 0201 	orr.w	r2, r3, #1
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	65da      	str	r2, [r3, #92]	; 0x5c
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001a4e:	6878      	ldr	r0, [r7, #4]
 8001a50:	f7fe fda4 	bl	800059c <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	220c      	movs	r2, #12
 8001a5a:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001a5c:	69bb      	ldr	r3, [r7, #24]
 8001a5e:	f003 0320 	and.w	r3, r3, #32
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d004      	beq.n	8001a70 <HAL_ADC_IRQHandler+0x146>
 8001a66:	697b      	ldr	r3, [r7, #20]
 8001a68:	f003 0320 	and.w	r3, r3, #32
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d109      	bne.n	8001a84 <HAL_ADC_IRQHandler+0x15a>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8001a70:	69bb      	ldr	r3, [r7, #24]
 8001a72:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d072      	beq.n	8001b60 <HAL_ADC_IRQHandler+0x236>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8001a7a:	697b      	ldr	r3, [r7, #20]
 8001a7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d06d      	beq.n	8001b60 <HAL_ADC_IRQHandler+0x236>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a88:	f003 0310 	and.w	r3, r3, #16
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d105      	bne.n	8001a9c <HAL_ADC_IRQHandler+0x172>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a94:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	f7ff fc28 	bl	80012f6 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8001aa6:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	4618      	mov	r0, r3
 8001aae:	f7ff fbe3 	bl	8001278 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001ab2:	60b8      	str	r0, [r7, #8]
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
    }
#else
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	68db      	ldr	r3, [r3, #12]
 8001aba:	613b      	str	r3, [r7, #16]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d047      	beq.n	8001b52 <HAL_ADC_IRQHandler+0x228>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8001ac2:	693b      	ldr	r3, [r7, #16]
 8001ac4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d007      	beq.n	8001adc <HAL_ADC_IRQHandler+0x1b2>
 8001acc:	68bb      	ldr	r3, [r7, #8]
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d03f      	beq.n	8001b52 <HAL_ADC_IRQHandler+0x228>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8001ad2:	693b      	ldr	r3, [r7, #16]
 8001ad4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d13a      	bne.n	8001b52 <HAL_ADC_IRQHandler+0x228>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ae6:	2b40      	cmp	r3, #64	; 0x40
 8001ae8:	d133      	bne.n	8001b52 <HAL_ADC_IRQHandler+0x228>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8001aea:	693b      	ldr	r3, [r7, #16]
 8001aec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d12e      	bne.n	8001b52 <HAL_ADC_IRQHandler+0x228>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	4618      	mov	r0, r3
 8001afa:	f7ff fcfb 	bl	80014f4 <LL_ADC_INJ_IsConversionOngoing>
 8001afe:	4603      	mov	r3, r0
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d11a      	bne.n	8001b3a <HAL_ADC_IRQHandler+0x210>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	685a      	ldr	r2, [r3, #4]
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001b12:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b18:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	659a      	str	r2, [r3, #88]	; 0x58

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d112      	bne.n	8001b52 <HAL_ADC_IRQHandler+0x228>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b30:	f043 0201 	orr.w	r2, r3, #1
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	659a      	str	r2, [r3, #88]	; 0x58
 8001b38:	e00b      	b.n	8001b52 <HAL_ADC_IRQHandler+0x228>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b3e:	f043 0210 	orr.w	r2, r3, #16
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	659a      	str	r2, [r3, #88]	; 0x58

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b4a:	f043 0201 	orr.w	r2, r3, #1
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	65da      	str	r2, [r3, #92]	; 0x5c
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001b52:	6878      	ldr	r0, [r7, #4]
 8001b54:	f000 fd34 	bl	80025c0 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	2260      	movs	r2, #96	; 0x60
 8001b5e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8001b60:	69bb      	ldr	r3, [r7, #24]
 8001b62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d011      	beq.n	8001b8e <HAL_ADC_IRQHandler+0x264>
 8001b6a:	697b      	ldr	r3, [r7, #20]
 8001b6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d00c      	beq.n	8001b8e <HAL_ADC_IRQHandler+0x264>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b78:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001b80:	6878      	ldr	r0, [r7, #4]
 8001b82:	f000 f886 	bl	8001c92 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	2280      	movs	r2, #128	; 0x80
 8001b8c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8001b8e:	69bb      	ldr	r3, [r7, #24]
 8001b90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d012      	beq.n	8001bbe <HAL_ADC_IRQHandler+0x294>
 8001b98:	697b      	ldr	r3, [r7, #20]
 8001b9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d00d      	beq.n	8001bbe <HAL_ADC_IRQHandler+0x294>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ba6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8001bae:	6878      	ldr	r0, [r7, #4]
 8001bb0:	f000 fd1a 	bl	80025e8 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001bbc:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8001bbe:	69bb      	ldr	r3, [r7, #24]
 8001bc0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d012      	beq.n	8001bee <HAL_ADC_IRQHandler+0x2c4>
 8001bc8:	697b      	ldr	r3, [r7, #20]
 8001bca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d00d      	beq.n	8001bee <HAL_ADC_IRQHandler+0x2c4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bd6:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8001bde:	6878      	ldr	r0, [r7, #4]
 8001be0:	f000 fd0c 	bl	80025fc <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001bec:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8001bee:	69bb      	ldr	r3, [r7, #24]
 8001bf0:	f003 0310 	and.w	r3, r3, #16
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d02a      	beq.n	8001c4e <HAL_ADC_IRQHandler+0x324>
 8001bf8:	697b      	ldr	r3, [r7, #20]
 8001bfa:	f003 0310 	and.w	r3, r3, #16
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d025      	beq.n	8001c4e <HAL_ADC_IRQHandler+0x324>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d102      	bne.n	8001c10 <HAL_ADC_IRQHandler+0x2e6>
    {
      overrun_error = 1UL;
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	61fb      	str	r3, [r7, #28]
 8001c0e:	e008      	b.n	8001c22 <HAL_ADC_IRQHandler+0x2f8>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	68db      	ldr	r3, [r3, #12]
 8001c16:	f003 0301 	and.w	r3, r3, #1
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d001      	beq.n	8001c22 <HAL_ADC_IRQHandler+0x2f8>
        {
          overrun_error = 1UL;
 8001c1e:	2301      	movs	r3, #1
 8001c20:	61fb      	str	r3, [r7, #28]
        }
      }
    }

    if (overrun_error == 1UL)
 8001c22:	69fb      	ldr	r3, [r7, #28]
 8001c24:	2b01      	cmp	r3, #1
 8001c26:	d10e      	bne.n	8001c46 <HAL_ADC_IRQHandler+0x31c>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c2c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c38:	f043 0202 	orr.w	r2, r3, #2
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	65da      	str	r2, [r3, #92]	; 0x5c
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001c40:	6878      	ldr	r0, [r7, #4]
 8001c42:	f000 f830 	bl	8001ca6 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	2210      	movs	r2, #16
 8001c4c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8001c4e:	69bb      	ldr	r3, [r7, #24]
 8001c50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d018      	beq.n	8001c8a <HAL_ADC_IRQHandler+0x360>
 8001c58:	697b      	ldr	r3, [r7, #20]
 8001c5a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d013      	beq.n	8001c8a <HAL_ADC_IRQHandler+0x360>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c66:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c72:	f043 0208 	orr.w	r2, r3, #8
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001c82:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8001c84:	6878      	ldr	r0, [r7, #4]
 8001c86:	f000 fca5 	bl	80025d4 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8001c8a:	bf00      	nop
 8001c8c:	3720      	adds	r7, #32
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd80      	pop	{r7, pc}

08001c92 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8001c92:	b480      	push	{r7}
 8001c94:	b083      	sub	sp, #12
 8001c96:	af00      	add	r7, sp, #0
 8001c98:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8001c9a:	bf00      	nop
 8001c9c:	370c      	adds	r7, #12
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca4:	4770      	bx	lr

08001ca6 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001ca6:	b480      	push	{r7}
 8001ca8:	b083      	sub	sp, #12
 8001caa:	af00      	add	r7, sp, #0
 8001cac:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001cae:	bf00      	nop
 8001cb0:	370c      	adds	r7, #12
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb8:	4770      	bx	lr
	...

08001cbc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b0b6      	sub	sp, #216	; 0xd8
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
 8001cc4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001cd6:	2b01      	cmp	r3, #1
 8001cd8:	d101      	bne.n	8001cde <HAL_ADC_ConfigChannel+0x22>
 8001cda:	2302      	movs	r3, #2
 8001cdc:	e3d5      	b.n	800248a <HAL_ADC_ConfigChannel+0x7ce>
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	2201      	movs	r2, #1
 8001ce2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	4618      	mov	r0, r3
 8001cec:	f7ff fbef 	bl	80014ce <LL_ADC_REG_IsConversionOngoing>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	f040 83ba 	bne.w	800246c <HAL_ADC_ConfigChannel+0x7b0>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	685b      	ldr	r3, [r3, #4]
 8001cfc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	685b      	ldr	r3, [r3, #4]
 8001d04:	2b05      	cmp	r3, #5
 8001d06:	d824      	bhi.n	8001d52 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	685b      	ldr	r3, [r3, #4]
 8001d0c:	3b02      	subs	r3, #2
 8001d0e:	2b03      	cmp	r3, #3
 8001d10:	d81b      	bhi.n	8001d4a <HAL_ADC_ConfigChannel+0x8e>
 8001d12:	a201      	add	r2, pc, #4	; (adr r2, 8001d18 <HAL_ADC_ConfigChannel+0x5c>)
 8001d14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d18:	08001d29 	.word	0x08001d29
 8001d1c:	08001d31 	.word	0x08001d31
 8001d20:	08001d39 	.word	0x08001d39
 8001d24:	08001d41 	.word	0x08001d41
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8001d28:	230c      	movs	r3, #12
 8001d2a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8001d2e:	e010      	b.n	8001d52 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8001d30:	2312      	movs	r3, #18
 8001d32:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8001d36:	e00c      	b.n	8001d52 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8001d38:	2318      	movs	r3, #24
 8001d3a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8001d3e:	e008      	b.n	8001d52 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8001d40:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001d44:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8001d48:	e003      	b.n	8001d52 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8001d4a:	2306      	movs	r3, #6
 8001d4c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8001d50:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	6818      	ldr	r0, [r3, #0]
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	461a      	mov	r2, r3
 8001d5c:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8001d60:	f7ff fa9d 	bl	800129e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	4618      	mov	r0, r3
 8001d6a:	f7ff fbb0 	bl	80014ce <LL_ADC_REG_IsConversionOngoing>
 8001d6e:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	4618      	mov	r0, r3
 8001d78:	f7ff fbbc 	bl	80014f4 <LL_ADC_INJ_IsConversionOngoing>
 8001d7c:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001d80:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	f040 81bf 	bne.w	8002108 <HAL_ADC_ConfigChannel+0x44c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001d8a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	f040 81ba 	bne.w	8002108 <HAL_ADC_ConfigChannel+0x44c>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	689b      	ldr	r3, [r3, #8]
 8001d98:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001d9c:	d10f      	bne.n	8001dbe <HAL_ADC_ConfigChannel+0x102>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	6818      	ldr	r0, [r3, #0]
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	2200      	movs	r2, #0
 8001da8:	4619      	mov	r1, r3
 8001daa:	f7ff fab7 	bl	800131c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8001db6:	4618      	mov	r0, r3
 8001db8:	f7ff fa4b 	bl	8001252 <LL_ADC_SetSamplingTimeCommonConfig>
 8001dbc:	e00e      	b.n	8001ddc <HAL_ADC_ConfigChannel+0x120>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	6818      	ldr	r0, [r3, #0]
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	6819      	ldr	r1, [r3, #0]
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	689b      	ldr	r3, [r3, #8]
 8001dca:	461a      	mov	r2, r3
 8001dcc:	f7ff faa6 	bl	800131c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	2100      	movs	r1, #0
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	f7ff fa3b 	bl	8001252 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	695a      	ldr	r2, [r3, #20]
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	68db      	ldr	r3, [r3, #12]
 8001de6:	08db      	lsrs	r3, r3, #3
 8001de8:	f003 0303 	and.w	r3, r3, #3
 8001dec:	005b      	lsls	r3, r3, #1
 8001dee:	fa02 f303 	lsl.w	r3, r2, r3
 8001df2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	691b      	ldr	r3, [r3, #16]
 8001dfa:	2b04      	cmp	r3, #4
 8001dfc:	d00a      	beq.n	8001e14 <HAL_ADC_ConfigChannel+0x158>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	6818      	ldr	r0, [r3, #0]
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	6919      	ldr	r1, [r3, #16]
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	681a      	ldr	r2, [r3, #0]
 8001e0a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001e0e:	f7ff f9cb 	bl	80011a8 <LL_ADC_SetOffset>
 8001e12:	e179      	b.n	8002108 <HAL_ADC_ConfigChannel+0x44c>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	2100      	movs	r1, #0
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	f7ff f9e8 	bl	80011f0 <LL_ADC_GetOffsetChannel>
 8001e20:	4603      	mov	r3, r0
 8001e22:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d10a      	bne.n	8001e40 <HAL_ADC_ConfigChannel+0x184>
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	2100      	movs	r1, #0
 8001e30:	4618      	mov	r0, r3
 8001e32:	f7ff f9dd 	bl	80011f0 <LL_ADC_GetOffsetChannel>
 8001e36:	4603      	mov	r3, r0
 8001e38:	0e9b      	lsrs	r3, r3, #26
 8001e3a:	f003 021f 	and.w	r2, r3, #31
 8001e3e:	e01e      	b.n	8001e7e <HAL_ADC_ConfigChannel+0x1c2>
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	2100      	movs	r1, #0
 8001e46:	4618      	mov	r0, r3
 8001e48:	f7ff f9d2 	bl	80011f0 <LL_ADC_GetOffsetChannel>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e52:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001e56:	fa93 f3a3 	rbit	r3, r3
 8001e5a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001e5e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001e62:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001e66:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d101      	bne.n	8001e72 <HAL_ADC_ConfigChannel+0x1b6>
  {
    return 32U;
 8001e6e:	2320      	movs	r3, #32
 8001e70:	e004      	b.n	8001e7c <HAL_ADC_ConfigChannel+0x1c0>
  }
  return __builtin_clz(value);
 8001e72:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001e76:	fab3 f383 	clz	r3, r3
 8001e7a:	b2db      	uxtb	r3, r3
 8001e7c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d105      	bne.n	8001e96 <HAL_ADC_ConfigChannel+0x1da>
 8001e8a:	683b      	ldr	r3, [r7, #0]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	0e9b      	lsrs	r3, r3, #26
 8001e90:	f003 031f 	and.w	r3, r3, #31
 8001e94:	e018      	b.n	8001ec8 <HAL_ADC_ConfigChannel+0x20c>
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e9e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001ea2:	fa93 f3a3 	rbit	r3, r3
 8001ea6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 8001eaa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001eae:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 8001eb2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d101      	bne.n	8001ebe <HAL_ADC_ConfigChannel+0x202>
    return 32U;
 8001eba:	2320      	movs	r3, #32
 8001ebc:	e004      	b.n	8001ec8 <HAL_ADC_ConfigChannel+0x20c>
  return __builtin_clz(value);
 8001ebe:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001ec2:	fab3 f383 	clz	r3, r3
 8001ec6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001ec8:	429a      	cmp	r2, r3
 8001eca:	d106      	bne.n	8001eda <HAL_ADC_ConfigChannel+0x21e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	2100      	movs	r1, #0
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	f7ff f9a1 	bl	800121c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	2101      	movs	r1, #1
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	f7ff f985 	bl	80011f0 <LL_ADC_GetOffsetChannel>
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d10a      	bne.n	8001f06 <HAL_ADC_ConfigChannel+0x24a>
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	2101      	movs	r1, #1
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	f7ff f97a 	bl	80011f0 <LL_ADC_GetOffsetChannel>
 8001efc:	4603      	mov	r3, r0
 8001efe:	0e9b      	lsrs	r3, r3, #26
 8001f00:	f003 021f 	and.w	r2, r3, #31
 8001f04:	e01e      	b.n	8001f44 <HAL_ADC_ConfigChannel+0x288>
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	2101      	movs	r1, #1
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	f7ff f96f 	bl	80011f0 <LL_ADC_GetOffsetChannel>
 8001f12:	4603      	mov	r3, r0
 8001f14:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f18:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001f1c:	fa93 f3a3 	rbit	r3, r3
 8001f20:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 8001f24:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001f28:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 8001f2c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d101      	bne.n	8001f38 <HAL_ADC_ConfigChannel+0x27c>
    return 32U;
 8001f34:	2320      	movs	r3, #32
 8001f36:	e004      	b.n	8001f42 <HAL_ADC_ConfigChannel+0x286>
  return __builtin_clz(value);
 8001f38:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001f3c:	fab3 f383 	clz	r3, r3
 8001f40:	b2db      	uxtb	r3, r3
 8001f42:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d105      	bne.n	8001f5c <HAL_ADC_ConfigChannel+0x2a0>
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	0e9b      	lsrs	r3, r3, #26
 8001f56:	f003 031f 	and.w	r3, r3, #31
 8001f5a:	e018      	b.n	8001f8e <HAL_ADC_ConfigChannel+0x2d2>
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f64:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001f68:	fa93 f3a3 	rbit	r3, r3
 8001f6c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 8001f70:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001f74:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 8001f78:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d101      	bne.n	8001f84 <HAL_ADC_ConfigChannel+0x2c8>
    return 32U;
 8001f80:	2320      	movs	r3, #32
 8001f82:	e004      	b.n	8001f8e <HAL_ADC_ConfigChannel+0x2d2>
  return __builtin_clz(value);
 8001f84:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001f88:	fab3 f383 	clz	r3, r3
 8001f8c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001f8e:	429a      	cmp	r2, r3
 8001f90:	d106      	bne.n	8001fa0 <HAL_ADC_ConfigChannel+0x2e4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	2200      	movs	r2, #0
 8001f98:	2101      	movs	r1, #1
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	f7ff f93e 	bl	800121c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	2102      	movs	r1, #2
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	f7ff f922 	bl	80011f0 <LL_ADC_GetOffsetChannel>
 8001fac:	4603      	mov	r3, r0
 8001fae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d10a      	bne.n	8001fcc <HAL_ADC_ConfigChannel+0x310>
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	2102      	movs	r1, #2
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	f7ff f917 	bl	80011f0 <LL_ADC_GetOffsetChannel>
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	0e9b      	lsrs	r3, r3, #26
 8001fc6:	f003 021f 	and.w	r2, r3, #31
 8001fca:	e01e      	b.n	800200a <HAL_ADC_ConfigChannel+0x34e>
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	2102      	movs	r1, #2
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	f7ff f90c 	bl	80011f0 <LL_ADC_GetOffsetChannel>
 8001fd8:	4603      	mov	r3, r0
 8001fda:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fde:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001fe2:	fa93 f3a3 	rbit	r3, r3
 8001fe6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 8001fea:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001fee:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 8001ff2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d101      	bne.n	8001ffe <HAL_ADC_ConfigChannel+0x342>
    return 32U;
 8001ffa:	2320      	movs	r3, #32
 8001ffc:	e004      	b.n	8002008 <HAL_ADC_ConfigChannel+0x34c>
  return __builtin_clz(value);
 8001ffe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002002:	fab3 f383 	clz	r3, r3
 8002006:	b2db      	uxtb	r3, r3
 8002008:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002012:	2b00      	cmp	r3, #0
 8002014:	d105      	bne.n	8002022 <HAL_ADC_ConfigChannel+0x366>
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	0e9b      	lsrs	r3, r3, #26
 800201c:	f003 031f 	and.w	r3, r3, #31
 8002020:	e014      	b.n	800204c <HAL_ADC_ConfigChannel+0x390>
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002028:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800202a:	fa93 f3a3 	rbit	r3, r3
 800202e:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 8002030:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002032:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 8002036:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800203a:	2b00      	cmp	r3, #0
 800203c:	d101      	bne.n	8002042 <HAL_ADC_ConfigChannel+0x386>
    return 32U;
 800203e:	2320      	movs	r3, #32
 8002040:	e004      	b.n	800204c <HAL_ADC_ConfigChannel+0x390>
  return __builtin_clz(value);
 8002042:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002046:	fab3 f383 	clz	r3, r3
 800204a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800204c:	429a      	cmp	r2, r3
 800204e:	d106      	bne.n	800205e <HAL_ADC_ConfigChannel+0x3a2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	2200      	movs	r2, #0
 8002056:	2102      	movs	r1, #2
 8002058:	4618      	mov	r0, r3
 800205a:	f7ff f8df 	bl	800121c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	2103      	movs	r1, #3
 8002064:	4618      	mov	r0, r3
 8002066:	f7ff f8c3 	bl	80011f0 <LL_ADC_GetOffsetChannel>
 800206a:	4603      	mov	r3, r0
 800206c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002070:	2b00      	cmp	r3, #0
 8002072:	d10a      	bne.n	800208a <HAL_ADC_ConfigChannel+0x3ce>
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	2103      	movs	r1, #3
 800207a:	4618      	mov	r0, r3
 800207c:	f7ff f8b8 	bl	80011f0 <LL_ADC_GetOffsetChannel>
 8002080:	4603      	mov	r3, r0
 8002082:	0e9b      	lsrs	r3, r3, #26
 8002084:	f003 021f 	and.w	r2, r3, #31
 8002088:	e017      	b.n	80020ba <HAL_ADC_ConfigChannel+0x3fe>
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	2103      	movs	r1, #3
 8002090:	4618      	mov	r0, r3
 8002092:	f7ff f8ad 	bl	80011f0 <LL_ADC_GetOffsetChannel>
 8002096:	4603      	mov	r3, r0
 8002098:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800209a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800209c:	fa93 f3a3 	rbit	r3, r3
 80020a0:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80020a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80020a4:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 80020a6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d101      	bne.n	80020b0 <HAL_ADC_ConfigChannel+0x3f4>
    return 32U;
 80020ac:	2320      	movs	r3, #32
 80020ae:	e003      	b.n	80020b8 <HAL_ADC_ConfigChannel+0x3fc>
  return __builtin_clz(value);
 80020b0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80020b2:	fab3 f383 	clz	r3, r3
 80020b6:	b2db      	uxtb	r3, r3
 80020b8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d105      	bne.n	80020d2 <HAL_ADC_ConfigChannel+0x416>
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	0e9b      	lsrs	r3, r3, #26
 80020cc:	f003 031f 	and.w	r3, r3, #31
 80020d0:	e011      	b.n	80020f6 <HAL_ADC_ConfigChannel+0x43a>
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020d8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80020da:	fa93 f3a3 	rbit	r3, r3
 80020de:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 80020e0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80020e2:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 80020e4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d101      	bne.n	80020ee <HAL_ADC_ConfigChannel+0x432>
    return 32U;
 80020ea:	2320      	movs	r3, #32
 80020ec:	e003      	b.n	80020f6 <HAL_ADC_ConfigChannel+0x43a>
  return __builtin_clz(value);
 80020ee:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80020f0:	fab3 f383 	clz	r3, r3
 80020f4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80020f6:	429a      	cmp	r2, r3
 80020f8:	d106      	bne.n	8002108 <HAL_ADC_ConfigChannel+0x44c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	2200      	movs	r2, #0
 8002100:	2103      	movs	r1, #3
 8002102:	4618      	mov	r0, r3
 8002104:	f7ff f88a 	bl	800121c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	4618      	mov	r0, r3
 800210e:	f7ff f9b7 	bl	8001480 <LL_ADC_IsEnabled>
 8002112:	4603      	mov	r3, r0
 8002114:	2b00      	cmp	r3, #0
 8002116:	f040 813f 	bne.w	8002398 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6818      	ldr	r0, [r3, #0]
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	6819      	ldr	r1, [r3, #0]
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	68db      	ldr	r3, [r3, #12]
 8002126:	461a      	mov	r2, r3
 8002128:	f7ff f924 	bl	8001374 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	68db      	ldr	r3, [r3, #12]
 8002130:	4a8e      	ldr	r2, [pc, #568]	; (800236c <HAL_ADC_ConfigChannel+0x6b0>)
 8002132:	4293      	cmp	r3, r2
 8002134:	f040 8130 	bne.w	8002398 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002144:	2b00      	cmp	r3, #0
 8002146:	d10b      	bne.n	8002160 <HAL_ADC_ConfigChannel+0x4a4>
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	0e9b      	lsrs	r3, r3, #26
 800214e:	3301      	adds	r3, #1
 8002150:	f003 031f 	and.w	r3, r3, #31
 8002154:	2b09      	cmp	r3, #9
 8002156:	bf94      	ite	ls
 8002158:	2301      	movls	r3, #1
 800215a:	2300      	movhi	r3, #0
 800215c:	b2db      	uxtb	r3, r3
 800215e:	e019      	b.n	8002194 <HAL_ADC_ConfigChannel+0x4d8>
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002166:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002168:	fa93 f3a3 	rbit	r3, r3
 800216c:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 800216e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002170:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8002172:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002174:	2b00      	cmp	r3, #0
 8002176:	d101      	bne.n	800217c <HAL_ADC_ConfigChannel+0x4c0>
    return 32U;
 8002178:	2320      	movs	r3, #32
 800217a:	e003      	b.n	8002184 <HAL_ADC_ConfigChannel+0x4c8>
  return __builtin_clz(value);
 800217c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800217e:	fab3 f383 	clz	r3, r3
 8002182:	b2db      	uxtb	r3, r3
 8002184:	3301      	adds	r3, #1
 8002186:	f003 031f 	and.w	r3, r3, #31
 800218a:	2b09      	cmp	r3, #9
 800218c:	bf94      	ite	ls
 800218e:	2301      	movls	r3, #1
 8002190:	2300      	movhi	r3, #0
 8002192:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002194:	2b00      	cmp	r3, #0
 8002196:	d079      	beq.n	800228c <HAL_ADC_ConfigChannel+0x5d0>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d107      	bne.n	80021b4 <HAL_ADC_ConfigChannel+0x4f8>
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	0e9b      	lsrs	r3, r3, #26
 80021aa:	3301      	adds	r3, #1
 80021ac:	069b      	lsls	r3, r3, #26
 80021ae:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80021b2:	e015      	b.n	80021e0 <HAL_ADC_ConfigChannel+0x524>
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80021bc:	fa93 f3a3 	rbit	r3, r3
 80021c0:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 80021c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80021c4:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 80021c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d101      	bne.n	80021d0 <HAL_ADC_ConfigChannel+0x514>
    return 32U;
 80021cc:	2320      	movs	r3, #32
 80021ce:	e003      	b.n	80021d8 <HAL_ADC_ConfigChannel+0x51c>
  return __builtin_clz(value);
 80021d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80021d2:	fab3 f383 	clz	r3, r3
 80021d6:	b2db      	uxtb	r3, r3
 80021d8:	3301      	adds	r3, #1
 80021da:	069b      	lsls	r3, r3, #26
 80021dc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d109      	bne.n	8002200 <HAL_ADC_ConfigChannel+0x544>
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	0e9b      	lsrs	r3, r3, #26
 80021f2:	3301      	adds	r3, #1
 80021f4:	f003 031f 	and.w	r3, r3, #31
 80021f8:	2101      	movs	r1, #1
 80021fa:	fa01 f303 	lsl.w	r3, r1, r3
 80021fe:	e017      	b.n	8002230 <HAL_ADC_ConfigChannel+0x574>
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002206:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002208:	fa93 f3a3 	rbit	r3, r3
 800220c:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 800220e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002210:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8002212:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002214:	2b00      	cmp	r3, #0
 8002216:	d101      	bne.n	800221c <HAL_ADC_ConfigChannel+0x560>
    return 32U;
 8002218:	2320      	movs	r3, #32
 800221a:	e003      	b.n	8002224 <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 800221c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800221e:	fab3 f383 	clz	r3, r3
 8002222:	b2db      	uxtb	r3, r3
 8002224:	3301      	adds	r3, #1
 8002226:	f003 031f 	and.w	r3, r3, #31
 800222a:	2101      	movs	r1, #1
 800222c:	fa01 f303 	lsl.w	r3, r1, r3
 8002230:	ea42 0103 	orr.w	r1, r2, r3
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800223c:	2b00      	cmp	r3, #0
 800223e:	d10a      	bne.n	8002256 <HAL_ADC_ConfigChannel+0x59a>
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	0e9b      	lsrs	r3, r3, #26
 8002246:	3301      	adds	r3, #1
 8002248:	f003 021f 	and.w	r2, r3, #31
 800224c:	4613      	mov	r3, r2
 800224e:	005b      	lsls	r3, r3, #1
 8002250:	4413      	add	r3, r2
 8002252:	051b      	lsls	r3, r3, #20
 8002254:	e018      	b.n	8002288 <HAL_ADC_ConfigChannel+0x5cc>
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800225c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800225e:	fa93 f3a3 	rbit	r3, r3
 8002262:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8002264:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002266:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8002268:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800226a:	2b00      	cmp	r3, #0
 800226c:	d101      	bne.n	8002272 <HAL_ADC_ConfigChannel+0x5b6>
    return 32U;
 800226e:	2320      	movs	r3, #32
 8002270:	e003      	b.n	800227a <HAL_ADC_ConfigChannel+0x5be>
  return __builtin_clz(value);
 8002272:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002274:	fab3 f383 	clz	r3, r3
 8002278:	b2db      	uxtb	r3, r3
 800227a:	3301      	adds	r3, #1
 800227c:	f003 021f 	and.w	r2, r3, #31
 8002280:	4613      	mov	r3, r2
 8002282:	005b      	lsls	r3, r3, #1
 8002284:	4413      	add	r3, r2
 8002286:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002288:	430b      	orrs	r3, r1
 800228a:	e080      	b.n	800238e <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002294:	2b00      	cmp	r3, #0
 8002296:	d107      	bne.n	80022a8 <HAL_ADC_ConfigChannel+0x5ec>
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	0e9b      	lsrs	r3, r3, #26
 800229e:	3301      	adds	r3, #1
 80022a0:	069b      	lsls	r3, r3, #26
 80022a2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80022a6:	e015      	b.n	80022d4 <HAL_ADC_ConfigChannel+0x618>
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022b0:	fa93 f3a3 	rbit	r3, r3
 80022b4:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80022b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 80022ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d101      	bne.n	80022c4 <HAL_ADC_ConfigChannel+0x608>
    return 32U;
 80022c0:	2320      	movs	r3, #32
 80022c2:	e003      	b.n	80022cc <HAL_ADC_ConfigChannel+0x610>
  return __builtin_clz(value);
 80022c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022c6:	fab3 f383 	clz	r3, r3
 80022ca:	b2db      	uxtb	r3, r3
 80022cc:	3301      	adds	r3, #1
 80022ce:	069b      	lsls	r3, r3, #26
 80022d0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d109      	bne.n	80022f4 <HAL_ADC_ConfigChannel+0x638>
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	0e9b      	lsrs	r3, r3, #26
 80022e6:	3301      	adds	r3, #1
 80022e8:	f003 031f 	and.w	r3, r3, #31
 80022ec:	2101      	movs	r1, #1
 80022ee:	fa01 f303 	lsl.w	r3, r1, r3
 80022f2:	e017      	b.n	8002324 <HAL_ADC_ConfigChannel+0x668>
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022fa:	69fb      	ldr	r3, [r7, #28]
 80022fc:	fa93 f3a3 	rbit	r3, r3
 8002300:	61bb      	str	r3, [r7, #24]
  return result;
 8002302:	69bb      	ldr	r3, [r7, #24]
 8002304:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8002306:	6a3b      	ldr	r3, [r7, #32]
 8002308:	2b00      	cmp	r3, #0
 800230a:	d101      	bne.n	8002310 <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 800230c:	2320      	movs	r3, #32
 800230e:	e003      	b.n	8002318 <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 8002310:	6a3b      	ldr	r3, [r7, #32]
 8002312:	fab3 f383 	clz	r3, r3
 8002316:	b2db      	uxtb	r3, r3
 8002318:	3301      	adds	r3, #1
 800231a:	f003 031f 	and.w	r3, r3, #31
 800231e:	2101      	movs	r1, #1
 8002320:	fa01 f303 	lsl.w	r3, r1, r3
 8002324:	ea42 0103 	orr.w	r1, r2, r3
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002330:	2b00      	cmp	r3, #0
 8002332:	d10d      	bne.n	8002350 <HAL_ADC_ConfigChannel+0x694>
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	0e9b      	lsrs	r3, r3, #26
 800233a:	3301      	adds	r3, #1
 800233c:	f003 021f 	and.w	r2, r3, #31
 8002340:	4613      	mov	r3, r2
 8002342:	005b      	lsls	r3, r3, #1
 8002344:	4413      	add	r3, r2
 8002346:	3b1e      	subs	r3, #30
 8002348:	051b      	lsls	r3, r3, #20
 800234a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800234e:	e01d      	b.n	800238c <HAL_ADC_ConfigChannel+0x6d0>
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002356:	693b      	ldr	r3, [r7, #16]
 8002358:	fa93 f3a3 	rbit	r3, r3
 800235c:	60fb      	str	r3, [r7, #12]
  return result;
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002362:	697b      	ldr	r3, [r7, #20]
 8002364:	2b00      	cmp	r3, #0
 8002366:	d103      	bne.n	8002370 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 8002368:	2320      	movs	r3, #32
 800236a:	e005      	b.n	8002378 <HAL_ADC_ConfigChannel+0x6bc>
 800236c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002370:	697b      	ldr	r3, [r7, #20]
 8002372:	fab3 f383 	clz	r3, r3
 8002376:	b2db      	uxtb	r3, r3
 8002378:	3301      	adds	r3, #1
 800237a:	f003 021f 	and.w	r2, r3, #31
 800237e:	4613      	mov	r3, r2
 8002380:	005b      	lsls	r3, r3, #1
 8002382:	4413      	add	r3, r2
 8002384:	3b1e      	subs	r3, #30
 8002386:	051b      	lsls	r3, r3, #20
 8002388:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800238c:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800238e:	683a      	ldr	r2, [r7, #0]
 8002390:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002392:	4619      	mov	r1, r3
 8002394:	f7fe ffc2 	bl	800131c <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	681a      	ldr	r2, [r3, #0]
 800239c:	4b3d      	ldr	r3, [pc, #244]	; (8002494 <HAL_ADC_ConfigChannel+0x7d8>)
 800239e:	4013      	ands	r3, r2
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d06c      	beq.n	800247e <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80023a4:	483c      	ldr	r0, [pc, #240]	; (8002498 <HAL_ADC_ConfigChannel+0x7dc>)
 80023a6:	f7fe fef1 	bl	800118c <LL_ADC_GetCommonPathInternalCh>
 80023aa:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	4a3a      	ldr	r2, [pc, #232]	; (800249c <HAL_ADC_ConfigChannel+0x7e0>)
 80023b4:	4293      	cmp	r3, r2
 80023b6:	d127      	bne.n	8002408 <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80023b8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80023bc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d121      	bne.n	8002408 <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	4a35      	ldr	r2, [pc, #212]	; (80024a0 <HAL_ADC_ConfigChannel+0x7e4>)
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d157      	bne.n	800247e <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80023ce:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80023d2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80023d6:	4619      	mov	r1, r3
 80023d8:	482f      	ldr	r0, [pc, #188]	; (8002498 <HAL_ADC_ConfigChannel+0x7dc>)
 80023da:	f7fe fec4 	bl	8001166 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80023de:	4b31      	ldr	r3, [pc, #196]	; (80024a4 <HAL_ADC_ConfigChannel+0x7e8>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	099b      	lsrs	r3, r3, #6
 80023e4:	4a30      	ldr	r2, [pc, #192]	; (80024a8 <HAL_ADC_ConfigChannel+0x7ec>)
 80023e6:	fba2 2303 	umull	r2, r3, r2, r3
 80023ea:	099b      	lsrs	r3, r3, #6
 80023ec:	1c5a      	adds	r2, r3, #1
 80023ee:	4613      	mov	r3, r2
 80023f0:	005b      	lsls	r3, r3, #1
 80023f2:	4413      	add	r3, r2
 80023f4:	009b      	lsls	r3, r3, #2
 80023f6:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80023f8:	e002      	b.n	8002400 <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 80023fa:	68bb      	ldr	r3, [r7, #8]
 80023fc:	3b01      	subs	r3, #1
 80023fe:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002400:	68bb      	ldr	r3, [r7, #8]
 8002402:	2b00      	cmp	r3, #0
 8002404:	d1f9      	bne.n	80023fa <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002406:	e03a      	b.n	800247e <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4a27      	ldr	r2, [pc, #156]	; (80024ac <HAL_ADC_ConfigChannel+0x7f0>)
 800240e:	4293      	cmp	r3, r2
 8002410:	d113      	bne.n	800243a <HAL_ADC_ConfigChannel+0x77e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002412:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002416:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800241a:	2b00      	cmp	r3, #0
 800241c:	d10d      	bne.n	800243a <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	4a1f      	ldr	r2, [pc, #124]	; (80024a0 <HAL_ADC_ConfigChannel+0x7e4>)
 8002424:	4293      	cmp	r3, r2
 8002426:	d12a      	bne.n	800247e <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002428:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800242c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002430:	4619      	mov	r1, r3
 8002432:	4819      	ldr	r0, [pc, #100]	; (8002498 <HAL_ADC_ConfigChannel+0x7dc>)
 8002434:	f7fe fe97 	bl	8001166 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002438:	e021      	b.n	800247e <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	4a1c      	ldr	r2, [pc, #112]	; (80024b0 <HAL_ADC_ConfigChannel+0x7f4>)
 8002440:	4293      	cmp	r3, r2
 8002442:	d11c      	bne.n	800247e <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002444:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002448:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800244c:	2b00      	cmp	r3, #0
 800244e:	d116      	bne.n	800247e <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	4a12      	ldr	r2, [pc, #72]	; (80024a0 <HAL_ADC_ConfigChannel+0x7e4>)
 8002456:	4293      	cmp	r3, r2
 8002458:	d111      	bne.n	800247e <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800245a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800245e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002462:	4619      	mov	r1, r3
 8002464:	480c      	ldr	r0, [pc, #48]	; (8002498 <HAL_ADC_ConfigChannel+0x7dc>)
 8002466:	f7fe fe7e 	bl	8001166 <LL_ADC_SetCommonPathInternalCh>
 800246a:	e008      	b.n	800247e <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002470:	f043 0220 	orr.w	r2, r3, #32
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002478:	2301      	movs	r3, #1
 800247a:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	2200      	movs	r2, #0
 8002482:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8002486:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800248a:	4618      	mov	r0, r3
 800248c:	37d8      	adds	r7, #216	; 0xd8
 800248e:	46bd      	mov	sp, r7
 8002490:	bd80      	pop	{r7, pc}
 8002492:	bf00      	nop
 8002494:	80080000 	.word	0x80080000
 8002498:	50040300 	.word	0x50040300
 800249c:	c7520000 	.word	0xc7520000
 80024a0:	50040000 	.word	0x50040000
 80024a4:	20000000 	.word	0x20000000
 80024a8:	053e2d63 	.word	0x053e2d63
 80024ac:	cb840000 	.word	0xcb840000
 80024b0:	80000001 	.word	0x80000001

080024b4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b084      	sub	sp, #16
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80024bc:	2300      	movs	r3, #0
 80024be:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	4618      	mov	r0, r3
 80024c6:	f7fe ffdb 	bl	8001480 <LL_ADC_IsEnabled>
 80024ca:	4603      	mov	r3, r0
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d169      	bne.n	80025a4 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	689a      	ldr	r2, [r3, #8]
 80024d6:	4b36      	ldr	r3, [pc, #216]	; (80025b0 <ADC_Enable+0xfc>)
 80024d8:	4013      	ands	r3, r2
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d00d      	beq.n	80024fa <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024e2:	f043 0210 	orr.w	r2, r3, #16
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024ee:	f043 0201 	orr.w	r2, r3, #1
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 80024f6:	2301      	movs	r3, #1
 80024f8:	e055      	b.n	80025a6 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	4618      	mov	r0, r3
 8002500:	f7fe ffaa 	bl	8001458 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002504:	482b      	ldr	r0, [pc, #172]	; (80025b4 <ADC_Enable+0x100>)
 8002506:	f7fe fe41 	bl	800118c <LL_ADC_GetCommonPathInternalCh>
 800250a:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 800250c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002510:	2b00      	cmp	r3, #0
 8002512:	d013      	beq.n	800253c <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002514:	4b28      	ldr	r3, [pc, #160]	; (80025b8 <ADC_Enable+0x104>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	099b      	lsrs	r3, r3, #6
 800251a:	4a28      	ldr	r2, [pc, #160]	; (80025bc <ADC_Enable+0x108>)
 800251c:	fba2 2303 	umull	r2, r3, r2, r3
 8002520:	099b      	lsrs	r3, r3, #6
 8002522:	1c5a      	adds	r2, r3, #1
 8002524:	4613      	mov	r3, r2
 8002526:	005b      	lsls	r3, r3, #1
 8002528:	4413      	add	r3, r2
 800252a:	009b      	lsls	r3, r3, #2
 800252c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800252e:	e002      	b.n	8002536 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8002530:	68bb      	ldr	r3, [r7, #8]
 8002532:	3b01      	subs	r3, #1
 8002534:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002536:	68bb      	ldr	r3, [r7, #8]
 8002538:	2b00      	cmp	r3, #0
 800253a:	d1f9      	bne.n	8002530 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800253c:	f7fe fdf4 	bl	8001128 <HAL_GetTick>
 8002540:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002542:	e028      	b.n	8002596 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	4618      	mov	r0, r3
 800254a:	f7fe ff99 	bl	8001480 <LL_ADC_IsEnabled>
 800254e:	4603      	mov	r3, r0
 8002550:	2b00      	cmp	r3, #0
 8002552:	d104      	bne.n	800255e <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	4618      	mov	r0, r3
 800255a:	f7fe ff7d 	bl	8001458 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800255e:	f7fe fde3 	bl	8001128 <HAL_GetTick>
 8002562:	4602      	mov	r2, r0
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	1ad3      	subs	r3, r2, r3
 8002568:	2b02      	cmp	r3, #2
 800256a:	d914      	bls.n	8002596 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f003 0301 	and.w	r3, r3, #1
 8002576:	2b01      	cmp	r3, #1
 8002578:	d00d      	beq.n	8002596 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800257e:	f043 0210 	orr.w	r2, r3, #16
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800258a:	f043 0201 	orr.w	r2, r3, #1
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8002592:	2301      	movs	r3, #1
 8002594:	e007      	b.n	80025a6 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f003 0301 	and.w	r3, r3, #1
 80025a0:	2b01      	cmp	r3, #1
 80025a2:	d1cf      	bne.n	8002544 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80025a4:	2300      	movs	r3, #0
}
 80025a6:	4618      	mov	r0, r3
 80025a8:	3710      	adds	r7, #16
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bd80      	pop	{r7, pc}
 80025ae:	bf00      	nop
 80025b0:	8000003f 	.word	0x8000003f
 80025b4:	50040300 	.word	0x50040300
 80025b8:	20000000 	.word	0x20000000
 80025bc:	053e2d63 	.word	0x053e2d63

080025c0 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80025c0:	b480      	push	{r7}
 80025c2:	b083      	sub	sp, #12
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 80025c8:	bf00      	nop
 80025ca:	370c      	adds	r7, #12
 80025cc:	46bd      	mov	sp, r7
 80025ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d2:	4770      	bx	lr

080025d4 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 80025d4:	b480      	push	{r7}
 80025d6:	b083      	sub	sp, #12
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 80025dc:	bf00      	nop
 80025de:	370c      	adds	r7, #12
 80025e0:	46bd      	mov	sp, r7
 80025e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e6:	4770      	bx	lr

080025e8 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 80025e8:	b480      	push	{r7}
 80025ea:	b083      	sub	sp, #12
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 80025f0:	bf00      	nop
 80025f2:	370c      	adds	r7, #12
 80025f4:	46bd      	mov	sp, r7
 80025f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fa:	4770      	bx	lr

080025fc <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 80025fc:	b480      	push	{r7}
 80025fe:	b083      	sub	sp, #12
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8002604:	bf00      	nop
 8002606:	370c      	adds	r7, #12
 8002608:	46bd      	mov	sp, r7
 800260a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260e:	4770      	bx	lr

08002610 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8002610:	b480      	push	{r7}
 8002612:	b083      	sub	sp, #12
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8002618:	bf00      	nop
 800261a:	370c      	adds	r7, #12
 800261c:	46bd      	mov	sp, r7
 800261e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002622:	4770      	bx	lr

08002624 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002624:	b480      	push	{r7}
 8002626:	b085      	sub	sp, #20
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	f003 0307 	and.w	r3, r3, #7
 8002632:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002634:	4b0c      	ldr	r3, [pc, #48]	; (8002668 <__NVIC_SetPriorityGrouping+0x44>)
 8002636:	68db      	ldr	r3, [r3, #12]
 8002638:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800263a:	68ba      	ldr	r2, [r7, #8]
 800263c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002640:	4013      	ands	r3, r2
 8002642:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002648:	68bb      	ldr	r3, [r7, #8]
 800264a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800264c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002650:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002654:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002656:	4a04      	ldr	r2, [pc, #16]	; (8002668 <__NVIC_SetPriorityGrouping+0x44>)
 8002658:	68bb      	ldr	r3, [r7, #8]
 800265a:	60d3      	str	r3, [r2, #12]
}
 800265c:	bf00      	nop
 800265e:	3714      	adds	r7, #20
 8002660:	46bd      	mov	sp, r7
 8002662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002666:	4770      	bx	lr
 8002668:	e000ed00 	.word	0xe000ed00

0800266c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800266c:	b480      	push	{r7}
 800266e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002670:	4b04      	ldr	r3, [pc, #16]	; (8002684 <__NVIC_GetPriorityGrouping+0x18>)
 8002672:	68db      	ldr	r3, [r3, #12]
 8002674:	0a1b      	lsrs	r3, r3, #8
 8002676:	f003 0307 	and.w	r3, r3, #7
}
 800267a:	4618      	mov	r0, r3
 800267c:	46bd      	mov	sp, r7
 800267e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002682:	4770      	bx	lr
 8002684:	e000ed00 	.word	0xe000ed00

08002688 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002688:	b480      	push	{r7}
 800268a:	b083      	sub	sp, #12
 800268c:	af00      	add	r7, sp, #0
 800268e:	4603      	mov	r3, r0
 8002690:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002692:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002696:	2b00      	cmp	r3, #0
 8002698:	db0b      	blt.n	80026b2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800269a:	79fb      	ldrb	r3, [r7, #7]
 800269c:	f003 021f 	and.w	r2, r3, #31
 80026a0:	4907      	ldr	r1, [pc, #28]	; (80026c0 <__NVIC_EnableIRQ+0x38>)
 80026a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026a6:	095b      	lsrs	r3, r3, #5
 80026a8:	2001      	movs	r0, #1
 80026aa:	fa00 f202 	lsl.w	r2, r0, r2
 80026ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80026b2:	bf00      	nop
 80026b4:	370c      	adds	r7, #12
 80026b6:	46bd      	mov	sp, r7
 80026b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026bc:	4770      	bx	lr
 80026be:	bf00      	nop
 80026c0:	e000e100 	.word	0xe000e100

080026c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80026c4:	b480      	push	{r7}
 80026c6:	b083      	sub	sp, #12
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	4603      	mov	r3, r0
 80026cc:	6039      	str	r1, [r7, #0]
 80026ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	db0a      	blt.n	80026ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	b2da      	uxtb	r2, r3
 80026dc:	490c      	ldr	r1, [pc, #48]	; (8002710 <__NVIC_SetPriority+0x4c>)
 80026de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026e2:	0112      	lsls	r2, r2, #4
 80026e4:	b2d2      	uxtb	r2, r2
 80026e6:	440b      	add	r3, r1
 80026e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80026ec:	e00a      	b.n	8002704 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	b2da      	uxtb	r2, r3
 80026f2:	4908      	ldr	r1, [pc, #32]	; (8002714 <__NVIC_SetPriority+0x50>)
 80026f4:	79fb      	ldrb	r3, [r7, #7]
 80026f6:	f003 030f 	and.w	r3, r3, #15
 80026fa:	3b04      	subs	r3, #4
 80026fc:	0112      	lsls	r2, r2, #4
 80026fe:	b2d2      	uxtb	r2, r2
 8002700:	440b      	add	r3, r1
 8002702:	761a      	strb	r2, [r3, #24]
}
 8002704:	bf00      	nop
 8002706:	370c      	adds	r7, #12
 8002708:	46bd      	mov	sp, r7
 800270a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270e:	4770      	bx	lr
 8002710:	e000e100 	.word	0xe000e100
 8002714:	e000ed00 	.word	0xe000ed00

08002718 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002718:	b480      	push	{r7}
 800271a:	b089      	sub	sp, #36	; 0x24
 800271c:	af00      	add	r7, sp, #0
 800271e:	60f8      	str	r0, [r7, #12]
 8002720:	60b9      	str	r1, [r7, #8]
 8002722:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	f003 0307 	and.w	r3, r3, #7
 800272a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800272c:	69fb      	ldr	r3, [r7, #28]
 800272e:	f1c3 0307 	rsb	r3, r3, #7
 8002732:	2b04      	cmp	r3, #4
 8002734:	bf28      	it	cs
 8002736:	2304      	movcs	r3, #4
 8002738:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800273a:	69fb      	ldr	r3, [r7, #28]
 800273c:	3304      	adds	r3, #4
 800273e:	2b06      	cmp	r3, #6
 8002740:	d902      	bls.n	8002748 <NVIC_EncodePriority+0x30>
 8002742:	69fb      	ldr	r3, [r7, #28]
 8002744:	3b03      	subs	r3, #3
 8002746:	e000      	b.n	800274a <NVIC_EncodePriority+0x32>
 8002748:	2300      	movs	r3, #0
 800274a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800274c:	f04f 32ff 	mov.w	r2, #4294967295
 8002750:	69bb      	ldr	r3, [r7, #24]
 8002752:	fa02 f303 	lsl.w	r3, r2, r3
 8002756:	43da      	mvns	r2, r3
 8002758:	68bb      	ldr	r3, [r7, #8]
 800275a:	401a      	ands	r2, r3
 800275c:	697b      	ldr	r3, [r7, #20]
 800275e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002760:	f04f 31ff 	mov.w	r1, #4294967295
 8002764:	697b      	ldr	r3, [r7, #20]
 8002766:	fa01 f303 	lsl.w	r3, r1, r3
 800276a:	43d9      	mvns	r1, r3
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002770:	4313      	orrs	r3, r2
         );
}
 8002772:	4618      	mov	r0, r3
 8002774:	3724      	adds	r7, #36	; 0x24
 8002776:	46bd      	mov	sp, r7
 8002778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277c:	4770      	bx	lr

0800277e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800277e:	b580      	push	{r7, lr}
 8002780:	b082      	sub	sp, #8
 8002782:	af00      	add	r7, sp, #0
 8002784:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002786:	6878      	ldr	r0, [r7, #4]
 8002788:	f7ff ff4c 	bl	8002624 <__NVIC_SetPriorityGrouping>
}
 800278c:	bf00      	nop
 800278e:	3708      	adds	r7, #8
 8002790:	46bd      	mov	sp, r7
 8002792:	bd80      	pop	{r7, pc}

08002794 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b086      	sub	sp, #24
 8002798:	af00      	add	r7, sp, #0
 800279a:	4603      	mov	r3, r0
 800279c:	60b9      	str	r1, [r7, #8]
 800279e:	607a      	str	r2, [r7, #4]
 80027a0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80027a2:	2300      	movs	r3, #0
 80027a4:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80027a6:	f7ff ff61 	bl	800266c <__NVIC_GetPriorityGrouping>
 80027aa:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80027ac:	687a      	ldr	r2, [r7, #4]
 80027ae:	68b9      	ldr	r1, [r7, #8]
 80027b0:	6978      	ldr	r0, [r7, #20]
 80027b2:	f7ff ffb1 	bl	8002718 <NVIC_EncodePriority>
 80027b6:	4602      	mov	r2, r0
 80027b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027bc:	4611      	mov	r1, r2
 80027be:	4618      	mov	r0, r3
 80027c0:	f7ff ff80 	bl	80026c4 <__NVIC_SetPriority>
}
 80027c4:	bf00      	nop
 80027c6:	3718      	adds	r7, #24
 80027c8:	46bd      	mov	sp, r7
 80027ca:	bd80      	pop	{r7, pc}

080027cc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b082      	sub	sp, #8
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	4603      	mov	r3, r0
 80027d4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80027d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027da:	4618      	mov	r0, r3
 80027dc:	f7ff ff54 	bl	8002688 <__NVIC_EnableIRQ>
}
 80027e0:	bf00      	nop
 80027e2:	3708      	adds	r7, #8
 80027e4:	46bd      	mov	sp, r7
 80027e6:	bd80      	pop	{r7, pc}

080027e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80027e8:	b480      	push	{r7}
 80027ea:	b087      	sub	sp, #28
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
 80027f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80027f2:	2300      	movs	r3, #0
 80027f4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80027f6:	e166      	b.n	8002ac6 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	681a      	ldr	r2, [r3, #0]
 80027fc:	2101      	movs	r1, #1
 80027fe:	697b      	ldr	r3, [r7, #20]
 8002800:	fa01 f303 	lsl.w	r3, r1, r3
 8002804:	4013      	ands	r3, r2
 8002806:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	2b00      	cmp	r3, #0
 800280c:	f000 8158 	beq.w	8002ac0 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	685b      	ldr	r3, [r3, #4]
 8002814:	f003 0303 	and.w	r3, r3, #3
 8002818:	2b01      	cmp	r3, #1
 800281a:	d005      	beq.n	8002828 <HAL_GPIO_Init+0x40>
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	685b      	ldr	r3, [r3, #4]
 8002820:	f003 0303 	and.w	r3, r3, #3
 8002824:	2b02      	cmp	r3, #2
 8002826:	d130      	bne.n	800288a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	689b      	ldr	r3, [r3, #8]
 800282c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800282e:	697b      	ldr	r3, [r7, #20]
 8002830:	005b      	lsls	r3, r3, #1
 8002832:	2203      	movs	r2, #3
 8002834:	fa02 f303 	lsl.w	r3, r2, r3
 8002838:	43db      	mvns	r3, r3
 800283a:	693a      	ldr	r2, [r7, #16]
 800283c:	4013      	ands	r3, r2
 800283e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	68da      	ldr	r2, [r3, #12]
 8002844:	697b      	ldr	r3, [r7, #20]
 8002846:	005b      	lsls	r3, r3, #1
 8002848:	fa02 f303 	lsl.w	r3, r2, r3
 800284c:	693a      	ldr	r2, [r7, #16]
 800284e:	4313      	orrs	r3, r2
 8002850:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	693a      	ldr	r2, [r7, #16]
 8002856:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800285e:	2201      	movs	r2, #1
 8002860:	697b      	ldr	r3, [r7, #20]
 8002862:	fa02 f303 	lsl.w	r3, r2, r3
 8002866:	43db      	mvns	r3, r3
 8002868:	693a      	ldr	r2, [r7, #16]
 800286a:	4013      	ands	r3, r2
 800286c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	685b      	ldr	r3, [r3, #4]
 8002872:	091b      	lsrs	r3, r3, #4
 8002874:	f003 0201 	and.w	r2, r3, #1
 8002878:	697b      	ldr	r3, [r7, #20]
 800287a:	fa02 f303 	lsl.w	r3, r2, r3
 800287e:	693a      	ldr	r2, [r7, #16]
 8002880:	4313      	orrs	r3, r2
 8002882:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	693a      	ldr	r2, [r7, #16]
 8002888:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	685b      	ldr	r3, [r3, #4]
 800288e:	f003 0303 	and.w	r3, r3, #3
 8002892:	2b03      	cmp	r3, #3
 8002894:	d017      	beq.n	80028c6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	68db      	ldr	r3, [r3, #12]
 800289a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800289c:	697b      	ldr	r3, [r7, #20]
 800289e:	005b      	lsls	r3, r3, #1
 80028a0:	2203      	movs	r2, #3
 80028a2:	fa02 f303 	lsl.w	r3, r2, r3
 80028a6:	43db      	mvns	r3, r3
 80028a8:	693a      	ldr	r2, [r7, #16]
 80028aa:	4013      	ands	r3, r2
 80028ac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	689a      	ldr	r2, [r3, #8]
 80028b2:	697b      	ldr	r3, [r7, #20]
 80028b4:	005b      	lsls	r3, r3, #1
 80028b6:	fa02 f303 	lsl.w	r3, r2, r3
 80028ba:	693a      	ldr	r2, [r7, #16]
 80028bc:	4313      	orrs	r3, r2
 80028be:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	693a      	ldr	r2, [r7, #16]
 80028c4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	685b      	ldr	r3, [r3, #4]
 80028ca:	f003 0303 	and.w	r3, r3, #3
 80028ce:	2b02      	cmp	r3, #2
 80028d0:	d123      	bne.n	800291a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80028d2:	697b      	ldr	r3, [r7, #20]
 80028d4:	08da      	lsrs	r2, r3, #3
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	3208      	adds	r2, #8
 80028da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80028de:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80028e0:	697b      	ldr	r3, [r7, #20]
 80028e2:	f003 0307 	and.w	r3, r3, #7
 80028e6:	009b      	lsls	r3, r3, #2
 80028e8:	220f      	movs	r2, #15
 80028ea:	fa02 f303 	lsl.w	r3, r2, r3
 80028ee:	43db      	mvns	r3, r3
 80028f0:	693a      	ldr	r2, [r7, #16]
 80028f2:	4013      	ands	r3, r2
 80028f4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	691a      	ldr	r2, [r3, #16]
 80028fa:	697b      	ldr	r3, [r7, #20]
 80028fc:	f003 0307 	and.w	r3, r3, #7
 8002900:	009b      	lsls	r3, r3, #2
 8002902:	fa02 f303 	lsl.w	r3, r2, r3
 8002906:	693a      	ldr	r2, [r7, #16]
 8002908:	4313      	orrs	r3, r2
 800290a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800290c:	697b      	ldr	r3, [r7, #20]
 800290e:	08da      	lsrs	r2, r3, #3
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	3208      	adds	r2, #8
 8002914:	6939      	ldr	r1, [r7, #16]
 8002916:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002920:	697b      	ldr	r3, [r7, #20]
 8002922:	005b      	lsls	r3, r3, #1
 8002924:	2203      	movs	r2, #3
 8002926:	fa02 f303 	lsl.w	r3, r2, r3
 800292a:	43db      	mvns	r3, r3
 800292c:	693a      	ldr	r2, [r7, #16]
 800292e:	4013      	ands	r3, r2
 8002930:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	685b      	ldr	r3, [r3, #4]
 8002936:	f003 0203 	and.w	r2, r3, #3
 800293a:	697b      	ldr	r3, [r7, #20]
 800293c:	005b      	lsls	r3, r3, #1
 800293e:	fa02 f303 	lsl.w	r3, r2, r3
 8002942:	693a      	ldr	r2, [r7, #16]
 8002944:	4313      	orrs	r3, r2
 8002946:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	693a      	ldr	r2, [r7, #16]
 800294c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	685b      	ldr	r3, [r3, #4]
 8002952:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002956:	2b00      	cmp	r3, #0
 8002958:	f000 80b2 	beq.w	8002ac0 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800295c:	4b61      	ldr	r3, [pc, #388]	; (8002ae4 <HAL_GPIO_Init+0x2fc>)
 800295e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002960:	4a60      	ldr	r2, [pc, #384]	; (8002ae4 <HAL_GPIO_Init+0x2fc>)
 8002962:	f043 0301 	orr.w	r3, r3, #1
 8002966:	6613      	str	r3, [r2, #96]	; 0x60
 8002968:	4b5e      	ldr	r3, [pc, #376]	; (8002ae4 <HAL_GPIO_Init+0x2fc>)
 800296a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800296c:	f003 0301 	and.w	r3, r3, #1
 8002970:	60bb      	str	r3, [r7, #8]
 8002972:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002974:	4a5c      	ldr	r2, [pc, #368]	; (8002ae8 <HAL_GPIO_Init+0x300>)
 8002976:	697b      	ldr	r3, [r7, #20]
 8002978:	089b      	lsrs	r3, r3, #2
 800297a:	3302      	adds	r3, #2
 800297c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002980:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002982:	697b      	ldr	r3, [r7, #20]
 8002984:	f003 0303 	and.w	r3, r3, #3
 8002988:	009b      	lsls	r3, r3, #2
 800298a:	220f      	movs	r2, #15
 800298c:	fa02 f303 	lsl.w	r3, r2, r3
 8002990:	43db      	mvns	r3, r3
 8002992:	693a      	ldr	r2, [r7, #16]
 8002994:	4013      	ands	r3, r2
 8002996:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800299e:	d02b      	beq.n	80029f8 <HAL_GPIO_Init+0x210>
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	4a52      	ldr	r2, [pc, #328]	; (8002aec <HAL_GPIO_Init+0x304>)
 80029a4:	4293      	cmp	r3, r2
 80029a6:	d025      	beq.n	80029f4 <HAL_GPIO_Init+0x20c>
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	4a51      	ldr	r2, [pc, #324]	; (8002af0 <HAL_GPIO_Init+0x308>)
 80029ac:	4293      	cmp	r3, r2
 80029ae:	d01f      	beq.n	80029f0 <HAL_GPIO_Init+0x208>
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	4a50      	ldr	r2, [pc, #320]	; (8002af4 <HAL_GPIO_Init+0x30c>)
 80029b4:	4293      	cmp	r3, r2
 80029b6:	d019      	beq.n	80029ec <HAL_GPIO_Init+0x204>
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	4a4f      	ldr	r2, [pc, #316]	; (8002af8 <HAL_GPIO_Init+0x310>)
 80029bc:	4293      	cmp	r3, r2
 80029be:	d013      	beq.n	80029e8 <HAL_GPIO_Init+0x200>
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	4a4e      	ldr	r2, [pc, #312]	; (8002afc <HAL_GPIO_Init+0x314>)
 80029c4:	4293      	cmp	r3, r2
 80029c6:	d00d      	beq.n	80029e4 <HAL_GPIO_Init+0x1fc>
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	4a4d      	ldr	r2, [pc, #308]	; (8002b00 <HAL_GPIO_Init+0x318>)
 80029cc:	4293      	cmp	r3, r2
 80029ce:	d007      	beq.n	80029e0 <HAL_GPIO_Init+0x1f8>
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	4a4c      	ldr	r2, [pc, #304]	; (8002b04 <HAL_GPIO_Init+0x31c>)
 80029d4:	4293      	cmp	r3, r2
 80029d6:	d101      	bne.n	80029dc <HAL_GPIO_Init+0x1f4>
 80029d8:	2307      	movs	r3, #7
 80029da:	e00e      	b.n	80029fa <HAL_GPIO_Init+0x212>
 80029dc:	2308      	movs	r3, #8
 80029de:	e00c      	b.n	80029fa <HAL_GPIO_Init+0x212>
 80029e0:	2306      	movs	r3, #6
 80029e2:	e00a      	b.n	80029fa <HAL_GPIO_Init+0x212>
 80029e4:	2305      	movs	r3, #5
 80029e6:	e008      	b.n	80029fa <HAL_GPIO_Init+0x212>
 80029e8:	2304      	movs	r3, #4
 80029ea:	e006      	b.n	80029fa <HAL_GPIO_Init+0x212>
 80029ec:	2303      	movs	r3, #3
 80029ee:	e004      	b.n	80029fa <HAL_GPIO_Init+0x212>
 80029f0:	2302      	movs	r3, #2
 80029f2:	e002      	b.n	80029fa <HAL_GPIO_Init+0x212>
 80029f4:	2301      	movs	r3, #1
 80029f6:	e000      	b.n	80029fa <HAL_GPIO_Init+0x212>
 80029f8:	2300      	movs	r3, #0
 80029fa:	697a      	ldr	r2, [r7, #20]
 80029fc:	f002 0203 	and.w	r2, r2, #3
 8002a00:	0092      	lsls	r2, r2, #2
 8002a02:	4093      	lsls	r3, r2
 8002a04:	693a      	ldr	r2, [r7, #16]
 8002a06:	4313      	orrs	r3, r2
 8002a08:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002a0a:	4937      	ldr	r1, [pc, #220]	; (8002ae8 <HAL_GPIO_Init+0x300>)
 8002a0c:	697b      	ldr	r3, [r7, #20]
 8002a0e:	089b      	lsrs	r3, r3, #2
 8002a10:	3302      	adds	r3, #2
 8002a12:	693a      	ldr	r2, [r7, #16]
 8002a14:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002a18:	4b3b      	ldr	r3, [pc, #236]	; (8002b08 <HAL_GPIO_Init+0x320>)
 8002a1a:	689b      	ldr	r3, [r3, #8]
 8002a1c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	43db      	mvns	r3, r3
 8002a22:	693a      	ldr	r2, [r7, #16]
 8002a24:	4013      	ands	r3, r2
 8002a26:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	685b      	ldr	r3, [r3, #4]
 8002a2c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d003      	beq.n	8002a3c <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8002a34:	693a      	ldr	r2, [r7, #16]
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	4313      	orrs	r3, r2
 8002a3a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002a3c:	4a32      	ldr	r2, [pc, #200]	; (8002b08 <HAL_GPIO_Init+0x320>)
 8002a3e:	693b      	ldr	r3, [r7, #16]
 8002a40:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002a42:	4b31      	ldr	r3, [pc, #196]	; (8002b08 <HAL_GPIO_Init+0x320>)
 8002a44:	68db      	ldr	r3, [r3, #12]
 8002a46:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	43db      	mvns	r3, r3
 8002a4c:	693a      	ldr	r2, [r7, #16]
 8002a4e:	4013      	ands	r3, r2
 8002a50:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	685b      	ldr	r3, [r3, #4]
 8002a56:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d003      	beq.n	8002a66 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8002a5e:	693a      	ldr	r2, [r7, #16]
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	4313      	orrs	r3, r2
 8002a64:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002a66:	4a28      	ldr	r2, [pc, #160]	; (8002b08 <HAL_GPIO_Init+0x320>)
 8002a68:	693b      	ldr	r3, [r7, #16]
 8002a6a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002a6c:	4b26      	ldr	r3, [pc, #152]	; (8002b08 <HAL_GPIO_Init+0x320>)
 8002a6e:	685b      	ldr	r3, [r3, #4]
 8002a70:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	43db      	mvns	r3, r3
 8002a76:	693a      	ldr	r2, [r7, #16]
 8002a78:	4013      	ands	r3, r2
 8002a7a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	685b      	ldr	r3, [r3, #4]
 8002a80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d003      	beq.n	8002a90 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8002a88:	693a      	ldr	r2, [r7, #16]
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	4313      	orrs	r3, r2
 8002a8e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002a90:	4a1d      	ldr	r2, [pc, #116]	; (8002b08 <HAL_GPIO_Init+0x320>)
 8002a92:	693b      	ldr	r3, [r7, #16]
 8002a94:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002a96:	4b1c      	ldr	r3, [pc, #112]	; (8002b08 <HAL_GPIO_Init+0x320>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	43db      	mvns	r3, r3
 8002aa0:	693a      	ldr	r2, [r7, #16]
 8002aa2:	4013      	ands	r3, r2
 8002aa4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	685b      	ldr	r3, [r3, #4]
 8002aaa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d003      	beq.n	8002aba <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8002ab2:	693a      	ldr	r2, [r7, #16]
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	4313      	orrs	r3, r2
 8002ab8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002aba:	4a13      	ldr	r2, [pc, #76]	; (8002b08 <HAL_GPIO_Init+0x320>)
 8002abc:	693b      	ldr	r3, [r7, #16]
 8002abe:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002ac0:	697b      	ldr	r3, [r7, #20]
 8002ac2:	3301      	adds	r3, #1
 8002ac4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	681a      	ldr	r2, [r3, #0]
 8002aca:	697b      	ldr	r3, [r7, #20]
 8002acc:	fa22 f303 	lsr.w	r3, r2, r3
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	f47f ae91 	bne.w	80027f8 <HAL_GPIO_Init+0x10>
  }
}
 8002ad6:	bf00      	nop
 8002ad8:	bf00      	nop
 8002ada:	371c      	adds	r7, #28
 8002adc:	46bd      	mov	sp, r7
 8002ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae2:	4770      	bx	lr
 8002ae4:	40021000 	.word	0x40021000
 8002ae8:	40010000 	.word	0x40010000
 8002aec:	48000400 	.word	0x48000400
 8002af0:	48000800 	.word	0x48000800
 8002af4:	48000c00 	.word	0x48000c00
 8002af8:	48001000 	.word	0x48001000
 8002afc:	48001400 	.word	0x48001400
 8002b00:	48001800 	.word	0x48001800
 8002b04:	48001c00 	.word	0x48001c00
 8002b08:	40010400 	.word	0x40010400

08002b0c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002b0c:	b480      	push	{r7}
 8002b0e:	b085      	sub	sp, #20
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
 8002b14:	460b      	mov	r3, r1
 8002b16:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	691a      	ldr	r2, [r3, #16]
 8002b1c:	887b      	ldrh	r3, [r7, #2]
 8002b1e:	4013      	ands	r3, r2
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d002      	beq.n	8002b2a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002b24:	2301      	movs	r3, #1
 8002b26:	73fb      	strb	r3, [r7, #15]
 8002b28:	e001      	b.n	8002b2e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002b2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b30:	4618      	mov	r0, r3
 8002b32:	3714      	adds	r7, #20
 8002b34:	46bd      	mov	sp, r7
 8002b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3a:	4770      	bx	lr

08002b3c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b3c:	b480      	push	{r7}
 8002b3e:	b083      	sub	sp, #12
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
 8002b44:	460b      	mov	r3, r1
 8002b46:	807b      	strh	r3, [r7, #2]
 8002b48:	4613      	mov	r3, r2
 8002b4a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002b4c:	787b      	ldrb	r3, [r7, #1]
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d003      	beq.n	8002b5a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002b52:	887a      	ldrh	r2, [r7, #2]
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002b58:	e002      	b.n	8002b60 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002b5a:	887a      	ldrh	r2, [r7, #2]
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002b60:	bf00      	nop
 8002b62:	370c      	adds	r7, #12
 8002b64:	46bd      	mov	sp, r7
 8002b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6a:	4770      	bx	lr

08002b6c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002b6c:	b480      	push	{r7}
 8002b6e:	b085      	sub	sp, #20
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
 8002b74:	460b      	mov	r3, r1
 8002b76:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	695b      	ldr	r3, [r3, #20]
 8002b7c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002b7e:	887a      	ldrh	r2, [r7, #2]
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	4013      	ands	r3, r2
 8002b84:	041a      	lsls	r2, r3, #16
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	43d9      	mvns	r1, r3
 8002b8a:	887b      	ldrh	r3, [r7, #2]
 8002b8c:	400b      	ands	r3, r1
 8002b8e:	431a      	orrs	r2, r3
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	619a      	str	r2, [r3, #24]
}
 8002b94:	bf00      	nop
 8002b96:	3714      	adds	r7, #20
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9e:	4770      	bx	lr

08002ba0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b082      	sub	sp, #8
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	4603      	mov	r3, r0
 8002ba8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002baa:	4b08      	ldr	r3, [pc, #32]	; (8002bcc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002bac:	695a      	ldr	r2, [r3, #20]
 8002bae:	88fb      	ldrh	r3, [r7, #6]
 8002bb0:	4013      	ands	r3, r2
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d006      	beq.n	8002bc4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002bb6:	4a05      	ldr	r2, [pc, #20]	; (8002bcc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002bb8:	88fb      	ldrh	r3, [r7, #6]
 8002bba:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002bbc:	88fb      	ldrh	r3, [r7, #6]
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	f7fd fd0e 	bl	80005e0 <HAL_GPIO_EXTI_Callback>
  }
}
 8002bc4:	bf00      	nop
 8002bc6:	3708      	adds	r7, #8
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	bd80      	pop	{r7, pc}
 8002bcc:	40010400 	.word	0x40010400

08002bd0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002bd0:	b480      	push	{r7}
 8002bd2:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002bd4:	4b0d      	ldr	r3, [pc, #52]	; (8002c0c <HAL_PWREx_GetVoltageRange+0x3c>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002bdc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002be0:	d102      	bne.n	8002be8 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8002be2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002be6:	e00b      	b.n	8002c00 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8002be8:	4b08      	ldr	r3, [pc, #32]	; (8002c0c <HAL_PWREx_GetVoltageRange+0x3c>)
 8002bea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002bee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bf2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002bf6:	d102      	bne.n	8002bfe <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8002bf8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002bfc:	e000      	b.n	8002c00 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8002bfe:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8002c00:	4618      	mov	r0, r3
 8002c02:	46bd      	mov	sp, r7
 8002c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c08:	4770      	bx	lr
 8002c0a:	bf00      	nop
 8002c0c:	40007000 	.word	0x40007000

08002c10 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002c10:	b480      	push	{r7}
 8002c12:	b085      	sub	sp, #20
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d141      	bne.n	8002ca2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002c1e:	4b4b      	ldr	r3, [pc, #300]	; (8002d4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002c26:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c2a:	d131      	bne.n	8002c90 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002c2c:	4b47      	ldr	r3, [pc, #284]	; (8002d4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002c32:	4a46      	ldr	r2, [pc, #280]	; (8002d4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c34:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002c38:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002c3c:	4b43      	ldr	r3, [pc, #268]	; (8002d4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002c44:	4a41      	ldr	r2, [pc, #260]	; (8002d4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c46:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002c4a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8002c4c:	4b40      	ldr	r3, [pc, #256]	; (8002d50 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	2232      	movs	r2, #50	; 0x32
 8002c52:	fb02 f303 	mul.w	r3, r2, r3
 8002c56:	4a3f      	ldr	r2, [pc, #252]	; (8002d54 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002c58:	fba2 2303 	umull	r2, r3, r2, r3
 8002c5c:	0c9b      	lsrs	r3, r3, #18
 8002c5e:	3301      	adds	r3, #1
 8002c60:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002c62:	e002      	b.n	8002c6a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	3b01      	subs	r3, #1
 8002c68:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002c6a:	4b38      	ldr	r3, [pc, #224]	; (8002d4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c6c:	695b      	ldr	r3, [r3, #20]
 8002c6e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c72:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c76:	d102      	bne.n	8002c7e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d1f2      	bne.n	8002c64 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002c7e:	4b33      	ldr	r3, [pc, #204]	; (8002d4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c80:	695b      	ldr	r3, [r3, #20]
 8002c82:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c86:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c8a:	d158      	bne.n	8002d3e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002c8c:	2303      	movs	r3, #3
 8002c8e:	e057      	b.n	8002d40 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002c90:	4b2e      	ldr	r3, [pc, #184]	; (8002d4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c92:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002c96:	4a2d      	ldr	r2, [pc, #180]	; (8002d4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c98:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002c9c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002ca0:	e04d      	b.n	8002d3e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ca8:	d141      	bne.n	8002d2e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002caa:	4b28      	ldr	r3, [pc, #160]	; (8002d4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002cb2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002cb6:	d131      	bne.n	8002d1c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002cb8:	4b24      	ldr	r3, [pc, #144]	; (8002d4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002cba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002cbe:	4a23      	ldr	r2, [pc, #140]	; (8002d4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002cc0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002cc4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002cc8:	4b20      	ldr	r3, [pc, #128]	; (8002d4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002cd0:	4a1e      	ldr	r2, [pc, #120]	; (8002d4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002cd2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002cd6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8002cd8:	4b1d      	ldr	r3, [pc, #116]	; (8002d50 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	2232      	movs	r2, #50	; 0x32
 8002cde:	fb02 f303 	mul.w	r3, r2, r3
 8002ce2:	4a1c      	ldr	r2, [pc, #112]	; (8002d54 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002ce4:	fba2 2303 	umull	r2, r3, r2, r3
 8002ce8:	0c9b      	lsrs	r3, r3, #18
 8002cea:	3301      	adds	r3, #1
 8002cec:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002cee:	e002      	b.n	8002cf6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	3b01      	subs	r3, #1
 8002cf4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002cf6:	4b15      	ldr	r3, [pc, #84]	; (8002d4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002cf8:	695b      	ldr	r3, [r3, #20]
 8002cfa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cfe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d02:	d102      	bne.n	8002d0a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d1f2      	bne.n	8002cf0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002d0a:	4b10      	ldr	r3, [pc, #64]	; (8002d4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d0c:	695b      	ldr	r3, [r3, #20]
 8002d0e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d12:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d16:	d112      	bne.n	8002d3e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002d18:	2303      	movs	r3, #3
 8002d1a:	e011      	b.n	8002d40 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002d1c:	4b0b      	ldr	r3, [pc, #44]	; (8002d4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002d22:	4a0a      	ldr	r2, [pc, #40]	; (8002d4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d28:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002d2c:	e007      	b.n	8002d3e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002d2e:	4b07      	ldr	r3, [pc, #28]	; (8002d4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002d36:	4a05      	ldr	r2, [pc, #20]	; (8002d4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d38:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002d3c:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002d3e:	2300      	movs	r3, #0
}
 8002d40:	4618      	mov	r0, r3
 8002d42:	3714      	adds	r7, #20
 8002d44:	46bd      	mov	sp, r7
 8002d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4a:	4770      	bx	lr
 8002d4c:	40007000 	.word	0x40007000
 8002d50:	20000000 	.word	0x20000000
 8002d54:	431bde83 	.word	0x431bde83

08002d58 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8002d58:	b480      	push	{r7}
 8002d5a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8002d5c:	4b05      	ldr	r3, [pc, #20]	; (8002d74 <HAL_PWREx_EnableVddIO2+0x1c>)
 8002d5e:	685b      	ldr	r3, [r3, #4]
 8002d60:	4a04      	ldr	r2, [pc, #16]	; (8002d74 <HAL_PWREx_EnableVddIO2+0x1c>)
 8002d62:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002d66:	6053      	str	r3, [r2, #4]
}
 8002d68:	bf00      	nop
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d70:	4770      	bx	lr
 8002d72:	bf00      	nop
 8002d74:	40007000 	.word	0x40007000

08002d78 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b088      	sub	sp, #32
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d102      	bne.n	8002d8c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002d86:	2301      	movs	r3, #1
 8002d88:	f000 bc08 	b.w	800359c <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002d8c:	4b96      	ldr	r3, [pc, #600]	; (8002fe8 <HAL_RCC_OscConfig+0x270>)
 8002d8e:	689b      	ldr	r3, [r3, #8]
 8002d90:	f003 030c 	and.w	r3, r3, #12
 8002d94:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002d96:	4b94      	ldr	r3, [pc, #592]	; (8002fe8 <HAL_RCC_OscConfig+0x270>)
 8002d98:	68db      	ldr	r3, [r3, #12]
 8002d9a:	f003 0303 	and.w	r3, r3, #3
 8002d9e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f003 0310 	and.w	r3, r3, #16
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	f000 80e4 	beq.w	8002f76 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002dae:	69bb      	ldr	r3, [r7, #24]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d007      	beq.n	8002dc4 <HAL_RCC_OscConfig+0x4c>
 8002db4:	69bb      	ldr	r3, [r7, #24]
 8002db6:	2b0c      	cmp	r3, #12
 8002db8:	f040 808b 	bne.w	8002ed2 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002dbc:	697b      	ldr	r3, [r7, #20]
 8002dbe:	2b01      	cmp	r3, #1
 8002dc0:	f040 8087 	bne.w	8002ed2 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002dc4:	4b88      	ldr	r3, [pc, #544]	; (8002fe8 <HAL_RCC_OscConfig+0x270>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f003 0302 	and.w	r3, r3, #2
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d005      	beq.n	8002ddc <HAL_RCC_OscConfig+0x64>
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	699b      	ldr	r3, [r3, #24]
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d101      	bne.n	8002ddc <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002dd8:	2301      	movs	r3, #1
 8002dda:	e3df      	b.n	800359c <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6a1a      	ldr	r2, [r3, #32]
 8002de0:	4b81      	ldr	r3, [pc, #516]	; (8002fe8 <HAL_RCC_OscConfig+0x270>)
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f003 0308 	and.w	r3, r3, #8
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d004      	beq.n	8002df6 <HAL_RCC_OscConfig+0x7e>
 8002dec:	4b7e      	ldr	r3, [pc, #504]	; (8002fe8 <HAL_RCC_OscConfig+0x270>)
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002df4:	e005      	b.n	8002e02 <HAL_RCC_OscConfig+0x8a>
 8002df6:	4b7c      	ldr	r3, [pc, #496]	; (8002fe8 <HAL_RCC_OscConfig+0x270>)
 8002df8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002dfc:	091b      	lsrs	r3, r3, #4
 8002dfe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d223      	bcs.n	8002e4e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6a1b      	ldr	r3, [r3, #32]
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	f000 fdfe 	bl	8003a0c <RCC_SetFlashLatencyFromMSIRange>
 8002e10:	4603      	mov	r3, r0
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d001      	beq.n	8002e1a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8002e16:	2301      	movs	r3, #1
 8002e18:	e3c0      	b.n	800359c <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002e1a:	4b73      	ldr	r3, [pc, #460]	; (8002fe8 <HAL_RCC_OscConfig+0x270>)
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	4a72      	ldr	r2, [pc, #456]	; (8002fe8 <HAL_RCC_OscConfig+0x270>)
 8002e20:	f043 0308 	orr.w	r3, r3, #8
 8002e24:	6013      	str	r3, [r2, #0]
 8002e26:	4b70      	ldr	r3, [pc, #448]	; (8002fe8 <HAL_RCC_OscConfig+0x270>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6a1b      	ldr	r3, [r3, #32]
 8002e32:	496d      	ldr	r1, [pc, #436]	; (8002fe8 <HAL_RCC_OscConfig+0x270>)
 8002e34:	4313      	orrs	r3, r2
 8002e36:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002e38:	4b6b      	ldr	r3, [pc, #428]	; (8002fe8 <HAL_RCC_OscConfig+0x270>)
 8002e3a:	685b      	ldr	r3, [r3, #4]
 8002e3c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	69db      	ldr	r3, [r3, #28]
 8002e44:	021b      	lsls	r3, r3, #8
 8002e46:	4968      	ldr	r1, [pc, #416]	; (8002fe8 <HAL_RCC_OscConfig+0x270>)
 8002e48:	4313      	orrs	r3, r2
 8002e4a:	604b      	str	r3, [r1, #4]
 8002e4c:	e025      	b.n	8002e9a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002e4e:	4b66      	ldr	r3, [pc, #408]	; (8002fe8 <HAL_RCC_OscConfig+0x270>)
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	4a65      	ldr	r2, [pc, #404]	; (8002fe8 <HAL_RCC_OscConfig+0x270>)
 8002e54:	f043 0308 	orr.w	r3, r3, #8
 8002e58:	6013      	str	r3, [r2, #0]
 8002e5a:	4b63      	ldr	r3, [pc, #396]	; (8002fe8 <HAL_RCC_OscConfig+0x270>)
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6a1b      	ldr	r3, [r3, #32]
 8002e66:	4960      	ldr	r1, [pc, #384]	; (8002fe8 <HAL_RCC_OscConfig+0x270>)
 8002e68:	4313      	orrs	r3, r2
 8002e6a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002e6c:	4b5e      	ldr	r3, [pc, #376]	; (8002fe8 <HAL_RCC_OscConfig+0x270>)
 8002e6e:	685b      	ldr	r3, [r3, #4]
 8002e70:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	69db      	ldr	r3, [r3, #28]
 8002e78:	021b      	lsls	r3, r3, #8
 8002e7a:	495b      	ldr	r1, [pc, #364]	; (8002fe8 <HAL_RCC_OscConfig+0x270>)
 8002e7c:	4313      	orrs	r3, r2
 8002e7e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002e80:	69bb      	ldr	r3, [r7, #24]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d109      	bne.n	8002e9a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6a1b      	ldr	r3, [r3, #32]
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	f000 fdbe 	bl	8003a0c <RCC_SetFlashLatencyFromMSIRange>
 8002e90:	4603      	mov	r3, r0
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d001      	beq.n	8002e9a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8002e96:	2301      	movs	r3, #1
 8002e98:	e380      	b.n	800359c <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002e9a:	f000 fcc1 	bl	8003820 <HAL_RCC_GetSysClockFreq>
 8002e9e:	4602      	mov	r2, r0
 8002ea0:	4b51      	ldr	r3, [pc, #324]	; (8002fe8 <HAL_RCC_OscConfig+0x270>)
 8002ea2:	689b      	ldr	r3, [r3, #8]
 8002ea4:	091b      	lsrs	r3, r3, #4
 8002ea6:	f003 030f 	and.w	r3, r3, #15
 8002eaa:	4950      	ldr	r1, [pc, #320]	; (8002fec <HAL_RCC_OscConfig+0x274>)
 8002eac:	5ccb      	ldrb	r3, [r1, r3]
 8002eae:	f003 031f 	and.w	r3, r3, #31
 8002eb2:	fa22 f303 	lsr.w	r3, r2, r3
 8002eb6:	4a4e      	ldr	r2, [pc, #312]	; (8002ff0 <HAL_RCC_OscConfig+0x278>)
 8002eb8:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002eba:	4b4e      	ldr	r3, [pc, #312]	; (8002ff4 <HAL_RCC_OscConfig+0x27c>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	f7fd fff4 	bl	8000eac <HAL_InitTick>
 8002ec4:	4603      	mov	r3, r0
 8002ec6:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002ec8:	7bfb      	ldrb	r3, [r7, #15]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d052      	beq.n	8002f74 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8002ece:	7bfb      	ldrb	r3, [r7, #15]
 8002ed0:	e364      	b.n	800359c <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	699b      	ldr	r3, [r3, #24]
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d032      	beq.n	8002f40 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002eda:	4b43      	ldr	r3, [pc, #268]	; (8002fe8 <HAL_RCC_OscConfig+0x270>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	4a42      	ldr	r2, [pc, #264]	; (8002fe8 <HAL_RCC_OscConfig+0x270>)
 8002ee0:	f043 0301 	orr.w	r3, r3, #1
 8002ee4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002ee6:	f7fe f91f 	bl	8001128 <HAL_GetTick>
 8002eea:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002eec:	e008      	b.n	8002f00 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002eee:	f7fe f91b 	bl	8001128 <HAL_GetTick>
 8002ef2:	4602      	mov	r2, r0
 8002ef4:	693b      	ldr	r3, [r7, #16]
 8002ef6:	1ad3      	subs	r3, r2, r3
 8002ef8:	2b02      	cmp	r3, #2
 8002efa:	d901      	bls.n	8002f00 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002efc:	2303      	movs	r3, #3
 8002efe:	e34d      	b.n	800359c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002f00:	4b39      	ldr	r3, [pc, #228]	; (8002fe8 <HAL_RCC_OscConfig+0x270>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f003 0302 	and.w	r3, r3, #2
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d0f0      	beq.n	8002eee <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002f0c:	4b36      	ldr	r3, [pc, #216]	; (8002fe8 <HAL_RCC_OscConfig+0x270>)
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	4a35      	ldr	r2, [pc, #212]	; (8002fe8 <HAL_RCC_OscConfig+0x270>)
 8002f12:	f043 0308 	orr.w	r3, r3, #8
 8002f16:	6013      	str	r3, [r2, #0]
 8002f18:	4b33      	ldr	r3, [pc, #204]	; (8002fe8 <HAL_RCC_OscConfig+0x270>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6a1b      	ldr	r3, [r3, #32]
 8002f24:	4930      	ldr	r1, [pc, #192]	; (8002fe8 <HAL_RCC_OscConfig+0x270>)
 8002f26:	4313      	orrs	r3, r2
 8002f28:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002f2a:	4b2f      	ldr	r3, [pc, #188]	; (8002fe8 <HAL_RCC_OscConfig+0x270>)
 8002f2c:	685b      	ldr	r3, [r3, #4]
 8002f2e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	69db      	ldr	r3, [r3, #28]
 8002f36:	021b      	lsls	r3, r3, #8
 8002f38:	492b      	ldr	r1, [pc, #172]	; (8002fe8 <HAL_RCC_OscConfig+0x270>)
 8002f3a:	4313      	orrs	r3, r2
 8002f3c:	604b      	str	r3, [r1, #4]
 8002f3e:	e01a      	b.n	8002f76 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002f40:	4b29      	ldr	r3, [pc, #164]	; (8002fe8 <HAL_RCC_OscConfig+0x270>)
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	4a28      	ldr	r2, [pc, #160]	; (8002fe8 <HAL_RCC_OscConfig+0x270>)
 8002f46:	f023 0301 	bic.w	r3, r3, #1
 8002f4a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002f4c:	f7fe f8ec 	bl	8001128 <HAL_GetTick>
 8002f50:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002f52:	e008      	b.n	8002f66 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002f54:	f7fe f8e8 	bl	8001128 <HAL_GetTick>
 8002f58:	4602      	mov	r2, r0
 8002f5a:	693b      	ldr	r3, [r7, #16]
 8002f5c:	1ad3      	subs	r3, r2, r3
 8002f5e:	2b02      	cmp	r3, #2
 8002f60:	d901      	bls.n	8002f66 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8002f62:	2303      	movs	r3, #3
 8002f64:	e31a      	b.n	800359c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002f66:	4b20      	ldr	r3, [pc, #128]	; (8002fe8 <HAL_RCC_OscConfig+0x270>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f003 0302 	and.w	r3, r3, #2
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d1f0      	bne.n	8002f54 <HAL_RCC_OscConfig+0x1dc>
 8002f72:	e000      	b.n	8002f76 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002f74:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f003 0301 	and.w	r3, r3, #1
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d073      	beq.n	800306a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002f82:	69bb      	ldr	r3, [r7, #24]
 8002f84:	2b08      	cmp	r3, #8
 8002f86:	d005      	beq.n	8002f94 <HAL_RCC_OscConfig+0x21c>
 8002f88:	69bb      	ldr	r3, [r7, #24]
 8002f8a:	2b0c      	cmp	r3, #12
 8002f8c:	d10e      	bne.n	8002fac <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002f8e:	697b      	ldr	r3, [r7, #20]
 8002f90:	2b03      	cmp	r3, #3
 8002f92:	d10b      	bne.n	8002fac <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f94:	4b14      	ldr	r3, [pc, #80]	; (8002fe8 <HAL_RCC_OscConfig+0x270>)
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d063      	beq.n	8003068 <HAL_RCC_OscConfig+0x2f0>
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	685b      	ldr	r3, [r3, #4]
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d15f      	bne.n	8003068 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002fa8:	2301      	movs	r3, #1
 8002faa:	e2f7      	b.n	800359c <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	685b      	ldr	r3, [r3, #4]
 8002fb0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fb4:	d106      	bne.n	8002fc4 <HAL_RCC_OscConfig+0x24c>
 8002fb6:	4b0c      	ldr	r3, [pc, #48]	; (8002fe8 <HAL_RCC_OscConfig+0x270>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	4a0b      	ldr	r2, [pc, #44]	; (8002fe8 <HAL_RCC_OscConfig+0x270>)
 8002fbc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fc0:	6013      	str	r3, [r2, #0]
 8002fc2:	e025      	b.n	8003010 <HAL_RCC_OscConfig+0x298>
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	685b      	ldr	r3, [r3, #4]
 8002fc8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002fcc:	d114      	bne.n	8002ff8 <HAL_RCC_OscConfig+0x280>
 8002fce:	4b06      	ldr	r3, [pc, #24]	; (8002fe8 <HAL_RCC_OscConfig+0x270>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	4a05      	ldr	r2, [pc, #20]	; (8002fe8 <HAL_RCC_OscConfig+0x270>)
 8002fd4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002fd8:	6013      	str	r3, [r2, #0]
 8002fda:	4b03      	ldr	r3, [pc, #12]	; (8002fe8 <HAL_RCC_OscConfig+0x270>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	4a02      	ldr	r2, [pc, #8]	; (8002fe8 <HAL_RCC_OscConfig+0x270>)
 8002fe0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fe4:	6013      	str	r3, [r2, #0]
 8002fe6:	e013      	b.n	8003010 <HAL_RCC_OscConfig+0x298>
 8002fe8:	40021000 	.word	0x40021000
 8002fec:	08008fe0 	.word	0x08008fe0
 8002ff0:	20000000 	.word	0x20000000
 8002ff4:	20000004 	.word	0x20000004
 8002ff8:	4ba0      	ldr	r3, [pc, #640]	; (800327c <HAL_RCC_OscConfig+0x504>)
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	4a9f      	ldr	r2, [pc, #636]	; (800327c <HAL_RCC_OscConfig+0x504>)
 8002ffe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003002:	6013      	str	r3, [r2, #0]
 8003004:	4b9d      	ldr	r3, [pc, #628]	; (800327c <HAL_RCC_OscConfig+0x504>)
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	4a9c      	ldr	r2, [pc, #624]	; (800327c <HAL_RCC_OscConfig+0x504>)
 800300a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800300e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	685b      	ldr	r3, [r3, #4]
 8003014:	2b00      	cmp	r3, #0
 8003016:	d013      	beq.n	8003040 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003018:	f7fe f886 	bl	8001128 <HAL_GetTick>
 800301c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800301e:	e008      	b.n	8003032 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003020:	f7fe f882 	bl	8001128 <HAL_GetTick>
 8003024:	4602      	mov	r2, r0
 8003026:	693b      	ldr	r3, [r7, #16]
 8003028:	1ad3      	subs	r3, r2, r3
 800302a:	2b64      	cmp	r3, #100	; 0x64
 800302c:	d901      	bls.n	8003032 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800302e:	2303      	movs	r3, #3
 8003030:	e2b4      	b.n	800359c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003032:	4b92      	ldr	r3, [pc, #584]	; (800327c <HAL_RCC_OscConfig+0x504>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800303a:	2b00      	cmp	r3, #0
 800303c:	d0f0      	beq.n	8003020 <HAL_RCC_OscConfig+0x2a8>
 800303e:	e014      	b.n	800306a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003040:	f7fe f872 	bl	8001128 <HAL_GetTick>
 8003044:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003046:	e008      	b.n	800305a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003048:	f7fe f86e 	bl	8001128 <HAL_GetTick>
 800304c:	4602      	mov	r2, r0
 800304e:	693b      	ldr	r3, [r7, #16]
 8003050:	1ad3      	subs	r3, r2, r3
 8003052:	2b64      	cmp	r3, #100	; 0x64
 8003054:	d901      	bls.n	800305a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003056:	2303      	movs	r3, #3
 8003058:	e2a0      	b.n	800359c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800305a:	4b88      	ldr	r3, [pc, #544]	; (800327c <HAL_RCC_OscConfig+0x504>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003062:	2b00      	cmp	r3, #0
 8003064:	d1f0      	bne.n	8003048 <HAL_RCC_OscConfig+0x2d0>
 8003066:	e000      	b.n	800306a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003068:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f003 0302 	and.w	r3, r3, #2
 8003072:	2b00      	cmp	r3, #0
 8003074:	d060      	beq.n	8003138 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003076:	69bb      	ldr	r3, [r7, #24]
 8003078:	2b04      	cmp	r3, #4
 800307a:	d005      	beq.n	8003088 <HAL_RCC_OscConfig+0x310>
 800307c:	69bb      	ldr	r3, [r7, #24]
 800307e:	2b0c      	cmp	r3, #12
 8003080:	d119      	bne.n	80030b6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003082:	697b      	ldr	r3, [r7, #20]
 8003084:	2b02      	cmp	r3, #2
 8003086:	d116      	bne.n	80030b6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003088:	4b7c      	ldr	r3, [pc, #496]	; (800327c <HAL_RCC_OscConfig+0x504>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003090:	2b00      	cmp	r3, #0
 8003092:	d005      	beq.n	80030a0 <HAL_RCC_OscConfig+0x328>
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	68db      	ldr	r3, [r3, #12]
 8003098:	2b00      	cmp	r3, #0
 800309a:	d101      	bne.n	80030a0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800309c:	2301      	movs	r3, #1
 800309e:	e27d      	b.n	800359c <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030a0:	4b76      	ldr	r3, [pc, #472]	; (800327c <HAL_RCC_OscConfig+0x504>)
 80030a2:	685b      	ldr	r3, [r3, #4]
 80030a4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	691b      	ldr	r3, [r3, #16]
 80030ac:	061b      	lsls	r3, r3, #24
 80030ae:	4973      	ldr	r1, [pc, #460]	; (800327c <HAL_RCC_OscConfig+0x504>)
 80030b0:	4313      	orrs	r3, r2
 80030b2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80030b4:	e040      	b.n	8003138 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	68db      	ldr	r3, [r3, #12]
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d023      	beq.n	8003106 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80030be:	4b6f      	ldr	r3, [pc, #444]	; (800327c <HAL_RCC_OscConfig+0x504>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	4a6e      	ldr	r2, [pc, #440]	; (800327c <HAL_RCC_OscConfig+0x504>)
 80030c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030c8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030ca:	f7fe f82d 	bl	8001128 <HAL_GetTick>
 80030ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80030d0:	e008      	b.n	80030e4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80030d2:	f7fe f829 	bl	8001128 <HAL_GetTick>
 80030d6:	4602      	mov	r2, r0
 80030d8:	693b      	ldr	r3, [r7, #16]
 80030da:	1ad3      	subs	r3, r2, r3
 80030dc:	2b02      	cmp	r3, #2
 80030de:	d901      	bls.n	80030e4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80030e0:	2303      	movs	r3, #3
 80030e2:	e25b      	b.n	800359c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80030e4:	4b65      	ldr	r3, [pc, #404]	; (800327c <HAL_RCC_OscConfig+0x504>)
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d0f0      	beq.n	80030d2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030f0:	4b62      	ldr	r3, [pc, #392]	; (800327c <HAL_RCC_OscConfig+0x504>)
 80030f2:	685b      	ldr	r3, [r3, #4]
 80030f4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	691b      	ldr	r3, [r3, #16]
 80030fc:	061b      	lsls	r3, r3, #24
 80030fe:	495f      	ldr	r1, [pc, #380]	; (800327c <HAL_RCC_OscConfig+0x504>)
 8003100:	4313      	orrs	r3, r2
 8003102:	604b      	str	r3, [r1, #4]
 8003104:	e018      	b.n	8003138 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003106:	4b5d      	ldr	r3, [pc, #372]	; (800327c <HAL_RCC_OscConfig+0x504>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	4a5c      	ldr	r2, [pc, #368]	; (800327c <HAL_RCC_OscConfig+0x504>)
 800310c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003110:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003112:	f7fe f809 	bl	8001128 <HAL_GetTick>
 8003116:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003118:	e008      	b.n	800312c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800311a:	f7fe f805 	bl	8001128 <HAL_GetTick>
 800311e:	4602      	mov	r2, r0
 8003120:	693b      	ldr	r3, [r7, #16]
 8003122:	1ad3      	subs	r3, r2, r3
 8003124:	2b02      	cmp	r3, #2
 8003126:	d901      	bls.n	800312c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003128:	2303      	movs	r3, #3
 800312a:	e237      	b.n	800359c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800312c:	4b53      	ldr	r3, [pc, #332]	; (800327c <HAL_RCC_OscConfig+0x504>)
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003134:	2b00      	cmp	r3, #0
 8003136:	d1f0      	bne.n	800311a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f003 0308 	and.w	r3, r3, #8
 8003140:	2b00      	cmp	r3, #0
 8003142:	d03c      	beq.n	80031be <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	695b      	ldr	r3, [r3, #20]
 8003148:	2b00      	cmp	r3, #0
 800314a:	d01c      	beq.n	8003186 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800314c:	4b4b      	ldr	r3, [pc, #300]	; (800327c <HAL_RCC_OscConfig+0x504>)
 800314e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003152:	4a4a      	ldr	r2, [pc, #296]	; (800327c <HAL_RCC_OscConfig+0x504>)
 8003154:	f043 0301 	orr.w	r3, r3, #1
 8003158:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800315c:	f7fd ffe4 	bl	8001128 <HAL_GetTick>
 8003160:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003162:	e008      	b.n	8003176 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003164:	f7fd ffe0 	bl	8001128 <HAL_GetTick>
 8003168:	4602      	mov	r2, r0
 800316a:	693b      	ldr	r3, [r7, #16]
 800316c:	1ad3      	subs	r3, r2, r3
 800316e:	2b02      	cmp	r3, #2
 8003170:	d901      	bls.n	8003176 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003172:	2303      	movs	r3, #3
 8003174:	e212      	b.n	800359c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003176:	4b41      	ldr	r3, [pc, #260]	; (800327c <HAL_RCC_OscConfig+0x504>)
 8003178:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800317c:	f003 0302 	and.w	r3, r3, #2
 8003180:	2b00      	cmp	r3, #0
 8003182:	d0ef      	beq.n	8003164 <HAL_RCC_OscConfig+0x3ec>
 8003184:	e01b      	b.n	80031be <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003186:	4b3d      	ldr	r3, [pc, #244]	; (800327c <HAL_RCC_OscConfig+0x504>)
 8003188:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800318c:	4a3b      	ldr	r2, [pc, #236]	; (800327c <HAL_RCC_OscConfig+0x504>)
 800318e:	f023 0301 	bic.w	r3, r3, #1
 8003192:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003196:	f7fd ffc7 	bl	8001128 <HAL_GetTick>
 800319a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800319c:	e008      	b.n	80031b0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800319e:	f7fd ffc3 	bl	8001128 <HAL_GetTick>
 80031a2:	4602      	mov	r2, r0
 80031a4:	693b      	ldr	r3, [r7, #16]
 80031a6:	1ad3      	subs	r3, r2, r3
 80031a8:	2b02      	cmp	r3, #2
 80031aa:	d901      	bls.n	80031b0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80031ac:	2303      	movs	r3, #3
 80031ae:	e1f5      	b.n	800359c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80031b0:	4b32      	ldr	r3, [pc, #200]	; (800327c <HAL_RCC_OscConfig+0x504>)
 80031b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80031b6:	f003 0302 	and.w	r3, r3, #2
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d1ef      	bne.n	800319e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f003 0304 	and.w	r3, r3, #4
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	f000 80a6 	beq.w	8003318 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80031cc:	2300      	movs	r3, #0
 80031ce:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80031d0:	4b2a      	ldr	r3, [pc, #168]	; (800327c <HAL_RCC_OscConfig+0x504>)
 80031d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d10d      	bne.n	80031f8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80031dc:	4b27      	ldr	r3, [pc, #156]	; (800327c <HAL_RCC_OscConfig+0x504>)
 80031de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031e0:	4a26      	ldr	r2, [pc, #152]	; (800327c <HAL_RCC_OscConfig+0x504>)
 80031e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031e6:	6593      	str	r3, [r2, #88]	; 0x58
 80031e8:	4b24      	ldr	r3, [pc, #144]	; (800327c <HAL_RCC_OscConfig+0x504>)
 80031ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031f0:	60bb      	str	r3, [r7, #8]
 80031f2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80031f4:	2301      	movs	r3, #1
 80031f6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80031f8:	4b21      	ldr	r3, [pc, #132]	; (8003280 <HAL_RCC_OscConfig+0x508>)
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003200:	2b00      	cmp	r3, #0
 8003202:	d118      	bne.n	8003236 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003204:	4b1e      	ldr	r3, [pc, #120]	; (8003280 <HAL_RCC_OscConfig+0x508>)
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	4a1d      	ldr	r2, [pc, #116]	; (8003280 <HAL_RCC_OscConfig+0x508>)
 800320a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800320e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003210:	f7fd ff8a 	bl	8001128 <HAL_GetTick>
 8003214:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003216:	e008      	b.n	800322a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003218:	f7fd ff86 	bl	8001128 <HAL_GetTick>
 800321c:	4602      	mov	r2, r0
 800321e:	693b      	ldr	r3, [r7, #16]
 8003220:	1ad3      	subs	r3, r2, r3
 8003222:	2b02      	cmp	r3, #2
 8003224:	d901      	bls.n	800322a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003226:	2303      	movs	r3, #3
 8003228:	e1b8      	b.n	800359c <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800322a:	4b15      	ldr	r3, [pc, #84]	; (8003280 <HAL_RCC_OscConfig+0x508>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003232:	2b00      	cmp	r3, #0
 8003234:	d0f0      	beq.n	8003218 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	689b      	ldr	r3, [r3, #8]
 800323a:	2b01      	cmp	r3, #1
 800323c:	d108      	bne.n	8003250 <HAL_RCC_OscConfig+0x4d8>
 800323e:	4b0f      	ldr	r3, [pc, #60]	; (800327c <HAL_RCC_OscConfig+0x504>)
 8003240:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003244:	4a0d      	ldr	r2, [pc, #52]	; (800327c <HAL_RCC_OscConfig+0x504>)
 8003246:	f043 0301 	orr.w	r3, r3, #1
 800324a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800324e:	e029      	b.n	80032a4 <HAL_RCC_OscConfig+0x52c>
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	689b      	ldr	r3, [r3, #8]
 8003254:	2b05      	cmp	r3, #5
 8003256:	d115      	bne.n	8003284 <HAL_RCC_OscConfig+0x50c>
 8003258:	4b08      	ldr	r3, [pc, #32]	; (800327c <HAL_RCC_OscConfig+0x504>)
 800325a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800325e:	4a07      	ldr	r2, [pc, #28]	; (800327c <HAL_RCC_OscConfig+0x504>)
 8003260:	f043 0304 	orr.w	r3, r3, #4
 8003264:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003268:	4b04      	ldr	r3, [pc, #16]	; (800327c <HAL_RCC_OscConfig+0x504>)
 800326a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800326e:	4a03      	ldr	r2, [pc, #12]	; (800327c <HAL_RCC_OscConfig+0x504>)
 8003270:	f043 0301 	orr.w	r3, r3, #1
 8003274:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003278:	e014      	b.n	80032a4 <HAL_RCC_OscConfig+0x52c>
 800327a:	bf00      	nop
 800327c:	40021000 	.word	0x40021000
 8003280:	40007000 	.word	0x40007000
 8003284:	4b9d      	ldr	r3, [pc, #628]	; (80034fc <HAL_RCC_OscConfig+0x784>)
 8003286:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800328a:	4a9c      	ldr	r2, [pc, #624]	; (80034fc <HAL_RCC_OscConfig+0x784>)
 800328c:	f023 0301 	bic.w	r3, r3, #1
 8003290:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003294:	4b99      	ldr	r3, [pc, #612]	; (80034fc <HAL_RCC_OscConfig+0x784>)
 8003296:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800329a:	4a98      	ldr	r2, [pc, #608]	; (80034fc <HAL_RCC_OscConfig+0x784>)
 800329c:	f023 0304 	bic.w	r3, r3, #4
 80032a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	689b      	ldr	r3, [r3, #8]
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d016      	beq.n	80032da <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032ac:	f7fd ff3c 	bl	8001128 <HAL_GetTick>
 80032b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80032b2:	e00a      	b.n	80032ca <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032b4:	f7fd ff38 	bl	8001128 <HAL_GetTick>
 80032b8:	4602      	mov	r2, r0
 80032ba:	693b      	ldr	r3, [r7, #16]
 80032bc:	1ad3      	subs	r3, r2, r3
 80032be:	f241 3288 	movw	r2, #5000	; 0x1388
 80032c2:	4293      	cmp	r3, r2
 80032c4:	d901      	bls.n	80032ca <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80032c6:	2303      	movs	r3, #3
 80032c8:	e168      	b.n	800359c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80032ca:	4b8c      	ldr	r3, [pc, #560]	; (80034fc <HAL_RCC_OscConfig+0x784>)
 80032cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032d0:	f003 0302 	and.w	r3, r3, #2
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d0ed      	beq.n	80032b4 <HAL_RCC_OscConfig+0x53c>
 80032d8:	e015      	b.n	8003306 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032da:	f7fd ff25 	bl	8001128 <HAL_GetTick>
 80032de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80032e0:	e00a      	b.n	80032f8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032e2:	f7fd ff21 	bl	8001128 <HAL_GetTick>
 80032e6:	4602      	mov	r2, r0
 80032e8:	693b      	ldr	r3, [r7, #16]
 80032ea:	1ad3      	subs	r3, r2, r3
 80032ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80032f0:	4293      	cmp	r3, r2
 80032f2:	d901      	bls.n	80032f8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80032f4:	2303      	movs	r3, #3
 80032f6:	e151      	b.n	800359c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80032f8:	4b80      	ldr	r3, [pc, #512]	; (80034fc <HAL_RCC_OscConfig+0x784>)
 80032fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032fe:	f003 0302 	and.w	r3, r3, #2
 8003302:	2b00      	cmp	r3, #0
 8003304:	d1ed      	bne.n	80032e2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003306:	7ffb      	ldrb	r3, [r7, #31]
 8003308:	2b01      	cmp	r3, #1
 800330a:	d105      	bne.n	8003318 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800330c:	4b7b      	ldr	r3, [pc, #492]	; (80034fc <HAL_RCC_OscConfig+0x784>)
 800330e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003310:	4a7a      	ldr	r2, [pc, #488]	; (80034fc <HAL_RCC_OscConfig+0x784>)
 8003312:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003316:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f003 0320 	and.w	r3, r3, #32
 8003320:	2b00      	cmp	r3, #0
 8003322:	d03c      	beq.n	800339e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003328:	2b00      	cmp	r3, #0
 800332a:	d01c      	beq.n	8003366 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800332c:	4b73      	ldr	r3, [pc, #460]	; (80034fc <HAL_RCC_OscConfig+0x784>)
 800332e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003332:	4a72      	ldr	r2, [pc, #456]	; (80034fc <HAL_RCC_OscConfig+0x784>)
 8003334:	f043 0301 	orr.w	r3, r3, #1
 8003338:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800333c:	f7fd fef4 	bl	8001128 <HAL_GetTick>
 8003340:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003342:	e008      	b.n	8003356 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003344:	f7fd fef0 	bl	8001128 <HAL_GetTick>
 8003348:	4602      	mov	r2, r0
 800334a:	693b      	ldr	r3, [r7, #16]
 800334c:	1ad3      	subs	r3, r2, r3
 800334e:	2b02      	cmp	r3, #2
 8003350:	d901      	bls.n	8003356 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8003352:	2303      	movs	r3, #3
 8003354:	e122      	b.n	800359c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003356:	4b69      	ldr	r3, [pc, #420]	; (80034fc <HAL_RCC_OscConfig+0x784>)
 8003358:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800335c:	f003 0302 	and.w	r3, r3, #2
 8003360:	2b00      	cmp	r3, #0
 8003362:	d0ef      	beq.n	8003344 <HAL_RCC_OscConfig+0x5cc>
 8003364:	e01b      	b.n	800339e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003366:	4b65      	ldr	r3, [pc, #404]	; (80034fc <HAL_RCC_OscConfig+0x784>)
 8003368:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800336c:	4a63      	ldr	r2, [pc, #396]	; (80034fc <HAL_RCC_OscConfig+0x784>)
 800336e:	f023 0301 	bic.w	r3, r3, #1
 8003372:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003376:	f7fd fed7 	bl	8001128 <HAL_GetTick>
 800337a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800337c:	e008      	b.n	8003390 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800337e:	f7fd fed3 	bl	8001128 <HAL_GetTick>
 8003382:	4602      	mov	r2, r0
 8003384:	693b      	ldr	r3, [r7, #16]
 8003386:	1ad3      	subs	r3, r2, r3
 8003388:	2b02      	cmp	r3, #2
 800338a:	d901      	bls.n	8003390 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800338c:	2303      	movs	r3, #3
 800338e:	e105      	b.n	800359c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003390:	4b5a      	ldr	r3, [pc, #360]	; (80034fc <HAL_RCC_OscConfig+0x784>)
 8003392:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003396:	f003 0302 	and.w	r3, r3, #2
 800339a:	2b00      	cmp	r3, #0
 800339c:	d1ef      	bne.n	800337e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	f000 80f9 	beq.w	800359a <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033ac:	2b02      	cmp	r3, #2
 80033ae:	f040 80cf 	bne.w	8003550 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80033b2:	4b52      	ldr	r3, [pc, #328]	; (80034fc <HAL_RCC_OscConfig+0x784>)
 80033b4:	68db      	ldr	r3, [r3, #12]
 80033b6:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80033b8:	697b      	ldr	r3, [r7, #20]
 80033ba:	f003 0203 	and.w	r2, r3, #3
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033c2:	429a      	cmp	r2, r3
 80033c4:	d12c      	bne.n	8003420 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80033c6:	697b      	ldr	r3, [r7, #20]
 80033c8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033d0:	3b01      	subs	r3, #1
 80033d2:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80033d4:	429a      	cmp	r2, r3
 80033d6:	d123      	bne.n	8003420 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80033d8:	697b      	ldr	r3, [r7, #20]
 80033da:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033e2:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80033e4:	429a      	cmp	r2, r3
 80033e6:	d11b      	bne.n	8003420 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80033e8:	697b      	ldr	r3, [r7, #20]
 80033ea:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033f2:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80033f4:	429a      	cmp	r2, r3
 80033f6:	d113      	bne.n	8003420 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80033f8:	697b      	ldr	r3, [r7, #20]
 80033fa:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003402:	085b      	lsrs	r3, r3, #1
 8003404:	3b01      	subs	r3, #1
 8003406:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003408:	429a      	cmp	r2, r3
 800340a:	d109      	bne.n	8003420 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800340c:	697b      	ldr	r3, [r7, #20]
 800340e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003416:	085b      	lsrs	r3, r3, #1
 8003418:	3b01      	subs	r3, #1
 800341a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800341c:	429a      	cmp	r2, r3
 800341e:	d071      	beq.n	8003504 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003420:	69bb      	ldr	r3, [r7, #24]
 8003422:	2b0c      	cmp	r3, #12
 8003424:	d068      	beq.n	80034f8 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003426:	4b35      	ldr	r3, [pc, #212]	; (80034fc <HAL_RCC_OscConfig+0x784>)
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800342e:	2b00      	cmp	r3, #0
 8003430:	d105      	bne.n	800343e <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003432:	4b32      	ldr	r3, [pc, #200]	; (80034fc <HAL_RCC_OscConfig+0x784>)
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800343a:	2b00      	cmp	r3, #0
 800343c:	d001      	beq.n	8003442 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 800343e:	2301      	movs	r3, #1
 8003440:	e0ac      	b.n	800359c <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003442:	4b2e      	ldr	r3, [pc, #184]	; (80034fc <HAL_RCC_OscConfig+0x784>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	4a2d      	ldr	r2, [pc, #180]	; (80034fc <HAL_RCC_OscConfig+0x784>)
 8003448:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800344c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800344e:	f7fd fe6b 	bl	8001128 <HAL_GetTick>
 8003452:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003454:	e008      	b.n	8003468 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003456:	f7fd fe67 	bl	8001128 <HAL_GetTick>
 800345a:	4602      	mov	r2, r0
 800345c:	693b      	ldr	r3, [r7, #16]
 800345e:	1ad3      	subs	r3, r2, r3
 8003460:	2b02      	cmp	r3, #2
 8003462:	d901      	bls.n	8003468 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8003464:	2303      	movs	r3, #3
 8003466:	e099      	b.n	800359c <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003468:	4b24      	ldr	r3, [pc, #144]	; (80034fc <HAL_RCC_OscConfig+0x784>)
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003470:	2b00      	cmp	r3, #0
 8003472:	d1f0      	bne.n	8003456 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003474:	4b21      	ldr	r3, [pc, #132]	; (80034fc <HAL_RCC_OscConfig+0x784>)
 8003476:	68da      	ldr	r2, [r3, #12]
 8003478:	4b21      	ldr	r3, [pc, #132]	; (8003500 <HAL_RCC_OscConfig+0x788>)
 800347a:	4013      	ands	r3, r2
 800347c:	687a      	ldr	r2, [r7, #4]
 800347e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003480:	687a      	ldr	r2, [r7, #4]
 8003482:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003484:	3a01      	subs	r2, #1
 8003486:	0112      	lsls	r2, r2, #4
 8003488:	4311      	orrs	r1, r2
 800348a:	687a      	ldr	r2, [r7, #4]
 800348c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800348e:	0212      	lsls	r2, r2, #8
 8003490:	4311      	orrs	r1, r2
 8003492:	687a      	ldr	r2, [r7, #4]
 8003494:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003496:	0852      	lsrs	r2, r2, #1
 8003498:	3a01      	subs	r2, #1
 800349a:	0552      	lsls	r2, r2, #21
 800349c:	4311      	orrs	r1, r2
 800349e:	687a      	ldr	r2, [r7, #4]
 80034a0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80034a2:	0852      	lsrs	r2, r2, #1
 80034a4:	3a01      	subs	r2, #1
 80034a6:	0652      	lsls	r2, r2, #25
 80034a8:	4311      	orrs	r1, r2
 80034aa:	687a      	ldr	r2, [r7, #4]
 80034ac:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80034ae:	06d2      	lsls	r2, r2, #27
 80034b0:	430a      	orrs	r2, r1
 80034b2:	4912      	ldr	r1, [pc, #72]	; (80034fc <HAL_RCC_OscConfig+0x784>)
 80034b4:	4313      	orrs	r3, r2
 80034b6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80034b8:	4b10      	ldr	r3, [pc, #64]	; (80034fc <HAL_RCC_OscConfig+0x784>)
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	4a0f      	ldr	r2, [pc, #60]	; (80034fc <HAL_RCC_OscConfig+0x784>)
 80034be:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80034c2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80034c4:	4b0d      	ldr	r3, [pc, #52]	; (80034fc <HAL_RCC_OscConfig+0x784>)
 80034c6:	68db      	ldr	r3, [r3, #12]
 80034c8:	4a0c      	ldr	r2, [pc, #48]	; (80034fc <HAL_RCC_OscConfig+0x784>)
 80034ca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80034ce:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80034d0:	f7fd fe2a 	bl	8001128 <HAL_GetTick>
 80034d4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80034d6:	e008      	b.n	80034ea <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034d8:	f7fd fe26 	bl	8001128 <HAL_GetTick>
 80034dc:	4602      	mov	r2, r0
 80034de:	693b      	ldr	r3, [r7, #16]
 80034e0:	1ad3      	subs	r3, r2, r3
 80034e2:	2b02      	cmp	r3, #2
 80034e4:	d901      	bls.n	80034ea <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 80034e6:	2303      	movs	r3, #3
 80034e8:	e058      	b.n	800359c <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80034ea:	4b04      	ldr	r3, [pc, #16]	; (80034fc <HAL_RCC_OscConfig+0x784>)
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d0f0      	beq.n	80034d8 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80034f6:	e050      	b.n	800359a <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80034f8:	2301      	movs	r3, #1
 80034fa:	e04f      	b.n	800359c <HAL_RCC_OscConfig+0x824>
 80034fc:	40021000 	.word	0x40021000
 8003500:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003504:	4b27      	ldr	r3, [pc, #156]	; (80035a4 <HAL_RCC_OscConfig+0x82c>)
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800350c:	2b00      	cmp	r3, #0
 800350e:	d144      	bne.n	800359a <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003510:	4b24      	ldr	r3, [pc, #144]	; (80035a4 <HAL_RCC_OscConfig+0x82c>)
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	4a23      	ldr	r2, [pc, #140]	; (80035a4 <HAL_RCC_OscConfig+0x82c>)
 8003516:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800351a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800351c:	4b21      	ldr	r3, [pc, #132]	; (80035a4 <HAL_RCC_OscConfig+0x82c>)
 800351e:	68db      	ldr	r3, [r3, #12]
 8003520:	4a20      	ldr	r2, [pc, #128]	; (80035a4 <HAL_RCC_OscConfig+0x82c>)
 8003522:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003526:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003528:	f7fd fdfe 	bl	8001128 <HAL_GetTick>
 800352c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800352e:	e008      	b.n	8003542 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003530:	f7fd fdfa 	bl	8001128 <HAL_GetTick>
 8003534:	4602      	mov	r2, r0
 8003536:	693b      	ldr	r3, [r7, #16]
 8003538:	1ad3      	subs	r3, r2, r3
 800353a:	2b02      	cmp	r3, #2
 800353c:	d901      	bls.n	8003542 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 800353e:	2303      	movs	r3, #3
 8003540:	e02c      	b.n	800359c <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003542:	4b18      	ldr	r3, [pc, #96]	; (80035a4 <HAL_RCC_OscConfig+0x82c>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800354a:	2b00      	cmp	r3, #0
 800354c:	d0f0      	beq.n	8003530 <HAL_RCC_OscConfig+0x7b8>
 800354e:	e024      	b.n	800359a <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003550:	69bb      	ldr	r3, [r7, #24]
 8003552:	2b0c      	cmp	r3, #12
 8003554:	d01f      	beq.n	8003596 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003556:	4b13      	ldr	r3, [pc, #76]	; (80035a4 <HAL_RCC_OscConfig+0x82c>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	4a12      	ldr	r2, [pc, #72]	; (80035a4 <HAL_RCC_OscConfig+0x82c>)
 800355c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003560:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003562:	f7fd fde1 	bl	8001128 <HAL_GetTick>
 8003566:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003568:	e008      	b.n	800357c <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800356a:	f7fd fddd 	bl	8001128 <HAL_GetTick>
 800356e:	4602      	mov	r2, r0
 8003570:	693b      	ldr	r3, [r7, #16]
 8003572:	1ad3      	subs	r3, r2, r3
 8003574:	2b02      	cmp	r3, #2
 8003576:	d901      	bls.n	800357c <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8003578:	2303      	movs	r3, #3
 800357a:	e00f      	b.n	800359c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800357c:	4b09      	ldr	r3, [pc, #36]	; (80035a4 <HAL_RCC_OscConfig+0x82c>)
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003584:	2b00      	cmp	r3, #0
 8003586:	d1f0      	bne.n	800356a <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003588:	4b06      	ldr	r3, [pc, #24]	; (80035a4 <HAL_RCC_OscConfig+0x82c>)
 800358a:	68da      	ldr	r2, [r3, #12]
 800358c:	4905      	ldr	r1, [pc, #20]	; (80035a4 <HAL_RCC_OscConfig+0x82c>)
 800358e:	4b06      	ldr	r3, [pc, #24]	; (80035a8 <HAL_RCC_OscConfig+0x830>)
 8003590:	4013      	ands	r3, r2
 8003592:	60cb      	str	r3, [r1, #12]
 8003594:	e001      	b.n	800359a <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003596:	2301      	movs	r3, #1
 8003598:	e000      	b.n	800359c <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 800359a:	2300      	movs	r3, #0
}
 800359c:	4618      	mov	r0, r3
 800359e:	3720      	adds	r7, #32
 80035a0:	46bd      	mov	sp, r7
 80035a2:	bd80      	pop	{r7, pc}
 80035a4:	40021000 	.word	0x40021000
 80035a8:	feeefffc 	.word	0xfeeefffc

080035ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	b086      	sub	sp, #24
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
 80035b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80035b6:	2300      	movs	r3, #0
 80035b8:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d101      	bne.n	80035c4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80035c0:	2301      	movs	r3, #1
 80035c2:	e11d      	b.n	8003800 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80035c4:	4b90      	ldr	r3, [pc, #576]	; (8003808 <HAL_RCC_ClockConfig+0x25c>)
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f003 030f 	and.w	r3, r3, #15
 80035cc:	683a      	ldr	r2, [r7, #0]
 80035ce:	429a      	cmp	r2, r3
 80035d0:	d910      	bls.n	80035f4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035d2:	4b8d      	ldr	r3, [pc, #564]	; (8003808 <HAL_RCC_ClockConfig+0x25c>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f023 020f 	bic.w	r2, r3, #15
 80035da:	498b      	ldr	r1, [pc, #556]	; (8003808 <HAL_RCC_ClockConfig+0x25c>)
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	4313      	orrs	r3, r2
 80035e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80035e2:	4b89      	ldr	r3, [pc, #548]	; (8003808 <HAL_RCC_ClockConfig+0x25c>)
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f003 030f 	and.w	r3, r3, #15
 80035ea:	683a      	ldr	r2, [r7, #0]
 80035ec:	429a      	cmp	r2, r3
 80035ee:	d001      	beq.n	80035f4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80035f0:	2301      	movs	r3, #1
 80035f2:	e105      	b.n	8003800 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f003 0302 	and.w	r3, r3, #2
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d010      	beq.n	8003622 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	689a      	ldr	r2, [r3, #8]
 8003604:	4b81      	ldr	r3, [pc, #516]	; (800380c <HAL_RCC_ClockConfig+0x260>)
 8003606:	689b      	ldr	r3, [r3, #8]
 8003608:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800360c:	429a      	cmp	r2, r3
 800360e:	d908      	bls.n	8003622 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003610:	4b7e      	ldr	r3, [pc, #504]	; (800380c <HAL_RCC_ClockConfig+0x260>)
 8003612:	689b      	ldr	r3, [r3, #8]
 8003614:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	689b      	ldr	r3, [r3, #8]
 800361c:	497b      	ldr	r1, [pc, #492]	; (800380c <HAL_RCC_ClockConfig+0x260>)
 800361e:	4313      	orrs	r3, r2
 8003620:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f003 0301 	and.w	r3, r3, #1
 800362a:	2b00      	cmp	r3, #0
 800362c:	d079      	beq.n	8003722 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	685b      	ldr	r3, [r3, #4]
 8003632:	2b03      	cmp	r3, #3
 8003634:	d11e      	bne.n	8003674 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003636:	4b75      	ldr	r3, [pc, #468]	; (800380c <HAL_RCC_ClockConfig+0x260>)
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800363e:	2b00      	cmp	r3, #0
 8003640:	d101      	bne.n	8003646 <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8003642:	2301      	movs	r3, #1
 8003644:	e0dc      	b.n	8003800 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8003646:	f000 fa3b 	bl	8003ac0 <RCC_GetSysClockFreqFromPLLSource>
 800364a:	4603      	mov	r3, r0
 800364c:	4a70      	ldr	r2, [pc, #448]	; (8003810 <HAL_RCC_ClockConfig+0x264>)
 800364e:	4293      	cmp	r3, r2
 8003650:	d946      	bls.n	80036e0 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8003652:	4b6e      	ldr	r3, [pc, #440]	; (800380c <HAL_RCC_ClockConfig+0x260>)
 8003654:	689b      	ldr	r3, [r3, #8]
 8003656:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800365a:	2b00      	cmp	r3, #0
 800365c:	d140      	bne.n	80036e0 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800365e:	4b6b      	ldr	r3, [pc, #428]	; (800380c <HAL_RCC_ClockConfig+0x260>)
 8003660:	689b      	ldr	r3, [r3, #8]
 8003662:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003666:	4a69      	ldr	r2, [pc, #420]	; (800380c <HAL_RCC_ClockConfig+0x260>)
 8003668:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800366c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800366e:	2380      	movs	r3, #128	; 0x80
 8003670:	617b      	str	r3, [r7, #20]
 8003672:	e035      	b.n	80036e0 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	685b      	ldr	r3, [r3, #4]
 8003678:	2b02      	cmp	r3, #2
 800367a:	d107      	bne.n	800368c <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800367c:	4b63      	ldr	r3, [pc, #396]	; (800380c <HAL_RCC_ClockConfig+0x260>)
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003684:	2b00      	cmp	r3, #0
 8003686:	d115      	bne.n	80036b4 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8003688:	2301      	movs	r3, #1
 800368a:	e0b9      	b.n	8003800 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	685b      	ldr	r3, [r3, #4]
 8003690:	2b00      	cmp	r3, #0
 8003692:	d107      	bne.n	80036a4 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003694:	4b5d      	ldr	r3, [pc, #372]	; (800380c <HAL_RCC_ClockConfig+0x260>)
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f003 0302 	and.w	r3, r3, #2
 800369c:	2b00      	cmp	r3, #0
 800369e:	d109      	bne.n	80036b4 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80036a0:	2301      	movs	r3, #1
 80036a2:	e0ad      	b.n	8003800 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80036a4:	4b59      	ldr	r3, [pc, #356]	; (800380c <HAL_RCC_ClockConfig+0x260>)
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d101      	bne.n	80036b4 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80036b0:	2301      	movs	r3, #1
 80036b2:	e0a5      	b.n	8003800 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 80036b4:	f000 f8b4 	bl	8003820 <HAL_RCC_GetSysClockFreq>
 80036b8:	4603      	mov	r3, r0
 80036ba:	4a55      	ldr	r2, [pc, #340]	; (8003810 <HAL_RCC_ClockConfig+0x264>)
 80036bc:	4293      	cmp	r3, r2
 80036be:	d90f      	bls.n	80036e0 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80036c0:	4b52      	ldr	r3, [pc, #328]	; (800380c <HAL_RCC_ClockConfig+0x260>)
 80036c2:	689b      	ldr	r3, [r3, #8]
 80036c4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d109      	bne.n	80036e0 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80036cc:	4b4f      	ldr	r3, [pc, #316]	; (800380c <HAL_RCC_ClockConfig+0x260>)
 80036ce:	689b      	ldr	r3, [r3, #8]
 80036d0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80036d4:	4a4d      	ldr	r2, [pc, #308]	; (800380c <HAL_RCC_ClockConfig+0x260>)
 80036d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80036da:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80036dc:	2380      	movs	r3, #128	; 0x80
 80036de:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80036e0:	4b4a      	ldr	r3, [pc, #296]	; (800380c <HAL_RCC_ClockConfig+0x260>)
 80036e2:	689b      	ldr	r3, [r3, #8]
 80036e4:	f023 0203 	bic.w	r2, r3, #3
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	685b      	ldr	r3, [r3, #4]
 80036ec:	4947      	ldr	r1, [pc, #284]	; (800380c <HAL_RCC_ClockConfig+0x260>)
 80036ee:	4313      	orrs	r3, r2
 80036f0:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80036f2:	f7fd fd19 	bl	8001128 <HAL_GetTick>
 80036f6:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036f8:	e00a      	b.n	8003710 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80036fa:	f7fd fd15 	bl	8001128 <HAL_GetTick>
 80036fe:	4602      	mov	r2, r0
 8003700:	693b      	ldr	r3, [r7, #16]
 8003702:	1ad3      	subs	r3, r2, r3
 8003704:	f241 3288 	movw	r2, #5000	; 0x1388
 8003708:	4293      	cmp	r3, r2
 800370a:	d901      	bls.n	8003710 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 800370c:	2303      	movs	r3, #3
 800370e:	e077      	b.n	8003800 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003710:	4b3e      	ldr	r3, [pc, #248]	; (800380c <HAL_RCC_ClockConfig+0x260>)
 8003712:	689b      	ldr	r3, [r3, #8]
 8003714:	f003 020c 	and.w	r2, r3, #12
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	685b      	ldr	r3, [r3, #4]
 800371c:	009b      	lsls	r3, r3, #2
 800371e:	429a      	cmp	r2, r3
 8003720:	d1eb      	bne.n	80036fa <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8003722:	697b      	ldr	r3, [r7, #20]
 8003724:	2b80      	cmp	r3, #128	; 0x80
 8003726:	d105      	bne.n	8003734 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003728:	4b38      	ldr	r3, [pc, #224]	; (800380c <HAL_RCC_ClockConfig+0x260>)
 800372a:	689b      	ldr	r3, [r3, #8]
 800372c:	4a37      	ldr	r2, [pc, #220]	; (800380c <HAL_RCC_ClockConfig+0x260>)
 800372e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003732:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f003 0302 	and.w	r3, r3, #2
 800373c:	2b00      	cmp	r3, #0
 800373e:	d010      	beq.n	8003762 <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	689a      	ldr	r2, [r3, #8]
 8003744:	4b31      	ldr	r3, [pc, #196]	; (800380c <HAL_RCC_ClockConfig+0x260>)
 8003746:	689b      	ldr	r3, [r3, #8]
 8003748:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800374c:	429a      	cmp	r2, r3
 800374e:	d208      	bcs.n	8003762 <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003750:	4b2e      	ldr	r3, [pc, #184]	; (800380c <HAL_RCC_ClockConfig+0x260>)
 8003752:	689b      	ldr	r3, [r3, #8]
 8003754:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	689b      	ldr	r3, [r3, #8]
 800375c:	492b      	ldr	r1, [pc, #172]	; (800380c <HAL_RCC_ClockConfig+0x260>)
 800375e:	4313      	orrs	r3, r2
 8003760:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003762:	4b29      	ldr	r3, [pc, #164]	; (8003808 <HAL_RCC_ClockConfig+0x25c>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f003 030f 	and.w	r3, r3, #15
 800376a:	683a      	ldr	r2, [r7, #0]
 800376c:	429a      	cmp	r2, r3
 800376e:	d210      	bcs.n	8003792 <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003770:	4b25      	ldr	r3, [pc, #148]	; (8003808 <HAL_RCC_ClockConfig+0x25c>)
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f023 020f 	bic.w	r2, r3, #15
 8003778:	4923      	ldr	r1, [pc, #140]	; (8003808 <HAL_RCC_ClockConfig+0x25c>)
 800377a:	683b      	ldr	r3, [r7, #0]
 800377c:	4313      	orrs	r3, r2
 800377e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003780:	4b21      	ldr	r3, [pc, #132]	; (8003808 <HAL_RCC_ClockConfig+0x25c>)
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f003 030f 	and.w	r3, r3, #15
 8003788:	683a      	ldr	r2, [r7, #0]
 800378a:	429a      	cmp	r2, r3
 800378c:	d001      	beq.n	8003792 <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 800378e:	2301      	movs	r3, #1
 8003790:	e036      	b.n	8003800 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f003 0304 	and.w	r3, r3, #4
 800379a:	2b00      	cmp	r3, #0
 800379c:	d008      	beq.n	80037b0 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800379e:	4b1b      	ldr	r3, [pc, #108]	; (800380c <HAL_RCC_ClockConfig+0x260>)
 80037a0:	689b      	ldr	r3, [r3, #8]
 80037a2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	68db      	ldr	r3, [r3, #12]
 80037aa:	4918      	ldr	r1, [pc, #96]	; (800380c <HAL_RCC_ClockConfig+0x260>)
 80037ac:	4313      	orrs	r3, r2
 80037ae:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f003 0308 	and.w	r3, r3, #8
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d009      	beq.n	80037d0 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80037bc:	4b13      	ldr	r3, [pc, #76]	; (800380c <HAL_RCC_ClockConfig+0x260>)
 80037be:	689b      	ldr	r3, [r3, #8]
 80037c0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	691b      	ldr	r3, [r3, #16]
 80037c8:	00db      	lsls	r3, r3, #3
 80037ca:	4910      	ldr	r1, [pc, #64]	; (800380c <HAL_RCC_ClockConfig+0x260>)
 80037cc:	4313      	orrs	r3, r2
 80037ce:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80037d0:	f000 f826 	bl	8003820 <HAL_RCC_GetSysClockFreq>
 80037d4:	4602      	mov	r2, r0
 80037d6:	4b0d      	ldr	r3, [pc, #52]	; (800380c <HAL_RCC_ClockConfig+0x260>)
 80037d8:	689b      	ldr	r3, [r3, #8]
 80037da:	091b      	lsrs	r3, r3, #4
 80037dc:	f003 030f 	and.w	r3, r3, #15
 80037e0:	490c      	ldr	r1, [pc, #48]	; (8003814 <HAL_RCC_ClockConfig+0x268>)
 80037e2:	5ccb      	ldrb	r3, [r1, r3]
 80037e4:	f003 031f 	and.w	r3, r3, #31
 80037e8:	fa22 f303 	lsr.w	r3, r2, r3
 80037ec:	4a0a      	ldr	r2, [pc, #40]	; (8003818 <HAL_RCC_ClockConfig+0x26c>)
 80037ee:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80037f0:	4b0a      	ldr	r3, [pc, #40]	; (800381c <HAL_RCC_ClockConfig+0x270>)
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	4618      	mov	r0, r3
 80037f6:	f7fd fb59 	bl	8000eac <HAL_InitTick>
 80037fa:	4603      	mov	r3, r0
 80037fc:	73fb      	strb	r3, [r7, #15]

  return status;
 80037fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8003800:	4618      	mov	r0, r3
 8003802:	3718      	adds	r7, #24
 8003804:	46bd      	mov	sp, r7
 8003806:	bd80      	pop	{r7, pc}
 8003808:	40022000 	.word	0x40022000
 800380c:	40021000 	.word	0x40021000
 8003810:	04c4b400 	.word	0x04c4b400
 8003814:	08008fe0 	.word	0x08008fe0
 8003818:	20000000 	.word	0x20000000
 800381c:	20000004 	.word	0x20000004

08003820 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003820:	b480      	push	{r7}
 8003822:	b089      	sub	sp, #36	; 0x24
 8003824:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003826:	2300      	movs	r3, #0
 8003828:	61fb      	str	r3, [r7, #28]
 800382a:	2300      	movs	r3, #0
 800382c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800382e:	4b3e      	ldr	r3, [pc, #248]	; (8003928 <HAL_RCC_GetSysClockFreq+0x108>)
 8003830:	689b      	ldr	r3, [r3, #8]
 8003832:	f003 030c 	and.w	r3, r3, #12
 8003836:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003838:	4b3b      	ldr	r3, [pc, #236]	; (8003928 <HAL_RCC_GetSysClockFreq+0x108>)
 800383a:	68db      	ldr	r3, [r3, #12]
 800383c:	f003 0303 	and.w	r3, r3, #3
 8003840:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003842:	693b      	ldr	r3, [r7, #16]
 8003844:	2b00      	cmp	r3, #0
 8003846:	d005      	beq.n	8003854 <HAL_RCC_GetSysClockFreq+0x34>
 8003848:	693b      	ldr	r3, [r7, #16]
 800384a:	2b0c      	cmp	r3, #12
 800384c:	d121      	bne.n	8003892 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	2b01      	cmp	r3, #1
 8003852:	d11e      	bne.n	8003892 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003854:	4b34      	ldr	r3, [pc, #208]	; (8003928 <HAL_RCC_GetSysClockFreq+0x108>)
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f003 0308 	and.w	r3, r3, #8
 800385c:	2b00      	cmp	r3, #0
 800385e:	d107      	bne.n	8003870 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003860:	4b31      	ldr	r3, [pc, #196]	; (8003928 <HAL_RCC_GetSysClockFreq+0x108>)
 8003862:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003866:	0a1b      	lsrs	r3, r3, #8
 8003868:	f003 030f 	and.w	r3, r3, #15
 800386c:	61fb      	str	r3, [r7, #28]
 800386e:	e005      	b.n	800387c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003870:	4b2d      	ldr	r3, [pc, #180]	; (8003928 <HAL_RCC_GetSysClockFreq+0x108>)
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	091b      	lsrs	r3, r3, #4
 8003876:	f003 030f 	and.w	r3, r3, #15
 800387a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800387c:	4a2b      	ldr	r2, [pc, #172]	; (800392c <HAL_RCC_GetSysClockFreq+0x10c>)
 800387e:	69fb      	ldr	r3, [r7, #28]
 8003880:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003884:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003886:	693b      	ldr	r3, [r7, #16]
 8003888:	2b00      	cmp	r3, #0
 800388a:	d10d      	bne.n	80038a8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800388c:	69fb      	ldr	r3, [r7, #28]
 800388e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003890:	e00a      	b.n	80038a8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003892:	693b      	ldr	r3, [r7, #16]
 8003894:	2b04      	cmp	r3, #4
 8003896:	d102      	bne.n	800389e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003898:	4b25      	ldr	r3, [pc, #148]	; (8003930 <HAL_RCC_GetSysClockFreq+0x110>)
 800389a:	61bb      	str	r3, [r7, #24]
 800389c:	e004      	b.n	80038a8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800389e:	693b      	ldr	r3, [r7, #16]
 80038a0:	2b08      	cmp	r3, #8
 80038a2:	d101      	bne.n	80038a8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80038a4:	4b23      	ldr	r3, [pc, #140]	; (8003934 <HAL_RCC_GetSysClockFreq+0x114>)
 80038a6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80038a8:	693b      	ldr	r3, [r7, #16]
 80038aa:	2b0c      	cmp	r3, #12
 80038ac:	d134      	bne.n	8003918 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80038ae:	4b1e      	ldr	r3, [pc, #120]	; (8003928 <HAL_RCC_GetSysClockFreq+0x108>)
 80038b0:	68db      	ldr	r3, [r3, #12]
 80038b2:	f003 0303 	and.w	r3, r3, #3
 80038b6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80038b8:	68bb      	ldr	r3, [r7, #8]
 80038ba:	2b02      	cmp	r3, #2
 80038bc:	d003      	beq.n	80038c6 <HAL_RCC_GetSysClockFreq+0xa6>
 80038be:	68bb      	ldr	r3, [r7, #8]
 80038c0:	2b03      	cmp	r3, #3
 80038c2:	d003      	beq.n	80038cc <HAL_RCC_GetSysClockFreq+0xac>
 80038c4:	e005      	b.n	80038d2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80038c6:	4b1a      	ldr	r3, [pc, #104]	; (8003930 <HAL_RCC_GetSysClockFreq+0x110>)
 80038c8:	617b      	str	r3, [r7, #20]
      break;
 80038ca:	e005      	b.n	80038d8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80038cc:	4b19      	ldr	r3, [pc, #100]	; (8003934 <HAL_RCC_GetSysClockFreq+0x114>)
 80038ce:	617b      	str	r3, [r7, #20]
      break;
 80038d0:	e002      	b.n	80038d8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80038d2:	69fb      	ldr	r3, [r7, #28]
 80038d4:	617b      	str	r3, [r7, #20]
      break;
 80038d6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80038d8:	4b13      	ldr	r3, [pc, #76]	; (8003928 <HAL_RCC_GetSysClockFreq+0x108>)
 80038da:	68db      	ldr	r3, [r3, #12]
 80038dc:	091b      	lsrs	r3, r3, #4
 80038de:	f003 030f 	and.w	r3, r3, #15
 80038e2:	3301      	adds	r3, #1
 80038e4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80038e6:	4b10      	ldr	r3, [pc, #64]	; (8003928 <HAL_RCC_GetSysClockFreq+0x108>)
 80038e8:	68db      	ldr	r3, [r3, #12]
 80038ea:	0a1b      	lsrs	r3, r3, #8
 80038ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80038f0:	697a      	ldr	r2, [r7, #20]
 80038f2:	fb03 f202 	mul.w	r2, r3, r2
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80038fc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80038fe:	4b0a      	ldr	r3, [pc, #40]	; (8003928 <HAL_RCC_GetSysClockFreq+0x108>)
 8003900:	68db      	ldr	r3, [r3, #12]
 8003902:	0e5b      	lsrs	r3, r3, #25
 8003904:	f003 0303 	and.w	r3, r3, #3
 8003908:	3301      	adds	r3, #1
 800390a:	005b      	lsls	r3, r3, #1
 800390c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800390e:	697a      	ldr	r2, [r7, #20]
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	fbb2 f3f3 	udiv	r3, r2, r3
 8003916:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003918:	69bb      	ldr	r3, [r7, #24]
}
 800391a:	4618      	mov	r0, r3
 800391c:	3724      	adds	r7, #36	; 0x24
 800391e:	46bd      	mov	sp, r7
 8003920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003924:	4770      	bx	lr
 8003926:	bf00      	nop
 8003928:	40021000 	.word	0x40021000
 800392c:	08008ff8 	.word	0x08008ff8
 8003930:	00f42400 	.word	0x00f42400
 8003934:	007a1200 	.word	0x007a1200

08003938 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003938:	b480      	push	{r7}
 800393a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800393c:	4b03      	ldr	r3, [pc, #12]	; (800394c <HAL_RCC_GetHCLKFreq+0x14>)
 800393e:	681b      	ldr	r3, [r3, #0]
}
 8003940:	4618      	mov	r0, r3
 8003942:	46bd      	mov	sp, r7
 8003944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003948:	4770      	bx	lr
 800394a:	bf00      	nop
 800394c:	20000000 	.word	0x20000000

08003950 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003950:	b580      	push	{r7, lr}
 8003952:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003954:	f7ff fff0 	bl	8003938 <HAL_RCC_GetHCLKFreq>
 8003958:	4602      	mov	r2, r0
 800395a:	4b06      	ldr	r3, [pc, #24]	; (8003974 <HAL_RCC_GetPCLK1Freq+0x24>)
 800395c:	689b      	ldr	r3, [r3, #8]
 800395e:	0a1b      	lsrs	r3, r3, #8
 8003960:	f003 0307 	and.w	r3, r3, #7
 8003964:	4904      	ldr	r1, [pc, #16]	; (8003978 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003966:	5ccb      	ldrb	r3, [r1, r3]
 8003968:	f003 031f 	and.w	r3, r3, #31
 800396c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003970:	4618      	mov	r0, r3
 8003972:	bd80      	pop	{r7, pc}
 8003974:	40021000 	.word	0x40021000
 8003978:	08008ff0 	.word	0x08008ff0

0800397c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800397c:	b580      	push	{r7, lr}
 800397e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003980:	f7ff ffda 	bl	8003938 <HAL_RCC_GetHCLKFreq>
 8003984:	4602      	mov	r2, r0
 8003986:	4b06      	ldr	r3, [pc, #24]	; (80039a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003988:	689b      	ldr	r3, [r3, #8]
 800398a:	0adb      	lsrs	r3, r3, #11
 800398c:	f003 0307 	and.w	r3, r3, #7
 8003990:	4904      	ldr	r1, [pc, #16]	; (80039a4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003992:	5ccb      	ldrb	r3, [r1, r3]
 8003994:	f003 031f 	and.w	r3, r3, #31
 8003998:	fa22 f303 	lsr.w	r3, r2, r3
}
 800399c:	4618      	mov	r0, r3
 800399e:	bd80      	pop	{r7, pc}
 80039a0:	40021000 	.word	0x40021000
 80039a4:	08008ff0 	.word	0x08008ff0

080039a8 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80039a8:	b480      	push	{r7}
 80039aa:	b083      	sub	sp, #12
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
 80039b0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	220f      	movs	r2, #15
 80039b6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80039b8:	4b12      	ldr	r3, [pc, #72]	; (8003a04 <HAL_RCC_GetClockConfig+0x5c>)
 80039ba:	689b      	ldr	r3, [r3, #8]
 80039bc:	f003 0203 	and.w	r2, r3, #3
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80039c4:	4b0f      	ldr	r3, [pc, #60]	; (8003a04 <HAL_RCC_GetClockConfig+0x5c>)
 80039c6:	689b      	ldr	r3, [r3, #8]
 80039c8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80039d0:	4b0c      	ldr	r3, [pc, #48]	; (8003a04 <HAL_RCC_GetClockConfig+0x5c>)
 80039d2:	689b      	ldr	r3, [r3, #8]
 80039d4:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80039dc:	4b09      	ldr	r3, [pc, #36]	; (8003a04 <HAL_RCC_GetClockConfig+0x5c>)
 80039de:	689b      	ldr	r3, [r3, #8]
 80039e0:	08db      	lsrs	r3, r3, #3
 80039e2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80039ea:	4b07      	ldr	r3, [pc, #28]	; (8003a08 <HAL_RCC_GetClockConfig+0x60>)
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f003 020f 	and.w	r2, r3, #15
 80039f2:	683b      	ldr	r3, [r7, #0]
 80039f4:	601a      	str	r2, [r3, #0]
}
 80039f6:	bf00      	nop
 80039f8:	370c      	adds	r7, #12
 80039fa:	46bd      	mov	sp, r7
 80039fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a00:	4770      	bx	lr
 8003a02:	bf00      	nop
 8003a04:	40021000 	.word	0x40021000
 8003a08:	40022000 	.word	0x40022000

08003a0c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	b086      	sub	sp, #24
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003a14:	2300      	movs	r3, #0
 8003a16:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003a18:	4b27      	ldr	r3, [pc, #156]	; (8003ab8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003a1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d003      	beq.n	8003a2c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003a24:	f7ff f8d4 	bl	8002bd0 <HAL_PWREx_GetVoltageRange>
 8003a28:	6178      	str	r0, [r7, #20]
 8003a2a:	e014      	b.n	8003a56 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003a2c:	4b22      	ldr	r3, [pc, #136]	; (8003ab8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003a2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a30:	4a21      	ldr	r2, [pc, #132]	; (8003ab8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003a32:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a36:	6593      	str	r3, [r2, #88]	; 0x58
 8003a38:	4b1f      	ldr	r3, [pc, #124]	; (8003ab8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003a3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a40:	60fb      	str	r3, [r7, #12]
 8003a42:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003a44:	f7ff f8c4 	bl	8002bd0 <HAL_PWREx_GetVoltageRange>
 8003a48:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003a4a:	4b1b      	ldr	r3, [pc, #108]	; (8003ab8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003a4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a4e:	4a1a      	ldr	r2, [pc, #104]	; (8003ab8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003a50:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a54:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003a56:	697b      	ldr	r3, [r7, #20]
 8003a58:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a5c:	d10b      	bne.n	8003a76 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	2b80      	cmp	r3, #128	; 0x80
 8003a62:	d913      	bls.n	8003a8c <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2ba0      	cmp	r3, #160	; 0xa0
 8003a68:	d902      	bls.n	8003a70 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003a6a:	2302      	movs	r3, #2
 8003a6c:	613b      	str	r3, [r7, #16]
 8003a6e:	e00d      	b.n	8003a8c <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003a70:	2301      	movs	r3, #1
 8003a72:	613b      	str	r3, [r7, #16]
 8003a74:	e00a      	b.n	8003a8c <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	2b7f      	cmp	r3, #127	; 0x7f
 8003a7a:	d902      	bls.n	8003a82 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8003a7c:	2302      	movs	r3, #2
 8003a7e:	613b      	str	r3, [r7, #16]
 8003a80:	e004      	b.n	8003a8c <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	2b70      	cmp	r3, #112	; 0x70
 8003a86:	d101      	bne.n	8003a8c <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003a88:	2301      	movs	r3, #1
 8003a8a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003a8c:	4b0b      	ldr	r3, [pc, #44]	; (8003abc <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f023 020f 	bic.w	r2, r3, #15
 8003a94:	4909      	ldr	r1, [pc, #36]	; (8003abc <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8003a96:	693b      	ldr	r3, [r7, #16]
 8003a98:	4313      	orrs	r3, r2
 8003a9a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003a9c:	4b07      	ldr	r3, [pc, #28]	; (8003abc <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f003 030f 	and.w	r3, r3, #15
 8003aa4:	693a      	ldr	r2, [r7, #16]
 8003aa6:	429a      	cmp	r2, r3
 8003aa8:	d001      	beq.n	8003aae <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8003aaa:	2301      	movs	r3, #1
 8003aac:	e000      	b.n	8003ab0 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8003aae:	2300      	movs	r3, #0
}
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	3718      	adds	r7, #24
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	bd80      	pop	{r7, pc}
 8003ab8:	40021000 	.word	0x40021000
 8003abc:	40022000 	.word	0x40022000

08003ac0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003ac0:	b480      	push	{r7}
 8003ac2:	b087      	sub	sp, #28
 8003ac4:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003ac6:	4b2d      	ldr	r3, [pc, #180]	; (8003b7c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003ac8:	68db      	ldr	r3, [r3, #12]
 8003aca:	f003 0303 	and.w	r3, r3, #3
 8003ace:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	2b03      	cmp	r3, #3
 8003ad4:	d00b      	beq.n	8003aee <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	2b03      	cmp	r3, #3
 8003ada:	d825      	bhi.n	8003b28 <RCC_GetSysClockFreqFromPLLSource+0x68>
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	2b01      	cmp	r3, #1
 8003ae0:	d008      	beq.n	8003af4 <RCC_GetSysClockFreqFromPLLSource+0x34>
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	2b02      	cmp	r3, #2
 8003ae6:	d11f      	bne.n	8003b28 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8003ae8:	4b25      	ldr	r3, [pc, #148]	; (8003b80 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003aea:	613b      	str	r3, [r7, #16]
    break;
 8003aec:	e01f      	b.n	8003b2e <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8003aee:	4b25      	ldr	r3, [pc, #148]	; (8003b84 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8003af0:	613b      	str	r3, [r7, #16]
    break;
 8003af2:	e01c      	b.n	8003b2e <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003af4:	4b21      	ldr	r3, [pc, #132]	; (8003b7c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f003 0308 	and.w	r3, r3, #8
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d107      	bne.n	8003b10 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003b00:	4b1e      	ldr	r3, [pc, #120]	; (8003b7c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003b02:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b06:	0a1b      	lsrs	r3, r3, #8
 8003b08:	f003 030f 	and.w	r3, r3, #15
 8003b0c:	617b      	str	r3, [r7, #20]
 8003b0e:	e005      	b.n	8003b1c <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003b10:	4b1a      	ldr	r3, [pc, #104]	; (8003b7c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	091b      	lsrs	r3, r3, #4
 8003b16:	f003 030f 	and.w	r3, r3, #15
 8003b1a:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8003b1c:	4a1a      	ldr	r2, [pc, #104]	; (8003b88 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8003b1e:	697b      	ldr	r3, [r7, #20]
 8003b20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b24:	613b      	str	r3, [r7, #16]
    break;
 8003b26:	e002      	b.n	8003b2e <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8003b28:	2300      	movs	r3, #0
 8003b2a:	613b      	str	r3, [r7, #16]
    break;
 8003b2c:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003b2e:	4b13      	ldr	r3, [pc, #76]	; (8003b7c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003b30:	68db      	ldr	r3, [r3, #12]
 8003b32:	091b      	lsrs	r3, r3, #4
 8003b34:	f003 030f 	and.w	r3, r3, #15
 8003b38:	3301      	adds	r3, #1
 8003b3a:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003b3c:	4b0f      	ldr	r3, [pc, #60]	; (8003b7c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003b3e:	68db      	ldr	r3, [r3, #12]
 8003b40:	0a1b      	lsrs	r3, r3, #8
 8003b42:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003b46:	693a      	ldr	r2, [r7, #16]
 8003b48:	fb03 f202 	mul.w	r2, r3, r2
 8003b4c:	68bb      	ldr	r3, [r7, #8]
 8003b4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b52:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003b54:	4b09      	ldr	r3, [pc, #36]	; (8003b7c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003b56:	68db      	ldr	r3, [r3, #12]
 8003b58:	0e5b      	lsrs	r3, r3, #25
 8003b5a:	f003 0303 	and.w	r3, r3, #3
 8003b5e:	3301      	adds	r3, #1
 8003b60:	005b      	lsls	r3, r3, #1
 8003b62:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8003b64:	693a      	ldr	r2, [r7, #16]
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b6c:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8003b6e:	683b      	ldr	r3, [r7, #0]
}
 8003b70:	4618      	mov	r0, r3
 8003b72:	371c      	adds	r7, #28
 8003b74:	46bd      	mov	sp, r7
 8003b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7a:	4770      	bx	lr
 8003b7c:	40021000 	.word	0x40021000
 8003b80:	00f42400 	.word	0x00f42400
 8003b84:	007a1200 	.word	0x007a1200
 8003b88:	08008ff8 	.word	0x08008ff8

08003b8c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	b086      	sub	sp, #24
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003b94:	2300      	movs	r3, #0
 8003b96:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003b98:	2300      	movs	r3, #0
 8003b9a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d040      	beq.n	8003c2a <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003bac:	2b80      	cmp	r3, #128	; 0x80
 8003bae:	d02a      	beq.n	8003c06 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003bb0:	2b80      	cmp	r3, #128	; 0x80
 8003bb2:	d825      	bhi.n	8003c00 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003bb4:	2b60      	cmp	r3, #96	; 0x60
 8003bb6:	d026      	beq.n	8003c06 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003bb8:	2b60      	cmp	r3, #96	; 0x60
 8003bba:	d821      	bhi.n	8003c00 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003bbc:	2b40      	cmp	r3, #64	; 0x40
 8003bbe:	d006      	beq.n	8003bce <HAL_RCCEx_PeriphCLKConfig+0x42>
 8003bc0:	2b40      	cmp	r3, #64	; 0x40
 8003bc2:	d81d      	bhi.n	8003c00 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d009      	beq.n	8003bdc <HAL_RCCEx_PeriphCLKConfig+0x50>
 8003bc8:	2b20      	cmp	r3, #32
 8003bca:	d010      	beq.n	8003bee <HAL_RCCEx_PeriphCLKConfig+0x62>
 8003bcc:	e018      	b.n	8003c00 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003bce:	4b89      	ldr	r3, [pc, #548]	; (8003df4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003bd0:	68db      	ldr	r3, [r3, #12]
 8003bd2:	4a88      	ldr	r2, [pc, #544]	; (8003df4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003bd4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003bd8:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003bda:	e015      	b.n	8003c08 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	3304      	adds	r3, #4
 8003be0:	2100      	movs	r1, #0
 8003be2:	4618      	mov	r0, r3
 8003be4:	f000 fb02 	bl	80041ec <RCCEx_PLLSAI1_Config>
 8003be8:	4603      	mov	r3, r0
 8003bea:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003bec:	e00c      	b.n	8003c08 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	3320      	adds	r3, #32
 8003bf2:	2100      	movs	r1, #0
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	f000 fbed 	bl	80043d4 <RCCEx_PLLSAI2_Config>
 8003bfa:	4603      	mov	r3, r0
 8003bfc:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003bfe:	e003      	b.n	8003c08 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003c00:	2301      	movs	r3, #1
 8003c02:	74fb      	strb	r3, [r7, #19]
      break;
 8003c04:	e000      	b.n	8003c08 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8003c06:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003c08:	7cfb      	ldrb	r3, [r7, #19]
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d10b      	bne.n	8003c26 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003c0e:	4b79      	ldr	r3, [pc, #484]	; (8003df4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003c10:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003c14:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003c1c:	4975      	ldr	r1, [pc, #468]	; (8003df4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003c1e:	4313      	orrs	r3, r2
 8003c20:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8003c24:	e001      	b.n	8003c2a <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c26:	7cfb      	ldrb	r3, [r7, #19]
 8003c28:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d047      	beq.n	8003cc6 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c3a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c3e:	d030      	beq.n	8003ca2 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8003c40:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c44:	d82a      	bhi.n	8003c9c <HAL_RCCEx_PeriphCLKConfig+0x110>
 8003c46:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003c4a:	d02a      	beq.n	8003ca2 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8003c4c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003c50:	d824      	bhi.n	8003c9c <HAL_RCCEx_PeriphCLKConfig+0x110>
 8003c52:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c56:	d008      	beq.n	8003c6a <HAL_RCCEx_PeriphCLKConfig+0xde>
 8003c58:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c5c:	d81e      	bhi.n	8003c9c <HAL_RCCEx_PeriphCLKConfig+0x110>
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d00a      	beq.n	8003c78 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8003c62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c66:	d010      	beq.n	8003c8a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8003c68:	e018      	b.n	8003c9c <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003c6a:	4b62      	ldr	r3, [pc, #392]	; (8003df4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003c6c:	68db      	ldr	r3, [r3, #12]
 8003c6e:	4a61      	ldr	r2, [pc, #388]	; (8003df4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003c70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c74:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003c76:	e015      	b.n	8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	3304      	adds	r3, #4
 8003c7c:	2100      	movs	r1, #0
 8003c7e:	4618      	mov	r0, r3
 8003c80:	f000 fab4 	bl	80041ec <RCCEx_PLLSAI1_Config>
 8003c84:	4603      	mov	r3, r0
 8003c86:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003c88:	e00c      	b.n	8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	3320      	adds	r3, #32
 8003c8e:	2100      	movs	r1, #0
 8003c90:	4618      	mov	r0, r3
 8003c92:	f000 fb9f 	bl	80043d4 <RCCEx_PLLSAI2_Config>
 8003c96:	4603      	mov	r3, r0
 8003c98:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003c9a:	e003      	b.n	8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003c9c:	2301      	movs	r3, #1
 8003c9e:	74fb      	strb	r3, [r7, #19]
      break;
 8003ca0:	e000      	b.n	8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8003ca2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003ca4:	7cfb      	ldrb	r3, [r7, #19]
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d10b      	bne.n	8003cc2 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003caa:	4b52      	ldr	r3, [pc, #328]	; (8003df4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003cac:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003cb0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cb8:	494e      	ldr	r1, [pc, #312]	; (8003df4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003cba:	4313      	orrs	r3, r2
 8003cbc:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8003cc0:	e001      	b.n	8003cc6 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cc2:	7cfb      	ldrb	r3, [r7, #19]
 8003cc4:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	f000 809f 	beq.w	8003e12 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003cd8:	4b46      	ldr	r3, [pc, #280]	; (8003df4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003cda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cdc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d101      	bne.n	8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8003ce4:	2301      	movs	r3, #1
 8003ce6:	e000      	b.n	8003cea <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8003ce8:	2300      	movs	r3, #0
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d00d      	beq.n	8003d0a <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003cee:	4b41      	ldr	r3, [pc, #260]	; (8003df4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003cf0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cf2:	4a40      	ldr	r2, [pc, #256]	; (8003df4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003cf4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003cf8:	6593      	str	r3, [r2, #88]	; 0x58
 8003cfa:	4b3e      	ldr	r3, [pc, #248]	; (8003df4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003cfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d02:	60bb      	str	r3, [r7, #8]
 8003d04:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d06:	2301      	movs	r3, #1
 8003d08:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003d0a:	4b3b      	ldr	r3, [pc, #236]	; (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	4a3a      	ldr	r2, [pc, #232]	; (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003d10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d14:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003d16:	f7fd fa07 	bl	8001128 <HAL_GetTick>
 8003d1a:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003d1c:	e009      	b.n	8003d32 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d1e:	f7fd fa03 	bl	8001128 <HAL_GetTick>
 8003d22:	4602      	mov	r2, r0
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	1ad3      	subs	r3, r2, r3
 8003d28:	2b02      	cmp	r3, #2
 8003d2a:	d902      	bls.n	8003d32 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8003d2c:	2303      	movs	r3, #3
 8003d2e:	74fb      	strb	r3, [r7, #19]
        break;
 8003d30:	e005      	b.n	8003d3e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003d32:	4b31      	ldr	r3, [pc, #196]	; (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d0ef      	beq.n	8003d1e <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8003d3e:	7cfb      	ldrb	r3, [r7, #19]
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d15b      	bne.n	8003dfc <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003d44:	4b2b      	ldr	r3, [pc, #172]	; (8003df4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003d46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d4a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d4e:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003d50:	697b      	ldr	r3, [r7, #20]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d01f      	beq.n	8003d96 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d5c:	697a      	ldr	r2, [r7, #20]
 8003d5e:	429a      	cmp	r2, r3
 8003d60:	d019      	beq.n	8003d96 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003d62:	4b24      	ldr	r3, [pc, #144]	; (8003df4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003d64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d68:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d6c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003d6e:	4b21      	ldr	r3, [pc, #132]	; (8003df4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003d70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d74:	4a1f      	ldr	r2, [pc, #124]	; (8003df4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003d76:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d7a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003d7e:	4b1d      	ldr	r3, [pc, #116]	; (8003df4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003d80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d84:	4a1b      	ldr	r2, [pc, #108]	; (8003df4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003d86:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d8a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003d8e:	4a19      	ldr	r2, [pc, #100]	; (8003df4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003d90:	697b      	ldr	r3, [r7, #20]
 8003d92:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003d96:	697b      	ldr	r3, [r7, #20]
 8003d98:	f003 0301 	and.w	r3, r3, #1
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d016      	beq.n	8003dce <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003da0:	f7fd f9c2 	bl	8001128 <HAL_GetTick>
 8003da4:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003da6:	e00b      	b.n	8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003da8:	f7fd f9be 	bl	8001128 <HAL_GetTick>
 8003dac:	4602      	mov	r2, r0
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	1ad3      	subs	r3, r2, r3
 8003db2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d902      	bls.n	8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8003dba:	2303      	movs	r3, #3
 8003dbc:	74fb      	strb	r3, [r7, #19]
            break;
 8003dbe:	e006      	b.n	8003dce <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003dc0:	4b0c      	ldr	r3, [pc, #48]	; (8003df4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003dc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dc6:	f003 0302 	and.w	r3, r3, #2
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d0ec      	beq.n	8003da8 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8003dce:	7cfb      	ldrb	r3, [r7, #19]
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d10c      	bne.n	8003dee <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003dd4:	4b07      	ldr	r3, [pc, #28]	; (8003df4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003dd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dda:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003de4:	4903      	ldr	r1, [pc, #12]	; (8003df4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003de6:	4313      	orrs	r3, r2
 8003de8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003dec:	e008      	b.n	8003e00 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003dee:	7cfb      	ldrb	r3, [r7, #19]
 8003df0:	74bb      	strb	r3, [r7, #18]
 8003df2:	e005      	b.n	8003e00 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8003df4:	40021000 	.word	0x40021000
 8003df8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003dfc:	7cfb      	ldrb	r3, [r7, #19]
 8003dfe:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003e00:	7c7b      	ldrb	r3, [r7, #17]
 8003e02:	2b01      	cmp	r3, #1
 8003e04:	d105      	bne.n	8003e12 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e06:	4ba0      	ldr	r3, [pc, #640]	; (8004088 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003e08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e0a:	4a9f      	ldr	r2, [pc, #636]	; (8004088 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003e0c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e10:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f003 0301 	and.w	r3, r3, #1
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d00a      	beq.n	8003e34 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003e1e:	4b9a      	ldr	r3, [pc, #616]	; (8004088 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003e20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e24:	f023 0203 	bic.w	r2, r3, #3
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e2c:	4996      	ldr	r1, [pc, #600]	; (8004088 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003e2e:	4313      	orrs	r3, r2
 8003e30:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f003 0302 	and.w	r3, r3, #2
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d00a      	beq.n	8003e56 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003e40:	4b91      	ldr	r3, [pc, #580]	; (8004088 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003e42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e46:	f023 020c 	bic.w	r2, r3, #12
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e4e:	498e      	ldr	r1, [pc, #568]	; (8004088 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003e50:	4313      	orrs	r3, r2
 8003e52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f003 0304 	and.w	r3, r3, #4
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d00a      	beq.n	8003e78 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003e62:	4b89      	ldr	r3, [pc, #548]	; (8004088 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003e64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e68:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e70:	4985      	ldr	r1, [pc, #532]	; (8004088 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003e72:	4313      	orrs	r3, r2
 8003e74:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f003 0308 	and.w	r3, r3, #8
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d00a      	beq.n	8003e9a <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003e84:	4b80      	ldr	r3, [pc, #512]	; (8004088 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003e86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e8a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e92:	497d      	ldr	r1, [pc, #500]	; (8004088 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003e94:	4313      	orrs	r3, r2
 8003e96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f003 0310 	and.w	r3, r3, #16
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d00a      	beq.n	8003ebc <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003ea6:	4b78      	ldr	r3, [pc, #480]	; (8004088 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003ea8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003eac:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003eb4:	4974      	ldr	r1, [pc, #464]	; (8004088 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003eb6:	4313      	orrs	r3, r2
 8003eb8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f003 0320 	and.w	r3, r3, #32
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d00a      	beq.n	8003ede <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003ec8:	4b6f      	ldr	r3, [pc, #444]	; (8004088 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003eca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ece:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ed6:	496c      	ldr	r1, [pc, #432]	; (8004088 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003ed8:	4313      	orrs	r3, r2
 8003eda:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d00a      	beq.n	8003f00 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003eea:	4b67      	ldr	r3, [pc, #412]	; (8004088 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003eec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ef0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003ef8:	4963      	ldr	r1, [pc, #396]	; (8004088 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003efa:	4313      	orrs	r3, r2
 8003efc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d00a      	beq.n	8003f22 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003f0c:	4b5e      	ldr	r3, [pc, #376]	; (8004088 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003f0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f12:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003f1a:	495b      	ldr	r1, [pc, #364]	; (8004088 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003f1c:	4313      	orrs	r3, r2
 8003f1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d00a      	beq.n	8003f44 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003f2e:	4b56      	ldr	r3, [pc, #344]	; (8004088 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003f30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f34:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f3c:	4952      	ldr	r1, [pc, #328]	; (8004088 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003f3e:	4313      	orrs	r3, r2
 8003f40:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d00a      	beq.n	8003f66 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003f50:	4b4d      	ldr	r3, [pc, #308]	; (8004088 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003f52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f56:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f5e:	494a      	ldr	r1, [pc, #296]	; (8004088 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003f60:	4313      	orrs	r3, r2
 8003f62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d00a      	beq.n	8003f88 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003f72:	4b45      	ldr	r3, [pc, #276]	; (8004088 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003f74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f78:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f80:	4941      	ldr	r1, [pc, #260]	; (8004088 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003f82:	4313      	orrs	r3, r2
 8003f84:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d00a      	beq.n	8003faa <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003f94:	4b3c      	ldr	r3, [pc, #240]	; (8004088 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003f96:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003f9a:	f023 0203 	bic.w	r2, r3, #3
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003fa2:	4939      	ldr	r1, [pc, #228]	; (8004088 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003fa4:	4313      	orrs	r3, r2
 8003fa6:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d028      	beq.n	8004008 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003fb6:	4b34      	ldr	r3, [pc, #208]	; (8004088 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003fb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fbc:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003fc4:	4930      	ldr	r1, [pc, #192]	; (8004088 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003fc6:	4313      	orrs	r3, r2
 8003fc8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003fd0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003fd4:	d106      	bne.n	8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003fd6:	4b2c      	ldr	r3, [pc, #176]	; (8004088 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003fd8:	68db      	ldr	r3, [r3, #12]
 8003fda:	4a2b      	ldr	r2, [pc, #172]	; (8004088 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003fdc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003fe0:	60d3      	str	r3, [r2, #12]
 8003fe2:	e011      	b.n	8004008 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003fe8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003fec:	d10c      	bne.n	8004008 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	3304      	adds	r3, #4
 8003ff2:	2101      	movs	r1, #1
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	f000 f8f9 	bl	80041ec <RCCEx_PLLSAI1_Config>
 8003ffa:	4603      	mov	r3, r0
 8003ffc:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003ffe:	7cfb      	ldrb	r3, [r7, #19]
 8004000:	2b00      	cmp	r3, #0
 8004002:	d001      	beq.n	8004008 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8004004:	7cfb      	ldrb	r3, [r7, #19]
 8004006:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004010:	2b00      	cmp	r3, #0
 8004012:	d04d      	beq.n	80040b0 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004018:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800401c:	d108      	bne.n	8004030 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 800401e:	4b1a      	ldr	r3, [pc, #104]	; (8004088 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004020:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004024:	4a18      	ldr	r2, [pc, #96]	; (8004088 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004026:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800402a:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 800402e:	e012      	b.n	8004056 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8004030:	4b15      	ldr	r3, [pc, #84]	; (8004088 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004032:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004036:	4a14      	ldr	r2, [pc, #80]	; (8004088 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004038:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800403c:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8004040:	4b11      	ldr	r3, [pc, #68]	; (8004088 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004042:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004046:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800404e:	490e      	ldr	r1, [pc, #56]	; (8004088 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004050:	4313      	orrs	r3, r2
 8004052:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800405a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800405e:	d106      	bne.n	800406e <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004060:	4b09      	ldr	r3, [pc, #36]	; (8004088 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004062:	68db      	ldr	r3, [r3, #12]
 8004064:	4a08      	ldr	r2, [pc, #32]	; (8004088 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004066:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800406a:	60d3      	str	r3, [r2, #12]
 800406c:	e020      	b.n	80040b0 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004072:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004076:	d109      	bne.n	800408c <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004078:	4b03      	ldr	r3, [pc, #12]	; (8004088 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800407a:	68db      	ldr	r3, [r3, #12]
 800407c:	4a02      	ldr	r2, [pc, #8]	; (8004088 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800407e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004082:	60d3      	str	r3, [r2, #12]
 8004084:	e014      	b.n	80040b0 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8004086:	bf00      	nop
 8004088:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004090:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004094:	d10c      	bne.n	80040b0 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	3304      	adds	r3, #4
 800409a:	2101      	movs	r1, #1
 800409c:	4618      	mov	r0, r3
 800409e:	f000 f8a5 	bl	80041ec <RCCEx_PLLSAI1_Config>
 80040a2:	4603      	mov	r3, r0
 80040a4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80040a6:	7cfb      	ldrb	r3, [r7, #19]
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d001      	beq.n	80040b0 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 80040ac:	7cfb      	ldrb	r3, [r7, #19]
 80040ae:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d028      	beq.n	800410e <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80040bc:	4b4a      	ldr	r3, [pc, #296]	; (80041e8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80040be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040c2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80040ca:	4947      	ldr	r1, [pc, #284]	; (80041e8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80040cc:	4313      	orrs	r3, r2
 80040ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80040d6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80040da:	d106      	bne.n	80040ea <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80040dc:	4b42      	ldr	r3, [pc, #264]	; (80041e8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80040de:	68db      	ldr	r3, [r3, #12]
 80040e0:	4a41      	ldr	r2, [pc, #260]	; (80041e8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80040e2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80040e6:	60d3      	str	r3, [r2, #12]
 80040e8:	e011      	b.n	800410e <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80040ee:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80040f2:	d10c      	bne.n	800410e <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	3304      	adds	r3, #4
 80040f8:	2101      	movs	r1, #1
 80040fa:	4618      	mov	r0, r3
 80040fc:	f000 f876 	bl	80041ec <RCCEx_PLLSAI1_Config>
 8004100:	4603      	mov	r3, r0
 8004102:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004104:	7cfb      	ldrb	r3, [r7, #19]
 8004106:	2b00      	cmp	r3, #0
 8004108:	d001      	beq.n	800410e <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 800410a:	7cfb      	ldrb	r3, [r7, #19]
 800410c:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004116:	2b00      	cmp	r3, #0
 8004118:	d01e      	beq.n	8004158 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800411a:	4b33      	ldr	r3, [pc, #204]	; (80041e8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800411c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004120:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800412a:	492f      	ldr	r1, [pc, #188]	; (80041e8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800412c:	4313      	orrs	r3, r2
 800412e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004138:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800413c:	d10c      	bne.n	8004158 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	3304      	adds	r3, #4
 8004142:	2102      	movs	r1, #2
 8004144:	4618      	mov	r0, r3
 8004146:	f000 f851 	bl	80041ec <RCCEx_PLLSAI1_Config>
 800414a:	4603      	mov	r3, r0
 800414c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800414e:	7cfb      	ldrb	r3, [r7, #19]
 8004150:	2b00      	cmp	r3, #0
 8004152:	d001      	beq.n	8004158 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8004154:	7cfb      	ldrb	r3, [r7, #19]
 8004156:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004160:	2b00      	cmp	r3, #0
 8004162:	d00b      	beq.n	800417c <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004164:	4b20      	ldr	r3, [pc, #128]	; (80041e8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004166:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800416a:	f023 0204 	bic.w	r2, r3, #4
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004174:	491c      	ldr	r1, [pc, #112]	; (80041e8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004176:	4313      	orrs	r3, r2
 8004178:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004184:	2b00      	cmp	r3, #0
 8004186:	d00b      	beq.n	80041a0 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004188:	4b17      	ldr	r3, [pc, #92]	; (80041e8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800418a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800418e:	f023 0218 	bic.w	r2, r3, #24
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004198:	4913      	ldr	r1, [pc, #76]	; (80041e8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800419a:	4313      	orrs	r3, r2
 800419c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d017      	beq.n	80041dc <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80041ac:	4b0e      	ldr	r3, [pc, #56]	; (80041e8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80041ae:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80041b2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80041bc:	490a      	ldr	r1, [pc, #40]	; (80041e8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80041be:	4313      	orrs	r3, r2
 80041c0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80041ca:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80041ce:	d105      	bne.n	80041dc <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80041d0:	4b05      	ldr	r3, [pc, #20]	; (80041e8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80041d2:	68db      	ldr	r3, [r3, #12]
 80041d4:	4a04      	ldr	r2, [pc, #16]	; (80041e8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80041d6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80041da:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80041dc:	7cbb      	ldrb	r3, [r7, #18]
}
 80041de:	4618      	mov	r0, r3
 80041e0:	3718      	adds	r7, #24
 80041e2:	46bd      	mov	sp, r7
 80041e4:	bd80      	pop	{r7, pc}
 80041e6:	bf00      	nop
 80041e8:	40021000 	.word	0x40021000

080041ec <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80041ec:	b580      	push	{r7, lr}
 80041ee:	b084      	sub	sp, #16
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
 80041f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80041f6:	2300      	movs	r3, #0
 80041f8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80041fa:	4b72      	ldr	r3, [pc, #456]	; (80043c4 <RCCEx_PLLSAI1_Config+0x1d8>)
 80041fc:	68db      	ldr	r3, [r3, #12]
 80041fe:	f003 0303 	and.w	r3, r3, #3
 8004202:	2b00      	cmp	r3, #0
 8004204:	d00e      	beq.n	8004224 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004206:	4b6f      	ldr	r3, [pc, #444]	; (80043c4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004208:	68db      	ldr	r3, [r3, #12]
 800420a:	f003 0203 	and.w	r2, r3, #3
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	429a      	cmp	r2, r3
 8004214:	d103      	bne.n	800421e <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
       ||
 800421a:	2b00      	cmp	r3, #0
 800421c:	d142      	bne.n	80042a4 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 800421e:	2301      	movs	r3, #1
 8004220:	73fb      	strb	r3, [r7, #15]
 8004222:	e03f      	b.n	80042a4 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	2b03      	cmp	r3, #3
 800422a:	d018      	beq.n	800425e <RCCEx_PLLSAI1_Config+0x72>
 800422c:	2b03      	cmp	r3, #3
 800422e:	d825      	bhi.n	800427c <RCCEx_PLLSAI1_Config+0x90>
 8004230:	2b01      	cmp	r3, #1
 8004232:	d002      	beq.n	800423a <RCCEx_PLLSAI1_Config+0x4e>
 8004234:	2b02      	cmp	r3, #2
 8004236:	d009      	beq.n	800424c <RCCEx_PLLSAI1_Config+0x60>
 8004238:	e020      	b.n	800427c <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800423a:	4b62      	ldr	r3, [pc, #392]	; (80043c4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f003 0302 	and.w	r3, r3, #2
 8004242:	2b00      	cmp	r3, #0
 8004244:	d11d      	bne.n	8004282 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8004246:	2301      	movs	r3, #1
 8004248:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800424a:	e01a      	b.n	8004282 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800424c:	4b5d      	ldr	r3, [pc, #372]	; (80043c4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004254:	2b00      	cmp	r3, #0
 8004256:	d116      	bne.n	8004286 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8004258:	2301      	movs	r3, #1
 800425a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800425c:	e013      	b.n	8004286 <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800425e:	4b59      	ldr	r3, [pc, #356]	; (80043c4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004266:	2b00      	cmp	r3, #0
 8004268:	d10f      	bne.n	800428a <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800426a:	4b56      	ldr	r3, [pc, #344]	; (80043c4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004272:	2b00      	cmp	r3, #0
 8004274:	d109      	bne.n	800428a <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 8004276:	2301      	movs	r3, #1
 8004278:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800427a:	e006      	b.n	800428a <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 800427c:	2301      	movs	r3, #1
 800427e:	73fb      	strb	r3, [r7, #15]
      break;
 8004280:	e004      	b.n	800428c <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8004282:	bf00      	nop
 8004284:	e002      	b.n	800428c <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8004286:	bf00      	nop
 8004288:	e000      	b.n	800428c <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800428a:	bf00      	nop
    }

    if(status == HAL_OK)
 800428c:	7bfb      	ldrb	r3, [r7, #15]
 800428e:	2b00      	cmp	r3, #0
 8004290:	d108      	bne.n	80042a4 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8004292:	4b4c      	ldr	r3, [pc, #304]	; (80043c4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004294:	68db      	ldr	r3, [r3, #12]
 8004296:	f023 0203 	bic.w	r2, r3, #3
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	4949      	ldr	r1, [pc, #292]	; (80043c4 <RCCEx_PLLSAI1_Config+0x1d8>)
 80042a0:	4313      	orrs	r3, r2
 80042a2:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80042a4:	7bfb      	ldrb	r3, [r7, #15]
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	f040 8086 	bne.w	80043b8 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80042ac:	4b45      	ldr	r3, [pc, #276]	; (80043c4 <RCCEx_PLLSAI1_Config+0x1d8>)
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	4a44      	ldr	r2, [pc, #272]	; (80043c4 <RCCEx_PLLSAI1_Config+0x1d8>)
 80042b2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80042b6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80042b8:	f7fc ff36 	bl	8001128 <HAL_GetTick>
 80042bc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80042be:	e009      	b.n	80042d4 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80042c0:	f7fc ff32 	bl	8001128 <HAL_GetTick>
 80042c4:	4602      	mov	r2, r0
 80042c6:	68bb      	ldr	r3, [r7, #8]
 80042c8:	1ad3      	subs	r3, r2, r3
 80042ca:	2b02      	cmp	r3, #2
 80042cc:	d902      	bls.n	80042d4 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 80042ce:	2303      	movs	r3, #3
 80042d0:	73fb      	strb	r3, [r7, #15]
        break;
 80042d2:	e005      	b.n	80042e0 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80042d4:	4b3b      	ldr	r3, [pc, #236]	; (80043c4 <RCCEx_PLLSAI1_Config+0x1d8>)
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d1ef      	bne.n	80042c0 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 80042e0:	7bfb      	ldrb	r3, [r7, #15]
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d168      	bne.n	80043b8 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80042e6:	683b      	ldr	r3, [r7, #0]
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d113      	bne.n	8004314 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80042ec:	4b35      	ldr	r3, [pc, #212]	; (80043c4 <RCCEx_PLLSAI1_Config+0x1d8>)
 80042ee:	691a      	ldr	r2, [r3, #16]
 80042f0:	4b35      	ldr	r3, [pc, #212]	; (80043c8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80042f2:	4013      	ands	r3, r2
 80042f4:	687a      	ldr	r2, [r7, #4]
 80042f6:	6892      	ldr	r2, [r2, #8]
 80042f8:	0211      	lsls	r1, r2, #8
 80042fa:	687a      	ldr	r2, [r7, #4]
 80042fc:	68d2      	ldr	r2, [r2, #12]
 80042fe:	06d2      	lsls	r2, r2, #27
 8004300:	4311      	orrs	r1, r2
 8004302:	687a      	ldr	r2, [r7, #4]
 8004304:	6852      	ldr	r2, [r2, #4]
 8004306:	3a01      	subs	r2, #1
 8004308:	0112      	lsls	r2, r2, #4
 800430a:	430a      	orrs	r2, r1
 800430c:	492d      	ldr	r1, [pc, #180]	; (80043c4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800430e:	4313      	orrs	r3, r2
 8004310:	610b      	str	r3, [r1, #16]
 8004312:	e02d      	b.n	8004370 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004314:	683b      	ldr	r3, [r7, #0]
 8004316:	2b01      	cmp	r3, #1
 8004318:	d115      	bne.n	8004346 <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800431a:	4b2a      	ldr	r3, [pc, #168]	; (80043c4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800431c:	691a      	ldr	r2, [r3, #16]
 800431e:	4b2b      	ldr	r3, [pc, #172]	; (80043cc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004320:	4013      	ands	r3, r2
 8004322:	687a      	ldr	r2, [r7, #4]
 8004324:	6892      	ldr	r2, [r2, #8]
 8004326:	0211      	lsls	r1, r2, #8
 8004328:	687a      	ldr	r2, [r7, #4]
 800432a:	6912      	ldr	r2, [r2, #16]
 800432c:	0852      	lsrs	r2, r2, #1
 800432e:	3a01      	subs	r2, #1
 8004330:	0552      	lsls	r2, r2, #21
 8004332:	4311      	orrs	r1, r2
 8004334:	687a      	ldr	r2, [r7, #4]
 8004336:	6852      	ldr	r2, [r2, #4]
 8004338:	3a01      	subs	r2, #1
 800433a:	0112      	lsls	r2, r2, #4
 800433c:	430a      	orrs	r2, r1
 800433e:	4921      	ldr	r1, [pc, #132]	; (80043c4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004340:	4313      	orrs	r3, r2
 8004342:	610b      	str	r3, [r1, #16]
 8004344:	e014      	b.n	8004370 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004346:	4b1f      	ldr	r3, [pc, #124]	; (80043c4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004348:	691a      	ldr	r2, [r3, #16]
 800434a:	4b21      	ldr	r3, [pc, #132]	; (80043d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800434c:	4013      	ands	r3, r2
 800434e:	687a      	ldr	r2, [r7, #4]
 8004350:	6892      	ldr	r2, [r2, #8]
 8004352:	0211      	lsls	r1, r2, #8
 8004354:	687a      	ldr	r2, [r7, #4]
 8004356:	6952      	ldr	r2, [r2, #20]
 8004358:	0852      	lsrs	r2, r2, #1
 800435a:	3a01      	subs	r2, #1
 800435c:	0652      	lsls	r2, r2, #25
 800435e:	4311      	orrs	r1, r2
 8004360:	687a      	ldr	r2, [r7, #4]
 8004362:	6852      	ldr	r2, [r2, #4]
 8004364:	3a01      	subs	r2, #1
 8004366:	0112      	lsls	r2, r2, #4
 8004368:	430a      	orrs	r2, r1
 800436a:	4916      	ldr	r1, [pc, #88]	; (80043c4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800436c:	4313      	orrs	r3, r2
 800436e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004370:	4b14      	ldr	r3, [pc, #80]	; (80043c4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	4a13      	ldr	r2, [pc, #76]	; (80043c4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004376:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800437a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800437c:	f7fc fed4 	bl	8001128 <HAL_GetTick>
 8004380:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004382:	e009      	b.n	8004398 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004384:	f7fc fed0 	bl	8001128 <HAL_GetTick>
 8004388:	4602      	mov	r2, r0
 800438a:	68bb      	ldr	r3, [r7, #8]
 800438c:	1ad3      	subs	r3, r2, r3
 800438e:	2b02      	cmp	r3, #2
 8004390:	d902      	bls.n	8004398 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8004392:	2303      	movs	r3, #3
 8004394:	73fb      	strb	r3, [r7, #15]
          break;
 8004396:	e005      	b.n	80043a4 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004398:	4b0a      	ldr	r3, [pc, #40]	; (80043c4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d0ef      	beq.n	8004384 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 80043a4:	7bfb      	ldrb	r3, [r7, #15]
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d106      	bne.n	80043b8 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80043aa:	4b06      	ldr	r3, [pc, #24]	; (80043c4 <RCCEx_PLLSAI1_Config+0x1d8>)
 80043ac:	691a      	ldr	r2, [r3, #16]
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	699b      	ldr	r3, [r3, #24]
 80043b2:	4904      	ldr	r1, [pc, #16]	; (80043c4 <RCCEx_PLLSAI1_Config+0x1d8>)
 80043b4:	4313      	orrs	r3, r2
 80043b6:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80043b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80043ba:	4618      	mov	r0, r3
 80043bc:	3710      	adds	r7, #16
 80043be:	46bd      	mov	sp, r7
 80043c0:	bd80      	pop	{r7, pc}
 80043c2:	bf00      	nop
 80043c4:	40021000 	.word	0x40021000
 80043c8:	07ff800f 	.word	0x07ff800f
 80043cc:	ff9f800f 	.word	0xff9f800f
 80043d0:	f9ff800f 	.word	0xf9ff800f

080043d4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80043d4:	b580      	push	{r7, lr}
 80043d6:	b084      	sub	sp, #16
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]
 80043dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80043de:	2300      	movs	r3, #0
 80043e0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80043e2:	4b72      	ldr	r3, [pc, #456]	; (80045ac <RCCEx_PLLSAI2_Config+0x1d8>)
 80043e4:	68db      	ldr	r3, [r3, #12]
 80043e6:	f003 0303 	and.w	r3, r3, #3
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d00e      	beq.n	800440c <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80043ee:	4b6f      	ldr	r3, [pc, #444]	; (80045ac <RCCEx_PLLSAI2_Config+0x1d8>)
 80043f0:	68db      	ldr	r3, [r3, #12]
 80043f2:	f003 0203 	and.w	r2, r3, #3
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	429a      	cmp	r2, r3
 80043fc:	d103      	bne.n	8004406 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
       ||
 8004402:	2b00      	cmp	r3, #0
 8004404:	d142      	bne.n	800448c <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8004406:	2301      	movs	r3, #1
 8004408:	73fb      	strb	r3, [r7, #15]
 800440a:	e03f      	b.n	800448c <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	2b03      	cmp	r3, #3
 8004412:	d018      	beq.n	8004446 <RCCEx_PLLSAI2_Config+0x72>
 8004414:	2b03      	cmp	r3, #3
 8004416:	d825      	bhi.n	8004464 <RCCEx_PLLSAI2_Config+0x90>
 8004418:	2b01      	cmp	r3, #1
 800441a:	d002      	beq.n	8004422 <RCCEx_PLLSAI2_Config+0x4e>
 800441c:	2b02      	cmp	r3, #2
 800441e:	d009      	beq.n	8004434 <RCCEx_PLLSAI2_Config+0x60>
 8004420:	e020      	b.n	8004464 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004422:	4b62      	ldr	r3, [pc, #392]	; (80045ac <RCCEx_PLLSAI2_Config+0x1d8>)
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f003 0302 	and.w	r3, r3, #2
 800442a:	2b00      	cmp	r3, #0
 800442c:	d11d      	bne.n	800446a <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 800442e:	2301      	movs	r3, #1
 8004430:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004432:	e01a      	b.n	800446a <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004434:	4b5d      	ldr	r3, [pc, #372]	; (80045ac <RCCEx_PLLSAI2_Config+0x1d8>)
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800443c:	2b00      	cmp	r3, #0
 800443e:	d116      	bne.n	800446e <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8004440:	2301      	movs	r3, #1
 8004442:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004444:	e013      	b.n	800446e <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004446:	4b59      	ldr	r3, [pc, #356]	; (80045ac <RCCEx_PLLSAI2_Config+0x1d8>)
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800444e:	2b00      	cmp	r3, #0
 8004450:	d10f      	bne.n	8004472 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004452:	4b56      	ldr	r3, [pc, #344]	; (80045ac <RCCEx_PLLSAI2_Config+0x1d8>)
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800445a:	2b00      	cmp	r3, #0
 800445c:	d109      	bne.n	8004472 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 800445e:	2301      	movs	r3, #1
 8004460:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004462:	e006      	b.n	8004472 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8004464:	2301      	movs	r3, #1
 8004466:	73fb      	strb	r3, [r7, #15]
      break;
 8004468:	e004      	b.n	8004474 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800446a:	bf00      	nop
 800446c:	e002      	b.n	8004474 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800446e:	bf00      	nop
 8004470:	e000      	b.n	8004474 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8004472:	bf00      	nop
    }

    if(status == HAL_OK)
 8004474:	7bfb      	ldrb	r3, [r7, #15]
 8004476:	2b00      	cmp	r3, #0
 8004478:	d108      	bne.n	800448c <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 800447a:	4b4c      	ldr	r3, [pc, #304]	; (80045ac <RCCEx_PLLSAI2_Config+0x1d8>)
 800447c:	68db      	ldr	r3, [r3, #12]
 800447e:	f023 0203 	bic.w	r2, r3, #3
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	4949      	ldr	r1, [pc, #292]	; (80045ac <RCCEx_PLLSAI2_Config+0x1d8>)
 8004488:	4313      	orrs	r3, r2
 800448a:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 800448c:	7bfb      	ldrb	r3, [r7, #15]
 800448e:	2b00      	cmp	r3, #0
 8004490:	f040 8086 	bne.w	80045a0 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004494:	4b45      	ldr	r3, [pc, #276]	; (80045ac <RCCEx_PLLSAI2_Config+0x1d8>)
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	4a44      	ldr	r2, [pc, #272]	; (80045ac <RCCEx_PLLSAI2_Config+0x1d8>)
 800449a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800449e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80044a0:	f7fc fe42 	bl	8001128 <HAL_GetTick>
 80044a4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80044a6:	e009      	b.n	80044bc <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80044a8:	f7fc fe3e 	bl	8001128 <HAL_GetTick>
 80044ac:	4602      	mov	r2, r0
 80044ae:	68bb      	ldr	r3, [r7, #8]
 80044b0:	1ad3      	subs	r3, r2, r3
 80044b2:	2b02      	cmp	r3, #2
 80044b4:	d902      	bls.n	80044bc <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 80044b6:	2303      	movs	r3, #3
 80044b8:	73fb      	strb	r3, [r7, #15]
        break;
 80044ba:	e005      	b.n	80044c8 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80044bc:	4b3b      	ldr	r3, [pc, #236]	; (80045ac <RCCEx_PLLSAI2_Config+0x1d8>)
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d1ef      	bne.n	80044a8 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 80044c8:	7bfb      	ldrb	r3, [r7, #15]
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d168      	bne.n	80045a0 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80044ce:	683b      	ldr	r3, [r7, #0]
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d113      	bne.n	80044fc <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80044d4:	4b35      	ldr	r3, [pc, #212]	; (80045ac <RCCEx_PLLSAI2_Config+0x1d8>)
 80044d6:	695a      	ldr	r2, [r3, #20]
 80044d8:	4b35      	ldr	r3, [pc, #212]	; (80045b0 <RCCEx_PLLSAI2_Config+0x1dc>)
 80044da:	4013      	ands	r3, r2
 80044dc:	687a      	ldr	r2, [r7, #4]
 80044de:	6892      	ldr	r2, [r2, #8]
 80044e0:	0211      	lsls	r1, r2, #8
 80044e2:	687a      	ldr	r2, [r7, #4]
 80044e4:	68d2      	ldr	r2, [r2, #12]
 80044e6:	06d2      	lsls	r2, r2, #27
 80044e8:	4311      	orrs	r1, r2
 80044ea:	687a      	ldr	r2, [r7, #4]
 80044ec:	6852      	ldr	r2, [r2, #4]
 80044ee:	3a01      	subs	r2, #1
 80044f0:	0112      	lsls	r2, r2, #4
 80044f2:	430a      	orrs	r2, r1
 80044f4:	492d      	ldr	r1, [pc, #180]	; (80045ac <RCCEx_PLLSAI2_Config+0x1d8>)
 80044f6:	4313      	orrs	r3, r2
 80044f8:	614b      	str	r3, [r1, #20]
 80044fa:	e02d      	b.n	8004558 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 80044fc:	683b      	ldr	r3, [r7, #0]
 80044fe:	2b01      	cmp	r3, #1
 8004500:	d115      	bne.n	800452e <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004502:	4b2a      	ldr	r3, [pc, #168]	; (80045ac <RCCEx_PLLSAI2_Config+0x1d8>)
 8004504:	695a      	ldr	r2, [r3, #20]
 8004506:	4b2b      	ldr	r3, [pc, #172]	; (80045b4 <RCCEx_PLLSAI2_Config+0x1e0>)
 8004508:	4013      	ands	r3, r2
 800450a:	687a      	ldr	r2, [r7, #4]
 800450c:	6892      	ldr	r2, [r2, #8]
 800450e:	0211      	lsls	r1, r2, #8
 8004510:	687a      	ldr	r2, [r7, #4]
 8004512:	6912      	ldr	r2, [r2, #16]
 8004514:	0852      	lsrs	r2, r2, #1
 8004516:	3a01      	subs	r2, #1
 8004518:	0552      	lsls	r2, r2, #21
 800451a:	4311      	orrs	r1, r2
 800451c:	687a      	ldr	r2, [r7, #4]
 800451e:	6852      	ldr	r2, [r2, #4]
 8004520:	3a01      	subs	r2, #1
 8004522:	0112      	lsls	r2, r2, #4
 8004524:	430a      	orrs	r2, r1
 8004526:	4921      	ldr	r1, [pc, #132]	; (80045ac <RCCEx_PLLSAI2_Config+0x1d8>)
 8004528:	4313      	orrs	r3, r2
 800452a:	614b      	str	r3, [r1, #20]
 800452c:	e014      	b.n	8004558 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800452e:	4b1f      	ldr	r3, [pc, #124]	; (80045ac <RCCEx_PLLSAI2_Config+0x1d8>)
 8004530:	695a      	ldr	r2, [r3, #20]
 8004532:	4b21      	ldr	r3, [pc, #132]	; (80045b8 <RCCEx_PLLSAI2_Config+0x1e4>)
 8004534:	4013      	ands	r3, r2
 8004536:	687a      	ldr	r2, [r7, #4]
 8004538:	6892      	ldr	r2, [r2, #8]
 800453a:	0211      	lsls	r1, r2, #8
 800453c:	687a      	ldr	r2, [r7, #4]
 800453e:	6952      	ldr	r2, [r2, #20]
 8004540:	0852      	lsrs	r2, r2, #1
 8004542:	3a01      	subs	r2, #1
 8004544:	0652      	lsls	r2, r2, #25
 8004546:	4311      	orrs	r1, r2
 8004548:	687a      	ldr	r2, [r7, #4]
 800454a:	6852      	ldr	r2, [r2, #4]
 800454c:	3a01      	subs	r2, #1
 800454e:	0112      	lsls	r2, r2, #4
 8004550:	430a      	orrs	r2, r1
 8004552:	4916      	ldr	r1, [pc, #88]	; (80045ac <RCCEx_PLLSAI2_Config+0x1d8>)
 8004554:	4313      	orrs	r3, r2
 8004556:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004558:	4b14      	ldr	r3, [pc, #80]	; (80045ac <RCCEx_PLLSAI2_Config+0x1d8>)
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	4a13      	ldr	r2, [pc, #76]	; (80045ac <RCCEx_PLLSAI2_Config+0x1d8>)
 800455e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004562:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004564:	f7fc fde0 	bl	8001128 <HAL_GetTick>
 8004568:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800456a:	e009      	b.n	8004580 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800456c:	f7fc fddc 	bl	8001128 <HAL_GetTick>
 8004570:	4602      	mov	r2, r0
 8004572:	68bb      	ldr	r3, [r7, #8]
 8004574:	1ad3      	subs	r3, r2, r3
 8004576:	2b02      	cmp	r3, #2
 8004578:	d902      	bls.n	8004580 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800457a:	2303      	movs	r3, #3
 800457c:	73fb      	strb	r3, [r7, #15]
          break;
 800457e:	e005      	b.n	800458c <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004580:	4b0a      	ldr	r3, [pc, #40]	; (80045ac <RCCEx_PLLSAI2_Config+0x1d8>)
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004588:	2b00      	cmp	r3, #0
 800458a:	d0ef      	beq.n	800456c <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 800458c:	7bfb      	ldrb	r3, [r7, #15]
 800458e:	2b00      	cmp	r3, #0
 8004590:	d106      	bne.n	80045a0 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004592:	4b06      	ldr	r3, [pc, #24]	; (80045ac <RCCEx_PLLSAI2_Config+0x1d8>)
 8004594:	695a      	ldr	r2, [r3, #20]
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	699b      	ldr	r3, [r3, #24]
 800459a:	4904      	ldr	r1, [pc, #16]	; (80045ac <RCCEx_PLLSAI2_Config+0x1d8>)
 800459c:	4313      	orrs	r3, r2
 800459e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80045a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80045a2:	4618      	mov	r0, r3
 80045a4:	3710      	adds	r7, #16
 80045a6:	46bd      	mov	sp, r7
 80045a8:	bd80      	pop	{r7, pc}
 80045aa:	bf00      	nop
 80045ac:	40021000 	.word	0x40021000
 80045b0:	07ff800f 	.word	0x07ff800f
 80045b4:	ff9f800f 	.word	0xff9f800f
 80045b8:	f9ff800f 	.word	0xf9ff800f

080045bc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80045bc:	b580      	push	{r7, lr}
 80045be:	b082      	sub	sp, #8
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d101      	bne.n	80045ce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80045ca:	2301      	movs	r3, #1
 80045cc:	e049      	b.n	8004662 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045d4:	b2db      	uxtb	r3, r3
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d106      	bne.n	80045e8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	2200      	movs	r2, #0
 80045de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80045e2:	6878      	ldr	r0, [r7, #4]
 80045e4:	f000 f841 	bl	800466a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2202      	movs	r2, #2
 80045ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681a      	ldr	r2, [r3, #0]
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	3304      	adds	r3, #4
 80045f8:	4619      	mov	r1, r3
 80045fa:	4610      	mov	r0, r2
 80045fc:	f000 f9da 	bl	80049b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2201      	movs	r2, #1
 8004604:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2201      	movs	r2, #1
 800460c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2201      	movs	r2, #1
 8004614:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2201      	movs	r2, #1
 800461c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2201      	movs	r2, #1
 8004624:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2201      	movs	r2, #1
 800462c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2201      	movs	r2, #1
 8004634:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2201      	movs	r2, #1
 800463c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2201      	movs	r2, #1
 8004644:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2201      	movs	r2, #1
 800464c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2201      	movs	r2, #1
 8004654:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2201      	movs	r2, #1
 800465c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004660:	2300      	movs	r3, #0
}
 8004662:	4618      	mov	r0, r3
 8004664:	3708      	adds	r7, #8
 8004666:	46bd      	mov	sp, r7
 8004668:	bd80      	pop	{r7, pc}

0800466a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800466a:	b480      	push	{r7}
 800466c:	b083      	sub	sp, #12
 800466e:	af00      	add	r7, sp, #0
 8004670:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004672:	bf00      	nop
 8004674:	370c      	adds	r7, #12
 8004676:	46bd      	mov	sp, r7
 8004678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467c:	4770      	bx	lr
	...

08004680 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004680:	b480      	push	{r7}
 8004682:	b085      	sub	sp, #20
 8004684:	af00      	add	r7, sp, #0
 8004686:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800468e:	b2db      	uxtb	r3, r3
 8004690:	2b01      	cmp	r3, #1
 8004692:	d001      	beq.n	8004698 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004694:	2301      	movs	r3, #1
 8004696:	e04f      	b.n	8004738 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2202      	movs	r2, #2
 800469c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	68da      	ldr	r2, [r3, #12]
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f042 0201 	orr.w	r2, r2, #1
 80046ae:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	4a23      	ldr	r2, [pc, #140]	; (8004744 <HAL_TIM_Base_Start_IT+0xc4>)
 80046b6:	4293      	cmp	r3, r2
 80046b8:	d01d      	beq.n	80046f6 <HAL_TIM_Base_Start_IT+0x76>
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046c2:	d018      	beq.n	80046f6 <HAL_TIM_Base_Start_IT+0x76>
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	4a1f      	ldr	r2, [pc, #124]	; (8004748 <HAL_TIM_Base_Start_IT+0xc8>)
 80046ca:	4293      	cmp	r3, r2
 80046cc:	d013      	beq.n	80046f6 <HAL_TIM_Base_Start_IT+0x76>
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	4a1e      	ldr	r2, [pc, #120]	; (800474c <HAL_TIM_Base_Start_IT+0xcc>)
 80046d4:	4293      	cmp	r3, r2
 80046d6:	d00e      	beq.n	80046f6 <HAL_TIM_Base_Start_IT+0x76>
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	4a1c      	ldr	r2, [pc, #112]	; (8004750 <HAL_TIM_Base_Start_IT+0xd0>)
 80046de:	4293      	cmp	r3, r2
 80046e0:	d009      	beq.n	80046f6 <HAL_TIM_Base_Start_IT+0x76>
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	4a1b      	ldr	r2, [pc, #108]	; (8004754 <HAL_TIM_Base_Start_IT+0xd4>)
 80046e8:	4293      	cmp	r3, r2
 80046ea:	d004      	beq.n	80046f6 <HAL_TIM_Base_Start_IT+0x76>
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	4a19      	ldr	r2, [pc, #100]	; (8004758 <HAL_TIM_Base_Start_IT+0xd8>)
 80046f2:	4293      	cmp	r3, r2
 80046f4:	d115      	bne.n	8004722 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	689a      	ldr	r2, [r3, #8]
 80046fc:	4b17      	ldr	r3, [pc, #92]	; (800475c <HAL_TIM_Base_Start_IT+0xdc>)
 80046fe:	4013      	ands	r3, r2
 8004700:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	2b06      	cmp	r3, #6
 8004706:	d015      	beq.n	8004734 <HAL_TIM_Base_Start_IT+0xb4>
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800470e:	d011      	beq.n	8004734 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	681a      	ldr	r2, [r3, #0]
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f042 0201 	orr.w	r2, r2, #1
 800471e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004720:	e008      	b.n	8004734 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	681a      	ldr	r2, [r3, #0]
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f042 0201 	orr.w	r2, r2, #1
 8004730:	601a      	str	r2, [r3, #0]
 8004732:	e000      	b.n	8004736 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004734:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004736:	2300      	movs	r3, #0
}
 8004738:	4618      	mov	r0, r3
 800473a:	3714      	adds	r7, #20
 800473c:	46bd      	mov	sp, r7
 800473e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004742:	4770      	bx	lr
 8004744:	40012c00 	.word	0x40012c00
 8004748:	40000400 	.word	0x40000400
 800474c:	40000800 	.word	0x40000800
 8004750:	40000c00 	.word	0x40000c00
 8004754:	40013400 	.word	0x40013400
 8004758:	40014000 	.word	0x40014000
 800475c:	00010007 	.word	0x00010007

08004760 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004760:	b580      	push	{r7, lr}
 8004762:	b084      	sub	sp, #16
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	68db      	ldr	r3, [r3, #12]
 800476e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	691b      	ldr	r3, [r3, #16]
 8004776:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004778:	68bb      	ldr	r3, [r7, #8]
 800477a:	f003 0302 	and.w	r3, r3, #2
 800477e:	2b00      	cmp	r3, #0
 8004780:	d020      	beq.n	80047c4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	f003 0302 	and.w	r3, r3, #2
 8004788:	2b00      	cmp	r3, #0
 800478a:	d01b      	beq.n	80047c4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f06f 0202 	mvn.w	r2, #2
 8004794:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	2201      	movs	r2, #1
 800479a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	699b      	ldr	r3, [r3, #24]
 80047a2:	f003 0303 	and.w	r3, r3, #3
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d003      	beq.n	80047b2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80047aa:	6878      	ldr	r0, [r7, #4]
 80047ac:	f000 f8e4 	bl	8004978 <HAL_TIM_IC_CaptureCallback>
 80047b0:	e005      	b.n	80047be <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80047b2:	6878      	ldr	r0, [r7, #4]
 80047b4:	f000 f8d6 	bl	8004964 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047b8:	6878      	ldr	r0, [r7, #4]
 80047ba:	f000 f8e7 	bl	800498c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	2200      	movs	r2, #0
 80047c2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80047c4:	68bb      	ldr	r3, [r7, #8]
 80047c6:	f003 0304 	and.w	r3, r3, #4
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d020      	beq.n	8004810 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	f003 0304 	and.w	r3, r3, #4
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d01b      	beq.n	8004810 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f06f 0204 	mvn.w	r2, #4
 80047e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	2202      	movs	r2, #2
 80047e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	699b      	ldr	r3, [r3, #24]
 80047ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d003      	beq.n	80047fe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80047f6:	6878      	ldr	r0, [r7, #4]
 80047f8:	f000 f8be 	bl	8004978 <HAL_TIM_IC_CaptureCallback>
 80047fc:	e005      	b.n	800480a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80047fe:	6878      	ldr	r0, [r7, #4]
 8004800:	f000 f8b0 	bl	8004964 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004804:	6878      	ldr	r0, [r7, #4]
 8004806:	f000 f8c1 	bl	800498c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	2200      	movs	r2, #0
 800480e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004810:	68bb      	ldr	r3, [r7, #8]
 8004812:	f003 0308 	and.w	r3, r3, #8
 8004816:	2b00      	cmp	r3, #0
 8004818:	d020      	beq.n	800485c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	f003 0308 	and.w	r3, r3, #8
 8004820:	2b00      	cmp	r3, #0
 8004822:	d01b      	beq.n	800485c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f06f 0208 	mvn.w	r2, #8
 800482c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	2204      	movs	r2, #4
 8004832:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	69db      	ldr	r3, [r3, #28]
 800483a:	f003 0303 	and.w	r3, r3, #3
 800483e:	2b00      	cmp	r3, #0
 8004840:	d003      	beq.n	800484a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004842:	6878      	ldr	r0, [r7, #4]
 8004844:	f000 f898 	bl	8004978 <HAL_TIM_IC_CaptureCallback>
 8004848:	e005      	b.n	8004856 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800484a:	6878      	ldr	r0, [r7, #4]
 800484c:	f000 f88a 	bl	8004964 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004850:	6878      	ldr	r0, [r7, #4]
 8004852:	f000 f89b 	bl	800498c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	2200      	movs	r2, #0
 800485a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800485c:	68bb      	ldr	r3, [r7, #8]
 800485e:	f003 0310 	and.w	r3, r3, #16
 8004862:	2b00      	cmp	r3, #0
 8004864:	d020      	beq.n	80048a8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	f003 0310 	and.w	r3, r3, #16
 800486c:	2b00      	cmp	r3, #0
 800486e:	d01b      	beq.n	80048a8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f06f 0210 	mvn.w	r2, #16
 8004878:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	2208      	movs	r2, #8
 800487e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	69db      	ldr	r3, [r3, #28]
 8004886:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800488a:	2b00      	cmp	r3, #0
 800488c:	d003      	beq.n	8004896 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800488e:	6878      	ldr	r0, [r7, #4]
 8004890:	f000 f872 	bl	8004978 <HAL_TIM_IC_CaptureCallback>
 8004894:	e005      	b.n	80048a2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004896:	6878      	ldr	r0, [r7, #4]
 8004898:	f000 f864 	bl	8004964 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800489c:	6878      	ldr	r0, [r7, #4]
 800489e:	f000 f875 	bl	800498c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	2200      	movs	r2, #0
 80048a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80048a8:	68bb      	ldr	r3, [r7, #8]
 80048aa:	f003 0301 	and.w	r3, r3, #1
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d00c      	beq.n	80048cc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	f003 0301 	and.w	r3, r3, #1
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d007      	beq.n	80048cc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f06f 0201 	mvn.w	r2, #1
 80048c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80048c6:	6878      	ldr	r0, [r7, #4]
 80048c8:	f7fc f9e2 	bl	8000c90 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80048cc:	68bb      	ldr	r3, [r7, #8]
 80048ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d00c      	beq.n	80048f0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d007      	beq.n	80048f0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80048e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80048ea:	6878      	ldr	r0, [r7, #4]
 80048ec:	f000 f906 	bl	8004afc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80048f0:	68bb      	ldr	r3, [r7, #8]
 80048f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d00c      	beq.n	8004914 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004900:	2b00      	cmp	r3, #0
 8004902:	d007      	beq.n	8004914 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800490c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800490e:	6878      	ldr	r0, [r7, #4]
 8004910:	f000 f8fe 	bl	8004b10 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004914:	68bb      	ldr	r3, [r7, #8]
 8004916:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800491a:	2b00      	cmp	r3, #0
 800491c:	d00c      	beq.n	8004938 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004924:	2b00      	cmp	r3, #0
 8004926:	d007      	beq.n	8004938 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004930:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004932:	6878      	ldr	r0, [r7, #4]
 8004934:	f000 f834 	bl	80049a0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004938:	68bb      	ldr	r3, [r7, #8]
 800493a:	f003 0320 	and.w	r3, r3, #32
 800493e:	2b00      	cmp	r3, #0
 8004940:	d00c      	beq.n	800495c <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	f003 0320 	and.w	r3, r3, #32
 8004948:	2b00      	cmp	r3, #0
 800494a:	d007      	beq.n	800495c <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f06f 0220 	mvn.w	r2, #32
 8004954:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004956:	6878      	ldr	r0, [r7, #4]
 8004958:	f000 f8c6 	bl	8004ae8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800495c:	bf00      	nop
 800495e:	3710      	adds	r7, #16
 8004960:	46bd      	mov	sp, r7
 8004962:	bd80      	pop	{r7, pc}

08004964 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004964:	b480      	push	{r7}
 8004966:	b083      	sub	sp, #12
 8004968:	af00      	add	r7, sp, #0
 800496a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800496c:	bf00      	nop
 800496e:	370c      	adds	r7, #12
 8004970:	46bd      	mov	sp, r7
 8004972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004976:	4770      	bx	lr

08004978 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004978:	b480      	push	{r7}
 800497a:	b083      	sub	sp, #12
 800497c:	af00      	add	r7, sp, #0
 800497e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004980:	bf00      	nop
 8004982:	370c      	adds	r7, #12
 8004984:	46bd      	mov	sp, r7
 8004986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498a:	4770      	bx	lr

0800498c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800498c:	b480      	push	{r7}
 800498e:	b083      	sub	sp, #12
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004994:	bf00      	nop
 8004996:	370c      	adds	r7, #12
 8004998:	46bd      	mov	sp, r7
 800499a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499e:	4770      	bx	lr

080049a0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80049a0:	b480      	push	{r7}
 80049a2:	b083      	sub	sp, #12
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80049a8:	bf00      	nop
 80049aa:	370c      	adds	r7, #12
 80049ac:	46bd      	mov	sp, r7
 80049ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b2:	4770      	bx	lr

080049b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80049b4:	b480      	push	{r7}
 80049b6:	b085      	sub	sp, #20
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	6078      	str	r0, [r7, #4]
 80049bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	4a40      	ldr	r2, [pc, #256]	; (8004ac8 <TIM_Base_SetConfig+0x114>)
 80049c8:	4293      	cmp	r3, r2
 80049ca:	d013      	beq.n	80049f4 <TIM_Base_SetConfig+0x40>
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049d2:	d00f      	beq.n	80049f4 <TIM_Base_SetConfig+0x40>
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	4a3d      	ldr	r2, [pc, #244]	; (8004acc <TIM_Base_SetConfig+0x118>)
 80049d8:	4293      	cmp	r3, r2
 80049da:	d00b      	beq.n	80049f4 <TIM_Base_SetConfig+0x40>
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	4a3c      	ldr	r2, [pc, #240]	; (8004ad0 <TIM_Base_SetConfig+0x11c>)
 80049e0:	4293      	cmp	r3, r2
 80049e2:	d007      	beq.n	80049f4 <TIM_Base_SetConfig+0x40>
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	4a3b      	ldr	r2, [pc, #236]	; (8004ad4 <TIM_Base_SetConfig+0x120>)
 80049e8:	4293      	cmp	r3, r2
 80049ea:	d003      	beq.n	80049f4 <TIM_Base_SetConfig+0x40>
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	4a3a      	ldr	r2, [pc, #232]	; (8004ad8 <TIM_Base_SetConfig+0x124>)
 80049f0:	4293      	cmp	r3, r2
 80049f2:	d108      	bne.n	8004a06 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049fa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80049fc:	683b      	ldr	r3, [r7, #0]
 80049fe:	685b      	ldr	r3, [r3, #4]
 8004a00:	68fa      	ldr	r2, [r7, #12]
 8004a02:	4313      	orrs	r3, r2
 8004a04:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	4a2f      	ldr	r2, [pc, #188]	; (8004ac8 <TIM_Base_SetConfig+0x114>)
 8004a0a:	4293      	cmp	r3, r2
 8004a0c:	d01f      	beq.n	8004a4e <TIM_Base_SetConfig+0x9a>
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a14:	d01b      	beq.n	8004a4e <TIM_Base_SetConfig+0x9a>
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	4a2c      	ldr	r2, [pc, #176]	; (8004acc <TIM_Base_SetConfig+0x118>)
 8004a1a:	4293      	cmp	r3, r2
 8004a1c:	d017      	beq.n	8004a4e <TIM_Base_SetConfig+0x9a>
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	4a2b      	ldr	r2, [pc, #172]	; (8004ad0 <TIM_Base_SetConfig+0x11c>)
 8004a22:	4293      	cmp	r3, r2
 8004a24:	d013      	beq.n	8004a4e <TIM_Base_SetConfig+0x9a>
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	4a2a      	ldr	r2, [pc, #168]	; (8004ad4 <TIM_Base_SetConfig+0x120>)
 8004a2a:	4293      	cmp	r3, r2
 8004a2c:	d00f      	beq.n	8004a4e <TIM_Base_SetConfig+0x9a>
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	4a29      	ldr	r2, [pc, #164]	; (8004ad8 <TIM_Base_SetConfig+0x124>)
 8004a32:	4293      	cmp	r3, r2
 8004a34:	d00b      	beq.n	8004a4e <TIM_Base_SetConfig+0x9a>
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	4a28      	ldr	r2, [pc, #160]	; (8004adc <TIM_Base_SetConfig+0x128>)
 8004a3a:	4293      	cmp	r3, r2
 8004a3c:	d007      	beq.n	8004a4e <TIM_Base_SetConfig+0x9a>
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	4a27      	ldr	r2, [pc, #156]	; (8004ae0 <TIM_Base_SetConfig+0x12c>)
 8004a42:	4293      	cmp	r3, r2
 8004a44:	d003      	beq.n	8004a4e <TIM_Base_SetConfig+0x9a>
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	4a26      	ldr	r2, [pc, #152]	; (8004ae4 <TIM_Base_SetConfig+0x130>)
 8004a4a:	4293      	cmp	r3, r2
 8004a4c:	d108      	bne.n	8004a60 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a54:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004a56:	683b      	ldr	r3, [r7, #0]
 8004a58:	68db      	ldr	r3, [r3, #12]
 8004a5a:	68fa      	ldr	r2, [r7, #12]
 8004a5c:	4313      	orrs	r3, r2
 8004a5e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004a66:	683b      	ldr	r3, [r7, #0]
 8004a68:	695b      	ldr	r3, [r3, #20]
 8004a6a:	4313      	orrs	r3, r2
 8004a6c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	68fa      	ldr	r2, [r7, #12]
 8004a72:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004a74:	683b      	ldr	r3, [r7, #0]
 8004a76:	689a      	ldr	r2, [r3, #8]
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004a7c:	683b      	ldr	r3, [r7, #0]
 8004a7e:	681a      	ldr	r2, [r3, #0]
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	4a10      	ldr	r2, [pc, #64]	; (8004ac8 <TIM_Base_SetConfig+0x114>)
 8004a88:	4293      	cmp	r3, r2
 8004a8a:	d00f      	beq.n	8004aac <TIM_Base_SetConfig+0xf8>
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	4a12      	ldr	r2, [pc, #72]	; (8004ad8 <TIM_Base_SetConfig+0x124>)
 8004a90:	4293      	cmp	r3, r2
 8004a92:	d00b      	beq.n	8004aac <TIM_Base_SetConfig+0xf8>
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	4a11      	ldr	r2, [pc, #68]	; (8004adc <TIM_Base_SetConfig+0x128>)
 8004a98:	4293      	cmp	r3, r2
 8004a9a:	d007      	beq.n	8004aac <TIM_Base_SetConfig+0xf8>
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	4a10      	ldr	r2, [pc, #64]	; (8004ae0 <TIM_Base_SetConfig+0x12c>)
 8004aa0:	4293      	cmp	r3, r2
 8004aa2:	d003      	beq.n	8004aac <TIM_Base_SetConfig+0xf8>
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	4a0f      	ldr	r2, [pc, #60]	; (8004ae4 <TIM_Base_SetConfig+0x130>)
 8004aa8:	4293      	cmp	r3, r2
 8004aaa:	d103      	bne.n	8004ab4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004aac:	683b      	ldr	r3, [r7, #0]
 8004aae:	691a      	ldr	r2, [r3, #16]
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2201      	movs	r2, #1
 8004ab8:	615a      	str	r2, [r3, #20]
}
 8004aba:	bf00      	nop
 8004abc:	3714      	adds	r7, #20
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac4:	4770      	bx	lr
 8004ac6:	bf00      	nop
 8004ac8:	40012c00 	.word	0x40012c00
 8004acc:	40000400 	.word	0x40000400
 8004ad0:	40000800 	.word	0x40000800
 8004ad4:	40000c00 	.word	0x40000c00
 8004ad8:	40013400 	.word	0x40013400
 8004adc:	40014000 	.word	0x40014000
 8004ae0:	40014400 	.word	0x40014400
 8004ae4:	40014800 	.word	0x40014800

08004ae8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004ae8:	b480      	push	{r7}
 8004aea:	b083      	sub	sp, #12
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004af0:	bf00      	nop
 8004af2:	370c      	adds	r7, #12
 8004af4:	46bd      	mov	sp, r7
 8004af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afa:	4770      	bx	lr

08004afc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004afc:	b480      	push	{r7}
 8004afe:	b083      	sub	sp, #12
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004b04:	bf00      	nop
 8004b06:	370c      	adds	r7, #12
 8004b08:	46bd      	mov	sp, r7
 8004b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0e:	4770      	bx	lr

08004b10 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004b10:	b480      	push	{r7}
 8004b12:	b083      	sub	sp, #12
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004b18:	bf00      	nop
 8004b1a:	370c      	adds	r7, #12
 8004b1c:	46bd      	mov	sp, r7
 8004b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b22:	4770      	bx	lr

08004b24 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004b24:	b580      	push	{r7, lr}
 8004b26:	b082      	sub	sp, #8
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d101      	bne.n	8004b36 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004b32:	2301      	movs	r3, #1
 8004b34:	e042      	b.n	8004bbc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d106      	bne.n	8004b4e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	2200      	movs	r2, #0
 8004b44:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004b48:	6878      	ldr	r0, [r7, #4]
 8004b4a:	f7fc f94f 	bl	8000dec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	2224      	movs	r2, #36	; 0x24
 8004b52:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	681a      	ldr	r2, [r3, #0]
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f022 0201 	bic.w	r2, r2, #1
 8004b64:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d002      	beq.n	8004b74 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8004b6e:	6878      	ldr	r0, [r7, #4]
 8004b70:	f000 fbb4 	bl	80052dc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004b74:	6878      	ldr	r0, [r7, #4]
 8004b76:	f000 f8b5 	bl	8004ce4 <UART_SetConfig>
 8004b7a:	4603      	mov	r3, r0
 8004b7c:	2b01      	cmp	r3, #1
 8004b7e:	d101      	bne.n	8004b84 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8004b80:	2301      	movs	r3, #1
 8004b82:	e01b      	b.n	8004bbc <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	685a      	ldr	r2, [r3, #4]
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004b92:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	689a      	ldr	r2, [r3, #8]
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004ba2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	681a      	ldr	r2, [r3, #0]
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f042 0201 	orr.w	r2, r2, #1
 8004bb2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004bb4:	6878      	ldr	r0, [r7, #4]
 8004bb6:	f000 fc33 	bl	8005420 <UART_CheckIdleState>
 8004bba:	4603      	mov	r3, r0
}
 8004bbc:	4618      	mov	r0, r3
 8004bbe:	3708      	adds	r7, #8
 8004bc0:	46bd      	mov	sp, r7
 8004bc2:	bd80      	pop	{r7, pc}

08004bc4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004bc4:	b580      	push	{r7, lr}
 8004bc6:	b08a      	sub	sp, #40	; 0x28
 8004bc8:	af02      	add	r7, sp, #8
 8004bca:	60f8      	str	r0, [r7, #12]
 8004bcc:	60b9      	str	r1, [r7, #8]
 8004bce:	603b      	str	r3, [r7, #0]
 8004bd0:	4613      	mov	r3, r2
 8004bd2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bda:	2b20      	cmp	r3, #32
 8004bdc:	d17c      	bne.n	8004cd8 <HAL_UART_Transmit+0x114>
  {
    if ((pData == NULL) || (Size == 0U))
 8004bde:	68bb      	ldr	r3, [r7, #8]
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d002      	beq.n	8004bea <HAL_UART_Transmit+0x26>
 8004be4:	88fb      	ldrh	r3, [r7, #6]
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d101      	bne.n	8004bee <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004bea:	2301      	movs	r3, #1
 8004bec:	e075      	b.n	8004cda <HAL_UART_Transmit+0x116>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	2200      	movs	r2, #0
 8004bf2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	2221      	movs	r2, #33	; 0x21
 8004bfa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004bfe:	f7fc fa93 	bl	8001128 <HAL_GetTick>
 8004c02:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	88fa      	ldrh	r2, [r7, #6]
 8004c08:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	88fa      	ldrh	r2, [r7, #6]
 8004c10:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	689b      	ldr	r3, [r3, #8]
 8004c18:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c1c:	d108      	bne.n	8004c30 <HAL_UART_Transmit+0x6c>
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	691b      	ldr	r3, [r3, #16]
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d104      	bne.n	8004c30 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004c26:	2300      	movs	r3, #0
 8004c28:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004c2a:	68bb      	ldr	r3, [r7, #8]
 8004c2c:	61bb      	str	r3, [r7, #24]
 8004c2e:	e003      	b.n	8004c38 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004c30:	68bb      	ldr	r3, [r7, #8]
 8004c32:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004c34:	2300      	movs	r3, #0
 8004c36:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004c38:	e031      	b.n	8004c9e <HAL_UART_Transmit+0xda>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004c3a:	683b      	ldr	r3, [r7, #0]
 8004c3c:	9300      	str	r3, [sp, #0]
 8004c3e:	697b      	ldr	r3, [r7, #20]
 8004c40:	2200      	movs	r2, #0
 8004c42:	2180      	movs	r1, #128	; 0x80
 8004c44:	68f8      	ldr	r0, [r7, #12]
 8004c46:	f000 fc95 	bl	8005574 <UART_WaitOnFlagUntilTimeout>
 8004c4a:	4603      	mov	r3, r0
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d005      	beq.n	8004c5c <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	2220      	movs	r2, #32
 8004c54:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8004c58:	2303      	movs	r3, #3
 8004c5a:	e03e      	b.n	8004cda <HAL_UART_Transmit+0x116>
      }
      if (pdata8bits == NULL)
 8004c5c:	69fb      	ldr	r3, [r7, #28]
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d10b      	bne.n	8004c7a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004c62:	69bb      	ldr	r3, [r7, #24]
 8004c64:	881a      	ldrh	r2, [r3, #0]
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004c6e:	b292      	uxth	r2, r2
 8004c70:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004c72:	69bb      	ldr	r3, [r7, #24]
 8004c74:	3302      	adds	r3, #2
 8004c76:	61bb      	str	r3, [r7, #24]
 8004c78:	e008      	b.n	8004c8c <HAL_UART_Transmit+0xc8>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004c7a:	69fb      	ldr	r3, [r7, #28]
 8004c7c:	781a      	ldrb	r2, [r3, #0]
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	b292      	uxth	r2, r2
 8004c84:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004c86:	69fb      	ldr	r3, [r7, #28]
 8004c88:	3301      	adds	r3, #1
 8004c8a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004c92:	b29b      	uxth	r3, r3
 8004c94:	3b01      	subs	r3, #1
 8004c96:	b29a      	uxth	r2, r3
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004ca4:	b29b      	uxth	r3, r3
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d1c7      	bne.n	8004c3a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004caa:	683b      	ldr	r3, [r7, #0]
 8004cac:	9300      	str	r3, [sp, #0]
 8004cae:	697b      	ldr	r3, [r7, #20]
 8004cb0:	2200      	movs	r2, #0
 8004cb2:	2140      	movs	r1, #64	; 0x40
 8004cb4:	68f8      	ldr	r0, [r7, #12]
 8004cb6:	f000 fc5d 	bl	8005574 <UART_WaitOnFlagUntilTimeout>
 8004cba:	4603      	mov	r3, r0
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d005      	beq.n	8004ccc <HAL_UART_Transmit+0x108>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	2220      	movs	r2, #32
 8004cc4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8004cc8:	2303      	movs	r3, #3
 8004cca:	e006      	b.n	8004cda <HAL_UART_Transmit+0x116>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	2220      	movs	r2, #32
 8004cd0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8004cd4:	2300      	movs	r3, #0
 8004cd6:	e000      	b.n	8004cda <HAL_UART_Transmit+0x116>
  }
  else
  {
    return HAL_BUSY;
 8004cd8:	2302      	movs	r3, #2
  }
}
 8004cda:	4618      	mov	r0, r3
 8004cdc:	3720      	adds	r7, #32
 8004cde:	46bd      	mov	sp, r7
 8004ce0:	bd80      	pop	{r7, pc}
	...

08004ce4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004ce4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004ce8:	b08c      	sub	sp, #48	; 0x30
 8004cea:	af00      	add	r7, sp, #0
 8004cec:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004cee:	2300      	movs	r3, #0
 8004cf0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004cf4:	697b      	ldr	r3, [r7, #20]
 8004cf6:	689a      	ldr	r2, [r3, #8]
 8004cf8:	697b      	ldr	r3, [r7, #20]
 8004cfa:	691b      	ldr	r3, [r3, #16]
 8004cfc:	431a      	orrs	r2, r3
 8004cfe:	697b      	ldr	r3, [r7, #20]
 8004d00:	695b      	ldr	r3, [r3, #20]
 8004d02:	431a      	orrs	r2, r3
 8004d04:	697b      	ldr	r3, [r7, #20]
 8004d06:	69db      	ldr	r3, [r3, #28]
 8004d08:	4313      	orrs	r3, r2
 8004d0a:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004d0c:	697b      	ldr	r3, [r7, #20]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	681a      	ldr	r2, [r3, #0]
 8004d12:	4baa      	ldr	r3, [pc, #680]	; (8004fbc <UART_SetConfig+0x2d8>)
 8004d14:	4013      	ands	r3, r2
 8004d16:	697a      	ldr	r2, [r7, #20]
 8004d18:	6812      	ldr	r2, [r2, #0]
 8004d1a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004d1c:	430b      	orrs	r3, r1
 8004d1e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004d20:	697b      	ldr	r3, [r7, #20]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	685b      	ldr	r3, [r3, #4]
 8004d26:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004d2a:	697b      	ldr	r3, [r7, #20]
 8004d2c:	68da      	ldr	r2, [r3, #12]
 8004d2e:	697b      	ldr	r3, [r7, #20]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	430a      	orrs	r2, r1
 8004d34:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004d36:	697b      	ldr	r3, [r7, #20]
 8004d38:	699b      	ldr	r3, [r3, #24]
 8004d3a:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004d3c:	697b      	ldr	r3, [r7, #20]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	4a9f      	ldr	r2, [pc, #636]	; (8004fc0 <UART_SetConfig+0x2dc>)
 8004d42:	4293      	cmp	r3, r2
 8004d44:	d004      	beq.n	8004d50 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004d46:	697b      	ldr	r3, [r7, #20]
 8004d48:	6a1b      	ldr	r3, [r3, #32]
 8004d4a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004d4c:	4313      	orrs	r3, r2
 8004d4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004d50:	697b      	ldr	r3, [r7, #20]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	689b      	ldr	r3, [r3, #8]
 8004d56:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8004d5a:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8004d5e:	697a      	ldr	r2, [r7, #20]
 8004d60:	6812      	ldr	r2, [r2, #0]
 8004d62:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004d64:	430b      	orrs	r3, r1
 8004d66:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004d68:	697b      	ldr	r3, [r7, #20]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d6e:	f023 010f 	bic.w	r1, r3, #15
 8004d72:	697b      	ldr	r3, [r7, #20]
 8004d74:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004d76:	697b      	ldr	r3, [r7, #20]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	430a      	orrs	r2, r1
 8004d7c:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004d7e:	697b      	ldr	r3, [r7, #20]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	4a90      	ldr	r2, [pc, #576]	; (8004fc4 <UART_SetConfig+0x2e0>)
 8004d84:	4293      	cmp	r3, r2
 8004d86:	d125      	bne.n	8004dd4 <UART_SetConfig+0xf0>
 8004d88:	4b8f      	ldr	r3, [pc, #572]	; (8004fc8 <UART_SetConfig+0x2e4>)
 8004d8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d8e:	f003 0303 	and.w	r3, r3, #3
 8004d92:	2b03      	cmp	r3, #3
 8004d94:	d81a      	bhi.n	8004dcc <UART_SetConfig+0xe8>
 8004d96:	a201      	add	r2, pc, #4	; (adr r2, 8004d9c <UART_SetConfig+0xb8>)
 8004d98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d9c:	08004dad 	.word	0x08004dad
 8004da0:	08004dbd 	.word	0x08004dbd
 8004da4:	08004db5 	.word	0x08004db5
 8004da8:	08004dc5 	.word	0x08004dc5
 8004dac:	2301      	movs	r3, #1
 8004dae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004db2:	e116      	b.n	8004fe2 <UART_SetConfig+0x2fe>
 8004db4:	2302      	movs	r3, #2
 8004db6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004dba:	e112      	b.n	8004fe2 <UART_SetConfig+0x2fe>
 8004dbc:	2304      	movs	r3, #4
 8004dbe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004dc2:	e10e      	b.n	8004fe2 <UART_SetConfig+0x2fe>
 8004dc4:	2308      	movs	r3, #8
 8004dc6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004dca:	e10a      	b.n	8004fe2 <UART_SetConfig+0x2fe>
 8004dcc:	2310      	movs	r3, #16
 8004dce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004dd2:	e106      	b.n	8004fe2 <UART_SetConfig+0x2fe>
 8004dd4:	697b      	ldr	r3, [r7, #20]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	4a7c      	ldr	r2, [pc, #496]	; (8004fcc <UART_SetConfig+0x2e8>)
 8004dda:	4293      	cmp	r3, r2
 8004ddc:	d138      	bne.n	8004e50 <UART_SetConfig+0x16c>
 8004dde:	4b7a      	ldr	r3, [pc, #488]	; (8004fc8 <UART_SetConfig+0x2e4>)
 8004de0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004de4:	f003 030c 	and.w	r3, r3, #12
 8004de8:	2b0c      	cmp	r3, #12
 8004dea:	d82d      	bhi.n	8004e48 <UART_SetConfig+0x164>
 8004dec:	a201      	add	r2, pc, #4	; (adr r2, 8004df4 <UART_SetConfig+0x110>)
 8004dee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004df2:	bf00      	nop
 8004df4:	08004e29 	.word	0x08004e29
 8004df8:	08004e49 	.word	0x08004e49
 8004dfc:	08004e49 	.word	0x08004e49
 8004e00:	08004e49 	.word	0x08004e49
 8004e04:	08004e39 	.word	0x08004e39
 8004e08:	08004e49 	.word	0x08004e49
 8004e0c:	08004e49 	.word	0x08004e49
 8004e10:	08004e49 	.word	0x08004e49
 8004e14:	08004e31 	.word	0x08004e31
 8004e18:	08004e49 	.word	0x08004e49
 8004e1c:	08004e49 	.word	0x08004e49
 8004e20:	08004e49 	.word	0x08004e49
 8004e24:	08004e41 	.word	0x08004e41
 8004e28:	2300      	movs	r3, #0
 8004e2a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004e2e:	e0d8      	b.n	8004fe2 <UART_SetConfig+0x2fe>
 8004e30:	2302      	movs	r3, #2
 8004e32:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004e36:	e0d4      	b.n	8004fe2 <UART_SetConfig+0x2fe>
 8004e38:	2304      	movs	r3, #4
 8004e3a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004e3e:	e0d0      	b.n	8004fe2 <UART_SetConfig+0x2fe>
 8004e40:	2308      	movs	r3, #8
 8004e42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004e46:	e0cc      	b.n	8004fe2 <UART_SetConfig+0x2fe>
 8004e48:	2310      	movs	r3, #16
 8004e4a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004e4e:	e0c8      	b.n	8004fe2 <UART_SetConfig+0x2fe>
 8004e50:	697b      	ldr	r3, [r7, #20]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	4a5e      	ldr	r2, [pc, #376]	; (8004fd0 <UART_SetConfig+0x2ec>)
 8004e56:	4293      	cmp	r3, r2
 8004e58:	d125      	bne.n	8004ea6 <UART_SetConfig+0x1c2>
 8004e5a:	4b5b      	ldr	r3, [pc, #364]	; (8004fc8 <UART_SetConfig+0x2e4>)
 8004e5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e60:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004e64:	2b30      	cmp	r3, #48	; 0x30
 8004e66:	d016      	beq.n	8004e96 <UART_SetConfig+0x1b2>
 8004e68:	2b30      	cmp	r3, #48	; 0x30
 8004e6a:	d818      	bhi.n	8004e9e <UART_SetConfig+0x1ba>
 8004e6c:	2b20      	cmp	r3, #32
 8004e6e:	d00a      	beq.n	8004e86 <UART_SetConfig+0x1a2>
 8004e70:	2b20      	cmp	r3, #32
 8004e72:	d814      	bhi.n	8004e9e <UART_SetConfig+0x1ba>
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d002      	beq.n	8004e7e <UART_SetConfig+0x19a>
 8004e78:	2b10      	cmp	r3, #16
 8004e7a:	d008      	beq.n	8004e8e <UART_SetConfig+0x1aa>
 8004e7c:	e00f      	b.n	8004e9e <UART_SetConfig+0x1ba>
 8004e7e:	2300      	movs	r3, #0
 8004e80:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004e84:	e0ad      	b.n	8004fe2 <UART_SetConfig+0x2fe>
 8004e86:	2302      	movs	r3, #2
 8004e88:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004e8c:	e0a9      	b.n	8004fe2 <UART_SetConfig+0x2fe>
 8004e8e:	2304      	movs	r3, #4
 8004e90:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004e94:	e0a5      	b.n	8004fe2 <UART_SetConfig+0x2fe>
 8004e96:	2308      	movs	r3, #8
 8004e98:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004e9c:	e0a1      	b.n	8004fe2 <UART_SetConfig+0x2fe>
 8004e9e:	2310      	movs	r3, #16
 8004ea0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004ea4:	e09d      	b.n	8004fe2 <UART_SetConfig+0x2fe>
 8004ea6:	697b      	ldr	r3, [r7, #20]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	4a4a      	ldr	r2, [pc, #296]	; (8004fd4 <UART_SetConfig+0x2f0>)
 8004eac:	4293      	cmp	r3, r2
 8004eae:	d125      	bne.n	8004efc <UART_SetConfig+0x218>
 8004eb0:	4b45      	ldr	r3, [pc, #276]	; (8004fc8 <UART_SetConfig+0x2e4>)
 8004eb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004eb6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004eba:	2bc0      	cmp	r3, #192	; 0xc0
 8004ebc:	d016      	beq.n	8004eec <UART_SetConfig+0x208>
 8004ebe:	2bc0      	cmp	r3, #192	; 0xc0
 8004ec0:	d818      	bhi.n	8004ef4 <UART_SetConfig+0x210>
 8004ec2:	2b80      	cmp	r3, #128	; 0x80
 8004ec4:	d00a      	beq.n	8004edc <UART_SetConfig+0x1f8>
 8004ec6:	2b80      	cmp	r3, #128	; 0x80
 8004ec8:	d814      	bhi.n	8004ef4 <UART_SetConfig+0x210>
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d002      	beq.n	8004ed4 <UART_SetConfig+0x1f0>
 8004ece:	2b40      	cmp	r3, #64	; 0x40
 8004ed0:	d008      	beq.n	8004ee4 <UART_SetConfig+0x200>
 8004ed2:	e00f      	b.n	8004ef4 <UART_SetConfig+0x210>
 8004ed4:	2300      	movs	r3, #0
 8004ed6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004eda:	e082      	b.n	8004fe2 <UART_SetConfig+0x2fe>
 8004edc:	2302      	movs	r3, #2
 8004ede:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004ee2:	e07e      	b.n	8004fe2 <UART_SetConfig+0x2fe>
 8004ee4:	2304      	movs	r3, #4
 8004ee6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004eea:	e07a      	b.n	8004fe2 <UART_SetConfig+0x2fe>
 8004eec:	2308      	movs	r3, #8
 8004eee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004ef2:	e076      	b.n	8004fe2 <UART_SetConfig+0x2fe>
 8004ef4:	2310      	movs	r3, #16
 8004ef6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004efa:	e072      	b.n	8004fe2 <UART_SetConfig+0x2fe>
 8004efc:	697b      	ldr	r3, [r7, #20]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	4a35      	ldr	r2, [pc, #212]	; (8004fd8 <UART_SetConfig+0x2f4>)
 8004f02:	4293      	cmp	r3, r2
 8004f04:	d12a      	bne.n	8004f5c <UART_SetConfig+0x278>
 8004f06:	4b30      	ldr	r3, [pc, #192]	; (8004fc8 <UART_SetConfig+0x2e4>)
 8004f08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f0c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f10:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004f14:	d01a      	beq.n	8004f4c <UART_SetConfig+0x268>
 8004f16:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004f1a:	d81b      	bhi.n	8004f54 <UART_SetConfig+0x270>
 8004f1c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004f20:	d00c      	beq.n	8004f3c <UART_SetConfig+0x258>
 8004f22:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004f26:	d815      	bhi.n	8004f54 <UART_SetConfig+0x270>
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d003      	beq.n	8004f34 <UART_SetConfig+0x250>
 8004f2c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f30:	d008      	beq.n	8004f44 <UART_SetConfig+0x260>
 8004f32:	e00f      	b.n	8004f54 <UART_SetConfig+0x270>
 8004f34:	2300      	movs	r3, #0
 8004f36:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004f3a:	e052      	b.n	8004fe2 <UART_SetConfig+0x2fe>
 8004f3c:	2302      	movs	r3, #2
 8004f3e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004f42:	e04e      	b.n	8004fe2 <UART_SetConfig+0x2fe>
 8004f44:	2304      	movs	r3, #4
 8004f46:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004f4a:	e04a      	b.n	8004fe2 <UART_SetConfig+0x2fe>
 8004f4c:	2308      	movs	r3, #8
 8004f4e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004f52:	e046      	b.n	8004fe2 <UART_SetConfig+0x2fe>
 8004f54:	2310      	movs	r3, #16
 8004f56:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004f5a:	e042      	b.n	8004fe2 <UART_SetConfig+0x2fe>
 8004f5c:	697b      	ldr	r3, [r7, #20]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	4a17      	ldr	r2, [pc, #92]	; (8004fc0 <UART_SetConfig+0x2dc>)
 8004f62:	4293      	cmp	r3, r2
 8004f64:	d13a      	bne.n	8004fdc <UART_SetConfig+0x2f8>
 8004f66:	4b18      	ldr	r3, [pc, #96]	; (8004fc8 <UART_SetConfig+0x2e4>)
 8004f68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f6c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004f70:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004f74:	d01a      	beq.n	8004fac <UART_SetConfig+0x2c8>
 8004f76:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004f7a:	d81b      	bhi.n	8004fb4 <UART_SetConfig+0x2d0>
 8004f7c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f80:	d00c      	beq.n	8004f9c <UART_SetConfig+0x2b8>
 8004f82:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f86:	d815      	bhi.n	8004fb4 <UART_SetConfig+0x2d0>
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d003      	beq.n	8004f94 <UART_SetConfig+0x2b0>
 8004f8c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f90:	d008      	beq.n	8004fa4 <UART_SetConfig+0x2c0>
 8004f92:	e00f      	b.n	8004fb4 <UART_SetConfig+0x2d0>
 8004f94:	2300      	movs	r3, #0
 8004f96:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004f9a:	e022      	b.n	8004fe2 <UART_SetConfig+0x2fe>
 8004f9c:	2302      	movs	r3, #2
 8004f9e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004fa2:	e01e      	b.n	8004fe2 <UART_SetConfig+0x2fe>
 8004fa4:	2304      	movs	r3, #4
 8004fa6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004faa:	e01a      	b.n	8004fe2 <UART_SetConfig+0x2fe>
 8004fac:	2308      	movs	r3, #8
 8004fae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004fb2:	e016      	b.n	8004fe2 <UART_SetConfig+0x2fe>
 8004fb4:	2310      	movs	r3, #16
 8004fb6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004fba:	e012      	b.n	8004fe2 <UART_SetConfig+0x2fe>
 8004fbc:	cfff69f3 	.word	0xcfff69f3
 8004fc0:	40008000 	.word	0x40008000
 8004fc4:	40013800 	.word	0x40013800
 8004fc8:	40021000 	.word	0x40021000
 8004fcc:	40004400 	.word	0x40004400
 8004fd0:	40004800 	.word	0x40004800
 8004fd4:	40004c00 	.word	0x40004c00
 8004fd8:	40005000 	.word	0x40005000
 8004fdc:	2310      	movs	r3, #16
 8004fde:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004fe2:	697b      	ldr	r3, [r7, #20]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	4aae      	ldr	r2, [pc, #696]	; (80052a0 <UART_SetConfig+0x5bc>)
 8004fe8:	4293      	cmp	r3, r2
 8004fea:	f040 8097 	bne.w	800511c <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004fee:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004ff2:	2b08      	cmp	r3, #8
 8004ff4:	d823      	bhi.n	800503e <UART_SetConfig+0x35a>
 8004ff6:	a201      	add	r2, pc, #4	; (adr r2, 8004ffc <UART_SetConfig+0x318>)
 8004ff8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ffc:	08005021 	.word	0x08005021
 8005000:	0800503f 	.word	0x0800503f
 8005004:	08005029 	.word	0x08005029
 8005008:	0800503f 	.word	0x0800503f
 800500c:	0800502f 	.word	0x0800502f
 8005010:	0800503f 	.word	0x0800503f
 8005014:	0800503f 	.word	0x0800503f
 8005018:	0800503f 	.word	0x0800503f
 800501c:	08005037 	.word	0x08005037
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005020:	f7fe fc96 	bl	8003950 <HAL_RCC_GetPCLK1Freq>
 8005024:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005026:	e010      	b.n	800504a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005028:	4b9e      	ldr	r3, [pc, #632]	; (80052a4 <UART_SetConfig+0x5c0>)
 800502a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800502c:	e00d      	b.n	800504a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800502e:	f7fe fbf7 	bl	8003820 <HAL_RCC_GetSysClockFreq>
 8005032:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005034:	e009      	b.n	800504a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005036:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800503a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800503c:	e005      	b.n	800504a <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800503e:	2300      	movs	r3, #0
 8005040:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005042:	2301      	movs	r3, #1
 8005044:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005048:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800504a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800504c:	2b00      	cmp	r3, #0
 800504e:	f000 8130 	beq.w	80052b2 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005052:	697b      	ldr	r3, [r7, #20]
 8005054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005056:	4a94      	ldr	r2, [pc, #592]	; (80052a8 <UART_SetConfig+0x5c4>)
 8005058:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800505c:	461a      	mov	r2, r3
 800505e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005060:	fbb3 f3f2 	udiv	r3, r3, r2
 8005064:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005066:	697b      	ldr	r3, [r7, #20]
 8005068:	685a      	ldr	r2, [r3, #4]
 800506a:	4613      	mov	r3, r2
 800506c:	005b      	lsls	r3, r3, #1
 800506e:	4413      	add	r3, r2
 8005070:	69ba      	ldr	r2, [r7, #24]
 8005072:	429a      	cmp	r2, r3
 8005074:	d305      	bcc.n	8005082 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005076:	697b      	ldr	r3, [r7, #20]
 8005078:	685b      	ldr	r3, [r3, #4]
 800507a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800507c:	69ba      	ldr	r2, [r7, #24]
 800507e:	429a      	cmp	r2, r3
 8005080:	d903      	bls.n	800508a <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8005082:	2301      	movs	r3, #1
 8005084:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005088:	e113      	b.n	80052b2 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800508a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800508c:	2200      	movs	r2, #0
 800508e:	60bb      	str	r3, [r7, #8]
 8005090:	60fa      	str	r2, [r7, #12]
 8005092:	697b      	ldr	r3, [r7, #20]
 8005094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005096:	4a84      	ldr	r2, [pc, #528]	; (80052a8 <UART_SetConfig+0x5c4>)
 8005098:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800509c:	b29b      	uxth	r3, r3
 800509e:	2200      	movs	r2, #0
 80050a0:	603b      	str	r3, [r7, #0]
 80050a2:	607a      	str	r2, [r7, #4]
 80050a4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80050a8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80050ac:	f7fb f8f8 	bl	80002a0 <__aeabi_uldivmod>
 80050b0:	4602      	mov	r2, r0
 80050b2:	460b      	mov	r3, r1
 80050b4:	4610      	mov	r0, r2
 80050b6:	4619      	mov	r1, r3
 80050b8:	f04f 0200 	mov.w	r2, #0
 80050bc:	f04f 0300 	mov.w	r3, #0
 80050c0:	020b      	lsls	r3, r1, #8
 80050c2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80050c6:	0202      	lsls	r2, r0, #8
 80050c8:	6979      	ldr	r1, [r7, #20]
 80050ca:	6849      	ldr	r1, [r1, #4]
 80050cc:	0849      	lsrs	r1, r1, #1
 80050ce:	2000      	movs	r0, #0
 80050d0:	460c      	mov	r4, r1
 80050d2:	4605      	mov	r5, r0
 80050d4:	eb12 0804 	adds.w	r8, r2, r4
 80050d8:	eb43 0905 	adc.w	r9, r3, r5
 80050dc:	697b      	ldr	r3, [r7, #20]
 80050de:	685b      	ldr	r3, [r3, #4]
 80050e0:	2200      	movs	r2, #0
 80050e2:	469a      	mov	sl, r3
 80050e4:	4693      	mov	fp, r2
 80050e6:	4652      	mov	r2, sl
 80050e8:	465b      	mov	r3, fp
 80050ea:	4640      	mov	r0, r8
 80050ec:	4649      	mov	r1, r9
 80050ee:	f7fb f8d7 	bl	80002a0 <__aeabi_uldivmod>
 80050f2:	4602      	mov	r2, r0
 80050f4:	460b      	mov	r3, r1
 80050f6:	4613      	mov	r3, r2
 80050f8:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80050fa:	6a3b      	ldr	r3, [r7, #32]
 80050fc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005100:	d308      	bcc.n	8005114 <UART_SetConfig+0x430>
 8005102:	6a3b      	ldr	r3, [r7, #32]
 8005104:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005108:	d204      	bcs.n	8005114 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800510a:	697b      	ldr	r3, [r7, #20]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	6a3a      	ldr	r2, [r7, #32]
 8005110:	60da      	str	r2, [r3, #12]
 8005112:	e0ce      	b.n	80052b2 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8005114:	2301      	movs	r3, #1
 8005116:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800511a:	e0ca      	b.n	80052b2 <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800511c:	697b      	ldr	r3, [r7, #20]
 800511e:	69db      	ldr	r3, [r3, #28]
 8005120:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005124:	d166      	bne.n	80051f4 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8005126:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800512a:	2b08      	cmp	r3, #8
 800512c:	d827      	bhi.n	800517e <UART_SetConfig+0x49a>
 800512e:	a201      	add	r2, pc, #4	; (adr r2, 8005134 <UART_SetConfig+0x450>)
 8005130:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005134:	08005159 	.word	0x08005159
 8005138:	08005161 	.word	0x08005161
 800513c:	08005169 	.word	0x08005169
 8005140:	0800517f 	.word	0x0800517f
 8005144:	0800516f 	.word	0x0800516f
 8005148:	0800517f 	.word	0x0800517f
 800514c:	0800517f 	.word	0x0800517f
 8005150:	0800517f 	.word	0x0800517f
 8005154:	08005177 	.word	0x08005177
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005158:	f7fe fbfa 	bl	8003950 <HAL_RCC_GetPCLK1Freq>
 800515c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800515e:	e014      	b.n	800518a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005160:	f7fe fc0c 	bl	800397c <HAL_RCC_GetPCLK2Freq>
 8005164:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005166:	e010      	b.n	800518a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005168:	4b4e      	ldr	r3, [pc, #312]	; (80052a4 <UART_SetConfig+0x5c0>)
 800516a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800516c:	e00d      	b.n	800518a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800516e:	f7fe fb57 	bl	8003820 <HAL_RCC_GetSysClockFreq>
 8005172:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005174:	e009      	b.n	800518a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005176:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800517a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800517c:	e005      	b.n	800518a <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800517e:	2300      	movs	r3, #0
 8005180:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005182:	2301      	movs	r3, #1
 8005184:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005188:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800518a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800518c:	2b00      	cmp	r3, #0
 800518e:	f000 8090 	beq.w	80052b2 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005192:	697b      	ldr	r3, [r7, #20]
 8005194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005196:	4a44      	ldr	r2, [pc, #272]	; (80052a8 <UART_SetConfig+0x5c4>)
 8005198:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800519c:	461a      	mov	r2, r3
 800519e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051a0:	fbb3 f3f2 	udiv	r3, r3, r2
 80051a4:	005a      	lsls	r2, r3, #1
 80051a6:	697b      	ldr	r3, [r7, #20]
 80051a8:	685b      	ldr	r3, [r3, #4]
 80051aa:	085b      	lsrs	r3, r3, #1
 80051ac:	441a      	add	r2, r3
 80051ae:	697b      	ldr	r3, [r7, #20]
 80051b0:	685b      	ldr	r3, [r3, #4]
 80051b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80051b6:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80051b8:	6a3b      	ldr	r3, [r7, #32]
 80051ba:	2b0f      	cmp	r3, #15
 80051bc:	d916      	bls.n	80051ec <UART_SetConfig+0x508>
 80051be:	6a3b      	ldr	r3, [r7, #32]
 80051c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80051c4:	d212      	bcs.n	80051ec <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80051c6:	6a3b      	ldr	r3, [r7, #32]
 80051c8:	b29b      	uxth	r3, r3
 80051ca:	f023 030f 	bic.w	r3, r3, #15
 80051ce:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80051d0:	6a3b      	ldr	r3, [r7, #32]
 80051d2:	085b      	lsrs	r3, r3, #1
 80051d4:	b29b      	uxth	r3, r3
 80051d6:	f003 0307 	and.w	r3, r3, #7
 80051da:	b29a      	uxth	r2, r3
 80051dc:	8bfb      	ldrh	r3, [r7, #30]
 80051de:	4313      	orrs	r3, r2
 80051e0:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80051e2:	697b      	ldr	r3, [r7, #20]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	8bfa      	ldrh	r2, [r7, #30]
 80051e8:	60da      	str	r2, [r3, #12]
 80051ea:	e062      	b.n	80052b2 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80051ec:	2301      	movs	r3, #1
 80051ee:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80051f2:	e05e      	b.n	80052b2 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80051f4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80051f8:	2b08      	cmp	r3, #8
 80051fa:	d828      	bhi.n	800524e <UART_SetConfig+0x56a>
 80051fc:	a201      	add	r2, pc, #4	; (adr r2, 8005204 <UART_SetConfig+0x520>)
 80051fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005202:	bf00      	nop
 8005204:	08005229 	.word	0x08005229
 8005208:	08005231 	.word	0x08005231
 800520c:	08005239 	.word	0x08005239
 8005210:	0800524f 	.word	0x0800524f
 8005214:	0800523f 	.word	0x0800523f
 8005218:	0800524f 	.word	0x0800524f
 800521c:	0800524f 	.word	0x0800524f
 8005220:	0800524f 	.word	0x0800524f
 8005224:	08005247 	.word	0x08005247
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005228:	f7fe fb92 	bl	8003950 <HAL_RCC_GetPCLK1Freq>
 800522c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800522e:	e014      	b.n	800525a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005230:	f7fe fba4 	bl	800397c <HAL_RCC_GetPCLK2Freq>
 8005234:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005236:	e010      	b.n	800525a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005238:	4b1a      	ldr	r3, [pc, #104]	; (80052a4 <UART_SetConfig+0x5c0>)
 800523a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800523c:	e00d      	b.n	800525a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800523e:	f7fe faef 	bl	8003820 <HAL_RCC_GetSysClockFreq>
 8005242:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005244:	e009      	b.n	800525a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005246:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800524a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800524c:	e005      	b.n	800525a <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800524e:	2300      	movs	r3, #0
 8005250:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005252:	2301      	movs	r3, #1
 8005254:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005258:	bf00      	nop
    }

    if (pclk != 0U)
 800525a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800525c:	2b00      	cmp	r3, #0
 800525e:	d028      	beq.n	80052b2 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005260:	697b      	ldr	r3, [r7, #20]
 8005262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005264:	4a10      	ldr	r2, [pc, #64]	; (80052a8 <UART_SetConfig+0x5c4>)
 8005266:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800526a:	461a      	mov	r2, r3
 800526c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800526e:	fbb3 f2f2 	udiv	r2, r3, r2
 8005272:	697b      	ldr	r3, [r7, #20]
 8005274:	685b      	ldr	r3, [r3, #4]
 8005276:	085b      	lsrs	r3, r3, #1
 8005278:	441a      	add	r2, r3
 800527a:	697b      	ldr	r3, [r7, #20]
 800527c:	685b      	ldr	r3, [r3, #4]
 800527e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005282:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005284:	6a3b      	ldr	r3, [r7, #32]
 8005286:	2b0f      	cmp	r3, #15
 8005288:	d910      	bls.n	80052ac <UART_SetConfig+0x5c8>
 800528a:	6a3b      	ldr	r3, [r7, #32]
 800528c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005290:	d20c      	bcs.n	80052ac <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005292:	6a3b      	ldr	r3, [r7, #32]
 8005294:	b29a      	uxth	r2, r3
 8005296:	697b      	ldr	r3, [r7, #20]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	60da      	str	r2, [r3, #12]
 800529c:	e009      	b.n	80052b2 <UART_SetConfig+0x5ce>
 800529e:	bf00      	nop
 80052a0:	40008000 	.word	0x40008000
 80052a4:	00f42400 	.word	0x00f42400
 80052a8:	08009028 	.word	0x08009028
      }
      else
      {
        ret = HAL_ERROR;
 80052ac:	2301      	movs	r3, #1
 80052ae:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80052b2:	697b      	ldr	r3, [r7, #20]
 80052b4:	2201      	movs	r2, #1
 80052b6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80052ba:	697b      	ldr	r3, [r7, #20]
 80052bc:	2201      	movs	r2, #1
 80052be:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80052c2:	697b      	ldr	r3, [r7, #20]
 80052c4:	2200      	movs	r2, #0
 80052c6:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80052c8:	697b      	ldr	r3, [r7, #20]
 80052ca:	2200      	movs	r2, #0
 80052cc:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80052ce:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80052d2:	4618      	mov	r0, r3
 80052d4:	3730      	adds	r7, #48	; 0x30
 80052d6:	46bd      	mov	sp, r7
 80052d8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080052dc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80052dc:	b480      	push	{r7}
 80052de:	b083      	sub	sp, #12
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052e8:	f003 0308 	and.w	r3, r3, #8
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d00a      	beq.n	8005306 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	685b      	ldr	r3, [r3, #4]
 80052f6:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	430a      	orrs	r2, r1
 8005304:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800530a:	f003 0301 	and.w	r3, r3, #1
 800530e:	2b00      	cmp	r3, #0
 8005310:	d00a      	beq.n	8005328 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	685b      	ldr	r3, [r3, #4]
 8005318:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	430a      	orrs	r2, r1
 8005326:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800532c:	f003 0302 	and.w	r3, r3, #2
 8005330:	2b00      	cmp	r3, #0
 8005332:	d00a      	beq.n	800534a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	685b      	ldr	r3, [r3, #4]
 800533a:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	430a      	orrs	r2, r1
 8005348:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800534e:	f003 0304 	and.w	r3, r3, #4
 8005352:	2b00      	cmp	r3, #0
 8005354:	d00a      	beq.n	800536c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	685b      	ldr	r3, [r3, #4]
 800535c:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	430a      	orrs	r2, r1
 800536a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005370:	f003 0310 	and.w	r3, r3, #16
 8005374:	2b00      	cmp	r3, #0
 8005376:	d00a      	beq.n	800538e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	689b      	ldr	r3, [r3, #8]
 800537e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	430a      	orrs	r2, r1
 800538c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005392:	f003 0320 	and.w	r3, r3, #32
 8005396:	2b00      	cmp	r3, #0
 8005398:	d00a      	beq.n	80053b0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	689b      	ldr	r3, [r3, #8]
 80053a0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	430a      	orrs	r2, r1
 80053ae:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d01a      	beq.n	80053f2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	685b      	ldr	r3, [r3, #4]
 80053c2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	430a      	orrs	r2, r1
 80053d0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80053da:	d10a      	bne.n	80053f2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	685b      	ldr	r3, [r3, #4]
 80053e2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	430a      	orrs	r2, r1
 80053f0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d00a      	beq.n	8005414 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	685b      	ldr	r3, [r3, #4]
 8005404:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	430a      	orrs	r2, r1
 8005412:	605a      	str	r2, [r3, #4]
  }
}
 8005414:	bf00      	nop
 8005416:	370c      	adds	r7, #12
 8005418:	46bd      	mov	sp, r7
 800541a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541e:	4770      	bx	lr

08005420 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005420:	b580      	push	{r7, lr}
 8005422:	b098      	sub	sp, #96	; 0x60
 8005424:	af02      	add	r7, sp, #8
 8005426:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	2200      	movs	r2, #0
 800542c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005430:	f7fb fe7a 	bl	8001128 <HAL_GetTick>
 8005434:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	f003 0308 	and.w	r3, r3, #8
 8005440:	2b08      	cmp	r3, #8
 8005442:	d12f      	bne.n	80054a4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005444:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005448:	9300      	str	r3, [sp, #0]
 800544a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800544c:	2200      	movs	r2, #0
 800544e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005452:	6878      	ldr	r0, [r7, #4]
 8005454:	f000 f88e 	bl	8005574 <UART_WaitOnFlagUntilTimeout>
 8005458:	4603      	mov	r3, r0
 800545a:	2b00      	cmp	r3, #0
 800545c:	d022      	beq.n	80054a4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005464:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005466:	e853 3f00 	ldrex	r3, [r3]
 800546a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800546c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800546e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005472:	653b      	str	r3, [r7, #80]	; 0x50
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	461a      	mov	r2, r3
 800547a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800547c:	647b      	str	r3, [r7, #68]	; 0x44
 800547e:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005480:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005482:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005484:	e841 2300 	strex	r3, r2, [r1]
 8005488:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800548a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800548c:	2b00      	cmp	r3, #0
 800548e:	d1e6      	bne.n	800545e <UART_CheckIdleState+0x3e>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	2220      	movs	r2, #32
 8005494:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	2200      	movs	r2, #0
 800549c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80054a0:	2303      	movs	r3, #3
 80054a2:	e063      	b.n	800556c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f003 0304 	and.w	r3, r3, #4
 80054ae:	2b04      	cmp	r3, #4
 80054b0:	d149      	bne.n	8005546 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80054b2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80054b6:	9300      	str	r3, [sp, #0]
 80054b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80054ba:	2200      	movs	r2, #0
 80054bc:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80054c0:	6878      	ldr	r0, [r7, #4]
 80054c2:	f000 f857 	bl	8005574 <UART_WaitOnFlagUntilTimeout>
 80054c6:	4603      	mov	r3, r0
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d03c      	beq.n	8005546 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054d4:	e853 3f00 	ldrex	r3, [r3]
 80054d8:	623b      	str	r3, [r7, #32]
   return(result);
 80054da:	6a3b      	ldr	r3, [r7, #32]
 80054dc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80054e0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	461a      	mov	r2, r3
 80054e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80054ea:	633b      	str	r3, [r7, #48]	; 0x30
 80054ec:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054ee:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80054f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80054f2:	e841 2300 	strex	r3, r2, [r1]
 80054f6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80054f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d1e6      	bne.n	80054cc <UART_CheckIdleState+0xac>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	3308      	adds	r3, #8
 8005504:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005506:	693b      	ldr	r3, [r7, #16]
 8005508:	e853 3f00 	ldrex	r3, [r3]
 800550c:	60fb      	str	r3, [r7, #12]
   return(result);
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	f023 0301 	bic.w	r3, r3, #1
 8005514:	64bb      	str	r3, [r7, #72]	; 0x48
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	3308      	adds	r3, #8
 800551c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800551e:	61fa      	str	r2, [r7, #28]
 8005520:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005522:	69b9      	ldr	r1, [r7, #24]
 8005524:	69fa      	ldr	r2, [r7, #28]
 8005526:	e841 2300 	strex	r3, r2, [r1]
 800552a:	617b      	str	r3, [r7, #20]
   return(result);
 800552c:	697b      	ldr	r3, [r7, #20]
 800552e:	2b00      	cmp	r3, #0
 8005530:	d1e5      	bne.n	80054fe <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	2220      	movs	r2, #32
 8005536:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	2200      	movs	r2, #0
 800553e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005542:	2303      	movs	r3, #3
 8005544:	e012      	b.n	800556c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	2220      	movs	r2, #32
 800554a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	2220      	movs	r2, #32
 8005552:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	2200      	movs	r2, #0
 800555a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	2200      	movs	r2, #0
 8005560:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	2200      	movs	r2, #0
 8005566:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800556a:	2300      	movs	r3, #0
}
 800556c:	4618      	mov	r0, r3
 800556e:	3758      	adds	r7, #88	; 0x58
 8005570:	46bd      	mov	sp, r7
 8005572:	bd80      	pop	{r7, pc}

08005574 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005574:	b580      	push	{r7, lr}
 8005576:	b084      	sub	sp, #16
 8005578:	af00      	add	r7, sp, #0
 800557a:	60f8      	str	r0, [r7, #12]
 800557c:	60b9      	str	r1, [r7, #8]
 800557e:	603b      	str	r3, [r7, #0]
 8005580:	4613      	mov	r3, r2
 8005582:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005584:	e049      	b.n	800561a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005586:	69bb      	ldr	r3, [r7, #24]
 8005588:	f1b3 3fff 	cmp.w	r3, #4294967295
 800558c:	d045      	beq.n	800561a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800558e:	f7fb fdcb 	bl	8001128 <HAL_GetTick>
 8005592:	4602      	mov	r2, r0
 8005594:	683b      	ldr	r3, [r7, #0]
 8005596:	1ad3      	subs	r3, r2, r3
 8005598:	69ba      	ldr	r2, [r7, #24]
 800559a:	429a      	cmp	r2, r3
 800559c:	d302      	bcc.n	80055a4 <UART_WaitOnFlagUntilTimeout+0x30>
 800559e:	69bb      	ldr	r3, [r7, #24]
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d101      	bne.n	80055a8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80055a4:	2303      	movs	r3, #3
 80055a6:	e048      	b.n	800563a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f003 0304 	and.w	r3, r3, #4
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d031      	beq.n	800561a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	69db      	ldr	r3, [r3, #28]
 80055bc:	f003 0308 	and.w	r3, r3, #8
 80055c0:	2b08      	cmp	r3, #8
 80055c2:	d110      	bne.n	80055e6 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	2208      	movs	r2, #8
 80055ca:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80055cc:	68f8      	ldr	r0, [r7, #12]
 80055ce:	f000 f838 	bl	8005642 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	2208      	movs	r2, #8
 80055d6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	2200      	movs	r2, #0
 80055de:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 80055e2:	2301      	movs	r3, #1
 80055e4:	e029      	b.n	800563a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	69db      	ldr	r3, [r3, #28]
 80055ec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80055f0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80055f4:	d111      	bne.n	800561a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80055fe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005600:	68f8      	ldr	r0, [r7, #12]
 8005602:	f000 f81e 	bl	8005642 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	2220      	movs	r2, #32
 800560a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	2200      	movs	r2, #0
 8005612:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8005616:	2303      	movs	r3, #3
 8005618:	e00f      	b.n	800563a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	69da      	ldr	r2, [r3, #28]
 8005620:	68bb      	ldr	r3, [r7, #8]
 8005622:	4013      	ands	r3, r2
 8005624:	68ba      	ldr	r2, [r7, #8]
 8005626:	429a      	cmp	r2, r3
 8005628:	bf0c      	ite	eq
 800562a:	2301      	moveq	r3, #1
 800562c:	2300      	movne	r3, #0
 800562e:	b2db      	uxtb	r3, r3
 8005630:	461a      	mov	r2, r3
 8005632:	79fb      	ldrb	r3, [r7, #7]
 8005634:	429a      	cmp	r2, r3
 8005636:	d0a6      	beq.n	8005586 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005638:	2300      	movs	r3, #0
}
 800563a:	4618      	mov	r0, r3
 800563c:	3710      	adds	r7, #16
 800563e:	46bd      	mov	sp, r7
 8005640:	bd80      	pop	{r7, pc}

08005642 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005642:	b480      	push	{r7}
 8005644:	b095      	sub	sp, #84	; 0x54
 8005646:	af00      	add	r7, sp, #0
 8005648:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005650:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005652:	e853 3f00 	ldrex	r3, [r3]
 8005656:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005658:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800565a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800565e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	461a      	mov	r2, r3
 8005666:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005668:	643b      	str	r3, [r7, #64]	; 0x40
 800566a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800566c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800566e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005670:	e841 2300 	strex	r3, r2, [r1]
 8005674:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005676:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005678:	2b00      	cmp	r3, #0
 800567a:	d1e6      	bne.n	800564a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	3308      	adds	r3, #8
 8005682:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005684:	6a3b      	ldr	r3, [r7, #32]
 8005686:	e853 3f00 	ldrex	r3, [r3]
 800568a:	61fb      	str	r3, [r7, #28]
   return(result);
 800568c:	69fb      	ldr	r3, [r7, #28]
 800568e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005692:	f023 0301 	bic.w	r3, r3, #1
 8005696:	64bb      	str	r3, [r7, #72]	; 0x48
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	3308      	adds	r3, #8
 800569e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80056a0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80056a2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056a4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80056a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80056a8:	e841 2300 	strex	r3, r2, [r1]
 80056ac:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80056ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d1e3      	bne.n	800567c <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80056b8:	2b01      	cmp	r3, #1
 80056ba:	d118      	bne.n	80056ee <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	e853 3f00 	ldrex	r3, [r3]
 80056c8:	60bb      	str	r3, [r7, #8]
   return(result);
 80056ca:	68bb      	ldr	r3, [r7, #8]
 80056cc:	f023 0310 	bic.w	r3, r3, #16
 80056d0:	647b      	str	r3, [r7, #68]	; 0x44
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	461a      	mov	r2, r3
 80056d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80056da:	61bb      	str	r3, [r7, #24]
 80056dc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056de:	6979      	ldr	r1, [r7, #20]
 80056e0:	69ba      	ldr	r2, [r7, #24]
 80056e2:	e841 2300 	strex	r3, r2, [r1]
 80056e6:	613b      	str	r3, [r7, #16]
   return(result);
 80056e8:	693b      	ldr	r3, [r7, #16]
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d1e6      	bne.n	80056bc <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	2220      	movs	r2, #32
 80056f2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	2200      	movs	r2, #0
 80056fa:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	2200      	movs	r2, #0
 8005700:	675a      	str	r2, [r3, #116]	; 0x74
}
 8005702:	bf00      	nop
 8005704:	3754      	adds	r7, #84	; 0x54
 8005706:	46bd      	mov	sp, r7
 8005708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800570c:	4770      	bx	lr

0800570e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800570e:	b480      	push	{r7}
 8005710:	b085      	sub	sp, #20
 8005712:	af00      	add	r7, sp, #0
 8005714:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800571c:	2b01      	cmp	r3, #1
 800571e:	d101      	bne.n	8005724 <HAL_UARTEx_DisableFifoMode+0x16>
 8005720:	2302      	movs	r3, #2
 8005722:	e027      	b.n	8005774 <HAL_UARTEx_DisableFifoMode+0x66>
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	2201      	movs	r2, #1
 8005728:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	2224      	movs	r2, #36	; 0x24
 8005730:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	681a      	ldr	r2, [r3, #0]
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	f022 0201 	bic.w	r2, r2, #1
 800574a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005752:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	2200      	movs	r2, #0
 8005758:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	68fa      	ldr	r2, [r7, #12]
 8005760:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	2220      	movs	r2, #32
 8005766:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	2200      	movs	r2, #0
 800576e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005772:	2300      	movs	r3, #0
}
 8005774:	4618      	mov	r0, r3
 8005776:	3714      	adds	r7, #20
 8005778:	46bd      	mov	sp, r7
 800577a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577e:	4770      	bx	lr

08005780 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005780:	b580      	push	{r7, lr}
 8005782:	b084      	sub	sp, #16
 8005784:	af00      	add	r7, sp, #0
 8005786:	6078      	str	r0, [r7, #4]
 8005788:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005790:	2b01      	cmp	r3, #1
 8005792:	d101      	bne.n	8005798 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005794:	2302      	movs	r3, #2
 8005796:	e02d      	b.n	80057f4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	2201      	movs	r2, #1
 800579c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	2224      	movs	r2, #36	; 0x24
 80057a4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	681a      	ldr	r2, [r3, #0]
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	f022 0201 	bic.w	r2, r2, #1
 80057be:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	689b      	ldr	r3, [r3, #8]
 80057c6:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	683a      	ldr	r2, [r7, #0]
 80057d0:	430a      	orrs	r2, r1
 80057d2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80057d4:	6878      	ldr	r0, [r7, #4]
 80057d6:	f000 f84f 	bl	8005878 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	68fa      	ldr	r2, [r7, #12]
 80057e0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	2220      	movs	r2, #32
 80057e6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	2200      	movs	r2, #0
 80057ee:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80057f2:	2300      	movs	r3, #0
}
 80057f4:	4618      	mov	r0, r3
 80057f6:	3710      	adds	r7, #16
 80057f8:	46bd      	mov	sp, r7
 80057fa:	bd80      	pop	{r7, pc}

080057fc <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80057fc:	b580      	push	{r7, lr}
 80057fe:	b084      	sub	sp, #16
 8005800:	af00      	add	r7, sp, #0
 8005802:	6078      	str	r0, [r7, #4]
 8005804:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800580c:	2b01      	cmp	r3, #1
 800580e:	d101      	bne.n	8005814 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005810:	2302      	movs	r3, #2
 8005812:	e02d      	b.n	8005870 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	2201      	movs	r2, #1
 8005818:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	2224      	movs	r2, #36	; 0x24
 8005820:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	681a      	ldr	r2, [r3, #0]
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	f022 0201 	bic.w	r2, r2, #1
 800583a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	689b      	ldr	r3, [r3, #8]
 8005842:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	683a      	ldr	r2, [r7, #0]
 800584c:	430a      	orrs	r2, r1
 800584e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005850:	6878      	ldr	r0, [r7, #4]
 8005852:	f000 f811 	bl	8005878 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	68fa      	ldr	r2, [r7, #12]
 800585c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	2220      	movs	r2, #32
 8005862:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	2200      	movs	r2, #0
 800586a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800586e:	2300      	movs	r3, #0
}
 8005870:	4618      	mov	r0, r3
 8005872:	3710      	adds	r7, #16
 8005874:	46bd      	mov	sp, r7
 8005876:	bd80      	pop	{r7, pc}

08005878 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005878:	b480      	push	{r7}
 800587a:	b085      	sub	sp, #20
 800587c:	af00      	add	r7, sp, #0
 800587e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005884:	2b00      	cmp	r3, #0
 8005886:	d108      	bne.n	800589a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	2201      	movs	r2, #1
 800588c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	2201      	movs	r2, #1
 8005894:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005898:	e031      	b.n	80058fe <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800589a:	2308      	movs	r3, #8
 800589c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800589e:	2308      	movs	r3, #8
 80058a0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	689b      	ldr	r3, [r3, #8]
 80058a8:	0e5b      	lsrs	r3, r3, #25
 80058aa:	b2db      	uxtb	r3, r3
 80058ac:	f003 0307 	and.w	r3, r3, #7
 80058b0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	689b      	ldr	r3, [r3, #8]
 80058b8:	0f5b      	lsrs	r3, r3, #29
 80058ba:	b2db      	uxtb	r3, r3
 80058bc:	f003 0307 	and.w	r3, r3, #7
 80058c0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80058c2:	7bbb      	ldrb	r3, [r7, #14]
 80058c4:	7b3a      	ldrb	r2, [r7, #12]
 80058c6:	4911      	ldr	r1, [pc, #68]	; (800590c <UARTEx_SetNbDataToProcess+0x94>)
 80058c8:	5c8a      	ldrb	r2, [r1, r2]
 80058ca:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80058ce:	7b3a      	ldrb	r2, [r7, #12]
 80058d0:	490f      	ldr	r1, [pc, #60]	; (8005910 <UARTEx_SetNbDataToProcess+0x98>)
 80058d2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80058d4:	fb93 f3f2 	sdiv	r3, r3, r2
 80058d8:	b29a      	uxth	r2, r3
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80058e0:	7bfb      	ldrb	r3, [r7, #15]
 80058e2:	7b7a      	ldrb	r2, [r7, #13]
 80058e4:	4909      	ldr	r1, [pc, #36]	; (800590c <UARTEx_SetNbDataToProcess+0x94>)
 80058e6:	5c8a      	ldrb	r2, [r1, r2]
 80058e8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80058ec:	7b7a      	ldrb	r2, [r7, #13]
 80058ee:	4908      	ldr	r1, [pc, #32]	; (8005910 <UARTEx_SetNbDataToProcess+0x98>)
 80058f0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80058f2:	fb93 f3f2 	sdiv	r3, r3, r2
 80058f6:	b29a      	uxth	r2, r3
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80058fe:	bf00      	nop
 8005900:	3714      	adds	r7, #20
 8005902:	46bd      	mov	sp, r7
 8005904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005908:	4770      	bx	lr
 800590a:	bf00      	nop
 800590c:	08009040 	.word	0x08009040
 8005910:	08009048 	.word	0x08009048

08005914 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005914:	b480      	push	{r7}
 8005916:	b083      	sub	sp, #12
 8005918:	af00      	add	r7, sp, #0
 800591a:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	f103 0208 	add.w	r2, r3, #8
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	f04f 32ff 	mov.w	r2, #4294967295
 800592c:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	f103 0208 	add.w	r2, r3, #8
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	f103 0208 	add.w	r2, r3, #8
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	2200      	movs	r2, #0
 8005946:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005948:	bf00      	nop
 800594a:	370c      	adds	r7, #12
 800594c:	46bd      	mov	sp, r7
 800594e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005952:	4770      	bx	lr

08005954 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005954:	b480      	push	{r7}
 8005956:	b083      	sub	sp, #12
 8005958:	af00      	add	r7, sp, #0
 800595a:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	2200      	movs	r2, #0
 8005960:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005962:	bf00      	nop
 8005964:	370c      	adds	r7, #12
 8005966:	46bd      	mov	sp, r7
 8005968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596c:	4770      	bx	lr

0800596e <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 800596e:	b480      	push	{r7}
 8005970:	b085      	sub	sp, #20
 8005972:	af00      	add	r7, sp, #0
 8005974:	6078      	str	r0, [r7, #4]
 8005976:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005978:	683b      	ldr	r3, [r7, #0]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 800597e:	68bb      	ldr	r3, [r7, #8]
 8005980:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005984:	d103      	bne.n	800598e <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	691b      	ldr	r3, [r3, #16]
 800598a:	60fb      	str	r3, [r7, #12]
 800598c:	e00c      	b.n	80059a8 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	3308      	adds	r3, #8
 8005992:	60fb      	str	r3, [r7, #12]
 8005994:	e002      	b.n	800599c <vListInsert+0x2e>
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	685b      	ldr	r3, [r3, #4]
 800599a:	60fb      	str	r3, [r7, #12]
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	685b      	ldr	r3, [r3, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	68ba      	ldr	r2, [r7, #8]
 80059a4:	429a      	cmp	r2, r3
 80059a6:	d2f6      	bcs.n	8005996 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	685a      	ldr	r2, [r3, #4]
 80059ac:	683b      	ldr	r3, [r7, #0]
 80059ae:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80059b0:	683b      	ldr	r3, [r7, #0]
 80059b2:	685b      	ldr	r3, [r3, #4]
 80059b4:	683a      	ldr	r2, [r7, #0]
 80059b6:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 80059b8:	683b      	ldr	r3, [r7, #0]
 80059ba:	68fa      	ldr	r2, [r7, #12]
 80059bc:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	683a      	ldr	r2, [r7, #0]
 80059c2:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 80059c4:	683b      	ldr	r3, [r7, #0]
 80059c6:	687a      	ldr	r2, [r7, #4]
 80059c8:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	1c5a      	adds	r2, r3, #1
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	601a      	str	r2, [r3, #0]
}
 80059d4:	bf00      	nop
 80059d6:	3714      	adds	r7, #20
 80059d8:	46bd      	mov	sp, r7
 80059da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059de:	4770      	bx	lr

080059e0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80059e0:	b480      	push	{r7}
 80059e2:	b085      	sub	sp, #20
 80059e4:	af00      	add	r7, sp, #0
 80059e6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	691b      	ldr	r3, [r3, #16]
 80059ec:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	685b      	ldr	r3, [r3, #4]
 80059f2:	687a      	ldr	r2, [r7, #4]
 80059f4:	6892      	ldr	r2, [r2, #8]
 80059f6:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	689b      	ldr	r3, [r3, #8]
 80059fc:	687a      	ldr	r2, [r7, #4]
 80059fe:	6852      	ldr	r2, [r2, #4]
 8005a00:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	685b      	ldr	r3, [r3, #4]
 8005a06:	687a      	ldr	r2, [r7, #4]
 8005a08:	429a      	cmp	r2, r3
 8005a0a:	d103      	bne.n	8005a14 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	689a      	ldr	r2, [r3, #8]
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	2200      	movs	r2, #0
 8005a18:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	1e5a      	subs	r2, r3, #1
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	681b      	ldr	r3, [r3, #0]
}
 8005a28:	4618      	mov	r0, r3
 8005a2a:	3714      	adds	r7, #20
 8005a2c:	46bd      	mov	sp, r7
 8005a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a32:	4770      	bx	lr

08005a34 <xQueueGenericReset>:
    }
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8005a34:	b580      	push	{r7, lr}
 8005a36:	b086      	sub	sp, #24
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	6078      	str	r0, [r7, #4]
 8005a3c:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 8005a3e:	2301      	movs	r3, #1
 8005a40:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 8005a46:	693b      	ldr	r3, [r7, #16]
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d10a      	bne.n	8005a62 <xQueueGenericReset+0x2e>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8005a4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a50:	f383 8811 	msr	BASEPRI, r3
 8005a54:	f3bf 8f6f 	isb	sy
 8005a58:	f3bf 8f4f 	dsb	sy
 8005a5c:	60fb      	str	r3, [r7, #12]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8005a5e:	bf00      	nop
 8005a60:	e7fe      	b.n	8005a60 <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 8005a62:	693b      	ldr	r3, [r7, #16]
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d05d      	beq.n	8005b24 <xQueueGenericReset+0xf0>
        ( pxQueue->uxLength >= 1U ) &&
 8005a68:	693b      	ldr	r3, [r7, #16]
 8005a6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d059      	beq.n	8005b24 <xQueueGenericReset+0xf0>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 8005a70:	693b      	ldr	r3, [r7, #16]
 8005a72:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005a74:	693b      	ldr	r3, [r7, #16]
 8005a76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a78:	2100      	movs	r1, #0
 8005a7a:	fba3 2302 	umull	r2, r3, r3, r2
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d000      	beq.n	8005a84 <xQueueGenericReset+0x50>
 8005a82:	2101      	movs	r1, #1
 8005a84:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d14c      	bne.n	8005b24 <xQueueGenericReset+0xf0>
    {
        taskENTER_CRITICAL();
 8005a8a:	f002 fae5 	bl	8008058 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005a8e:	693b      	ldr	r3, [r7, #16]
 8005a90:	681a      	ldr	r2, [r3, #0]
 8005a92:	693b      	ldr	r3, [r7, #16]
 8005a94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a96:	6939      	ldr	r1, [r7, #16]
 8005a98:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005a9a:	fb01 f303 	mul.w	r3, r1, r3
 8005a9e:	441a      	add	r2, r3
 8005aa0:	693b      	ldr	r3, [r7, #16]
 8005aa2:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005aa4:	693b      	ldr	r3, [r7, #16]
 8005aa6:	2200      	movs	r2, #0
 8005aa8:	639a      	str	r2, [r3, #56]	; 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8005aaa:	693b      	ldr	r3, [r7, #16]
 8005aac:	681a      	ldr	r2, [r3, #0]
 8005aae:	693b      	ldr	r3, [r7, #16]
 8005ab0:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005ab2:	693b      	ldr	r3, [r7, #16]
 8005ab4:	681a      	ldr	r2, [r3, #0]
 8005ab6:	693b      	ldr	r3, [r7, #16]
 8005ab8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005aba:	3b01      	subs	r3, #1
 8005abc:	6939      	ldr	r1, [r7, #16]
 8005abe:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005ac0:	fb01 f303 	mul.w	r3, r1, r3
 8005ac4:	441a      	add	r2, r3
 8005ac6:	693b      	ldr	r3, [r7, #16]
 8005ac8:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 8005aca:	693b      	ldr	r3, [r7, #16]
 8005acc:	22ff      	movs	r2, #255	; 0xff
 8005ace:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 8005ad2:	693b      	ldr	r3, [r7, #16]
 8005ad4:	22ff      	movs	r2, #255	; 0xff
 8005ad6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

            if( xNewQueue == pdFALSE )
 8005ada:	683b      	ldr	r3, [r7, #0]
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d114      	bne.n	8005b0a <xQueueGenericReset+0xd6>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005ae0:	693b      	ldr	r3, [r7, #16]
 8005ae2:	691b      	ldr	r3, [r3, #16]
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d01a      	beq.n	8005b1e <xQueueGenericReset+0xea>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005ae8:	693b      	ldr	r3, [r7, #16]
 8005aea:	3310      	adds	r3, #16
 8005aec:	4618      	mov	r0, r3
 8005aee:	f001 fa61 	bl	8006fb4 <xTaskRemoveFromEventList>
 8005af2:	4603      	mov	r3, r0
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d012      	beq.n	8005b1e <xQueueGenericReset+0xea>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8005af8:	4b15      	ldr	r3, [pc, #84]	; (8005b50 <xQueueGenericReset+0x11c>)
 8005afa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005afe:	601a      	str	r2, [r3, #0]
 8005b00:	f3bf 8f4f 	dsb	sy
 8005b04:	f3bf 8f6f 	isb	sy
 8005b08:	e009      	b.n	8005b1e <xQueueGenericReset+0xea>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005b0a:	693b      	ldr	r3, [r7, #16]
 8005b0c:	3310      	adds	r3, #16
 8005b0e:	4618      	mov	r0, r3
 8005b10:	f7ff ff00 	bl	8005914 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005b14:	693b      	ldr	r3, [r7, #16]
 8005b16:	3324      	adds	r3, #36	; 0x24
 8005b18:	4618      	mov	r0, r3
 8005b1a:	f7ff fefb 	bl	8005914 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 8005b1e:	f002 facb 	bl	80080b8 <vPortExitCritical>
 8005b22:	e001      	b.n	8005b28 <xQueueGenericReset+0xf4>
    }
    else
    {
        xReturn = pdFAIL;
 8005b24:	2300      	movs	r3, #0
 8005b26:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 8005b28:	697b      	ldr	r3, [r7, #20]
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d10a      	bne.n	8005b44 <xQueueGenericReset+0x110>
        __asm volatile
 8005b2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b32:	f383 8811 	msr	BASEPRI, r3
 8005b36:	f3bf 8f6f 	isb	sy
 8005b3a:	f3bf 8f4f 	dsb	sy
 8005b3e:	60bb      	str	r3, [r7, #8]
    }
 8005b40:	bf00      	nop
 8005b42:	e7fe      	b.n	8005b42 <xQueueGenericReset+0x10e>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 8005b44:	697b      	ldr	r3, [r7, #20]
}
 8005b46:	4618      	mov	r0, r3
 8005b48:	3718      	adds	r7, #24
 8005b4a:	46bd      	mov	sp, r7
 8005b4c:	bd80      	pop	{r7, pc}
 8005b4e:	bf00      	nop
 8005b50:	e000ed04 	.word	0xe000ed04

08005b54 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8005b54:	b580      	push	{r7, lr}
 8005b56:	b08a      	sub	sp, #40	; 0x28
 8005b58:	af02      	add	r7, sp, #8
 8005b5a:	60f8      	str	r0, [r7, #12]
 8005b5c:	60b9      	str	r1, [r7, #8]
 8005b5e:	4613      	mov	r3, r2
 8005b60:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 8005b62:	2300      	movs	r3, #0
 8005b64:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d02e      	beq.n	8005bca <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8005b6c:	2100      	movs	r1, #0
 8005b6e:	68ba      	ldr	r2, [r7, #8]
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	fba3 2302 	umull	r2, r3, r3, r2
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d000      	beq.n	8005b7c <xQueueGenericCreate+0x28>
 8005b7a:	2101      	movs	r1, #1
 8005b7c:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d123      	bne.n	8005bca <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	68ba      	ldr	r2, [r7, #8]
 8005b86:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8005b8a:	f113 0f49 	cmn.w	r3, #73	; 0x49
 8005b8e:	d81c      	bhi.n	8005bca <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	68ba      	ldr	r2, [r7, #8]
 8005b94:	fb02 f303 	mul.w	r3, r2, r3
 8005b98:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8005b9a:	69bb      	ldr	r3, [r7, #24]
 8005b9c:	3348      	adds	r3, #72	; 0x48
 8005b9e:	4618      	mov	r0, r3
 8005ba0:	f002 fb7c 	bl	800829c <pvPortMalloc>
 8005ba4:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 8005ba6:	69fb      	ldr	r3, [r7, #28]
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d01c      	beq.n	8005be6 <xQueueGenericCreate+0x92>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8005bac:	69fb      	ldr	r3, [r7, #28]
 8005bae:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005bb0:	697b      	ldr	r3, [r7, #20]
 8005bb2:	3348      	adds	r3, #72	; 0x48
 8005bb4:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005bb6:	79fa      	ldrb	r2, [r7, #7]
 8005bb8:	69fb      	ldr	r3, [r7, #28]
 8005bba:	9300      	str	r3, [sp, #0]
 8005bbc:	4613      	mov	r3, r2
 8005bbe:	697a      	ldr	r2, [r7, #20]
 8005bc0:	68b9      	ldr	r1, [r7, #8]
 8005bc2:	68f8      	ldr	r0, [r7, #12]
 8005bc4:	f000 f814 	bl	8005bf0 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 8005bc8:	e00d      	b.n	8005be6 <xQueueGenericCreate+0x92>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 8005bca:	69fb      	ldr	r3, [r7, #28]
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d10a      	bne.n	8005be6 <xQueueGenericCreate+0x92>
        __asm volatile
 8005bd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bd4:	f383 8811 	msr	BASEPRI, r3
 8005bd8:	f3bf 8f6f 	isb	sy
 8005bdc:	f3bf 8f4f 	dsb	sy
 8005be0:	613b      	str	r3, [r7, #16]
    }
 8005be2:	bf00      	nop
 8005be4:	e7fe      	b.n	8005be4 <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8005be6:	69fb      	ldr	r3, [r7, #28]
    }
 8005be8:	4618      	mov	r0, r3
 8005bea:	3720      	adds	r7, #32
 8005bec:	46bd      	mov	sp, r7
 8005bee:	bd80      	pop	{r7, pc}

08005bf0 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8005bf0:	b580      	push	{r7, lr}
 8005bf2:	b084      	sub	sp, #16
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	60f8      	str	r0, [r7, #12]
 8005bf8:	60b9      	str	r1, [r7, #8]
 8005bfa:	607a      	str	r2, [r7, #4]
 8005bfc:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8005bfe:	68bb      	ldr	r3, [r7, #8]
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d103      	bne.n	8005c0c <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005c04:	69bb      	ldr	r3, [r7, #24]
 8005c06:	69ba      	ldr	r2, [r7, #24]
 8005c08:	601a      	str	r2, [r3, #0]
 8005c0a:	e002      	b.n	8005c12 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005c0c:	69bb      	ldr	r3, [r7, #24]
 8005c0e:	687a      	ldr	r2, [r7, #4]
 8005c10:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8005c12:	69bb      	ldr	r3, [r7, #24]
 8005c14:	68fa      	ldr	r2, [r7, #12]
 8005c16:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8005c18:	69bb      	ldr	r3, [r7, #24]
 8005c1a:	68ba      	ldr	r2, [r7, #8]
 8005c1c:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005c1e:	2101      	movs	r1, #1
 8005c20:	69b8      	ldr	r0, [r7, #24]
 8005c22:	f7ff ff07 	bl	8005a34 <xQueueGenericReset>
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8005c26:	bf00      	nop
 8005c28:	3710      	adds	r7, #16
 8005c2a:	46bd      	mov	sp, r7
 8005c2c:	bd80      	pop	{r7, pc}
	...

08005c30 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8005c30:	b580      	push	{r7, lr}
 8005c32:	b08e      	sub	sp, #56	; 0x38
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	60f8      	str	r0, [r7, #12]
 8005c38:	60b9      	str	r1, [r7, #8]
 8005c3a:	607a      	str	r2, [r7, #4]
 8005c3c:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005c3e:	2300      	movs	r3, #0
 8005c40:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 8005c46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d10a      	bne.n	8005c62 <xQueueGenericSend+0x32>
        __asm volatile
 8005c4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c50:	f383 8811 	msr	BASEPRI, r3
 8005c54:	f3bf 8f6f 	isb	sy
 8005c58:	f3bf 8f4f 	dsb	sy
 8005c5c:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8005c5e:	bf00      	nop
 8005c60:	e7fe      	b.n	8005c60 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005c62:	68bb      	ldr	r3, [r7, #8]
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d103      	bne.n	8005c70 <xQueueGenericSend+0x40>
 8005c68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d101      	bne.n	8005c74 <xQueueGenericSend+0x44>
 8005c70:	2301      	movs	r3, #1
 8005c72:	e000      	b.n	8005c76 <xQueueGenericSend+0x46>
 8005c74:	2300      	movs	r3, #0
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d10a      	bne.n	8005c90 <xQueueGenericSend+0x60>
        __asm volatile
 8005c7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c7e:	f383 8811 	msr	BASEPRI, r3
 8005c82:	f3bf 8f6f 	isb	sy
 8005c86:	f3bf 8f4f 	dsb	sy
 8005c8a:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8005c8c:	bf00      	nop
 8005c8e:	e7fe      	b.n	8005c8e <xQueueGenericSend+0x5e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005c90:	683b      	ldr	r3, [r7, #0]
 8005c92:	2b02      	cmp	r3, #2
 8005c94:	d103      	bne.n	8005c9e <xQueueGenericSend+0x6e>
 8005c96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c9a:	2b01      	cmp	r3, #1
 8005c9c:	d101      	bne.n	8005ca2 <xQueueGenericSend+0x72>
 8005c9e:	2301      	movs	r3, #1
 8005ca0:	e000      	b.n	8005ca4 <xQueueGenericSend+0x74>
 8005ca2:	2300      	movs	r3, #0
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d10a      	bne.n	8005cbe <xQueueGenericSend+0x8e>
        __asm volatile
 8005ca8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cac:	f383 8811 	msr	BASEPRI, r3
 8005cb0:	f3bf 8f6f 	isb	sy
 8005cb4:	f3bf 8f4f 	dsb	sy
 8005cb8:	623b      	str	r3, [r7, #32]
    }
 8005cba:	bf00      	nop
 8005cbc:	e7fe      	b.n	8005cbc <xQueueGenericSend+0x8c>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005cbe:	f001 fb79 	bl	80073b4 <xTaskGetSchedulerState>
 8005cc2:	4603      	mov	r3, r0
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d102      	bne.n	8005cce <xQueueGenericSend+0x9e>
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d101      	bne.n	8005cd2 <xQueueGenericSend+0xa2>
 8005cce:	2301      	movs	r3, #1
 8005cd0:	e000      	b.n	8005cd4 <xQueueGenericSend+0xa4>
 8005cd2:	2300      	movs	r3, #0
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d10a      	bne.n	8005cee <xQueueGenericSend+0xbe>
        __asm volatile
 8005cd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cdc:	f383 8811 	msr	BASEPRI, r3
 8005ce0:	f3bf 8f6f 	isb	sy
 8005ce4:	f3bf 8f4f 	dsb	sy
 8005ce8:	61fb      	str	r3, [r7, #28]
    }
 8005cea:	bf00      	nop
 8005cec:	e7fe      	b.n	8005cec <xQueueGenericSend+0xbc>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8005cee:	f002 f9b3 	bl	8008058 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005cf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cf4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005cf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cf8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cfa:	429a      	cmp	r2, r3
 8005cfc:	d302      	bcc.n	8005d04 <xQueueGenericSend+0xd4>
 8005cfe:	683b      	ldr	r3, [r7, #0]
 8005d00:	2b02      	cmp	r3, #2
 8005d02:	d129      	bne.n	8005d58 <xQueueGenericSend+0x128>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005d04:	683a      	ldr	r2, [r7, #0]
 8005d06:	68b9      	ldr	r1, [r7, #8]
 8005d08:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005d0a:	f000 fb29 	bl	8006360 <prvCopyDataToQueue>
 8005d0e:	62f8      	str	r0, [r7, #44]	; 0x2c

                    /* If there was a task waiting for data to arrive on the
                     * queue then unblock it now. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005d10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d010      	beq.n	8005d3a <xQueueGenericSend+0x10a>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005d18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d1a:	3324      	adds	r3, #36	; 0x24
 8005d1c:	4618      	mov	r0, r3
 8005d1e:	f001 f949 	bl	8006fb4 <xTaskRemoveFromEventList>
 8005d22:	4603      	mov	r3, r0
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d013      	beq.n	8005d50 <xQueueGenericSend+0x120>
                        {
                            /* The unblocked task has a priority higher than
                             * our own so yield immediately.  Yes it is ok to do
                             * this from within the critical section - the kernel
                             * takes care of that. */
                            queueYIELD_IF_USING_PREEMPTION();
 8005d28:	4b3f      	ldr	r3, [pc, #252]	; (8005e28 <xQueueGenericSend+0x1f8>)
 8005d2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d2e:	601a      	str	r2, [r3, #0]
 8005d30:	f3bf 8f4f 	dsb	sy
 8005d34:	f3bf 8f6f 	isb	sy
 8005d38:	e00a      	b.n	8005d50 <xQueueGenericSend+0x120>
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                    else if( xYieldRequired != pdFALSE )
 8005d3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d007      	beq.n	8005d50 <xQueueGenericSend+0x120>
                    {
                        /* This path is a special case that will only get
                         * executed if the task was holding multiple mutexes and
                         * the mutexes were given back in an order that is
                         * different to that in which they were taken. */
                        queueYIELD_IF_USING_PREEMPTION();
 8005d40:	4b39      	ldr	r3, [pc, #228]	; (8005e28 <xQueueGenericSend+0x1f8>)
 8005d42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d46:	601a      	str	r2, [r3, #0]
 8005d48:	f3bf 8f4f 	dsb	sy
 8005d4c:	f3bf 8f6f 	isb	sy
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8005d50:	f002 f9b2 	bl	80080b8 <vPortExitCritical>
                return pdPASS;
 8005d54:	2301      	movs	r3, #1
 8005d56:	e063      	b.n	8005e20 <xQueueGenericSend+0x1f0>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d103      	bne.n	8005d66 <xQueueGenericSend+0x136>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8005d5e:	f002 f9ab 	bl	80080b8 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 8005d62:	2300      	movs	r3, #0
 8005d64:	e05c      	b.n	8005e20 <xQueueGenericSend+0x1f0>
                }
                else if( xEntryTimeSet == pdFALSE )
 8005d66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d106      	bne.n	8005d7a <xQueueGenericSend+0x14a>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8005d6c:	f107 0314 	add.w	r3, r7, #20
 8005d70:	4618      	mov	r0, r3
 8005d72:	f001 f9f5 	bl	8007160 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8005d76:	2301      	movs	r3, #1
 8005d78:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8005d7a:	f002 f99d 	bl	80080b8 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8005d7e:	f000 fe17 	bl	80069b0 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8005d82:	f002 f969 	bl	8008058 <vPortEnterCritical>
 8005d86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d88:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005d8c:	b25b      	sxtb	r3, r3
 8005d8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d92:	d103      	bne.n	8005d9c <xQueueGenericSend+0x16c>
 8005d94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d96:	2200      	movs	r2, #0
 8005d98:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005d9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d9e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005da2:	b25b      	sxtb	r3, r3
 8005da4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005da8:	d103      	bne.n	8005db2 <xQueueGenericSend+0x182>
 8005daa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dac:	2200      	movs	r2, #0
 8005dae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005db2:	f002 f981 	bl	80080b8 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005db6:	1d3a      	adds	r2, r7, #4
 8005db8:	f107 0314 	add.w	r3, r7, #20
 8005dbc:	4611      	mov	r1, r2
 8005dbe:	4618      	mov	r0, r3
 8005dc0:	f001 f9e4 	bl	800718c <xTaskCheckForTimeOut>
 8005dc4:	4603      	mov	r3, r0
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d124      	bne.n	8005e14 <xQueueGenericSend+0x1e4>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005dca:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005dcc:	f000 fbc0 	bl	8006550 <prvIsQueueFull>
 8005dd0:	4603      	mov	r3, r0
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d018      	beq.n	8005e08 <xQueueGenericSend+0x1d8>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005dd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dd8:	3310      	adds	r3, #16
 8005dda:	687a      	ldr	r2, [r7, #4]
 8005ddc:	4611      	mov	r1, r2
 8005dde:	4618      	mov	r0, r3
 8005de0:	f001 f87e 	bl	8006ee0 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list. It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready list instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8005de4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005de6:	f000 fb4b 	bl	8006480 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in the ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8005dea:	f000 fdef 	bl	80069cc <xTaskResumeAll>
 8005dee:	4603      	mov	r3, r0
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	f47f af7c 	bne.w	8005cee <xQueueGenericSend+0xbe>
                {
                    portYIELD_WITHIN_API();
 8005df6:	4b0c      	ldr	r3, [pc, #48]	; (8005e28 <xQueueGenericSend+0x1f8>)
 8005df8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005dfc:	601a      	str	r2, [r3, #0]
 8005dfe:	f3bf 8f4f 	dsb	sy
 8005e02:	f3bf 8f6f 	isb	sy
 8005e06:	e772      	b.n	8005cee <xQueueGenericSend+0xbe>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8005e08:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005e0a:	f000 fb39 	bl	8006480 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8005e0e:	f000 fddd 	bl	80069cc <xTaskResumeAll>
 8005e12:	e76c      	b.n	8005cee <xQueueGenericSend+0xbe>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8005e14:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005e16:	f000 fb33 	bl	8006480 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8005e1a:	f000 fdd7 	bl	80069cc <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 8005e1e:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8005e20:	4618      	mov	r0, r3
 8005e22:	3738      	adds	r7, #56	; 0x38
 8005e24:	46bd      	mov	sp, r7
 8005e26:	bd80      	pop	{r7, pc}
 8005e28:	e000ed04 	.word	0xe000ed04

08005e2c <xQueueGiveFromISR>:
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue,
                              BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005e2c:	b580      	push	{r7, lr}
 8005e2e:	b090      	sub	sp, #64	; 0x40
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	6078      	str	r0, [r7, #4]
 8005e34:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	63bb      	str	r3, [r7, #56]	; 0x38
     * item size is 0.  Don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */

    configASSERT( pxQueue );
 8005e3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d10a      	bne.n	8005e56 <xQueueGiveFromISR+0x2a>
        __asm volatile
 8005e40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e44:	f383 8811 	msr	BASEPRI, r3
 8005e48:	f3bf 8f6f 	isb	sy
 8005e4c:	f3bf 8f4f 	dsb	sy
 8005e50:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8005e52:	bf00      	nop
 8005e54:	e7fe      	b.n	8005e54 <xQueueGiveFromISR+0x28>

    /* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
     * if the item size is not 0. */
    configASSERT( pxQueue->uxItemSize == 0 );
 8005e56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d00a      	beq.n	8005e74 <xQueueGiveFromISR+0x48>
        __asm volatile
 8005e5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e62:	f383 8811 	msr	BASEPRI, r3
 8005e66:	f3bf 8f6f 	isb	sy
 8005e6a:	f3bf 8f4f 	dsb	sy
 8005e6e:	623b      	str	r3, [r7, #32]
    }
 8005e70:	bf00      	nop
 8005e72:	e7fe      	b.n	8005e72 <xQueueGiveFromISR+0x46>

    /* Normally a mutex would not be given from an interrupt, especially if
     * there is a mutex holder, as priority inheritance makes no sense for an
     * interrupts, only tasks. */
    configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8005e74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d103      	bne.n	8005e84 <xQueueGiveFromISR+0x58>
 8005e7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e7e:	689b      	ldr	r3, [r3, #8]
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d101      	bne.n	8005e88 <xQueueGiveFromISR+0x5c>
 8005e84:	2301      	movs	r3, #1
 8005e86:	e000      	b.n	8005e8a <xQueueGiveFromISR+0x5e>
 8005e88:	2300      	movs	r3, #0
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d10a      	bne.n	8005ea4 <xQueueGiveFromISR+0x78>
        __asm volatile
 8005e8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e92:	f383 8811 	msr	BASEPRI, r3
 8005e96:	f3bf 8f6f 	isb	sy
 8005e9a:	f3bf 8f4f 	dsb	sy
 8005e9e:	61fb      	str	r3, [r7, #28]
    }
 8005ea0:	bf00      	nop
 8005ea2:	e7fe      	b.n	8005ea2 <xQueueGiveFromISR+0x76>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005ea4:	f002 f9ba 	bl	800821c <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 8005ea8:	f3ef 8211 	mrs	r2, BASEPRI
 8005eac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005eb0:	f383 8811 	msr	BASEPRI, r3
 8005eb4:	f3bf 8f6f 	isb	sy
 8005eb8:	f3bf 8f4f 	dsb	sy
 8005ebc:	61ba      	str	r2, [r7, #24]
 8005ebe:	617b      	str	r3, [r7, #20]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 8005ec0:	69bb      	ldr	r3, [r7, #24]

    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005ec2:	637b      	str	r3, [r7, #52]	; 0x34
    {
        const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005ec4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ec6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ec8:	633b      	str	r3, [r7, #48]	; 0x30

        /* When the queue is used to implement a semaphore no data is ever
         * moved through the queue but it is still valid to see if the queue 'has
         * space'. */
        if( uxMessagesWaiting < pxQueue->uxLength )
 8005eca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ecc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ece:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005ed0:	429a      	cmp	r2, r3
 8005ed2:	d242      	bcs.n	8005f5a <xQueueGiveFromISR+0x12e>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8005ed4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ed6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005eda:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
             * holder - and if there is a mutex holder then the mutex cannot be
             * given from an ISR.  As this is the ISR version of the function it
             * can be assumed there is no mutex holder and no need to determine if
             * priority disinheritance is needed.  Simply increase the count of
             * messages (semaphores) available. */
            pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005ede:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ee0:	1c5a      	adds	r2, r3, #1
 8005ee2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ee4:	639a      	str	r2, [r3, #56]	; 0x38

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 8005ee6:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8005eea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005eee:	d112      	bne.n	8005f16 <xQueueGiveFromISR+0xea>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005ef0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d02d      	beq.n	8005f54 <xQueueGiveFromISR+0x128>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005ef8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005efa:	3324      	adds	r3, #36	; 0x24
 8005efc:	4618      	mov	r0, r3
 8005efe:	f001 f859 	bl	8006fb4 <xTaskRemoveFromEventList>
 8005f02:	4603      	mov	r3, r0
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d025      	beq.n	8005f54 <xQueueGiveFromISR+0x128>
                        {
                            /* The task waiting has a higher priority so record that a
                             * context switch is required. */
                            if( pxHigherPriorityTaskWoken != NULL )
 8005f08:	683b      	ldr	r3, [r7, #0]
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d022      	beq.n	8005f54 <xQueueGiveFromISR+0x128>
                            {
                                *pxHigherPriorityTaskWoken = pdTRUE;
 8005f0e:	683b      	ldr	r3, [r7, #0]
 8005f10:	2201      	movs	r2, #1
 8005f12:	601a      	str	r2, [r3, #0]
 8005f14:	e01e      	b.n	8005f54 <xQueueGiveFromISR+0x128>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                prvIncrementQueueTxLock( pxQueue, cTxLock );
 8005f16:	f000 fe65 	bl	8006be4 <uxTaskGetNumberOfTasks>
 8005f1a:	62b8      	str	r0, [r7, #40]	; 0x28
 8005f1c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8005f20:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005f22:	429a      	cmp	r2, r3
 8005f24:	d916      	bls.n	8005f54 <xQueueGiveFromISR+0x128>
 8005f26:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8005f2a:	2b7f      	cmp	r3, #127	; 0x7f
 8005f2c:	d10a      	bne.n	8005f44 <xQueueGiveFromISR+0x118>
        __asm volatile
 8005f2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f32:	f383 8811 	msr	BASEPRI, r3
 8005f36:	f3bf 8f6f 	isb	sy
 8005f3a:	f3bf 8f4f 	dsb	sy
 8005f3e:	613b      	str	r3, [r7, #16]
    }
 8005f40:	bf00      	nop
 8005f42:	e7fe      	b.n	8005f42 <xQueueGiveFromISR+0x116>
 8005f44:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005f48:	3301      	adds	r3, #1
 8005f4a:	b2db      	uxtb	r3, r3
 8005f4c:	b25a      	sxtb	r2, r3
 8005f4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f50:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 8005f54:	2301      	movs	r3, #1
 8005f56:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005f58:	e001      	b.n	8005f5e <xQueueGiveFromISR+0x132>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 8005f5a:	2300      	movs	r3, #0
 8005f5c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005f5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f60:	60fb      	str	r3, [r7, #12]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8005f68:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8005f6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8005f6c:	4618      	mov	r0, r3
 8005f6e:	3740      	adds	r7, #64	; 0x40
 8005f70:	46bd      	mov	sp, r7
 8005f72:	bd80      	pop	{r7, pc}

08005f74 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8005f74:	b580      	push	{r7, lr}
 8005f76:	b08c      	sub	sp, #48	; 0x30
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	60f8      	str	r0, [r7, #12]
 8005f7c:	60b9      	str	r1, [r7, #8]
 8005f7e:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8005f80:	2300      	movs	r3, #0
 8005f82:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8005f88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d10a      	bne.n	8005fa4 <xQueueReceive+0x30>
        __asm volatile
 8005f8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f92:	f383 8811 	msr	BASEPRI, r3
 8005f96:	f3bf 8f6f 	isb	sy
 8005f9a:	f3bf 8f4f 	dsb	sy
 8005f9e:	623b      	str	r3, [r7, #32]
    }
 8005fa0:	bf00      	nop
 8005fa2:	e7fe      	b.n	8005fa2 <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005fa4:	68bb      	ldr	r3, [r7, #8]
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d103      	bne.n	8005fb2 <xQueueReceive+0x3e>
 8005faa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d101      	bne.n	8005fb6 <xQueueReceive+0x42>
 8005fb2:	2301      	movs	r3, #1
 8005fb4:	e000      	b.n	8005fb8 <xQueueReceive+0x44>
 8005fb6:	2300      	movs	r3, #0
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d10a      	bne.n	8005fd2 <xQueueReceive+0x5e>
        __asm volatile
 8005fbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fc0:	f383 8811 	msr	BASEPRI, r3
 8005fc4:	f3bf 8f6f 	isb	sy
 8005fc8:	f3bf 8f4f 	dsb	sy
 8005fcc:	61fb      	str	r3, [r7, #28]
    }
 8005fce:	bf00      	nop
 8005fd0:	e7fe      	b.n	8005fd0 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005fd2:	f001 f9ef 	bl	80073b4 <xTaskGetSchedulerState>
 8005fd6:	4603      	mov	r3, r0
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d102      	bne.n	8005fe2 <xQueueReceive+0x6e>
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d101      	bne.n	8005fe6 <xQueueReceive+0x72>
 8005fe2:	2301      	movs	r3, #1
 8005fe4:	e000      	b.n	8005fe8 <xQueueReceive+0x74>
 8005fe6:	2300      	movs	r3, #0
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d10a      	bne.n	8006002 <xQueueReceive+0x8e>
        __asm volatile
 8005fec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ff0:	f383 8811 	msr	BASEPRI, r3
 8005ff4:	f3bf 8f6f 	isb	sy
 8005ff8:	f3bf 8f4f 	dsb	sy
 8005ffc:	61bb      	str	r3, [r7, #24]
    }
 8005ffe:	bf00      	nop
 8006000:	e7fe      	b.n	8006000 <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8006002:	f002 f829 	bl	8008058 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006006:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006008:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800600a:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800600c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800600e:	2b00      	cmp	r3, #0
 8006010:	d01f      	beq.n	8006052 <xQueueReceive+0xde>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006012:	68b9      	ldr	r1, [r7, #8]
 8006014:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006016:	f000 fa0d 	bl	8006434 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800601a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800601c:	1e5a      	subs	r2, r3, #1
 800601e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006020:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006022:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006024:	691b      	ldr	r3, [r3, #16]
 8006026:	2b00      	cmp	r3, #0
 8006028:	d00f      	beq.n	800604a <xQueueReceive+0xd6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800602a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800602c:	3310      	adds	r3, #16
 800602e:	4618      	mov	r0, r3
 8006030:	f000 ffc0 	bl	8006fb4 <xTaskRemoveFromEventList>
 8006034:	4603      	mov	r3, r0
 8006036:	2b00      	cmp	r3, #0
 8006038:	d007      	beq.n	800604a <xQueueReceive+0xd6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 800603a:	4b3d      	ldr	r3, [pc, #244]	; (8006130 <xQueueReceive+0x1bc>)
 800603c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006040:	601a      	str	r2, [r3, #0]
 8006042:	f3bf 8f4f 	dsb	sy
 8006046:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 800604a:	f002 f835 	bl	80080b8 <vPortExitCritical>
                return pdPASS;
 800604e:	2301      	movs	r3, #1
 8006050:	e069      	b.n	8006126 <xQueueReceive+0x1b2>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	2b00      	cmp	r3, #0
 8006056:	d103      	bne.n	8006060 <xQueueReceive+0xec>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8006058:	f002 f82e 	bl	80080b8 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 800605c:	2300      	movs	r3, #0
 800605e:	e062      	b.n	8006126 <xQueueReceive+0x1b2>
                }
                else if( xEntryTimeSet == pdFALSE )
 8006060:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006062:	2b00      	cmp	r3, #0
 8006064:	d106      	bne.n	8006074 <xQueueReceive+0x100>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8006066:	f107 0310 	add.w	r3, r7, #16
 800606a:	4618      	mov	r0, r3
 800606c:	f001 f878 	bl	8007160 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8006070:	2301      	movs	r3, #1
 8006072:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8006074:	f002 f820 	bl	80080b8 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8006078:	f000 fc9a 	bl	80069b0 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800607c:	f001 ffec 	bl	8008058 <vPortEnterCritical>
 8006080:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006082:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006086:	b25b      	sxtb	r3, r3
 8006088:	f1b3 3fff 	cmp.w	r3, #4294967295
 800608c:	d103      	bne.n	8006096 <xQueueReceive+0x122>
 800608e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006090:	2200      	movs	r2, #0
 8006092:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006096:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006098:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800609c:	b25b      	sxtb	r3, r3
 800609e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060a2:	d103      	bne.n	80060ac <xQueueReceive+0x138>
 80060a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060a6:	2200      	movs	r2, #0
 80060a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80060ac:	f002 f804 	bl	80080b8 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80060b0:	1d3a      	adds	r2, r7, #4
 80060b2:	f107 0310 	add.w	r3, r7, #16
 80060b6:	4611      	mov	r1, r2
 80060b8:	4618      	mov	r0, r3
 80060ba:	f001 f867 	bl	800718c <xTaskCheckForTimeOut>
 80060be:	4603      	mov	r3, r0
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d123      	bne.n	800610c <xQueueReceive+0x198>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80060c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80060c6:	f000 fa2d 	bl	8006524 <prvIsQueueEmpty>
 80060ca:	4603      	mov	r3, r0
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d017      	beq.n	8006100 <xQueueReceive+0x18c>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80060d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060d2:	3324      	adds	r3, #36	; 0x24
 80060d4:	687a      	ldr	r2, [r7, #4]
 80060d6:	4611      	mov	r1, r2
 80060d8:	4618      	mov	r0, r3
 80060da:	f000 ff01 	bl	8006ee0 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 80060de:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80060e0:	f000 f9ce 	bl	8006480 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 80060e4:	f000 fc72 	bl	80069cc <xTaskResumeAll>
 80060e8:	4603      	mov	r3, r0
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d189      	bne.n	8006002 <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 80060ee:	4b10      	ldr	r3, [pc, #64]	; (8006130 <xQueueReceive+0x1bc>)
 80060f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80060f4:	601a      	str	r2, [r3, #0]
 80060f6:	f3bf 8f4f 	dsb	sy
 80060fa:	f3bf 8f6f 	isb	sy
 80060fe:	e780      	b.n	8006002 <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8006100:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006102:	f000 f9bd 	bl	8006480 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8006106:	f000 fc61 	bl	80069cc <xTaskResumeAll>
 800610a:	e77a      	b.n	8006002 <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 800610c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800610e:	f000 f9b7 	bl	8006480 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8006112:	f000 fc5b 	bl	80069cc <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006116:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006118:	f000 fa04 	bl	8006524 <prvIsQueueEmpty>
 800611c:	4603      	mov	r3, r0
 800611e:	2b00      	cmp	r3, #0
 8006120:	f43f af6f 	beq.w	8006002 <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8006124:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8006126:	4618      	mov	r0, r3
 8006128:	3730      	adds	r7, #48	; 0x30
 800612a:	46bd      	mov	sp, r7
 800612c:	bd80      	pop	{r7, pc}
 800612e:	bf00      	nop
 8006130:	e000ed04 	.word	0xe000ed04

08006134 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue,
                                TickType_t xTicksToWait )
{
 8006134:	b580      	push	{r7, lr}
 8006136:	b08c      	sub	sp, #48	; 0x30
 8006138:	af00      	add	r7, sp, #0
 800613a:	6078      	str	r0, [r7, #4]
 800613c:	6039      	str	r1, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE;
 800613e:	2300      	movs	r3, #0
 8006140:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	627b      	str	r3, [r7, #36]	; 0x24

    #if ( configUSE_MUTEXES == 1 )
        BaseType_t xInheritanceOccurred = pdFALSE;
 8006146:	2300      	movs	r3, #0
 8006148:	62bb      	str	r3, [r7, #40]	; 0x28
    #endif

    /* Check the queue pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 800614a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800614c:	2b00      	cmp	r3, #0
 800614e:	d10a      	bne.n	8006166 <xQueueSemaphoreTake+0x32>
        __asm volatile
 8006150:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006154:	f383 8811 	msr	BASEPRI, r3
 8006158:	f3bf 8f6f 	isb	sy
 800615c:	f3bf 8f4f 	dsb	sy
 8006160:	61bb      	str	r3, [r7, #24]
    }
 8006162:	bf00      	nop
 8006164:	e7fe      	b.n	8006164 <xQueueSemaphoreTake+0x30>

    /* Check this really is a semaphore, in which case the item size will be
     * 0. */
    configASSERT( pxQueue->uxItemSize == 0 );
 8006166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800616a:	2b00      	cmp	r3, #0
 800616c:	d00a      	beq.n	8006184 <xQueueSemaphoreTake+0x50>
        __asm volatile
 800616e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006172:	f383 8811 	msr	BASEPRI, r3
 8006176:	f3bf 8f6f 	isb	sy
 800617a:	f3bf 8f4f 	dsb	sy
 800617e:	617b      	str	r3, [r7, #20]
    }
 8006180:	bf00      	nop
 8006182:	e7fe      	b.n	8006182 <xQueueSemaphoreTake+0x4e>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006184:	f001 f916 	bl	80073b4 <xTaskGetSchedulerState>
 8006188:	4603      	mov	r3, r0
 800618a:	2b00      	cmp	r3, #0
 800618c:	d102      	bne.n	8006194 <xQueueSemaphoreTake+0x60>
 800618e:	683b      	ldr	r3, [r7, #0]
 8006190:	2b00      	cmp	r3, #0
 8006192:	d101      	bne.n	8006198 <xQueueSemaphoreTake+0x64>
 8006194:	2301      	movs	r3, #1
 8006196:	e000      	b.n	800619a <xQueueSemaphoreTake+0x66>
 8006198:	2300      	movs	r3, #0
 800619a:	2b00      	cmp	r3, #0
 800619c:	d10a      	bne.n	80061b4 <xQueueSemaphoreTake+0x80>
        __asm volatile
 800619e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061a2:	f383 8811 	msr	BASEPRI, r3
 80061a6:	f3bf 8f6f 	isb	sy
 80061aa:	f3bf 8f4f 	dsb	sy
 80061ae:	613b      	str	r3, [r7, #16]
    }
 80061b0:	bf00      	nop
 80061b2:	e7fe      	b.n	80061b2 <xQueueSemaphoreTake+0x7e>
    /*lint -save -e904 This function relaxes the coding standard somewhat to allow return
     * statements within the function itself.  This is done in the interest
     * of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80061b4:	f001 ff50 	bl	8008058 <vPortEnterCritical>
        {
            /* Semaphores are queues with an item size of 0, and where the
             * number of messages in the queue is the semaphore's count value. */
            const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80061b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061bc:	623b      	str	r3, [r7, #32]

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80061be:	6a3b      	ldr	r3, [r7, #32]
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d024      	beq.n	800620e <xQueueSemaphoreTake+0xda>
            {
                traceQUEUE_RECEIVE( pxQueue );

                /* Semaphores are queues with a data size of zero and where the
                 * messages waiting is the semaphore's count.  Reduce the count. */
                pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80061c4:	6a3b      	ldr	r3, [r7, #32]
 80061c6:	1e5a      	subs	r2, r3, #1
 80061c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061ca:	639a      	str	r2, [r3, #56]	; 0x38

                #if ( configUSE_MUTEXES == 1 )
                {
                    if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80061cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d104      	bne.n	80061de <xQueueSemaphoreTake+0xaa>
                    {
                        /* Record the information required to implement
                         * priority inheritance should it become necessary. */
                        pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80061d4:	f001 fb06 	bl	80077e4 <pvTaskIncrementMutexHeldCount>
 80061d8:	4602      	mov	r2, r0
 80061da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061dc:	609a      	str	r2, [r3, #8]
                }
                #endif /* configUSE_MUTEXES */

                /* Check to see if other tasks are blocked waiting to give the
                 * semaphore, and if so, unblock the highest priority such task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80061de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061e0:	691b      	ldr	r3, [r3, #16]
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d00f      	beq.n	8006206 <xQueueSemaphoreTake+0xd2>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80061e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061e8:	3310      	adds	r3, #16
 80061ea:	4618      	mov	r0, r3
 80061ec:	f000 fee2 	bl	8006fb4 <xTaskRemoveFromEventList>
 80061f0:	4603      	mov	r3, r0
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d007      	beq.n	8006206 <xQueueSemaphoreTake+0xd2>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80061f6:	4b4d      	ldr	r3, [pc, #308]	; (800632c <xQueueSemaphoreTake+0x1f8>)
 80061f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80061fc:	601a      	str	r2, [r3, #0]
 80061fe:	f3bf 8f4f 	dsb	sy
 8006202:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8006206:	f001 ff57 	bl	80080b8 <vPortExitCritical>
                return pdPASS;
 800620a:	2301      	movs	r3, #1
 800620c:	e089      	b.n	8006322 <xQueueSemaphoreTake+0x1ee>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 800620e:	683b      	ldr	r3, [r7, #0]
 8006210:	2b00      	cmp	r3, #0
 8006212:	d103      	bne.n	800621c <xQueueSemaphoreTake+0xe8>
                {
                    /* The semaphore count was 0 and no block time is specified
                     * (or the block time has expired) so exit now. */
                    taskEXIT_CRITICAL();
 8006214:	f001 ff50 	bl	80080b8 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8006218:	2300      	movs	r3, #0
 800621a:	e082      	b.n	8006322 <xQueueSemaphoreTake+0x1ee>
                }
                else if( xEntryTimeSet == pdFALSE )
 800621c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800621e:	2b00      	cmp	r3, #0
 8006220:	d106      	bne.n	8006230 <xQueueSemaphoreTake+0xfc>
                {
                    /* The semaphore count was 0 and a block time was specified
                     * so configure the timeout structure ready to block. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8006222:	f107 0308 	add.w	r3, r7, #8
 8006226:	4618      	mov	r0, r3
 8006228:	f000 ff9a 	bl	8007160 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800622c:	2301      	movs	r3, #1
 800622e:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8006230:	f001 ff42 	bl	80080b8 <vPortExitCritical>

        /* Interrupts and other tasks can give to and take from the semaphore
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8006234:	f000 fbbc 	bl	80069b0 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8006238:	f001 ff0e 	bl	8008058 <vPortEnterCritical>
 800623c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800623e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006242:	b25b      	sxtb	r3, r3
 8006244:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006248:	d103      	bne.n	8006252 <xQueueSemaphoreTake+0x11e>
 800624a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800624c:	2200      	movs	r2, #0
 800624e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006254:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006258:	b25b      	sxtb	r3, r3
 800625a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800625e:	d103      	bne.n	8006268 <xQueueSemaphoreTake+0x134>
 8006260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006262:	2200      	movs	r2, #0
 8006264:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006268:	f001 ff26 	bl	80080b8 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800626c:	463a      	mov	r2, r7
 800626e:	f107 0308 	add.w	r3, r7, #8
 8006272:	4611      	mov	r1, r2
 8006274:	4618      	mov	r0, r3
 8006276:	f000 ff89 	bl	800718c <xTaskCheckForTimeOut>
 800627a:	4603      	mov	r3, r0
 800627c:	2b00      	cmp	r3, #0
 800627e:	d132      	bne.n	80062e6 <xQueueSemaphoreTake+0x1b2>
        {
            /* A block time is specified and not expired.  If the semaphore
             * count is 0 then enter the Blocked state to wait for a semaphore to
             * become available.  As semaphores are implemented with queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006280:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006282:	f000 f94f 	bl	8006524 <prvIsQueueEmpty>
 8006286:	4603      	mov	r3, r0
 8006288:	2b00      	cmp	r3, #0
 800628a:	d026      	beq.n	80062da <xQueueSemaphoreTake+0x1a6>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

                #if ( configUSE_MUTEXES == 1 )
                {
                    if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800628c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	2b00      	cmp	r3, #0
 8006292:	d109      	bne.n	80062a8 <xQueueSemaphoreTake+0x174>
                    {
                        taskENTER_CRITICAL();
 8006294:	f001 fee0 	bl	8008058 <vPortEnterCritical>
                        {
                            xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800629a:	689b      	ldr	r3, [r3, #8]
 800629c:	4618      	mov	r0, r3
 800629e:	f001 f8a7 	bl	80073f0 <xTaskPriorityInherit>
 80062a2:	62b8      	str	r0, [r7, #40]	; 0x28
                        }
                        taskEXIT_CRITICAL();
 80062a4:	f001 ff08 	bl	80080b8 <vPortExitCritical>
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* if ( configUSE_MUTEXES == 1 ) */

                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80062a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062aa:	3324      	adds	r3, #36	; 0x24
 80062ac:	683a      	ldr	r2, [r7, #0]
 80062ae:	4611      	mov	r1, r2
 80062b0:	4618      	mov	r0, r3
 80062b2:	f000 fe15 	bl	8006ee0 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 80062b6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80062b8:	f000 f8e2 	bl	8006480 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 80062bc:	f000 fb86 	bl	80069cc <xTaskResumeAll>
 80062c0:	4603      	mov	r3, r0
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	f47f af76 	bne.w	80061b4 <xQueueSemaphoreTake+0x80>
                {
                    portYIELD_WITHIN_API();
 80062c8:	4b18      	ldr	r3, [pc, #96]	; (800632c <xQueueSemaphoreTake+0x1f8>)
 80062ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80062ce:	601a      	str	r2, [r3, #0]
 80062d0:	f3bf 8f4f 	dsb	sy
 80062d4:	f3bf 8f6f 	isb	sy
 80062d8:	e76c      	b.n	80061b4 <xQueueSemaphoreTake+0x80>
            }
            else
            {
                /* There was no timeout and the semaphore count was not 0, so
                 * attempt to take the semaphore again. */
                prvUnlockQueue( pxQueue );
 80062da:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80062dc:	f000 f8d0 	bl	8006480 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80062e0:	f000 fb74 	bl	80069cc <xTaskResumeAll>
 80062e4:	e766      	b.n	80061b4 <xQueueSemaphoreTake+0x80>
            }
        }
        else
        {
            /* Timed out. */
            prvUnlockQueue( pxQueue );
 80062e6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80062e8:	f000 f8ca 	bl	8006480 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80062ec:	f000 fb6e 	bl	80069cc <xTaskResumeAll>

            /* If the semaphore count is 0 exit now as the timeout has
             * expired.  Otherwise return to attempt to take the semaphore that is
             * known to be available.  As semaphores are implemented by queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80062f0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80062f2:	f000 f917 	bl	8006524 <prvIsQueueEmpty>
 80062f6:	4603      	mov	r3, r0
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	f43f af5b 	beq.w	80061b4 <xQueueSemaphoreTake+0x80>
                #if ( configUSE_MUTEXES == 1 )
                {
                    /* xInheritanceOccurred could only have be set if
                     * pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
                     * test the mutex type again to check it is actually a mutex. */
                    if( xInheritanceOccurred != pdFALSE )
 80062fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006300:	2b00      	cmp	r3, #0
 8006302:	d00d      	beq.n	8006320 <xQueueSemaphoreTake+0x1ec>
                    {
                        taskENTER_CRITICAL();
 8006304:	f001 fea8 	bl	8008058 <vPortEnterCritical>
                            /* This task blocking on the mutex caused another
                             * task to inherit this task's priority.  Now this task
                             * has timed out the priority should be disinherited
                             * again, but only as low as the next highest priority
                             * task that is waiting for the same mutex. */
                            uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8006308:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800630a:	f000 f811 	bl	8006330 <prvGetDisinheritPriorityAfterTimeout>
 800630e:	61f8      	str	r0, [r7, #28]
                            vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8006310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006312:	689b      	ldr	r3, [r3, #8]
 8006314:	69f9      	ldr	r1, [r7, #28]
 8006316:	4618      	mov	r0, r3
 8006318:	f001 f9ac 	bl	8007674 <vTaskPriorityDisinheritAfterTimeout>
                        }
                        taskEXIT_CRITICAL();
 800631c:	f001 fecc 	bl	80080b8 <vPortExitCritical>
                    }
                }
                #endif /* configUSE_MUTEXES */

                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8006320:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8006322:	4618      	mov	r0, r3
 8006324:	3730      	adds	r7, #48	; 0x30
 8006326:	46bd      	mov	sp, r7
 8006328:	bd80      	pop	{r7, pc}
 800632a:	bf00      	nop
 800632c:	e000ed04 	.word	0xe000ed04

08006330 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
    {
 8006330:	b480      	push	{r7}
 8006332:	b085      	sub	sp, #20
 8006334:	af00      	add	r7, sp, #0
 8006336:	6078      	str	r0, [r7, #4]
         * priority, but the waiting task times out, then the holder should
         * disinherit the priority - but only down to the highest priority of any
         * other tasks that are waiting for the same mutex.  For this purpose,
         * return the priority of the highest priority task that is waiting for the
         * mutex. */
        if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800633c:	2b00      	cmp	r3, #0
 800633e:	d006      	beq.n	800634e <prvGetDisinheritPriorityAfterTimeout+0x1e>
        {
            uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	f1c3 0305 	rsb	r3, r3, #5
 800634a:	60fb      	str	r3, [r7, #12]
 800634c:	e001      	b.n	8006352 <prvGetDisinheritPriorityAfterTimeout+0x22>
        }
        else
        {
            uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800634e:	2300      	movs	r3, #0
 8006350:	60fb      	str	r3, [r7, #12]
        }

        return uxHighestPriorityOfWaitingTasks;
 8006352:	68fb      	ldr	r3, [r7, #12]
    }
 8006354:	4618      	mov	r0, r3
 8006356:	3714      	adds	r7, #20
 8006358:	46bd      	mov	sp, r7
 800635a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800635e:	4770      	bx	lr

08006360 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8006360:	b580      	push	{r7, lr}
 8006362:	b086      	sub	sp, #24
 8006364:	af00      	add	r7, sp, #0
 8006366:	60f8      	str	r0, [r7, #12]
 8006368:	60b9      	str	r1, [r7, #8]
 800636a:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 800636c:	2300      	movs	r3, #0
 800636e:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006374:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800637a:	2b00      	cmp	r3, #0
 800637c:	d10d      	bne.n	800639a <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
        {
            if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	2b00      	cmp	r3, #0
 8006384:	d14d      	bne.n	8006422 <prvCopyDataToQueue+0xc2>
            {
                /* The mutex is no longer being held. */
                xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	689b      	ldr	r3, [r3, #8]
 800638a:	4618      	mov	r0, r3
 800638c:	f001 f8ce 	bl	800752c <xTaskPriorityDisinherit>
 8006390:	6178      	str	r0, [r7, #20]
                pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	2200      	movs	r2, #0
 8006396:	609a      	str	r2, [r3, #8]
 8006398:	e043      	b.n	8006422 <prvCopyDataToQueue+0xc2>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	2b00      	cmp	r3, #0
 800639e:	d119      	bne.n	80063d4 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	6858      	ldr	r0, [r3, #4]
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063a8:	461a      	mov	r2, r3
 80063aa:	68b9      	ldr	r1, [r7, #8]
 80063ac:	f002 f996 	bl	80086dc <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	685a      	ldr	r2, [r3, #4]
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063b8:	441a      	add	r2, r3
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	685a      	ldr	r2, [r3, #4]
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	689b      	ldr	r3, [r3, #8]
 80063c6:	429a      	cmp	r2, r3
 80063c8:	d32b      	bcc.n	8006422 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	681a      	ldr	r2, [r3, #0]
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	605a      	str	r2, [r3, #4]
 80063d2:	e026      	b.n	8006422 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	68d8      	ldr	r0, [r3, #12]
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063dc:	461a      	mov	r2, r3
 80063de:	68b9      	ldr	r1, [r7, #8]
 80063e0:	f002 f97c 	bl	80086dc <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	68da      	ldr	r2, [r3, #12]
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063ec:	425b      	negs	r3, r3
 80063ee:	441a      	add	r2, r3
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	68da      	ldr	r2, [r3, #12]
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	429a      	cmp	r2, r3
 80063fe:	d207      	bcs.n	8006410 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	689a      	ldr	r2, [r3, #8]
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006408:	425b      	negs	r3, r3
 800640a:	441a      	add	r2, r3
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	2b02      	cmp	r3, #2
 8006414:	d105      	bne.n	8006422 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006416:	693b      	ldr	r3, [r7, #16]
 8006418:	2b00      	cmp	r3, #0
 800641a:	d002      	beq.n	8006422 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 800641c:	693b      	ldr	r3, [r7, #16]
 800641e:	3b01      	subs	r3, #1
 8006420:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006422:	693b      	ldr	r3, [r7, #16]
 8006424:	1c5a      	adds	r2, r3, #1
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 800642a:	697b      	ldr	r3, [r7, #20]
}
 800642c:	4618      	mov	r0, r3
 800642e:	3718      	adds	r7, #24
 8006430:	46bd      	mov	sp, r7
 8006432:	bd80      	pop	{r7, pc}

08006434 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8006434:	b580      	push	{r7, lr}
 8006436:	b082      	sub	sp, #8
 8006438:	af00      	add	r7, sp, #0
 800643a:	6078      	str	r0, [r7, #4]
 800643c:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006442:	2b00      	cmp	r3, #0
 8006444:	d018      	beq.n	8006478 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	68da      	ldr	r2, [r3, #12]
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800644e:	441a      	add	r2, r3
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	68da      	ldr	r2, [r3, #12]
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	689b      	ldr	r3, [r3, #8]
 800645c:	429a      	cmp	r2, r3
 800645e:	d303      	bcc.n	8006468 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681a      	ldr	r2, [r3, #0]
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	68d9      	ldr	r1, [r3, #12]
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006470:	461a      	mov	r2, r3
 8006472:	6838      	ldr	r0, [r7, #0]
 8006474:	f002 f932 	bl	80086dc <memcpy>
    }
}
 8006478:	bf00      	nop
 800647a:	3708      	adds	r7, #8
 800647c:	46bd      	mov	sp, r7
 800647e:	bd80      	pop	{r7, pc}

08006480 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006480:	b580      	push	{r7, lr}
 8006482:	b084      	sub	sp, #16
 8006484:	af00      	add	r7, sp, #0
 8006486:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8006488:	f001 fde6 	bl	8008058 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006492:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8006494:	e011      	b.n	80064ba <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800649a:	2b00      	cmp	r3, #0
 800649c:	d012      	beq.n	80064c4 <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	3324      	adds	r3, #36	; 0x24
 80064a2:	4618      	mov	r0, r3
 80064a4:	f000 fd86 	bl	8006fb4 <xTaskRemoveFromEventList>
 80064a8:	4603      	mov	r3, r0
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d001      	beq.n	80064b2 <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 80064ae:	f000 fed3 	bl	8007258 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 80064b2:	7bfb      	ldrb	r3, [r7, #15]
 80064b4:	3b01      	subs	r3, #1
 80064b6:	b2db      	uxtb	r3, r3
 80064b8:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80064ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80064be:	2b00      	cmp	r3, #0
 80064c0:	dce9      	bgt.n	8006496 <prvUnlockQueue+0x16>
 80064c2:	e000      	b.n	80064c6 <prvUnlockQueue+0x46>
                    break;
 80064c4:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	22ff      	movs	r2, #255	; 0xff
 80064ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 80064ce:	f001 fdf3 	bl	80080b8 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 80064d2:	f001 fdc1 	bl	8008058 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80064dc:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 80064de:	e011      	b.n	8006504 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	691b      	ldr	r3, [r3, #16]
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d012      	beq.n	800650e <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	3310      	adds	r3, #16
 80064ec:	4618      	mov	r0, r3
 80064ee:	f000 fd61 	bl	8006fb4 <xTaskRemoveFromEventList>
 80064f2:	4603      	mov	r3, r0
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d001      	beq.n	80064fc <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 80064f8:	f000 feae 	bl	8007258 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 80064fc:	7bbb      	ldrb	r3, [r7, #14]
 80064fe:	3b01      	subs	r3, #1
 8006500:	b2db      	uxtb	r3, r3
 8006502:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8006504:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006508:	2b00      	cmp	r3, #0
 800650a:	dce9      	bgt.n	80064e0 <prvUnlockQueue+0x60>
 800650c:	e000      	b.n	8006510 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 800650e:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	22ff      	movs	r2, #255	; 0xff
 8006514:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8006518:	f001 fdce 	bl	80080b8 <vPortExitCritical>
}
 800651c:	bf00      	nop
 800651e:	3710      	adds	r7, #16
 8006520:	46bd      	mov	sp, r7
 8006522:	bd80      	pop	{r7, pc}

08006524 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8006524:	b580      	push	{r7, lr}
 8006526:	b084      	sub	sp, #16
 8006528:	af00      	add	r7, sp, #0
 800652a:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 800652c:	f001 fd94 	bl	8008058 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006534:	2b00      	cmp	r3, #0
 8006536:	d102      	bne.n	800653e <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8006538:	2301      	movs	r3, #1
 800653a:	60fb      	str	r3, [r7, #12]
 800653c:	e001      	b.n	8006542 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 800653e:	2300      	movs	r3, #0
 8006540:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8006542:	f001 fdb9 	bl	80080b8 <vPortExitCritical>

    return xReturn;
 8006546:	68fb      	ldr	r3, [r7, #12]
}
 8006548:	4618      	mov	r0, r3
 800654a:	3710      	adds	r7, #16
 800654c:	46bd      	mov	sp, r7
 800654e:	bd80      	pop	{r7, pc}

08006550 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8006550:	b580      	push	{r7, lr}
 8006552:	b084      	sub	sp, #16
 8006554:	af00      	add	r7, sp, #0
 8006556:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8006558:	f001 fd7e 	bl	8008058 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006564:	429a      	cmp	r2, r3
 8006566:	d102      	bne.n	800656e <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8006568:	2301      	movs	r3, #1
 800656a:	60fb      	str	r3, [r7, #12]
 800656c:	e001      	b.n	8006572 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 800656e:	2300      	movs	r3, #0
 8006570:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8006572:	f001 fda1 	bl	80080b8 <vPortExitCritical>

    return xReturn;
 8006576:	68fb      	ldr	r3, [r7, #12]
}
 8006578:	4618      	mov	r0, r3
 800657a:	3710      	adds	r7, #16
 800657c:	46bd      	mov	sp, r7
 800657e:	bd80      	pop	{r7, pc}

08006580 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8006580:	b580      	push	{r7, lr}
 8006582:	b086      	sub	sp, #24
 8006584:	af00      	add	r7, sp, #0
 8006586:	60f8      	str	r0, [r7, #12]
 8006588:	60b9      	str	r1, [r7, #8]
 800658a:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8006590:	f001 fd62 	bl	8008058 <vPortEnterCritical>
 8006594:	697b      	ldr	r3, [r7, #20]
 8006596:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800659a:	b25b      	sxtb	r3, r3
 800659c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065a0:	d103      	bne.n	80065aa <vQueueWaitForMessageRestricted+0x2a>
 80065a2:	697b      	ldr	r3, [r7, #20]
 80065a4:	2200      	movs	r2, #0
 80065a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80065aa:	697b      	ldr	r3, [r7, #20]
 80065ac:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80065b0:	b25b      	sxtb	r3, r3
 80065b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065b6:	d103      	bne.n	80065c0 <vQueueWaitForMessageRestricted+0x40>
 80065b8:	697b      	ldr	r3, [r7, #20]
 80065ba:	2200      	movs	r2, #0
 80065bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80065c0:	f001 fd7a 	bl	80080b8 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80065c4:	697b      	ldr	r3, [r7, #20]
 80065c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d106      	bne.n	80065da <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80065cc:	697b      	ldr	r3, [r7, #20]
 80065ce:	3324      	adds	r3, #36	; 0x24
 80065d0:	687a      	ldr	r2, [r7, #4]
 80065d2:	68b9      	ldr	r1, [r7, #8]
 80065d4:	4618      	mov	r0, r3
 80065d6:	f000 fca7 	bl	8006f28 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 80065da:	6978      	ldr	r0, [r7, #20]
 80065dc:	f7ff ff50 	bl	8006480 <prvUnlockQueue>
    }
 80065e0:	bf00      	nop
 80065e2:	3718      	adds	r7, #24
 80065e4:	46bd      	mov	sp, r7
 80065e6:	bd80      	pop	{r7, pc}

080065e8 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 80065e8:	b580      	push	{r7, lr}
 80065ea:	b08c      	sub	sp, #48	; 0x30
 80065ec:	af04      	add	r7, sp, #16
 80065ee:	60f8      	str	r0, [r7, #12]
 80065f0:	60b9      	str	r1, [r7, #8]
 80065f2:	603b      	str	r3, [r7, #0]
 80065f4:	4613      	mov	r3, r2
 80065f6:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80065f8:	88fb      	ldrh	r3, [r7, #6]
 80065fa:	009b      	lsls	r3, r3, #2
 80065fc:	4618      	mov	r0, r3
 80065fe:	f001 fe4d 	bl	800829c <pvPortMalloc>
 8006602:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 8006604:	697b      	ldr	r3, [r7, #20]
 8006606:	2b00      	cmp	r3, #0
 8006608:	d013      	beq.n	8006632 <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800660a:	2050      	movs	r0, #80	; 0x50
 800660c:	f001 fe46 	bl	800829c <pvPortMalloc>
 8006610:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 8006612:	69fb      	ldr	r3, [r7, #28]
 8006614:	2b00      	cmp	r3, #0
 8006616:	d008      	beq.n	800662a <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8006618:	2250      	movs	r2, #80	; 0x50
 800661a:	2100      	movs	r1, #0
 800661c:	69f8      	ldr	r0, [r7, #28]
 800661e:	f002 f829 	bl	8008674 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 8006622:	69fb      	ldr	r3, [r7, #28]
 8006624:	697a      	ldr	r2, [r7, #20]
 8006626:	631a      	str	r2, [r3, #48]	; 0x30
 8006628:	e005      	b.n	8006636 <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 800662a:	6978      	ldr	r0, [r7, #20]
 800662c:	f001 fef0 	bl	8008410 <vPortFree>
 8006630:	e001      	b.n	8006636 <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 8006632:	2300      	movs	r3, #0
 8006634:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8006636:	69fb      	ldr	r3, [r7, #28]
 8006638:	2b00      	cmp	r3, #0
 800663a:	d013      	beq.n	8006664 <xTaskCreate+0x7c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800663c:	88fa      	ldrh	r2, [r7, #6]
 800663e:	2300      	movs	r3, #0
 8006640:	9303      	str	r3, [sp, #12]
 8006642:	69fb      	ldr	r3, [r7, #28]
 8006644:	9302      	str	r3, [sp, #8]
 8006646:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006648:	9301      	str	r3, [sp, #4]
 800664a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800664c:	9300      	str	r3, [sp, #0]
 800664e:	683b      	ldr	r3, [r7, #0]
 8006650:	68b9      	ldr	r1, [r7, #8]
 8006652:	68f8      	ldr	r0, [r7, #12]
 8006654:	f000 f80e 	bl	8006674 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8006658:	69f8      	ldr	r0, [r7, #28]
 800665a:	f000 f891 	bl	8006780 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 800665e:	2301      	movs	r3, #1
 8006660:	61bb      	str	r3, [r7, #24]
 8006662:	e002      	b.n	800666a <xTaskCreate+0x82>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006664:	f04f 33ff 	mov.w	r3, #4294967295
 8006668:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 800666a:	69bb      	ldr	r3, [r7, #24]
    }
 800666c:	4618      	mov	r0, r3
 800666e:	3720      	adds	r7, #32
 8006670:	46bd      	mov	sp, r7
 8006672:	bd80      	pop	{r7, pc}

08006674 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8006674:	b580      	push	{r7, lr}
 8006676:	b088      	sub	sp, #32
 8006678:	af00      	add	r7, sp, #0
 800667a:	60f8      	str	r0, [r7, #12]
 800667c:	60b9      	str	r1, [r7, #8]
 800667e:	607a      	str	r2, [r7, #4]
 8006680:	603b      	str	r3, [r7, #0]
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006682:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006684:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800668c:	3b01      	subs	r3, #1
 800668e:	009b      	lsls	r3, r3, #2
 8006690:	4413      	add	r3, r2
 8006692:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006694:	69bb      	ldr	r3, [r7, #24]
 8006696:	f023 0307 	bic.w	r3, r3, #7
 800669a:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800669c:	69bb      	ldr	r3, [r7, #24]
 800669e:	f003 0307 	and.w	r3, r3, #7
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d00a      	beq.n	80066bc <prvInitialiseNewTask+0x48>
        __asm volatile
 80066a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066aa:	f383 8811 	msr	BASEPRI, r3
 80066ae:	f3bf 8f6f 	isb	sy
 80066b2:	f3bf 8f4f 	dsb	sy
 80066b6:	617b      	str	r3, [r7, #20]
    }
 80066b8:	bf00      	nop
 80066ba:	e7fe      	b.n	80066ba <prvInitialiseNewTask+0x46>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 80066bc:	68bb      	ldr	r3, [r7, #8]
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d01e      	beq.n	8006700 <prvInitialiseNewTask+0x8c>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80066c2:	2300      	movs	r3, #0
 80066c4:	61fb      	str	r3, [r7, #28]
 80066c6:	e012      	b.n	80066ee <prvInitialiseNewTask+0x7a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80066c8:	68ba      	ldr	r2, [r7, #8]
 80066ca:	69fb      	ldr	r3, [r7, #28]
 80066cc:	4413      	add	r3, r2
 80066ce:	7819      	ldrb	r1, [r3, #0]
 80066d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80066d2:	69fb      	ldr	r3, [r7, #28]
 80066d4:	4413      	add	r3, r2
 80066d6:	3334      	adds	r3, #52	; 0x34
 80066d8:	460a      	mov	r2, r1
 80066da:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 80066dc:	68ba      	ldr	r2, [r7, #8]
 80066de:	69fb      	ldr	r3, [r7, #28]
 80066e0:	4413      	add	r3, r2
 80066e2:	781b      	ldrb	r3, [r3, #0]
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d006      	beq.n	80066f6 <prvInitialiseNewTask+0x82>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80066e8:	69fb      	ldr	r3, [r7, #28]
 80066ea:	3301      	adds	r3, #1
 80066ec:	61fb      	str	r3, [r7, #28]
 80066ee:	69fb      	ldr	r3, [r7, #28]
 80066f0:	2b09      	cmp	r3, #9
 80066f2:	d9e9      	bls.n	80066c8 <prvInitialiseNewTask+0x54>
 80066f4:	e000      	b.n	80066f8 <prvInitialiseNewTask+0x84>
            {
                break;
 80066f6:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80066f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066fa:	2200      	movs	r2, #0
 80066fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8006700:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006702:	2b04      	cmp	r3, #4
 8006704:	d90a      	bls.n	800671c <prvInitialiseNewTask+0xa8>
        __asm volatile
 8006706:	f04f 0350 	mov.w	r3, #80	; 0x50
 800670a:	f383 8811 	msr	BASEPRI, r3
 800670e:	f3bf 8f6f 	isb	sy
 8006712:	f3bf 8f4f 	dsb	sy
 8006716:	613b      	str	r3, [r7, #16]
    }
 8006718:	bf00      	nop
 800671a:	e7fe      	b.n	800671a <prvInitialiseNewTask+0xa6>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800671c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800671e:	2b04      	cmp	r3, #4
 8006720:	d901      	bls.n	8006726 <prvInitialiseNewTask+0xb2>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006722:	2304      	movs	r3, #4
 8006724:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8006726:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006728:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800672a:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 800672c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800672e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006730:	641a      	str	r2, [r3, #64]	; 0x40
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006732:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006734:	3304      	adds	r3, #4
 8006736:	4618      	mov	r0, r3
 8006738:	f7ff f90c 	bl	8005954 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800673c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800673e:	3318      	adds	r3, #24
 8006740:	4618      	mov	r0, r3
 8006742:	f7ff f907 	bl	8005954 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006746:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006748:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800674a:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800674c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800674e:	f1c3 0205 	rsb	r2, r3, #5
 8006752:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006754:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006756:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006758:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800675a:	625a      	str	r2, [r3, #36]	; 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800675c:	683a      	ldr	r2, [r7, #0]
 800675e:	68f9      	ldr	r1, [r7, #12]
 8006760:	69b8      	ldr	r0, [r7, #24]
 8006762:	f001 fb4b 	bl	8007dfc <pxPortInitialiseStack>
 8006766:	4602      	mov	r2, r0
 8006768:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800676a:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 800676c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800676e:	2b00      	cmp	r3, #0
 8006770:	d002      	beq.n	8006778 <prvInitialiseNewTask+0x104>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006772:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006774:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006776:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8006778:	bf00      	nop
 800677a:	3720      	adds	r7, #32
 800677c:	46bd      	mov	sp, r7
 800677e:	bd80      	pop	{r7, pc}

08006780 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8006780:	b580      	push	{r7, lr}
 8006782:	b084      	sub	sp, #16
 8006784:	af00      	add	r7, sp, #0
 8006786:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8006788:	f001 fc66 	bl	8008058 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 800678c:	4b3e      	ldr	r3, [pc, #248]	; (8006888 <prvAddNewTaskToReadyList+0x108>)
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	3301      	adds	r3, #1
 8006792:	4a3d      	ldr	r2, [pc, #244]	; (8006888 <prvAddNewTaskToReadyList+0x108>)
 8006794:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8006796:	4b3d      	ldr	r3, [pc, #244]	; (800688c <prvAddNewTaskToReadyList+0x10c>)
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	2b00      	cmp	r3, #0
 800679c:	d109      	bne.n	80067b2 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 800679e:	4a3b      	ldr	r2, [pc, #236]	; (800688c <prvAddNewTaskToReadyList+0x10c>)
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80067a4:	4b38      	ldr	r3, [pc, #224]	; (8006888 <prvAddNewTaskToReadyList+0x108>)
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	2b01      	cmp	r3, #1
 80067aa:	d110      	bne.n	80067ce <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 80067ac:	f000 fd68 	bl	8007280 <prvInitialiseTaskLists>
 80067b0:	e00d      	b.n	80067ce <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 80067b2:	4b37      	ldr	r3, [pc, #220]	; (8006890 <prvAddNewTaskToReadyList+0x110>)
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d109      	bne.n	80067ce <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80067ba:	4b34      	ldr	r3, [pc, #208]	; (800688c <prvAddNewTaskToReadyList+0x10c>)
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067c4:	429a      	cmp	r2, r3
 80067c6:	d802      	bhi.n	80067ce <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 80067c8:	4a30      	ldr	r2, [pc, #192]	; (800688c <prvAddNewTaskToReadyList+0x10c>)
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 80067ce:	4b31      	ldr	r3, [pc, #196]	; (8006894 <prvAddNewTaskToReadyList+0x114>)
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	3301      	adds	r3, #1
 80067d4:	4a2f      	ldr	r2, [pc, #188]	; (8006894 <prvAddNewTaskToReadyList+0x114>)
 80067d6:	6013      	str	r3, [r2, #0]
            pxNewTCB->uxTCBNumber = uxTaskNumber;
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067dc:	2201      	movs	r2, #1
 80067de:	409a      	lsls	r2, r3
 80067e0:	4b2d      	ldr	r3, [pc, #180]	; (8006898 <prvAddNewTaskToReadyList+0x118>)
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	4313      	orrs	r3, r2
 80067e6:	4a2c      	ldr	r2, [pc, #176]	; (8006898 <prvAddNewTaskToReadyList+0x118>)
 80067e8:	6013      	str	r3, [r2, #0]
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067ee:	492b      	ldr	r1, [pc, #172]	; (800689c <prvAddNewTaskToReadyList+0x11c>)
 80067f0:	4613      	mov	r3, r2
 80067f2:	009b      	lsls	r3, r3, #2
 80067f4:	4413      	add	r3, r2
 80067f6:	009b      	lsls	r3, r3, #2
 80067f8:	440b      	add	r3, r1
 80067fa:	3304      	adds	r3, #4
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	60fb      	str	r3, [r7, #12]
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	68fa      	ldr	r2, [r7, #12]
 8006804:	609a      	str	r2, [r3, #8]
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	689a      	ldr	r2, [r3, #8]
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	60da      	str	r2, [r3, #12]
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	689b      	ldr	r3, [r3, #8]
 8006812:	687a      	ldr	r2, [r7, #4]
 8006814:	3204      	adds	r2, #4
 8006816:	605a      	str	r2, [r3, #4]
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	1d1a      	adds	r2, r3, #4
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	609a      	str	r2, [r3, #8]
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006824:	4613      	mov	r3, r2
 8006826:	009b      	lsls	r3, r3, #2
 8006828:	4413      	add	r3, r2
 800682a:	009b      	lsls	r3, r3, #2
 800682c:	4a1b      	ldr	r2, [pc, #108]	; (800689c <prvAddNewTaskToReadyList+0x11c>)
 800682e:	441a      	add	r2, r3
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	615a      	str	r2, [r3, #20]
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006838:	4918      	ldr	r1, [pc, #96]	; (800689c <prvAddNewTaskToReadyList+0x11c>)
 800683a:	4613      	mov	r3, r2
 800683c:	009b      	lsls	r3, r3, #2
 800683e:	4413      	add	r3, r2
 8006840:	009b      	lsls	r3, r3, #2
 8006842:	440b      	add	r3, r1
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	1c59      	adds	r1, r3, #1
 8006848:	4814      	ldr	r0, [pc, #80]	; (800689c <prvAddNewTaskToReadyList+0x11c>)
 800684a:	4613      	mov	r3, r2
 800684c:	009b      	lsls	r3, r3, #2
 800684e:	4413      	add	r3, r2
 8006850:	009b      	lsls	r3, r3, #2
 8006852:	4403      	add	r3, r0
 8006854:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8006856:	f001 fc2f 	bl	80080b8 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 800685a:	4b0d      	ldr	r3, [pc, #52]	; (8006890 <prvAddNewTaskToReadyList+0x110>)
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	2b00      	cmp	r3, #0
 8006860:	d00e      	beq.n	8006880 <prvAddNewTaskToReadyList+0x100>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006862:	4b0a      	ldr	r3, [pc, #40]	; (800688c <prvAddNewTaskToReadyList+0x10c>)
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800686c:	429a      	cmp	r2, r3
 800686e:	d207      	bcs.n	8006880 <prvAddNewTaskToReadyList+0x100>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8006870:	4b0b      	ldr	r3, [pc, #44]	; (80068a0 <prvAddNewTaskToReadyList+0x120>)
 8006872:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006876:	601a      	str	r2, [r3, #0]
 8006878:	f3bf 8f4f 	dsb	sy
 800687c:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8006880:	bf00      	nop
 8006882:	3710      	adds	r7, #16
 8006884:	46bd      	mov	sp, r7
 8006886:	bd80      	pop	{r7, pc}
 8006888:	200002b8 	.word	0x200002b8
 800688c:	200001e0 	.word	0x200001e0
 8006890:	200002c4 	.word	0x200002c4
 8006894:	200002d4 	.word	0x200002d4
 8006898:	200002c0 	.word	0x200002c0
 800689c:	200001e4 	.word	0x200001e4
 80068a0:	e000ed04 	.word	0xe000ed04

080068a4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 80068a4:	b580      	push	{r7, lr}
 80068a6:	b084      	sub	sp, #16
 80068a8:	af00      	add	r7, sp, #0
 80068aa:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 80068ac:	2300      	movs	r3, #0
 80068ae:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d017      	beq.n	80068e6 <vTaskDelay+0x42>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 80068b6:	4b13      	ldr	r3, [pc, #76]	; (8006904 <vTaskDelay+0x60>)
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d00a      	beq.n	80068d4 <vTaskDelay+0x30>
        __asm volatile
 80068be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068c2:	f383 8811 	msr	BASEPRI, r3
 80068c6:	f3bf 8f6f 	isb	sy
 80068ca:	f3bf 8f4f 	dsb	sy
 80068ce:	60bb      	str	r3, [r7, #8]
    }
 80068d0:	bf00      	nop
 80068d2:	e7fe      	b.n	80068d2 <vTaskDelay+0x2e>
            vTaskSuspendAll();
 80068d4:	f000 f86c 	bl	80069b0 <vTaskSuspendAll>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80068d8:	2100      	movs	r1, #0
 80068da:	6878      	ldr	r0, [r7, #4]
 80068dc:	f000 ff96 	bl	800780c <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 80068e0:	f000 f874 	bl	80069cc <xTaskResumeAll>
 80068e4:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d107      	bne.n	80068fc <vTaskDelay+0x58>
        {
            portYIELD_WITHIN_API();
 80068ec:	4b06      	ldr	r3, [pc, #24]	; (8006908 <vTaskDelay+0x64>)
 80068ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80068f2:	601a      	str	r2, [r3, #0]
 80068f4:	f3bf 8f4f 	dsb	sy
 80068f8:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 80068fc:	bf00      	nop
 80068fe:	3710      	adds	r7, #16
 8006900:	46bd      	mov	sp, r7
 8006902:	bd80      	pop	{r7, pc}
 8006904:	200002e0 	.word	0x200002e0
 8006908:	e000ed04 	.word	0xe000ed04

0800690c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800690c:	b580      	push	{r7, lr}
 800690e:	b086      	sub	sp, #24
 8006910:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 8006912:	4b20      	ldr	r3, [pc, #128]	; (8006994 <vTaskStartScheduler+0x88>)
 8006914:	9301      	str	r3, [sp, #4]
 8006916:	2300      	movs	r3, #0
 8006918:	9300      	str	r3, [sp, #0]
 800691a:	2300      	movs	r3, #0
 800691c:	2280      	movs	r2, #128	; 0x80
 800691e:	491e      	ldr	r1, [pc, #120]	; (8006998 <vTaskStartScheduler+0x8c>)
 8006920:	481e      	ldr	r0, [pc, #120]	; (800699c <vTaskStartScheduler+0x90>)
 8006922:	f7ff fe61 	bl	80065e8 <xTaskCreate>
 8006926:	60f8      	str	r0, [r7, #12]
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	2b01      	cmp	r3, #1
 800692c:	d102      	bne.n	8006934 <vTaskStartScheduler+0x28>
        {
            xReturn = xTimerCreateTimerTask();
 800692e:	f000 ffed 	bl	800790c <xTimerCreateTimerTask>
 8006932:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	2b01      	cmp	r3, #1
 8006938:	d116      	bne.n	8006968 <vTaskStartScheduler+0x5c>
        __asm volatile
 800693a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800693e:	f383 8811 	msr	BASEPRI, r3
 8006942:	f3bf 8f6f 	isb	sy
 8006946:	f3bf 8f4f 	dsb	sy
 800694a:	60bb      	str	r3, [r7, #8]
    }
 800694c:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 800694e:	4b14      	ldr	r3, [pc, #80]	; (80069a0 <vTaskStartScheduler+0x94>)
 8006950:	f04f 32ff 	mov.w	r2, #4294967295
 8006954:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8006956:	4b13      	ldr	r3, [pc, #76]	; (80069a4 <vTaskStartScheduler+0x98>)
 8006958:	2201      	movs	r2, #1
 800695a:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800695c:	4b12      	ldr	r3, [pc, #72]	; (80069a8 <vTaskStartScheduler+0x9c>)
 800695e:	2200      	movs	r2, #0
 8006960:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 8006962:	f001 fad7 	bl	8007f14 <xPortStartScheduler>
 8006966:	e00e      	b.n	8006986 <vTaskStartScheduler+0x7a>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800696e:	d10a      	bne.n	8006986 <vTaskStartScheduler+0x7a>
        __asm volatile
 8006970:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006974:	f383 8811 	msr	BASEPRI, r3
 8006978:	f3bf 8f6f 	isb	sy
 800697c:	f3bf 8f4f 	dsb	sy
 8006980:	607b      	str	r3, [r7, #4]
    }
 8006982:	bf00      	nop
 8006984:	e7fe      	b.n	8006984 <vTaskStartScheduler+0x78>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8006986:	4b09      	ldr	r3, [pc, #36]	; (80069ac <vTaskStartScheduler+0xa0>)
 8006988:	681b      	ldr	r3, [r3, #0]
}
 800698a:	bf00      	nop
 800698c:	3710      	adds	r7, #16
 800698e:	46bd      	mov	sp, r7
 8006990:	bd80      	pop	{r7, pc}
 8006992:	bf00      	nop
 8006994:	200002dc 	.word	0x200002dc
 8006998:	08008fd0 	.word	0x08008fd0
 800699c:	08007271 	.word	0x08007271
 80069a0:	200002d8 	.word	0x200002d8
 80069a4:	200002c4 	.word	0x200002c4
 80069a8:	200002bc 	.word	0x200002bc
 80069ac:	2000000c 	.word	0x2000000c

080069b0 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80069b0:	b480      	push	{r7}
 80069b2:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 80069b4:	4b04      	ldr	r3, [pc, #16]	; (80069c8 <vTaskSuspendAll+0x18>)
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	3301      	adds	r3, #1
 80069ba:	4a03      	ldr	r2, [pc, #12]	; (80069c8 <vTaskSuspendAll+0x18>)
 80069bc:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 80069be:	bf00      	nop
 80069c0:	46bd      	mov	sp, r7
 80069c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c6:	4770      	bx	lr
 80069c8:	200002e0 	.word	0x200002e0

080069cc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80069cc:	b580      	push	{r7, lr}
 80069ce:	b088      	sub	sp, #32
 80069d0:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 80069d2:	2300      	movs	r3, #0
 80069d4:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 80069d6:	2300      	movs	r3, #0
 80069d8:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 80069da:	4b71      	ldr	r3, [pc, #452]	; (8006ba0 <xTaskResumeAll+0x1d4>)
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d10a      	bne.n	80069f8 <xTaskResumeAll+0x2c>
        __asm volatile
 80069e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069e6:	f383 8811 	msr	BASEPRI, r3
 80069ea:	f3bf 8f6f 	isb	sy
 80069ee:	f3bf 8f4f 	dsb	sy
 80069f2:	607b      	str	r3, [r7, #4]
    }
 80069f4:	bf00      	nop
 80069f6:	e7fe      	b.n	80069f6 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 80069f8:	f001 fb2e 	bl	8008058 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 80069fc:	4b68      	ldr	r3, [pc, #416]	; (8006ba0 <xTaskResumeAll+0x1d4>)
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	3b01      	subs	r3, #1
 8006a02:	4a67      	ldr	r2, [pc, #412]	; (8006ba0 <xTaskResumeAll+0x1d4>)
 8006a04:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006a06:	4b66      	ldr	r3, [pc, #408]	; (8006ba0 <xTaskResumeAll+0x1d4>)
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	f040 80c0 	bne.w	8006b90 <xTaskResumeAll+0x1c4>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006a10:	4b64      	ldr	r3, [pc, #400]	; (8006ba4 <xTaskResumeAll+0x1d8>)
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	f000 80bb 	beq.w	8006b90 <xTaskResumeAll+0x1c4>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006a1a:	e08a      	b.n	8006b32 <xTaskResumeAll+0x166>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006a1c:	4b62      	ldr	r3, [pc, #392]	; (8006ba8 <xTaskResumeAll+0x1dc>)
 8006a1e:	68db      	ldr	r3, [r3, #12]
 8006a20:	68db      	ldr	r3, [r3, #12]
 8006a22:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8006a24:	69fb      	ldr	r3, [r7, #28]
 8006a26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a28:	613b      	str	r3, [r7, #16]
 8006a2a:	69fb      	ldr	r3, [r7, #28]
 8006a2c:	69db      	ldr	r3, [r3, #28]
 8006a2e:	69fa      	ldr	r2, [r7, #28]
 8006a30:	6a12      	ldr	r2, [r2, #32]
 8006a32:	609a      	str	r2, [r3, #8]
 8006a34:	69fb      	ldr	r3, [r7, #28]
 8006a36:	6a1b      	ldr	r3, [r3, #32]
 8006a38:	69fa      	ldr	r2, [r7, #28]
 8006a3a:	69d2      	ldr	r2, [r2, #28]
 8006a3c:	605a      	str	r2, [r3, #4]
 8006a3e:	693b      	ldr	r3, [r7, #16]
 8006a40:	685a      	ldr	r2, [r3, #4]
 8006a42:	69fb      	ldr	r3, [r7, #28]
 8006a44:	3318      	adds	r3, #24
 8006a46:	429a      	cmp	r2, r3
 8006a48:	d103      	bne.n	8006a52 <xTaskResumeAll+0x86>
 8006a4a:	69fb      	ldr	r3, [r7, #28]
 8006a4c:	6a1a      	ldr	r2, [r3, #32]
 8006a4e:	693b      	ldr	r3, [r7, #16]
 8006a50:	605a      	str	r2, [r3, #4]
 8006a52:	69fb      	ldr	r3, [r7, #28]
 8006a54:	2200      	movs	r2, #0
 8006a56:	629a      	str	r2, [r3, #40]	; 0x28
 8006a58:	693b      	ldr	r3, [r7, #16]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	1e5a      	subs	r2, r3, #1
 8006a5e:	693b      	ldr	r3, [r7, #16]
 8006a60:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8006a62:	69fb      	ldr	r3, [r7, #28]
 8006a64:	695b      	ldr	r3, [r3, #20]
 8006a66:	60fb      	str	r3, [r7, #12]
 8006a68:	69fb      	ldr	r3, [r7, #28]
 8006a6a:	689b      	ldr	r3, [r3, #8]
 8006a6c:	69fa      	ldr	r2, [r7, #28]
 8006a6e:	68d2      	ldr	r2, [r2, #12]
 8006a70:	609a      	str	r2, [r3, #8]
 8006a72:	69fb      	ldr	r3, [r7, #28]
 8006a74:	68db      	ldr	r3, [r3, #12]
 8006a76:	69fa      	ldr	r2, [r7, #28]
 8006a78:	6892      	ldr	r2, [r2, #8]
 8006a7a:	605a      	str	r2, [r3, #4]
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	685a      	ldr	r2, [r3, #4]
 8006a80:	69fb      	ldr	r3, [r7, #28]
 8006a82:	3304      	adds	r3, #4
 8006a84:	429a      	cmp	r2, r3
 8006a86:	d103      	bne.n	8006a90 <xTaskResumeAll+0xc4>
 8006a88:	69fb      	ldr	r3, [r7, #28]
 8006a8a:	68da      	ldr	r2, [r3, #12]
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	605a      	str	r2, [r3, #4]
 8006a90:	69fb      	ldr	r3, [r7, #28]
 8006a92:	2200      	movs	r2, #0
 8006a94:	615a      	str	r2, [r3, #20]
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	1e5a      	subs	r2, r3, #1
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8006aa0:	69fb      	ldr	r3, [r7, #28]
 8006aa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006aa4:	2201      	movs	r2, #1
 8006aa6:	409a      	lsls	r2, r3
 8006aa8:	4b40      	ldr	r3, [pc, #256]	; (8006bac <xTaskResumeAll+0x1e0>)
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	4313      	orrs	r3, r2
 8006aae:	4a3f      	ldr	r2, [pc, #252]	; (8006bac <xTaskResumeAll+0x1e0>)
 8006ab0:	6013      	str	r3, [r2, #0]
 8006ab2:	69fb      	ldr	r3, [r7, #28]
 8006ab4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ab6:	493e      	ldr	r1, [pc, #248]	; (8006bb0 <xTaskResumeAll+0x1e4>)
 8006ab8:	4613      	mov	r3, r2
 8006aba:	009b      	lsls	r3, r3, #2
 8006abc:	4413      	add	r3, r2
 8006abe:	009b      	lsls	r3, r3, #2
 8006ac0:	440b      	add	r3, r1
 8006ac2:	3304      	adds	r3, #4
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	60bb      	str	r3, [r7, #8]
 8006ac8:	69fb      	ldr	r3, [r7, #28]
 8006aca:	68ba      	ldr	r2, [r7, #8]
 8006acc:	609a      	str	r2, [r3, #8]
 8006ace:	68bb      	ldr	r3, [r7, #8]
 8006ad0:	689a      	ldr	r2, [r3, #8]
 8006ad2:	69fb      	ldr	r3, [r7, #28]
 8006ad4:	60da      	str	r2, [r3, #12]
 8006ad6:	68bb      	ldr	r3, [r7, #8]
 8006ad8:	689b      	ldr	r3, [r3, #8]
 8006ada:	69fa      	ldr	r2, [r7, #28]
 8006adc:	3204      	adds	r2, #4
 8006ade:	605a      	str	r2, [r3, #4]
 8006ae0:	69fb      	ldr	r3, [r7, #28]
 8006ae2:	1d1a      	adds	r2, r3, #4
 8006ae4:	68bb      	ldr	r3, [r7, #8]
 8006ae6:	609a      	str	r2, [r3, #8]
 8006ae8:	69fb      	ldr	r3, [r7, #28]
 8006aea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006aec:	4613      	mov	r3, r2
 8006aee:	009b      	lsls	r3, r3, #2
 8006af0:	4413      	add	r3, r2
 8006af2:	009b      	lsls	r3, r3, #2
 8006af4:	4a2e      	ldr	r2, [pc, #184]	; (8006bb0 <xTaskResumeAll+0x1e4>)
 8006af6:	441a      	add	r2, r3
 8006af8:	69fb      	ldr	r3, [r7, #28]
 8006afa:	615a      	str	r2, [r3, #20]
 8006afc:	69fb      	ldr	r3, [r7, #28]
 8006afe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b00:	492b      	ldr	r1, [pc, #172]	; (8006bb0 <xTaskResumeAll+0x1e4>)
 8006b02:	4613      	mov	r3, r2
 8006b04:	009b      	lsls	r3, r3, #2
 8006b06:	4413      	add	r3, r2
 8006b08:	009b      	lsls	r3, r3, #2
 8006b0a:	440b      	add	r3, r1
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	1c59      	adds	r1, r3, #1
 8006b10:	4827      	ldr	r0, [pc, #156]	; (8006bb0 <xTaskResumeAll+0x1e4>)
 8006b12:	4613      	mov	r3, r2
 8006b14:	009b      	lsls	r3, r3, #2
 8006b16:	4413      	add	r3, r2
 8006b18:	009b      	lsls	r3, r3, #2
 8006b1a:	4403      	add	r3, r0
 8006b1c:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006b1e:	69fb      	ldr	r3, [r7, #28]
 8006b20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b22:	4b24      	ldr	r3, [pc, #144]	; (8006bb4 <xTaskResumeAll+0x1e8>)
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b28:	429a      	cmp	r2, r3
 8006b2a:	d302      	bcc.n	8006b32 <xTaskResumeAll+0x166>
                    {
                        xYieldPending = pdTRUE;
 8006b2c:	4b22      	ldr	r3, [pc, #136]	; (8006bb8 <xTaskResumeAll+0x1ec>)
 8006b2e:	2201      	movs	r2, #1
 8006b30:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006b32:	4b1d      	ldr	r3, [pc, #116]	; (8006ba8 <xTaskResumeAll+0x1dc>)
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	f47f af70 	bne.w	8006a1c <xTaskResumeAll+0x50>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8006b3c:	69fb      	ldr	r3, [r7, #28]
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d001      	beq.n	8006b46 <xTaskResumeAll+0x17a>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8006b42:	f000 fc1b 	bl	800737c <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006b46:	4b1d      	ldr	r3, [pc, #116]	; (8006bbc <xTaskResumeAll+0x1f0>)
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8006b4c:	697b      	ldr	r3, [r7, #20]
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d010      	beq.n	8006b74 <xTaskResumeAll+0x1a8>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8006b52:	f000 f853 	bl	8006bfc <xTaskIncrementTick>
 8006b56:	4603      	mov	r3, r0
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d002      	beq.n	8006b62 <xTaskResumeAll+0x196>
                            {
                                xYieldPending = pdTRUE;
 8006b5c:	4b16      	ldr	r3, [pc, #88]	; (8006bb8 <xTaskResumeAll+0x1ec>)
 8006b5e:	2201      	movs	r2, #1
 8006b60:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8006b62:	697b      	ldr	r3, [r7, #20]
 8006b64:	3b01      	subs	r3, #1
 8006b66:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8006b68:	697b      	ldr	r3, [r7, #20]
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d1f1      	bne.n	8006b52 <xTaskResumeAll+0x186>

                        xPendedTicks = 0;
 8006b6e:	4b13      	ldr	r3, [pc, #76]	; (8006bbc <xTaskResumeAll+0x1f0>)
 8006b70:	2200      	movs	r2, #0
 8006b72:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8006b74:	4b10      	ldr	r3, [pc, #64]	; (8006bb8 <xTaskResumeAll+0x1ec>)
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d009      	beq.n	8006b90 <xTaskResumeAll+0x1c4>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 8006b7c:	2301      	movs	r3, #1
 8006b7e:	61bb      	str	r3, [r7, #24]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8006b80:	4b0f      	ldr	r3, [pc, #60]	; (8006bc0 <xTaskResumeAll+0x1f4>)
 8006b82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006b86:	601a      	str	r2, [r3, #0]
 8006b88:	f3bf 8f4f 	dsb	sy
 8006b8c:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8006b90:	f001 fa92 	bl	80080b8 <vPortExitCritical>

    return xAlreadyYielded;
 8006b94:	69bb      	ldr	r3, [r7, #24]
}
 8006b96:	4618      	mov	r0, r3
 8006b98:	3720      	adds	r7, #32
 8006b9a:	46bd      	mov	sp, r7
 8006b9c:	bd80      	pop	{r7, pc}
 8006b9e:	bf00      	nop
 8006ba0:	200002e0 	.word	0x200002e0
 8006ba4:	200002b8 	.word	0x200002b8
 8006ba8:	20000278 	.word	0x20000278
 8006bac:	200002c0 	.word	0x200002c0
 8006bb0:	200001e4 	.word	0x200001e4
 8006bb4:	200001e0 	.word	0x200001e0
 8006bb8:	200002cc 	.word	0x200002cc
 8006bbc:	200002c8 	.word	0x200002c8
 8006bc0:	e000ed04 	.word	0xe000ed04

08006bc4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006bc4:	b480      	push	{r7}
 8006bc6:	b083      	sub	sp, #12
 8006bc8:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8006bca:	4b05      	ldr	r3, [pc, #20]	; (8006be0 <xTaskGetTickCount+0x1c>)
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8006bd0:	687b      	ldr	r3, [r7, #4]
}
 8006bd2:	4618      	mov	r0, r3
 8006bd4:	370c      	adds	r7, #12
 8006bd6:	46bd      	mov	sp, r7
 8006bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bdc:	4770      	bx	lr
 8006bde:	bf00      	nop
 8006be0:	200002bc 	.word	0x200002bc

08006be4 <uxTaskGetNumberOfTasks>:
    return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxTaskGetNumberOfTasks( void )
{
 8006be4:	b480      	push	{r7}
 8006be6:	af00      	add	r7, sp, #0
    /* A critical section is not required because the variables are of type
     * BaseType_t. */
    return uxCurrentNumberOfTasks;
 8006be8:	4b03      	ldr	r3, [pc, #12]	; (8006bf8 <uxTaskGetNumberOfTasks+0x14>)
 8006bea:	681b      	ldr	r3, [r3, #0]
}
 8006bec:	4618      	mov	r0, r3
 8006bee:	46bd      	mov	sp, r7
 8006bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf4:	4770      	bx	lr
 8006bf6:	bf00      	nop
 8006bf8:	200002b8 	.word	0x200002b8

08006bfc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006bfc:	b580      	push	{r7, lr}
 8006bfe:	b08a      	sub	sp, #40	; 0x28
 8006c00:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8006c02:	2300      	movs	r3, #0
 8006c04:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006c06:	4b7d      	ldr	r3, [pc, #500]	; (8006dfc <xTaskIncrementTick+0x200>)
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	f040 80ec 	bne.w	8006de8 <xTaskIncrementTick+0x1ec>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006c10:	4b7b      	ldr	r3, [pc, #492]	; (8006e00 <xTaskIncrementTick+0x204>)
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	3301      	adds	r3, #1
 8006c16:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8006c18:	4a79      	ldr	r2, [pc, #484]	; (8006e00 <xTaskIncrementTick+0x204>)
 8006c1a:	6a3b      	ldr	r3, [r7, #32]
 8006c1c:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006c1e:	6a3b      	ldr	r3, [r7, #32]
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d120      	bne.n	8006c66 <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8006c24:	4b77      	ldr	r3, [pc, #476]	; (8006e04 <xTaskIncrementTick+0x208>)
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d00a      	beq.n	8006c44 <xTaskIncrementTick+0x48>
        __asm volatile
 8006c2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c32:	f383 8811 	msr	BASEPRI, r3
 8006c36:	f3bf 8f6f 	isb	sy
 8006c3a:	f3bf 8f4f 	dsb	sy
 8006c3e:	607b      	str	r3, [r7, #4]
    }
 8006c40:	bf00      	nop
 8006c42:	e7fe      	b.n	8006c42 <xTaskIncrementTick+0x46>
 8006c44:	4b6f      	ldr	r3, [pc, #444]	; (8006e04 <xTaskIncrementTick+0x208>)
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	61fb      	str	r3, [r7, #28]
 8006c4a:	4b6f      	ldr	r3, [pc, #444]	; (8006e08 <xTaskIncrementTick+0x20c>)
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	4a6d      	ldr	r2, [pc, #436]	; (8006e04 <xTaskIncrementTick+0x208>)
 8006c50:	6013      	str	r3, [r2, #0]
 8006c52:	4a6d      	ldr	r2, [pc, #436]	; (8006e08 <xTaskIncrementTick+0x20c>)
 8006c54:	69fb      	ldr	r3, [r7, #28]
 8006c56:	6013      	str	r3, [r2, #0]
 8006c58:	4b6c      	ldr	r3, [pc, #432]	; (8006e0c <xTaskIncrementTick+0x210>)
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	3301      	adds	r3, #1
 8006c5e:	4a6b      	ldr	r2, [pc, #428]	; (8006e0c <xTaskIncrementTick+0x210>)
 8006c60:	6013      	str	r3, [r2, #0]
 8006c62:	f000 fb8b 	bl	800737c <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8006c66:	4b6a      	ldr	r3, [pc, #424]	; (8006e10 <xTaskIncrementTick+0x214>)
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	6a3a      	ldr	r2, [r7, #32]
 8006c6c:	429a      	cmp	r2, r3
 8006c6e:	f0c0 80a6 	bcc.w	8006dbe <xTaskIncrementTick+0x1c2>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006c72:	4b64      	ldr	r3, [pc, #400]	; (8006e04 <xTaskIncrementTick+0x208>)
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d104      	bne.n	8006c86 <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006c7c:	4b64      	ldr	r3, [pc, #400]	; (8006e10 <xTaskIncrementTick+0x214>)
 8006c7e:	f04f 32ff 	mov.w	r2, #4294967295
 8006c82:	601a      	str	r2, [r3, #0]
                    break;
 8006c84:	e09b      	b.n	8006dbe <xTaskIncrementTick+0x1c2>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006c86:	4b5f      	ldr	r3, [pc, #380]	; (8006e04 <xTaskIncrementTick+0x208>)
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	68db      	ldr	r3, [r3, #12]
 8006c8c:	68db      	ldr	r3, [r3, #12]
 8006c8e:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006c90:	69bb      	ldr	r3, [r7, #24]
 8006c92:	685b      	ldr	r3, [r3, #4]
 8006c94:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 8006c96:	6a3a      	ldr	r2, [r7, #32]
 8006c98:	697b      	ldr	r3, [r7, #20]
 8006c9a:	429a      	cmp	r2, r3
 8006c9c:	d203      	bcs.n	8006ca6 <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8006c9e:	4a5c      	ldr	r2, [pc, #368]	; (8006e10 <xTaskIncrementTick+0x214>)
 8006ca0:	697b      	ldr	r3, [r7, #20]
 8006ca2:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8006ca4:	e08b      	b.n	8006dbe <xTaskIncrementTick+0x1c2>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8006ca6:	69bb      	ldr	r3, [r7, #24]
 8006ca8:	695b      	ldr	r3, [r3, #20]
 8006caa:	613b      	str	r3, [r7, #16]
 8006cac:	69bb      	ldr	r3, [r7, #24]
 8006cae:	689b      	ldr	r3, [r3, #8]
 8006cb0:	69ba      	ldr	r2, [r7, #24]
 8006cb2:	68d2      	ldr	r2, [r2, #12]
 8006cb4:	609a      	str	r2, [r3, #8]
 8006cb6:	69bb      	ldr	r3, [r7, #24]
 8006cb8:	68db      	ldr	r3, [r3, #12]
 8006cba:	69ba      	ldr	r2, [r7, #24]
 8006cbc:	6892      	ldr	r2, [r2, #8]
 8006cbe:	605a      	str	r2, [r3, #4]
 8006cc0:	693b      	ldr	r3, [r7, #16]
 8006cc2:	685a      	ldr	r2, [r3, #4]
 8006cc4:	69bb      	ldr	r3, [r7, #24]
 8006cc6:	3304      	adds	r3, #4
 8006cc8:	429a      	cmp	r2, r3
 8006cca:	d103      	bne.n	8006cd4 <xTaskIncrementTick+0xd8>
 8006ccc:	69bb      	ldr	r3, [r7, #24]
 8006cce:	68da      	ldr	r2, [r3, #12]
 8006cd0:	693b      	ldr	r3, [r7, #16]
 8006cd2:	605a      	str	r2, [r3, #4]
 8006cd4:	69bb      	ldr	r3, [r7, #24]
 8006cd6:	2200      	movs	r2, #0
 8006cd8:	615a      	str	r2, [r3, #20]
 8006cda:	693b      	ldr	r3, [r7, #16]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	1e5a      	subs	r2, r3, #1
 8006ce0:	693b      	ldr	r3, [r7, #16]
 8006ce2:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006ce4:	69bb      	ldr	r3, [r7, #24]
 8006ce6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d01e      	beq.n	8006d2a <xTaskIncrementTick+0x12e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8006cec:	69bb      	ldr	r3, [r7, #24]
 8006cee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cf0:	60fb      	str	r3, [r7, #12]
 8006cf2:	69bb      	ldr	r3, [r7, #24]
 8006cf4:	69db      	ldr	r3, [r3, #28]
 8006cf6:	69ba      	ldr	r2, [r7, #24]
 8006cf8:	6a12      	ldr	r2, [r2, #32]
 8006cfa:	609a      	str	r2, [r3, #8]
 8006cfc:	69bb      	ldr	r3, [r7, #24]
 8006cfe:	6a1b      	ldr	r3, [r3, #32]
 8006d00:	69ba      	ldr	r2, [r7, #24]
 8006d02:	69d2      	ldr	r2, [r2, #28]
 8006d04:	605a      	str	r2, [r3, #4]
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	685a      	ldr	r2, [r3, #4]
 8006d0a:	69bb      	ldr	r3, [r7, #24]
 8006d0c:	3318      	adds	r3, #24
 8006d0e:	429a      	cmp	r2, r3
 8006d10:	d103      	bne.n	8006d1a <xTaskIncrementTick+0x11e>
 8006d12:	69bb      	ldr	r3, [r7, #24]
 8006d14:	6a1a      	ldr	r2, [r3, #32]
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	605a      	str	r2, [r3, #4]
 8006d1a:	69bb      	ldr	r3, [r7, #24]
 8006d1c:	2200      	movs	r2, #0
 8006d1e:	629a      	str	r2, [r3, #40]	; 0x28
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	1e5a      	subs	r2, r3, #1
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8006d2a:	69bb      	ldr	r3, [r7, #24]
 8006d2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d2e:	2201      	movs	r2, #1
 8006d30:	409a      	lsls	r2, r3
 8006d32:	4b38      	ldr	r3, [pc, #224]	; (8006e14 <xTaskIncrementTick+0x218>)
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	4313      	orrs	r3, r2
 8006d38:	4a36      	ldr	r2, [pc, #216]	; (8006e14 <xTaskIncrementTick+0x218>)
 8006d3a:	6013      	str	r3, [r2, #0]
 8006d3c:	69bb      	ldr	r3, [r7, #24]
 8006d3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d40:	4935      	ldr	r1, [pc, #212]	; (8006e18 <xTaskIncrementTick+0x21c>)
 8006d42:	4613      	mov	r3, r2
 8006d44:	009b      	lsls	r3, r3, #2
 8006d46:	4413      	add	r3, r2
 8006d48:	009b      	lsls	r3, r3, #2
 8006d4a:	440b      	add	r3, r1
 8006d4c:	3304      	adds	r3, #4
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	60bb      	str	r3, [r7, #8]
 8006d52:	69bb      	ldr	r3, [r7, #24]
 8006d54:	68ba      	ldr	r2, [r7, #8]
 8006d56:	609a      	str	r2, [r3, #8]
 8006d58:	68bb      	ldr	r3, [r7, #8]
 8006d5a:	689a      	ldr	r2, [r3, #8]
 8006d5c:	69bb      	ldr	r3, [r7, #24]
 8006d5e:	60da      	str	r2, [r3, #12]
 8006d60:	68bb      	ldr	r3, [r7, #8]
 8006d62:	689b      	ldr	r3, [r3, #8]
 8006d64:	69ba      	ldr	r2, [r7, #24]
 8006d66:	3204      	adds	r2, #4
 8006d68:	605a      	str	r2, [r3, #4]
 8006d6a:	69bb      	ldr	r3, [r7, #24]
 8006d6c:	1d1a      	adds	r2, r3, #4
 8006d6e:	68bb      	ldr	r3, [r7, #8]
 8006d70:	609a      	str	r2, [r3, #8]
 8006d72:	69bb      	ldr	r3, [r7, #24]
 8006d74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d76:	4613      	mov	r3, r2
 8006d78:	009b      	lsls	r3, r3, #2
 8006d7a:	4413      	add	r3, r2
 8006d7c:	009b      	lsls	r3, r3, #2
 8006d7e:	4a26      	ldr	r2, [pc, #152]	; (8006e18 <xTaskIncrementTick+0x21c>)
 8006d80:	441a      	add	r2, r3
 8006d82:	69bb      	ldr	r3, [r7, #24]
 8006d84:	615a      	str	r2, [r3, #20]
 8006d86:	69bb      	ldr	r3, [r7, #24]
 8006d88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d8a:	4923      	ldr	r1, [pc, #140]	; (8006e18 <xTaskIncrementTick+0x21c>)
 8006d8c:	4613      	mov	r3, r2
 8006d8e:	009b      	lsls	r3, r3, #2
 8006d90:	4413      	add	r3, r2
 8006d92:	009b      	lsls	r3, r3, #2
 8006d94:	440b      	add	r3, r1
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	1c59      	adds	r1, r3, #1
 8006d9a:	481f      	ldr	r0, [pc, #124]	; (8006e18 <xTaskIncrementTick+0x21c>)
 8006d9c:	4613      	mov	r3, r2
 8006d9e:	009b      	lsls	r3, r3, #2
 8006da0:	4413      	add	r3, r2
 8006da2:	009b      	lsls	r3, r3, #2
 8006da4:	4403      	add	r3, r0
 8006da6:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006da8:	69bb      	ldr	r3, [r7, #24]
 8006daa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006dac:	4b1b      	ldr	r3, [pc, #108]	; (8006e1c <xTaskIncrementTick+0x220>)
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006db2:	429a      	cmp	r2, r3
 8006db4:	f67f af5d 	bls.w	8006c72 <xTaskIncrementTick+0x76>
                        {
                            xSwitchRequired = pdTRUE;
 8006db8:	2301      	movs	r3, #1
 8006dba:	627b      	str	r3, [r7, #36]	; 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006dbc:	e759      	b.n	8006c72 <xTaskIncrementTick+0x76>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006dbe:	4b17      	ldr	r3, [pc, #92]	; (8006e1c <xTaskIncrementTick+0x220>)
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006dc4:	4914      	ldr	r1, [pc, #80]	; (8006e18 <xTaskIncrementTick+0x21c>)
 8006dc6:	4613      	mov	r3, r2
 8006dc8:	009b      	lsls	r3, r3, #2
 8006dca:	4413      	add	r3, r2
 8006dcc:	009b      	lsls	r3, r3, #2
 8006dce:	440b      	add	r3, r1
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	2b01      	cmp	r3, #1
 8006dd4:	d901      	bls.n	8006dda <xTaskIncrementTick+0x1de>
            {
                xSwitchRequired = pdTRUE;
 8006dd6:	2301      	movs	r3, #1
 8006dd8:	627b      	str	r3, [r7, #36]	; 0x24
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 8006dda:	4b11      	ldr	r3, [pc, #68]	; (8006e20 <xTaskIncrementTick+0x224>)
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d007      	beq.n	8006df2 <xTaskIncrementTick+0x1f6>
            {
                xSwitchRequired = pdTRUE;
 8006de2:	2301      	movs	r3, #1
 8006de4:	627b      	str	r3, [r7, #36]	; 0x24
 8006de6:	e004      	b.n	8006df2 <xTaskIncrementTick+0x1f6>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8006de8:	4b0e      	ldr	r3, [pc, #56]	; (8006e24 <xTaskIncrementTick+0x228>)
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	3301      	adds	r3, #1
 8006dee:	4a0d      	ldr	r2, [pc, #52]	; (8006e24 <xTaskIncrementTick+0x228>)
 8006df0:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 8006df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006df4:	4618      	mov	r0, r3
 8006df6:	3728      	adds	r7, #40	; 0x28
 8006df8:	46bd      	mov	sp, r7
 8006dfa:	bd80      	pop	{r7, pc}
 8006dfc:	200002e0 	.word	0x200002e0
 8006e00:	200002bc 	.word	0x200002bc
 8006e04:	20000270 	.word	0x20000270
 8006e08:	20000274 	.word	0x20000274
 8006e0c:	200002d0 	.word	0x200002d0
 8006e10:	200002d8 	.word	0x200002d8
 8006e14:	200002c0 	.word	0x200002c0
 8006e18:	200001e4 	.word	0x200001e4
 8006e1c:	200001e0 	.word	0x200001e0
 8006e20:	200002cc 	.word	0x200002cc
 8006e24:	200002c8 	.word	0x200002c8

08006e28 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006e28:	b480      	push	{r7}
 8006e2a:	b087      	sub	sp, #28
 8006e2c:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006e2e:	4b27      	ldr	r3, [pc, #156]	; (8006ecc <vTaskSwitchContext+0xa4>)
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d003      	beq.n	8006e3e <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8006e36:	4b26      	ldr	r3, [pc, #152]	; (8006ed0 <vTaskSwitchContext+0xa8>)
 8006e38:	2201      	movs	r2, #1
 8006e3a:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 8006e3c:	e03f      	b.n	8006ebe <vTaskSwitchContext+0x96>
        xYieldPending = pdFALSE;
 8006e3e:	4b24      	ldr	r3, [pc, #144]	; (8006ed0 <vTaskSwitchContext+0xa8>)
 8006e40:	2200      	movs	r2, #0
 8006e42:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006e44:	4b23      	ldr	r3, [pc, #140]	; (8006ed4 <vTaskSwitchContext+0xac>)
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	fab3 f383 	clz	r3, r3
 8006e50:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8006e52:	7afb      	ldrb	r3, [r7, #11]
 8006e54:	f1c3 031f 	rsb	r3, r3, #31
 8006e58:	617b      	str	r3, [r7, #20]
 8006e5a:	491f      	ldr	r1, [pc, #124]	; (8006ed8 <vTaskSwitchContext+0xb0>)
 8006e5c:	697a      	ldr	r2, [r7, #20]
 8006e5e:	4613      	mov	r3, r2
 8006e60:	009b      	lsls	r3, r3, #2
 8006e62:	4413      	add	r3, r2
 8006e64:	009b      	lsls	r3, r3, #2
 8006e66:	440b      	add	r3, r1
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d10a      	bne.n	8006e84 <vTaskSwitchContext+0x5c>
        __asm volatile
 8006e6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e72:	f383 8811 	msr	BASEPRI, r3
 8006e76:	f3bf 8f6f 	isb	sy
 8006e7a:	f3bf 8f4f 	dsb	sy
 8006e7e:	607b      	str	r3, [r7, #4]
    }
 8006e80:	bf00      	nop
 8006e82:	e7fe      	b.n	8006e82 <vTaskSwitchContext+0x5a>
 8006e84:	697a      	ldr	r2, [r7, #20]
 8006e86:	4613      	mov	r3, r2
 8006e88:	009b      	lsls	r3, r3, #2
 8006e8a:	4413      	add	r3, r2
 8006e8c:	009b      	lsls	r3, r3, #2
 8006e8e:	4a12      	ldr	r2, [pc, #72]	; (8006ed8 <vTaskSwitchContext+0xb0>)
 8006e90:	4413      	add	r3, r2
 8006e92:	613b      	str	r3, [r7, #16]
 8006e94:	693b      	ldr	r3, [r7, #16]
 8006e96:	685b      	ldr	r3, [r3, #4]
 8006e98:	685a      	ldr	r2, [r3, #4]
 8006e9a:	693b      	ldr	r3, [r7, #16]
 8006e9c:	605a      	str	r2, [r3, #4]
 8006e9e:	693b      	ldr	r3, [r7, #16]
 8006ea0:	685a      	ldr	r2, [r3, #4]
 8006ea2:	693b      	ldr	r3, [r7, #16]
 8006ea4:	3308      	adds	r3, #8
 8006ea6:	429a      	cmp	r2, r3
 8006ea8:	d104      	bne.n	8006eb4 <vTaskSwitchContext+0x8c>
 8006eaa:	693b      	ldr	r3, [r7, #16]
 8006eac:	685b      	ldr	r3, [r3, #4]
 8006eae:	685a      	ldr	r2, [r3, #4]
 8006eb0:	693b      	ldr	r3, [r7, #16]
 8006eb2:	605a      	str	r2, [r3, #4]
 8006eb4:	693b      	ldr	r3, [r7, #16]
 8006eb6:	685b      	ldr	r3, [r3, #4]
 8006eb8:	68db      	ldr	r3, [r3, #12]
 8006eba:	4a08      	ldr	r2, [pc, #32]	; (8006edc <vTaskSwitchContext+0xb4>)
 8006ebc:	6013      	str	r3, [r2, #0]
}
 8006ebe:	bf00      	nop
 8006ec0:	371c      	adds	r7, #28
 8006ec2:	46bd      	mov	sp, r7
 8006ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec8:	4770      	bx	lr
 8006eca:	bf00      	nop
 8006ecc:	200002e0 	.word	0x200002e0
 8006ed0:	200002cc 	.word	0x200002cc
 8006ed4:	200002c0 	.word	0x200002c0
 8006ed8:	200001e4 	.word	0x200001e4
 8006edc:	200001e0 	.word	0x200001e0

08006ee0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8006ee0:	b580      	push	{r7, lr}
 8006ee2:	b084      	sub	sp, #16
 8006ee4:	af00      	add	r7, sp, #0
 8006ee6:	6078      	str	r0, [r7, #4]
 8006ee8:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d10a      	bne.n	8006f06 <vTaskPlaceOnEventList+0x26>
        __asm volatile
 8006ef0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ef4:	f383 8811 	msr	BASEPRI, r3
 8006ef8:	f3bf 8f6f 	isb	sy
 8006efc:	f3bf 8f4f 	dsb	sy
 8006f00:	60fb      	str	r3, [r7, #12]
    }
 8006f02:	bf00      	nop
 8006f04:	e7fe      	b.n	8006f04 <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006f06:	4b07      	ldr	r3, [pc, #28]	; (8006f24 <vTaskPlaceOnEventList+0x44>)
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	3318      	adds	r3, #24
 8006f0c:	4619      	mov	r1, r3
 8006f0e:	6878      	ldr	r0, [r7, #4]
 8006f10:	f7fe fd2d 	bl	800596e <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006f14:	2101      	movs	r1, #1
 8006f16:	6838      	ldr	r0, [r7, #0]
 8006f18:	f000 fc78 	bl	800780c <prvAddCurrentTaskToDelayedList>
}
 8006f1c:	bf00      	nop
 8006f1e:	3710      	adds	r7, #16
 8006f20:	46bd      	mov	sp, r7
 8006f22:	bd80      	pop	{r7, pc}
 8006f24:	200001e0 	.word	0x200001e0

08006f28 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8006f28:	b580      	push	{r7, lr}
 8006f2a:	b086      	sub	sp, #24
 8006f2c:	af00      	add	r7, sp, #0
 8006f2e:	60f8      	str	r0, [r7, #12]
 8006f30:	60b9      	str	r1, [r7, #8]
 8006f32:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d10a      	bne.n	8006f50 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 8006f3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f3e:	f383 8811 	msr	BASEPRI, r3
 8006f42:	f3bf 8f6f 	isb	sy
 8006f46:	f3bf 8f4f 	dsb	sy
 8006f4a:	613b      	str	r3, [r7, #16]
    }
 8006f4c:	bf00      	nop
 8006f4e:	e7fe      	b.n	8006f4e <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	685b      	ldr	r3, [r3, #4]
 8006f54:	617b      	str	r3, [r7, #20]
 8006f56:	4b16      	ldr	r3, [pc, #88]	; (8006fb0 <vTaskPlaceOnEventListRestricted+0x88>)
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	697a      	ldr	r2, [r7, #20]
 8006f5c:	61da      	str	r2, [r3, #28]
 8006f5e:	4b14      	ldr	r3, [pc, #80]	; (8006fb0 <vTaskPlaceOnEventListRestricted+0x88>)
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	697a      	ldr	r2, [r7, #20]
 8006f64:	6892      	ldr	r2, [r2, #8]
 8006f66:	621a      	str	r2, [r3, #32]
 8006f68:	4b11      	ldr	r3, [pc, #68]	; (8006fb0 <vTaskPlaceOnEventListRestricted+0x88>)
 8006f6a:	681a      	ldr	r2, [r3, #0]
 8006f6c:	697b      	ldr	r3, [r7, #20]
 8006f6e:	689b      	ldr	r3, [r3, #8]
 8006f70:	3218      	adds	r2, #24
 8006f72:	605a      	str	r2, [r3, #4]
 8006f74:	4b0e      	ldr	r3, [pc, #56]	; (8006fb0 <vTaskPlaceOnEventListRestricted+0x88>)
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	f103 0218 	add.w	r2, r3, #24
 8006f7c:	697b      	ldr	r3, [r7, #20]
 8006f7e:	609a      	str	r2, [r3, #8]
 8006f80:	4b0b      	ldr	r3, [pc, #44]	; (8006fb0 <vTaskPlaceOnEventListRestricted+0x88>)
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	68fa      	ldr	r2, [r7, #12]
 8006f86:	629a      	str	r2, [r3, #40]	; 0x28
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	1c5a      	adds	r2, r3, #1
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d002      	beq.n	8006f9e <vTaskPlaceOnEventListRestricted+0x76>
        {
            xTicksToWait = portMAX_DELAY;
 8006f98:	f04f 33ff 	mov.w	r3, #4294967295
 8006f9c:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006f9e:	6879      	ldr	r1, [r7, #4]
 8006fa0:	68b8      	ldr	r0, [r7, #8]
 8006fa2:	f000 fc33 	bl	800780c <prvAddCurrentTaskToDelayedList>
    }
 8006fa6:	bf00      	nop
 8006fa8:	3718      	adds	r7, #24
 8006faa:	46bd      	mov	sp, r7
 8006fac:	bd80      	pop	{r7, pc}
 8006fae:	bf00      	nop
 8006fb0:	200001e0 	.word	0x200001e0

08006fb4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006fb4:	b480      	push	{r7}
 8006fb6:	b08b      	sub	sp, #44	; 0x2c
 8006fb8:	af00      	add	r7, sp, #0
 8006fba:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	68db      	ldr	r3, [r3, #12]
 8006fc0:	68db      	ldr	r3, [r3, #12]
 8006fc2:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 8006fc4:	6a3b      	ldr	r3, [r7, #32]
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d10a      	bne.n	8006fe0 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 8006fca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fce:	f383 8811 	msr	BASEPRI, r3
 8006fd2:	f3bf 8f6f 	isb	sy
 8006fd6:	f3bf 8f4f 	dsb	sy
 8006fda:	60fb      	str	r3, [r7, #12]
    }
 8006fdc:	bf00      	nop
 8006fde:	e7fe      	b.n	8006fde <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8006fe0:	6a3b      	ldr	r3, [r7, #32]
 8006fe2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fe4:	61fb      	str	r3, [r7, #28]
 8006fe6:	6a3b      	ldr	r3, [r7, #32]
 8006fe8:	69db      	ldr	r3, [r3, #28]
 8006fea:	6a3a      	ldr	r2, [r7, #32]
 8006fec:	6a12      	ldr	r2, [r2, #32]
 8006fee:	609a      	str	r2, [r3, #8]
 8006ff0:	6a3b      	ldr	r3, [r7, #32]
 8006ff2:	6a1b      	ldr	r3, [r3, #32]
 8006ff4:	6a3a      	ldr	r2, [r7, #32]
 8006ff6:	69d2      	ldr	r2, [r2, #28]
 8006ff8:	605a      	str	r2, [r3, #4]
 8006ffa:	69fb      	ldr	r3, [r7, #28]
 8006ffc:	685a      	ldr	r2, [r3, #4]
 8006ffe:	6a3b      	ldr	r3, [r7, #32]
 8007000:	3318      	adds	r3, #24
 8007002:	429a      	cmp	r2, r3
 8007004:	d103      	bne.n	800700e <xTaskRemoveFromEventList+0x5a>
 8007006:	6a3b      	ldr	r3, [r7, #32]
 8007008:	6a1a      	ldr	r2, [r3, #32]
 800700a:	69fb      	ldr	r3, [r7, #28]
 800700c:	605a      	str	r2, [r3, #4]
 800700e:	6a3b      	ldr	r3, [r7, #32]
 8007010:	2200      	movs	r2, #0
 8007012:	629a      	str	r2, [r3, #40]	; 0x28
 8007014:	69fb      	ldr	r3, [r7, #28]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	1e5a      	subs	r2, r3, #1
 800701a:	69fb      	ldr	r3, [r7, #28]
 800701c:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800701e:	4b4a      	ldr	r3, [pc, #296]	; (8007148 <xTaskRemoveFromEventList+0x194>)
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	2b00      	cmp	r3, #0
 8007024:	d15e      	bne.n	80070e4 <xTaskRemoveFromEventList+0x130>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8007026:	6a3b      	ldr	r3, [r7, #32]
 8007028:	695b      	ldr	r3, [r3, #20]
 800702a:	617b      	str	r3, [r7, #20]
 800702c:	6a3b      	ldr	r3, [r7, #32]
 800702e:	689b      	ldr	r3, [r3, #8]
 8007030:	6a3a      	ldr	r2, [r7, #32]
 8007032:	68d2      	ldr	r2, [r2, #12]
 8007034:	609a      	str	r2, [r3, #8]
 8007036:	6a3b      	ldr	r3, [r7, #32]
 8007038:	68db      	ldr	r3, [r3, #12]
 800703a:	6a3a      	ldr	r2, [r7, #32]
 800703c:	6892      	ldr	r2, [r2, #8]
 800703e:	605a      	str	r2, [r3, #4]
 8007040:	697b      	ldr	r3, [r7, #20]
 8007042:	685a      	ldr	r2, [r3, #4]
 8007044:	6a3b      	ldr	r3, [r7, #32]
 8007046:	3304      	adds	r3, #4
 8007048:	429a      	cmp	r2, r3
 800704a:	d103      	bne.n	8007054 <xTaskRemoveFromEventList+0xa0>
 800704c:	6a3b      	ldr	r3, [r7, #32]
 800704e:	68da      	ldr	r2, [r3, #12]
 8007050:	697b      	ldr	r3, [r7, #20]
 8007052:	605a      	str	r2, [r3, #4]
 8007054:	6a3b      	ldr	r3, [r7, #32]
 8007056:	2200      	movs	r2, #0
 8007058:	615a      	str	r2, [r3, #20]
 800705a:	697b      	ldr	r3, [r7, #20]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	1e5a      	subs	r2, r3, #1
 8007060:	697b      	ldr	r3, [r7, #20]
 8007062:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 8007064:	6a3b      	ldr	r3, [r7, #32]
 8007066:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007068:	2201      	movs	r2, #1
 800706a:	409a      	lsls	r2, r3
 800706c:	4b37      	ldr	r3, [pc, #220]	; (800714c <xTaskRemoveFromEventList+0x198>)
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	4313      	orrs	r3, r2
 8007072:	4a36      	ldr	r2, [pc, #216]	; (800714c <xTaskRemoveFromEventList+0x198>)
 8007074:	6013      	str	r3, [r2, #0]
 8007076:	6a3b      	ldr	r3, [r7, #32]
 8007078:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800707a:	4935      	ldr	r1, [pc, #212]	; (8007150 <xTaskRemoveFromEventList+0x19c>)
 800707c:	4613      	mov	r3, r2
 800707e:	009b      	lsls	r3, r3, #2
 8007080:	4413      	add	r3, r2
 8007082:	009b      	lsls	r3, r3, #2
 8007084:	440b      	add	r3, r1
 8007086:	3304      	adds	r3, #4
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	613b      	str	r3, [r7, #16]
 800708c:	6a3b      	ldr	r3, [r7, #32]
 800708e:	693a      	ldr	r2, [r7, #16]
 8007090:	609a      	str	r2, [r3, #8]
 8007092:	693b      	ldr	r3, [r7, #16]
 8007094:	689a      	ldr	r2, [r3, #8]
 8007096:	6a3b      	ldr	r3, [r7, #32]
 8007098:	60da      	str	r2, [r3, #12]
 800709a:	693b      	ldr	r3, [r7, #16]
 800709c:	689b      	ldr	r3, [r3, #8]
 800709e:	6a3a      	ldr	r2, [r7, #32]
 80070a0:	3204      	adds	r2, #4
 80070a2:	605a      	str	r2, [r3, #4]
 80070a4:	6a3b      	ldr	r3, [r7, #32]
 80070a6:	1d1a      	adds	r2, r3, #4
 80070a8:	693b      	ldr	r3, [r7, #16]
 80070aa:	609a      	str	r2, [r3, #8]
 80070ac:	6a3b      	ldr	r3, [r7, #32]
 80070ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070b0:	4613      	mov	r3, r2
 80070b2:	009b      	lsls	r3, r3, #2
 80070b4:	4413      	add	r3, r2
 80070b6:	009b      	lsls	r3, r3, #2
 80070b8:	4a25      	ldr	r2, [pc, #148]	; (8007150 <xTaskRemoveFromEventList+0x19c>)
 80070ba:	441a      	add	r2, r3
 80070bc:	6a3b      	ldr	r3, [r7, #32]
 80070be:	615a      	str	r2, [r3, #20]
 80070c0:	6a3b      	ldr	r3, [r7, #32]
 80070c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070c4:	4922      	ldr	r1, [pc, #136]	; (8007150 <xTaskRemoveFromEventList+0x19c>)
 80070c6:	4613      	mov	r3, r2
 80070c8:	009b      	lsls	r3, r3, #2
 80070ca:	4413      	add	r3, r2
 80070cc:	009b      	lsls	r3, r3, #2
 80070ce:	440b      	add	r3, r1
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	1c59      	adds	r1, r3, #1
 80070d4:	481e      	ldr	r0, [pc, #120]	; (8007150 <xTaskRemoveFromEventList+0x19c>)
 80070d6:	4613      	mov	r3, r2
 80070d8:	009b      	lsls	r3, r3, #2
 80070da:	4413      	add	r3, r2
 80070dc:	009b      	lsls	r3, r3, #2
 80070de:	4403      	add	r3, r0
 80070e0:	6019      	str	r1, [r3, #0]
 80070e2:	e01b      	b.n	800711c <xTaskRemoveFromEventList+0x168>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80070e4:	4b1b      	ldr	r3, [pc, #108]	; (8007154 <xTaskRemoveFromEventList+0x1a0>)
 80070e6:	685b      	ldr	r3, [r3, #4]
 80070e8:	61bb      	str	r3, [r7, #24]
 80070ea:	6a3b      	ldr	r3, [r7, #32]
 80070ec:	69ba      	ldr	r2, [r7, #24]
 80070ee:	61da      	str	r2, [r3, #28]
 80070f0:	69bb      	ldr	r3, [r7, #24]
 80070f2:	689a      	ldr	r2, [r3, #8]
 80070f4:	6a3b      	ldr	r3, [r7, #32]
 80070f6:	621a      	str	r2, [r3, #32]
 80070f8:	69bb      	ldr	r3, [r7, #24]
 80070fa:	689b      	ldr	r3, [r3, #8]
 80070fc:	6a3a      	ldr	r2, [r7, #32]
 80070fe:	3218      	adds	r2, #24
 8007100:	605a      	str	r2, [r3, #4]
 8007102:	6a3b      	ldr	r3, [r7, #32]
 8007104:	f103 0218 	add.w	r2, r3, #24
 8007108:	69bb      	ldr	r3, [r7, #24]
 800710a:	609a      	str	r2, [r3, #8]
 800710c:	6a3b      	ldr	r3, [r7, #32]
 800710e:	4a11      	ldr	r2, [pc, #68]	; (8007154 <xTaskRemoveFromEventList+0x1a0>)
 8007110:	629a      	str	r2, [r3, #40]	; 0x28
 8007112:	4b10      	ldr	r3, [pc, #64]	; (8007154 <xTaskRemoveFromEventList+0x1a0>)
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	3301      	adds	r3, #1
 8007118:	4a0e      	ldr	r2, [pc, #56]	; (8007154 <xTaskRemoveFromEventList+0x1a0>)
 800711a:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800711c:	6a3b      	ldr	r3, [r7, #32]
 800711e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007120:	4b0d      	ldr	r3, [pc, #52]	; (8007158 <xTaskRemoveFromEventList+0x1a4>)
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007126:	429a      	cmp	r2, r3
 8007128:	d905      	bls.n	8007136 <xTaskRemoveFromEventList+0x182>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 800712a:	2301      	movs	r3, #1
 800712c:	627b      	str	r3, [r7, #36]	; 0x24

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 800712e:	4b0b      	ldr	r3, [pc, #44]	; (800715c <xTaskRemoveFromEventList+0x1a8>)
 8007130:	2201      	movs	r2, #1
 8007132:	601a      	str	r2, [r3, #0]
 8007134:	e001      	b.n	800713a <xTaskRemoveFromEventList+0x186>
    }
    else
    {
        xReturn = pdFALSE;
 8007136:	2300      	movs	r3, #0
 8007138:	627b      	str	r3, [r7, #36]	; 0x24
    }

    return xReturn;
 800713a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800713c:	4618      	mov	r0, r3
 800713e:	372c      	adds	r7, #44	; 0x2c
 8007140:	46bd      	mov	sp, r7
 8007142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007146:	4770      	bx	lr
 8007148:	200002e0 	.word	0x200002e0
 800714c:	200002c0 	.word	0x200002c0
 8007150:	200001e4 	.word	0x200001e4
 8007154:	20000278 	.word	0x20000278
 8007158:	200001e0 	.word	0x200001e0
 800715c:	200002cc 	.word	0x200002cc

08007160 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007160:	b480      	push	{r7}
 8007162:	b083      	sub	sp, #12
 8007164:	af00      	add	r7, sp, #0
 8007166:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007168:	4b06      	ldr	r3, [pc, #24]	; (8007184 <vTaskInternalSetTimeOutState+0x24>)
 800716a:	681a      	ldr	r2, [r3, #0]
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8007170:	4b05      	ldr	r3, [pc, #20]	; (8007188 <vTaskInternalSetTimeOutState+0x28>)
 8007172:	681a      	ldr	r2, [r3, #0]
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	605a      	str	r2, [r3, #4]
}
 8007178:	bf00      	nop
 800717a:	370c      	adds	r7, #12
 800717c:	46bd      	mov	sp, r7
 800717e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007182:	4770      	bx	lr
 8007184:	200002d0 	.word	0x200002d0
 8007188:	200002bc 	.word	0x200002bc

0800718c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 800718c:	b580      	push	{r7, lr}
 800718e:	b088      	sub	sp, #32
 8007190:	af00      	add	r7, sp, #0
 8007192:	6078      	str	r0, [r7, #4]
 8007194:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	2b00      	cmp	r3, #0
 800719a:	d10a      	bne.n	80071b2 <xTaskCheckForTimeOut+0x26>
        __asm volatile
 800719c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071a0:	f383 8811 	msr	BASEPRI, r3
 80071a4:	f3bf 8f6f 	isb	sy
 80071a8:	f3bf 8f4f 	dsb	sy
 80071ac:	613b      	str	r3, [r7, #16]
    }
 80071ae:	bf00      	nop
 80071b0:	e7fe      	b.n	80071b0 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 80071b2:	683b      	ldr	r3, [r7, #0]
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d10a      	bne.n	80071ce <xTaskCheckForTimeOut+0x42>
        __asm volatile
 80071b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071bc:	f383 8811 	msr	BASEPRI, r3
 80071c0:	f3bf 8f6f 	isb	sy
 80071c4:	f3bf 8f4f 	dsb	sy
 80071c8:	60fb      	str	r3, [r7, #12]
    }
 80071ca:	bf00      	nop
 80071cc:	e7fe      	b.n	80071cc <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 80071ce:	f000 ff43 	bl	8008058 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 80071d2:	4b1f      	ldr	r3, [pc, #124]	; (8007250 <xTaskCheckForTimeOut+0xc4>)
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	685b      	ldr	r3, [r3, #4]
 80071dc:	69ba      	ldr	r2, [r7, #24]
 80071de:	1ad3      	subs	r3, r2, r3
 80071e0:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 80071e2:	683b      	ldr	r3, [r7, #0]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071ea:	d102      	bne.n	80071f2 <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 80071ec:	2300      	movs	r3, #0
 80071ee:	61fb      	str	r3, [r7, #28]
 80071f0:	e026      	b.n	8007240 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681a      	ldr	r2, [r3, #0]
 80071f6:	4b17      	ldr	r3, [pc, #92]	; (8007254 <xTaskCheckForTimeOut+0xc8>)
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	429a      	cmp	r2, r3
 80071fc:	d00a      	beq.n	8007214 <xTaskCheckForTimeOut+0x88>
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	685b      	ldr	r3, [r3, #4]
 8007202:	69ba      	ldr	r2, [r7, #24]
 8007204:	429a      	cmp	r2, r3
 8007206:	d305      	bcc.n	8007214 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8007208:	2301      	movs	r3, #1
 800720a:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 800720c:	683b      	ldr	r3, [r7, #0]
 800720e:	2200      	movs	r2, #0
 8007210:	601a      	str	r2, [r3, #0]
 8007212:	e015      	b.n	8007240 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007214:	683b      	ldr	r3, [r7, #0]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	697a      	ldr	r2, [r7, #20]
 800721a:	429a      	cmp	r2, r3
 800721c:	d20b      	bcs.n	8007236 <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 800721e:	683b      	ldr	r3, [r7, #0]
 8007220:	681a      	ldr	r2, [r3, #0]
 8007222:	697b      	ldr	r3, [r7, #20]
 8007224:	1ad2      	subs	r2, r2, r3
 8007226:	683b      	ldr	r3, [r7, #0]
 8007228:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 800722a:	6878      	ldr	r0, [r7, #4]
 800722c:	f7ff ff98 	bl	8007160 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8007230:	2300      	movs	r3, #0
 8007232:	61fb      	str	r3, [r7, #28]
 8007234:	e004      	b.n	8007240 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8007236:	683b      	ldr	r3, [r7, #0]
 8007238:	2200      	movs	r2, #0
 800723a:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 800723c:	2301      	movs	r3, #1
 800723e:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8007240:	f000 ff3a 	bl	80080b8 <vPortExitCritical>

    return xReturn;
 8007244:	69fb      	ldr	r3, [r7, #28]
}
 8007246:	4618      	mov	r0, r3
 8007248:	3720      	adds	r7, #32
 800724a:	46bd      	mov	sp, r7
 800724c:	bd80      	pop	{r7, pc}
 800724e:	bf00      	nop
 8007250:	200002bc 	.word	0x200002bc
 8007254:	200002d0 	.word	0x200002d0

08007258 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007258:	b480      	push	{r7}
 800725a:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 800725c:	4b03      	ldr	r3, [pc, #12]	; (800726c <vTaskMissedYield+0x14>)
 800725e:	2201      	movs	r2, #1
 8007260:	601a      	str	r2, [r3, #0]
}
 8007262:	bf00      	nop
 8007264:	46bd      	mov	sp, r7
 8007266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800726a:	4770      	bx	lr
 800726c:	200002cc 	.word	0x200002cc

08007270 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007270:	b580      	push	{r7, lr}
 8007272:	b082      	sub	sp, #8
 8007274:	af00      	add	r7, sp, #0
 8007276:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8007278:	f000 f842 	bl	8007300 <prvCheckTasksWaitingTermination>
 800727c:	e7fc      	b.n	8007278 <prvIdleTask+0x8>
	...

08007280 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007280:	b580      	push	{r7, lr}
 8007282:	b082      	sub	sp, #8
 8007284:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007286:	2300      	movs	r3, #0
 8007288:	607b      	str	r3, [r7, #4]
 800728a:	e00c      	b.n	80072a6 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800728c:	687a      	ldr	r2, [r7, #4]
 800728e:	4613      	mov	r3, r2
 8007290:	009b      	lsls	r3, r3, #2
 8007292:	4413      	add	r3, r2
 8007294:	009b      	lsls	r3, r3, #2
 8007296:	4a12      	ldr	r2, [pc, #72]	; (80072e0 <prvInitialiseTaskLists+0x60>)
 8007298:	4413      	add	r3, r2
 800729a:	4618      	mov	r0, r3
 800729c:	f7fe fb3a 	bl	8005914 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	3301      	adds	r3, #1
 80072a4:	607b      	str	r3, [r7, #4]
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	2b04      	cmp	r3, #4
 80072aa:	d9ef      	bls.n	800728c <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 80072ac:	480d      	ldr	r0, [pc, #52]	; (80072e4 <prvInitialiseTaskLists+0x64>)
 80072ae:	f7fe fb31 	bl	8005914 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 80072b2:	480d      	ldr	r0, [pc, #52]	; (80072e8 <prvInitialiseTaskLists+0x68>)
 80072b4:	f7fe fb2e 	bl	8005914 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 80072b8:	480c      	ldr	r0, [pc, #48]	; (80072ec <prvInitialiseTaskLists+0x6c>)
 80072ba:	f7fe fb2b 	bl	8005914 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 80072be:	480c      	ldr	r0, [pc, #48]	; (80072f0 <prvInitialiseTaskLists+0x70>)
 80072c0:	f7fe fb28 	bl	8005914 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 80072c4:	480b      	ldr	r0, [pc, #44]	; (80072f4 <prvInitialiseTaskLists+0x74>)
 80072c6:	f7fe fb25 	bl	8005914 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 80072ca:	4b0b      	ldr	r3, [pc, #44]	; (80072f8 <prvInitialiseTaskLists+0x78>)
 80072cc:	4a05      	ldr	r2, [pc, #20]	; (80072e4 <prvInitialiseTaskLists+0x64>)
 80072ce:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80072d0:	4b0a      	ldr	r3, [pc, #40]	; (80072fc <prvInitialiseTaskLists+0x7c>)
 80072d2:	4a05      	ldr	r2, [pc, #20]	; (80072e8 <prvInitialiseTaskLists+0x68>)
 80072d4:	601a      	str	r2, [r3, #0]
}
 80072d6:	bf00      	nop
 80072d8:	3708      	adds	r7, #8
 80072da:	46bd      	mov	sp, r7
 80072dc:	bd80      	pop	{r7, pc}
 80072de:	bf00      	nop
 80072e0:	200001e4 	.word	0x200001e4
 80072e4:	20000248 	.word	0x20000248
 80072e8:	2000025c 	.word	0x2000025c
 80072ec:	20000278 	.word	0x20000278
 80072f0:	2000028c 	.word	0x2000028c
 80072f4:	200002a4 	.word	0x200002a4
 80072f8:	20000270 	.word	0x20000270
 80072fc:	20000274 	.word	0x20000274

08007300 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007300:	b580      	push	{r7, lr}
 8007302:	b082      	sub	sp, #8
 8007304:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007306:	e019      	b.n	800733c <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 8007308:	f000 fea6 	bl	8008058 <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800730c:	4b10      	ldr	r3, [pc, #64]	; (8007350 <prvCheckTasksWaitingTermination+0x50>)
 800730e:	68db      	ldr	r3, [r3, #12]
 8007310:	68db      	ldr	r3, [r3, #12]
 8007312:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	3304      	adds	r3, #4
 8007318:	4618      	mov	r0, r3
 800731a:	f7fe fb61 	bl	80059e0 <uxListRemove>
                --uxCurrentNumberOfTasks;
 800731e:	4b0d      	ldr	r3, [pc, #52]	; (8007354 <prvCheckTasksWaitingTermination+0x54>)
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	3b01      	subs	r3, #1
 8007324:	4a0b      	ldr	r2, [pc, #44]	; (8007354 <prvCheckTasksWaitingTermination+0x54>)
 8007326:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 8007328:	4b0b      	ldr	r3, [pc, #44]	; (8007358 <prvCheckTasksWaitingTermination+0x58>)
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	3b01      	subs	r3, #1
 800732e:	4a0a      	ldr	r2, [pc, #40]	; (8007358 <prvCheckTasksWaitingTermination+0x58>)
 8007330:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 8007332:	f000 fec1 	bl	80080b8 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 8007336:	6878      	ldr	r0, [r7, #4]
 8007338:	f000 f810 	bl	800735c <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800733c:	4b06      	ldr	r3, [pc, #24]	; (8007358 <prvCheckTasksWaitingTermination+0x58>)
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	2b00      	cmp	r3, #0
 8007342:	d1e1      	bne.n	8007308 <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8007344:	bf00      	nop
 8007346:	bf00      	nop
 8007348:	3708      	adds	r7, #8
 800734a:	46bd      	mov	sp, r7
 800734c:	bd80      	pop	{r7, pc}
 800734e:	bf00      	nop
 8007350:	2000028c 	.word	0x2000028c
 8007354:	200002b8 	.word	0x200002b8
 8007358:	200002a0 	.word	0x200002a0

0800735c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 800735c:	b580      	push	{r7, lr}
 800735e:	b082      	sub	sp, #8
 8007360:	af00      	add	r7, sp, #0
 8007362:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007368:	4618      	mov	r0, r3
 800736a:	f001 f851 	bl	8008410 <vPortFree>
            vPortFree( pxTCB );
 800736e:	6878      	ldr	r0, [r7, #4]
 8007370:	f001 f84e 	bl	8008410 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8007374:	bf00      	nop
 8007376:	3708      	adds	r7, #8
 8007378:	46bd      	mov	sp, r7
 800737a:	bd80      	pop	{r7, pc}

0800737c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800737c:	b480      	push	{r7}
 800737e:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007380:	4b0a      	ldr	r3, [pc, #40]	; (80073ac <prvResetNextTaskUnblockTime+0x30>)
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	2b00      	cmp	r3, #0
 8007388:	d104      	bne.n	8007394 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 800738a:	4b09      	ldr	r3, [pc, #36]	; (80073b0 <prvResetNextTaskUnblockTime+0x34>)
 800738c:	f04f 32ff 	mov.w	r2, #4294967295
 8007390:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8007392:	e005      	b.n	80073a0 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8007394:	4b05      	ldr	r3, [pc, #20]	; (80073ac <prvResetNextTaskUnblockTime+0x30>)
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	68db      	ldr	r3, [r3, #12]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	4a04      	ldr	r2, [pc, #16]	; (80073b0 <prvResetNextTaskUnblockTime+0x34>)
 800739e:	6013      	str	r3, [r2, #0]
}
 80073a0:	bf00      	nop
 80073a2:	46bd      	mov	sp, r7
 80073a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a8:	4770      	bx	lr
 80073aa:	bf00      	nop
 80073ac:	20000270 	.word	0x20000270
 80073b0:	200002d8 	.word	0x200002d8

080073b4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 80073b4:	b480      	push	{r7}
 80073b6:	b083      	sub	sp, #12
 80073b8:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 80073ba:	4b0b      	ldr	r3, [pc, #44]	; (80073e8 <xTaskGetSchedulerState+0x34>)
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d102      	bne.n	80073c8 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 80073c2:	2301      	movs	r3, #1
 80073c4:	607b      	str	r3, [r7, #4]
 80073c6:	e008      	b.n	80073da <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80073c8:	4b08      	ldr	r3, [pc, #32]	; (80073ec <xTaskGetSchedulerState+0x38>)
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d102      	bne.n	80073d6 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 80073d0:	2302      	movs	r3, #2
 80073d2:	607b      	str	r3, [r7, #4]
 80073d4:	e001      	b.n	80073da <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 80073d6:	2300      	movs	r3, #0
 80073d8:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 80073da:	687b      	ldr	r3, [r7, #4]
    }
 80073dc:	4618      	mov	r0, r3
 80073de:	370c      	adds	r7, #12
 80073e0:	46bd      	mov	sp, r7
 80073e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e6:	4770      	bx	lr
 80073e8:	200002c4 	.word	0x200002c4
 80073ec:	200002e0 	.word	0x200002e0

080073f0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
    {
 80073f0:	b580      	push	{r7, lr}
 80073f2:	b086      	sub	sp, #24
 80073f4:	af00      	add	r7, sp, #0
 80073f6:	6078      	str	r0, [r7, #4]
        TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 80073fc:	2300      	movs	r3, #0
 80073fe:	617b      	str	r3, [r7, #20]

        /* If the mutex was given back by an interrupt while the queue was
         * locked then the mutex holder might now be NULL.  _RB_ Is this still
         * needed as interrupts can no longer use mutexes? */
        if( pxMutexHolder != NULL )
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	2b00      	cmp	r3, #0
 8007404:	f000 8087 	beq.w	8007516 <xTaskPriorityInherit+0x126>
        {
            /* If the holder of the mutex has a priority below the priority of
             * the task attempting to obtain the mutex then it will temporarily
             * inherit the priority of the task attempting to obtain the mutex. */
            if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8007408:	693b      	ldr	r3, [r7, #16]
 800740a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800740c:	4b44      	ldr	r3, [pc, #272]	; (8007520 <xTaskPriorityInherit+0x130>)
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007412:	429a      	cmp	r2, r3
 8007414:	d276      	bcs.n	8007504 <xTaskPriorityInherit+0x114>
            {
                /* Adjust the mutex holder state to account for its new
                 * priority.  Only reset the event list item value if the value is
                 * not being used for anything else. */
                if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007416:	693b      	ldr	r3, [r7, #16]
 8007418:	699b      	ldr	r3, [r3, #24]
 800741a:	2b00      	cmp	r3, #0
 800741c:	db06      	blt.n	800742c <xTaskPriorityInherit+0x3c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800741e:	4b40      	ldr	r3, [pc, #256]	; (8007520 <xTaskPriorityInherit+0x130>)
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007424:	f1c3 0205 	rsb	r2, r3, #5
 8007428:	693b      	ldr	r3, [r7, #16]
 800742a:	619a      	str	r2, [r3, #24]
                    mtCOVERAGE_TEST_MARKER();
                }

                /* If the task being modified is in the ready state it will need
                 * to be moved into a new list. */
                if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800742c:	693b      	ldr	r3, [r7, #16]
 800742e:	6959      	ldr	r1, [r3, #20]
 8007430:	693b      	ldr	r3, [r7, #16]
 8007432:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007434:	4613      	mov	r3, r2
 8007436:	009b      	lsls	r3, r3, #2
 8007438:	4413      	add	r3, r2
 800743a:	009b      	lsls	r3, r3, #2
 800743c:	4a39      	ldr	r2, [pc, #228]	; (8007524 <xTaskPriorityInherit+0x134>)
 800743e:	4413      	add	r3, r2
 8007440:	4299      	cmp	r1, r3
 8007442:	d157      	bne.n	80074f4 <xTaskPriorityInherit+0x104>
                {
                    if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007444:	693b      	ldr	r3, [r7, #16]
 8007446:	3304      	adds	r3, #4
 8007448:	4618      	mov	r0, r3
 800744a:	f7fe fac9 	bl	80059e0 <uxListRemove>
 800744e:	4603      	mov	r3, r0
 8007450:	2b00      	cmp	r3, #0
 8007452:	d10a      	bne.n	800746a <xTaskPriorityInherit+0x7a>
                    {
                        /* It is known that the task is in its ready list so
                         * there is no need to check again and the port level
                         * reset macro can be called directly. */
                        portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8007454:	693b      	ldr	r3, [r7, #16]
 8007456:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007458:	2201      	movs	r2, #1
 800745a:	fa02 f303 	lsl.w	r3, r2, r3
 800745e:	43da      	mvns	r2, r3
 8007460:	4b31      	ldr	r3, [pc, #196]	; (8007528 <xTaskPriorityInherit+0x138>)
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	4013      	ands	r3, r2
 8007466:	4a30      	ldr	r2, [pc, #192]	; (8007528 <xTaskPriorityInherit+0x138>)
 8007468:	6013      	str	r3, [r2, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Inherit the priority before being moved into the new list. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800746a:	4b2d      	ldr	r3, [pc, #180]	; (8007520 <xTaskPriorityInherit+0x130>)
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007470:	693b      	ldr	r3, [r7, #16]
 8007472:	62da      	str	r2, [r3, #44]	; 0x2c
                    prvAddTaskToReadyList( pxMutexHolderTCB );
 8007474:	693b      	ldr	r3, [r7, #16]
 8007476:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007478:	2201      	movs	r2, #1
 800747a:	409a      	lsls	r2, r3
 800747c:	4b2a      	ldr	r3, [pc, #168]	; (8007528 <xTaskPriorityInherit+0x138>)
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	4313      	orrs	r3, r2
 8007482:	4a29      	ldr	r2, [pc, #164]	; (8007528 <xTaskPriorityInherit+0x138>)
 8007484:	6013      	str	r3, [r2, #0]
 8007486:	693b      	ldr	r3, [r7, #16]
 8007488:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800748a:	4926      	ldr	r1, [pc, #152]	; (8007524 <xTaskPriorityInherit+0x134>)
 800748c:	4613      	mov	r3, r2
 800748e:	009b      	lsls	r3, r3, #2
 8007490:	4413      	add	r3, r2
 8007492:	009b      	lsls	r3, r3, #2
 8007494:	440b      	add	r3, r1
 8007496:	3304      	adds	r3, #4
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	60fb      	str	r3, [r7, #12]
 800749c:	693b      	ldr	r3, [r7, #16]
 800749e:	68fa      	ldr	r2, [r7, #12]
 80074a0:	609a      	str	r2, [r3, #8]
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	689a      	ldr	r2, [r3, #8]
 80074a6:	693b      	ldr	r3, [r7, #16]
 80074a8:	60da      	str	r2, [r3, #12]
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	689b      	ldr	r3, [r3, #8]
 80074ae:	693a      	ldr	r2, [r7, #16]
 80074b0:	3204      	adds	r2, #4
 80074b2:	605a      	str	r2, [r3, #4]
 80074b4:	693b      	ldr	r3, [r7, #16]
 80074b6:	1d1a      	adds	r2, r3, #4
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	609a      	str	r2, [r3, #8]
 80074bc:	693b      	ldr	r3, [r7, #16]
 80074be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074c0:	4613      	mov	r3, r2
 80074c2:	009b      	lsls	r3, r3, #2
 80074c4:	4413      	add	r3, r2
 80074c6:	009b      	lsls	r3, r3, #2
 80074c8:	4a16      	ldr	r2, [pc, #88]	; (8007524 <xTaskPriorityInherit+0x134>)
 80074ca:	441a      	add	r2, r3
 80074cc:	693b      	ldr	r3, [r7, #16]
 80074ce:	615a      	str	r2, [r3, #20]
 80074d0:	693b      	ldr	r3, [r7, #16]
 80074d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074d4:	4913      	ldr	r1, [pc, #76]	; (8007524 <xTaskPriorityInherit+0x134>)
 80074d6:	4613      	mov	r3, r2
 80074d8:	009b      	lsls	r3, r3, #2
 80074da:	4413      	add	r3, r2
 80074dc:	009b      	lsls	r3, r3, #2
 80074de:	440b      	add	r3, r1
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	1c59      	adds	r1, r3, #1
 80074e4:	480f      	ldr	r0, [pc, #60]	; (8007524 <xTaskPriorityInherit+0x134>)
 80074e6:	4613      	mov	r3, r2
 80074e8:	009b      	lsls	r3, r3, #2
 80074ea:	4413      	add	r3, r2
 80074ec:	009b      	lsls	r3, r3, #2
 80074ee:	4403      	add	r3, r0
 80074f0:	6019      	str	r1, [r3, #0]
 80074f2:	e004      	b.n	80074fe <xTaskPriorityInherit+0x10e>
                }
                else
                {
                    /* Just inherit the priority. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80074f4:	4b0a      	ldr	r3, [pc, #40]	; (8007520 <xTaskPriorityInherit+0x130>)
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074fa:	693b      	ldr	r3, [r7, #16]
 80074fc:	62da      	str	r2, [r3, #44]	; 0x2c
                }

                traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

                /* Inheritance occurred. */
                xReturn = pdTRUE;
 80074fe:	2301      	movs	r3, #1
 8007500:	617b      	str	r3, [r7, #20]
 8007502:	e008      	b.n	8007516 <xTaskPriorityInherit+0x126>
            }
            else
            {
                if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8007504:	693b      	ldr	r3, [r7, #16]
 8007506:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007508:	4b05      	ldr	r3, [pc, #20]	; (8007520 <xTaskPriorityInherit+0x130>)
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800750e:	429a      	cmp	r2, r3
 8007510:	d201      	bcs.n	8007516 <xTaskPriorityInherit+0x126>
                     * current priority of the mutex holder is not lower than the
                     * priority of the task attempting to take the mutex.
                     * Therefore the mutex holder must have already inherited a
                     * priority, but inheritance would have occurred if that had
                     * not been the case. */
                    xReturn = pdTRUE;
 8007512:	2301      	movs	r3, #1
 8007514:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8007516:	697b      	ldr	r3, [r7, #20]
    }
 8007518:	4618      	mov	r0, r3
 800751a:	3718      	adds	r7, #24
 800751c:	46bd      	mov	sp, r7
 800751e:	bd80      	pop	{r7, pc}
 8007520:	200001e0 	.word	0x200001e0
 8007524:	200001e4 	.word	0x200001e4
 8007528:	200002c0 	.word	0x200002c0

0800752c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 800752c:	b580      	push	{r7, lr}
 800752e:	b088      	sub	sp, #32
 8007530:	af00      	add	r7, sp, #0
 8007532:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	61bb      	str	r3, [r7, #24]
        BaseType_t xReturn = pdFALSE;
 8007538:	2300      	movs	r3, #0
 800753a:	61fb      	str	r3, [r7, #28]

        if( pxMutexHolder != NULL )
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	2b00      	cmp	r3, #0
 8007540:	f000 808c 	beq.w	800765c <xTaskPriorityDisinherit+0x130>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8007544:	4b48      	ldr	r3, [pc, #288]	; (8007668 <xTaskPriorityDisinherit+0x13c>)
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	69ba      	ldr	r2, [r7, #24]
 800754a:	429a      	cmp	r2, r3
 800754c:	d00a      	beq.n	8007564 <xTaskPriorityDisinherit+0x38>
        __asm volatile
 800754e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007552:	f383 8811 	msr	BASEPRI, r3
 8007556:	f3bf 8f6f 	isb	sy
 800755a:	f3bf 8f4f 	dsb	sy
 800755e:	613b      	str	r3, [r7, #16]
    }
 8007560:	bf00      	nop
 8007562:	e7fe      	b.n	8007562 <xTaskPriorityDisinherit+0x36>
            configASSERT( pxTCB->uxMutexesHeld );
 8007564:	69bb      	ldr	r3, [r7, #24]
 8007566:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007568:	2b00      	cmp	r3, #0
 800756a:	d10a      	bne.n	8007582 <xTaskPriorityDisinherit+0x56>
        __asm volatile
 800756c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007570:	f383 8811 	msr	BASEPRI, r3
 8007574:	f3bf 8f6f 	isb	sy
 8007578:	f3bf 8f4f 	dsb	sy
 800757c:	60fb      	str	r3, [r7, #12]
    }
 800757e:	bf00      	nop
 8007580:	e7fe      	b.n	8007580 <xTaskPriorityDisinherit+0x54>
            ( pxTCB->uxMutexesHeld )--;
 8007582:	69bb      	ldr	r3, [r7, #24]
 8007584:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007586:	1e5a      	subs	r2, r3, #1
 8007588:	69bb      	ldr	r3, [r7, #24]
 800758a:	645a      	str	r2, [r3, #68]	; 0x44

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800758c:	69bb      	ldr	r3, [r7, #24]
 800758e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007590:	69bb      	ldr	r3, [r7, #24]
 8007592:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007594:	429a      	cmp	r2, r3
 8007596:	d061      	beq.n	800765c <xTaskPriorityDisinherit+0x130>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007598:	69bb      	ldr	r3, [r7, #24]
 800759a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800759c:	2b00      	cmp	r3, #0
 800759e:	d15d      	bne.n	800765c <xTaskPriorityDisinherit+0x130>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80075a0:	69bb      	ldr	r3, [r7, #24]
 80075a2:	3304      	adds	r3, #4
 80075a4:	4618      	mov	r0, r3
 80075a6:	f7fe fa1b 	bl	80059e0 <uxListRemove>
 80075aa:	4603      	mov	r3, r0
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d10a      	bne.n	80075c6 <xTaskPriorityDisinherit+0x9a>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 80075b0:	69bb      	ldr	r3, [r7, #24]
 80075b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075b4:	2201      	movs	r2, #1
 80075b6:	fa02 f303 	lsl.w	r3, r2, r3
 80075ba:	43da      	mvns	r2, r3
 80075bc:	4b2b      	ldr	r3, [pc, #172]	; (800766c <xTaskPriorityDisinherit+0x140>)
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	4013      	ands	r3, r2
 80075c2:	4a2a      	ldr	r2, [pc, #168]	; (800766c <xTaskPriorityDisinherit+0x140>)
 80075c4:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 80075c6:	69bb      	ldr	r3, [r7, #24]
 80075c8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80075ca:	69bb      	ldr	r3, [r7, #24]
 80075cc:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80075ce:	69bb      	ldr	r3, [r7, #24]
 80075d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075d2:	f1c3 0205 	rsb	r2, r3, #5
 80075d6:	69bb      	ldr	r3, [r7, #24]
 80075d8:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
 80075da:	69bb      	ldr	r3, [r7, #24]
 80075dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075de:	2201      	movs	r2, #1
 80075e0:	409a      	lsls	r2, r3
 80075e2:	4b22      	ldr	r3, [pc, #136]	; (800766c <xTaskPriorityDisinherit+0x140>)
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	4313      	orrs	r3, r2
 80075e8:	4a20      	ldr	r2, [pc, #128]	; (800766c <xTaskPriorityDisinherit+0x140>)
 80075ea:	6013      	str	r3, [r2, #0]
 80075ec:	69bb      	ldr	r3, [r7, #24]
 80075ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075f0:	491f      	ldr	r1, [pc, #124]	; (8007670 <xTaskPriorityDisinherit+0x144>)
 80075f2:	4613      	mov	r3, r2
 80075f4:	009b      	lsls	r3, r3, #2
 80075f6:	4413      	add	r3, r2
 80075f8:	009b      	lsls	r3, r3, #2
 80075fa:	440b      	add	r3, r1
 80075fc:	3304      	adds	r3, #4
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	617b      	str	r3, [r7, #20]
 8007602:	69bb      	ldr	r3, [r7, #24]
 8007604:	697a      	ldr	r2, [r7, #20]
 8007606:	609a      	str	r2, [r3, #8]
 8007608:	697b      	ldr	r3, [r7, #20]
 800760a:	689a      	ldr	r2, [r3, #8]
 800760c:	69bb      	ldr	r3, [r7, #24]
 800760e:	60da      	str	r2, [r3, #12]
 8007610:	697b      	ldr	r3, [r7, #20]
 8007612:	689b      	ldr	r3, [r3, #8]
 8007614:	69ba      	ldr	r2, [r7, #24]
 8007616:	3204      	adds	r2, #4
 8007618:	605a      	str	r2, [r3, #4]
 800761a:	69bb      	ldr	r3, [r7, #24]
 800761c:	1d1a      	adds	r2, r3, #4
 800761e:	697b      	ldr	r3, [r7, #20]
 8007620:	609a      	str	r2, [r3, #8]
 8007622:	69bb      	ldr	r3, [r7, #24]
 8007624:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007626:	4613      	mov	r3, r2
 8007628:	009b      	lsls	r3, r3, #2
 800762a:	4413      	add	r3, r2
 800762c:	009b      	lsls	r3, r3, #2
 800762e:	4a10      	ldr	r2, [pc, #64]	; (8007670 <xTaskPriorityDisinherit+0x144>)
 8007630:	441a      	add	r2, r3
 8007632:	69bb      	ldr	r3, [r7, #24]
 8007634:	615a      	str	r2, [r3, #20]
 8007636:	69bb      	ldr	r3, [r7, #24]
 8007638:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800763a:	490d      	ldr	r1, [pc, #52]	; (8007670 <xTaskPriorityDisinherit+0x144>)
 800763c:	4613      	mov	r3, r2
 800763e:	009b      	lsls	r3, r3, #2
 8007640:	4413      	add	r3, r2
 8007642:	009b      	lsls	r3, r3, #2
 8007644:	440b      	add	r3, r1
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	1c59      	adds	r1, r3, #1
 800764a:	4809      	ldr	r0, [pc, #36]	; (8007670 <xTaskPriorityDisinherit+0x144>)
 800764c:	4613      	mov	r3, r2
 800764e:	009b      	lsls	r3, r3, #2
 8007650:	4413      	add	r3, r2
 8007652:	009b      	lsls	r3, r3, #2
 8007654:	4403      	add	r3, r0
 8007656:	6019      	str	r1, [r3, #0]
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8007658:	2301      	movs	r3, #1
 800765a:	61fb      	str	r3, [r7, #28]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 800765c:	69fb      	ldr	r3, [r7, #28]
    }
 800765e:	4618      	mov	r0, r3
 8007660:	3720      	adds	r7, #32
 8007662:	46bd      	mov	sp, r7
 8007664:	bd80      	pop	{r7, pc}
 8007666:	bf00      	nop
 8007668:	200001e0 	.word	0x200001e0
 800766c:	200002c0 	.word	0x200002c0
 8007670:	200001e4 	.word	0x200001e4

08007674 <vTaskPriorityDisinheritAfterTimeout>:

#if ( configUSE_MUTEXES == 1 )

    void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder,
                                              UBaseType_t uxHighestPriorityWaitingTask )
    {
 8007674:	b580      	push	{r7, lr}
 8007676:	b08a      	sub	sp, #40	; 0x28
 8007678:	af00      	add	r7, sp, #0
 800767a:	6078      	str	r0, [r7, #4]
 800767c:	6039      	str	r1, [r7, #0]
        TCB_t * const pxTCB = pxMutexHolder;
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	623b      	str	r3, [r7, #32]
        UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
        const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8007682:	2301      	movs	r3, #1
 8007684:	61fb      	str	r3, [r7, #28]

        if( pxMutexHolder != NULL )
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	2b00      	cmp	r3, #0
 800768a:	f000 80a1 	beq.w	80077d0 <vTaskPriorityDisinheritAfterTimeout+0x15c>
        {
            /* If pxMutexHolder is not NULL then the holder must hold at least
             * one mutex. */
            configASSERT( pxTCB->uxMutexesHeld );
 800768e:	6a3b      	ldr	r3, [r7, #32]
 8007690:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007692:	2b00      	cmp	r3, #0
 8007694:	d10a      	bne.n	80076ac <vTaskPriorityDisinheritAfterTimeout+0x38>
        __asm volatile
 8007696:	f04f 0350 	mov.w	r3, #80	; 0x50
 800769a:	f383 8811 	msr	BASEPRI, r3
 800769e:	f3bf 8f6f 	isb	sy
 80076a2:	f3bf 8f4f 	dsb	sy
 80076a6:	613b      	str	r3, [r7, #16]
    }
 80076a8:	bf00      	nop
 80076aa:	e7fe      	b.n	80076aa <vTaskPriorityDisinheritAfterTimeout+0x36>

            /* Determine the priority to which the priority of the task that
             * holds the mutex should be set.  This will be the greater of the
             * holding task's base priority and the priority of the highest
             * priority task that is waiting to obtain the mutex. */
            if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80076ac:	6a3b      	ldr	r3, [r7, #32]
 80076ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076b0:	683a      	ldr	r2, [r7, #0]
 80076b2:	429a      	cmp	r2, r3
 80076b4:	d902      	bls.n	80076bc <vTaskPriorityDisinheritAfterTimeout+0x48>
            {
                uxPriorityToUse = uxHighestPriorityWaitingTask;
 80076b6:	683b      	ldr	r3, [r7, #0]
 80076b8:	627b      	str	r3, [r7, #36]	; 0x24
 80076ba:	e002      	b.n	80076c2 <vTaskPriorityDisinheritAfterTimeout+0x4e>
            }
            else
            {
                uxPriorityToUse = pxTCB->uxBasePriority;
 80076bc:	6a3b      	ldr	r3, [r7, #32]
 80076be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076c0:	627b      	str	r3, [r7, #36]	; 0x24
            }

            /* Does the priority need to change? */
            if( pxTCB->uxPriority != uxPriorityToUse )
 80076c2:	6a3b      	ldr	r3, [r7, #32]
 80076c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80076c8:	429a      	cmp	r2, r3
 80076ca:	f000 8081 	beq.w	80077d0 <vTaskPriorityDisinheritAfterTimeout+0x15c>
            {
                /* Only disinherit if no other mutexes are held.  This is a
                 * simplification in the priority inheritance implementation.  If
                 * the task that holds the mutex is also holding other mutexes then
                 * the other mutexes may have caused the priority inheritance. */
                if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80076ce:	6a3b      	ldr	r3, [r7, #32]
 80076d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80076d2:	69fa      	ldr	r2, [r7, #28]
 80076d4:	429a      	cmp	r2, r3
 80076d6:	d17b      	bne.n	80077d0 <vTaskPriorityDisinheritAfterTimeout+0x15c>
                {
                    /* If a task has timed out because it already holds the
                     * mutex it was trying to obtain then it cannot of inherited
                     * its own priority. */
                    configASSERT( pxTCB != pxCurrentTCB );
 80076d8:	4b3f      	ldr	r3, [pc, #252]	; (80077d8 <vTaskPriorityDisinheritAfterTimeout+0x164>)
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	6a3a      	ldr	r2, [r7, #32]
 80076de:	429a      	cmp	r2, r3
 80076e0:	d10a      	bne.n	80076f8 <vTaskPriorityDisinheritAfterTimeout+0x84>
        __asm volatile
 80076e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076e6:	f383 8811 	msr	BASEPRI, r3
 80076ea:	f3bf 8f6f 	isb	sy
 80076ee:	f3bf 8f4f 	dsb	sy
 80076f2:	60fb      	str	r3, [r7, #12]
    }
 80076f4:	bf00      	nop
 80076f6:	e7fe      	b.n	80076f6 <vTaskPriorityDisinheritAfterTimeout+0x82>

                    /* Disinherit the priority, remembering the previous
                     * priority to facilitate determining the subject task's
                     * state. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, uxPriorityToUse );
                    uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80076f8:	6a3b      	ldr	r3, [r7, #32]
 80076fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076fc:	61bb      	str	r3, [r7, #24]
                    pxTCB->uxPriority = uxPriorityToUse;
 80076fe:	6a3b      	ldr	r3, [r7, #32]
 8007700:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007702:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Only reset the event list item value if the value is not
                     * being used for anything else. */
                    if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007704:	6a3b      	ldr	r3, [r7, #32]
 8007706:	699b      	ldr	r3, [r3, #24]
 8007708:	2b00      	cmp	r3, #0
 800770a:	db04      	blt.n	8007716 <vTaskPriorityDisinheritAfterTimeout+0xa2>
                    {
                        listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800770c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800770e:	f1c3 0205 	rsb	r2, r3, #5
 8007712:	6a3b      	ldr	r3, [r7, #32]
 8007714:	619a      	str	r2, [r3, #24]
                     * then the task that holds the mutex could be in either the
                     * Ready, Blocked or Suspended states.  Only remove the task
                     * from its current state list if it is in the Ready state as
                     * the task's priority is going to change and there is one
                     * Ready list per priority. */
                    if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8007716:	6a3b      	ldr	r3, [r7, #32]
 8007718:	6959      	ldr	r1, [r3, #20]
 800771a:	69ba      	ldr	r2, [r7, #24]
 800771c:	4613      	mov	r3, r2
 800771e:	009b      	lsls	r3, r3, #2
 8007720:	4413      	add	r3, r2
 8007722:	009b      	lsls	r3, r3, #2
 8007724:	4a2d      	ldr	r2, [pc, #180]	; (80077dc <vTaskPriorityDisinheritAfterTimeout+0x168>)
 8007726:	4413      	add	r3, r2
 8007728:	4299      	cmp	r1, r3
 800772a:	d151      	bne.n	80077d0 <vTaskPriorityDisinheritAfterTimeout+0x15c>
                    {
                        if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800772c:	6a3b      	ldr	r3, [r7, #32]
 800772e:	3304      	adds	r3, #4
 8007730:	4618      	mov	r0, r3
 8007732:	f7fe f955 	bl	80059e0 <uxListRemove>
 8007736:	4603      	mov	r3, r0
 8007738:	2b00      	cmp	r3, #0
 800773a:	d10a      	bne.n	8007752 <vTaskPriorityDisinheritAfterTimeout+0xde>
                        {
                            /* It is known that the task is in its ready list so
                             * there is no need to check again and the port level
                             * reset macro can be called directly. */
                            portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800773c:	6a3b      	ldr	r3, [r7, #32]
 800773e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007740:	2201      	movs	r2, #1
 8007742:	fa02 f303 	lsl.w	r3, r2, r3
 8007746:	43da      	mvns	r2, r3
 8007748:	4b25      	ldr	r3, [pc, #148]	; (80077e0 <vTaskPriorityDisinheritAfterTimeout+0x16c>)
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	4013      	ands	r3, r2
 800774e:	4a24      	ldr	r2, [pc, #144]	; (80077e0 <vTaskPriorityDisinheritAfterTimeout+0x16c>)
 8007750:	6013      	str	r3, [r2, #0]
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        prvAddTaskToReadyList( pxTCB );
 8007752:	6a3b      	ldr	r3, [r7, #32]
 8007754:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007756:	2201      	movs	r2, #1
 8007758:	409a      	lsls	r2, r3
 800775a:	4b21      	ldr	r3, [pc, #132]	; (80077e0 <vTaskPriorityDisinheritAfterTimeout+0x16c>)
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	4313      	orrs	r3, r2
 8007760:	4a1f      	ldr	r2, [pc, #124]	; (80077e0 <vTaskPriorityDisinheritAfterTimeout+0x16c>)
 8007762:	6013      	str	r3, [r2, #0]
 8007764:	6a3b      	ldr	r3, [r7, #32]
 8007766:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007768:	491c      	ldr	r1, [pc, #112]	; (80077dc <vTaskPriorityDisinheritAfterTimeout+0x168>)
 800776a:	4613      	mov	r3, r2
 800776c:	009b      	lsls	r3, r3, #2
 800776e:	4413      	add	r3, r2
 8007770:	009b      	lsls	r3, r3, #2
 8007772:	440b      	add	r3, r1
 8007774:	3304      	adds	r3, #4
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	617b      	str	r3, [r7, #20]
 800777a:	6a3b      	ldr	r3, [r7, #32]
 800777c:	697a      	ldr	r2, [r7, #20]
 800777e:	609a      	str	r2, [r3, #8]
 8007780:	697b      	ldr	r3, [r7, #20]
 8007782:	689a      	ldr	r2, [r3, #8]
 8007784:	6a3b      	ldr	r3, [r7, #32]
 8007786:	60da      	str	r2, [r3, #12]
 8007788:	697b      	ldr	r3, [r7, #20]
 800778a:	689b      	ldr	r3, [r3, #8]
 800778c:	6a3a      	ldr	r2, [r7, #32]
 800778e:	3204      	adds	r2, #4
 8007790:	605a      	str	r2, [r3, #4]
 8007792:	6a3b      	ldr	r3, [r7, #32]
 8007794:	1d1a      	adds	r2, r3, #4
 8007796:	697b      	ldr	r3, [r7, #20]
 8007798:	609a      	str	r2, [r3, #8]
 800779a:	6a3b      	ldr	r3, [r7, #32]
 800779c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800779e:	4613      	mov	r3, r2
 80077a0:	009b      	lsls	r3, r3, #2
 80077a2:	4413      	add	r3, r2
 80077a4:	009b      	lsls	r3, r3, #2
 80077a6:	4a0d      	ldr	r2, [pc, #52]	; (80077dc <vTaskPriorityDisinheritAfterTimeout+0x168>)
 80077a8:	441a      	add	r2, r3
 80077aa:	6a3b      	ldr	r3, [r7, #32]
 80077ac:	615a      	str	r2, [r3, #20]
 80077ae:	6a3b      	ldr	r3, [r7, #32]
 80077b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077b2:	490a      	ldr	r1, [pc, #40]	; (80077dc <vTaskPriorityDisinheritAfterTimeout+0x168>)
 80077b4:	4613      	mov	r3, r2
 80077b6:	009b      	lsls	r3, r3, #2
 80077b8:	4413      	add	r3, r2
 80077ba:	009b      	lsls	r3, r3, #2
 80077bc:	440b      	add	r3, r1
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	1c59      	adds	r1, r3, #1
 80077c2:	4806      	ldr	r0, [pc, #24]	; (80077dc <vTaskPriorityDisinheritAfterTimeout+0x168>)
 80077c4:	4613      	mov	r3, r2
 80077c6:	009b      	lsls	r3, r3, #2
 80077c8:	4413      	add	r3, r2
 80077ca:	009b      	lsls	r3, r3, #2
 80077cc:	4403      	add	r3, r0
 80077ce:	6019      	str	r1, [r3, #0]
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 80077d0:	bf00      	nop
 80077d2:	3728      	adds	r7, #40	; 0x28
 80077d4:	46bd      	mov	sp, r7
 80077d6:	bd80      	pop	{r7, pc}
 80077d8:	200001e0 	.word	0x200001e0
 80077dc:	200001e4 	.word	0x200001e4
 80077e0:	200002c0 	.word	0x200002c0

080077e4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    TaskHandle_t pvTaskIncrementMutexHeldCount( void )
    {
 80077e4:	b480      	push	{r7}
 80077e6:	af00      	add	r7, sp, #0
        /* If xSemaphoreCreateMutex() is called before any tasks have been created
         * then pxCurrentTCB will be NULL. */
        if( pxCurrentTCB != NULL )
 80077e8:	4b07      	ldr	r3, [pc, #28]	; (8007808 <pvTaskIncrementMutexHeldCount+0x24>)
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d004      	beq.n	80077fa <pvTaskIncrementMutexHeldCount+0x16>
        {
            ( pxCurrentTCB->uxMutexesHeld )++;
 80077f0:	4b05      	ldr	r3, [pc, #20]	; (8007808 <pvTaskIncrementMutexHeldCount+0x24>)
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80077f6:	3201      	adds	r2, #1
 80077f8:	645a      	str	r2, [r3, #68]	; 0x44
        }

        return pxCurrentTCB;
 80077fa:	4b03      	ldr	r3, [pc, #12]	; (8007808 <pvTaskIncrementMutexHeldCount+0x24>)
 80077fc:	681b      	ldr	r3, [r3, #0]
    }
 80077fe:	4618      	mov	r0, r3
 8007800:	46bd      	mov	sp, r7
 8007802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007806:	4770      	bx	lr
 8007808:	200001e0 	.word	0x200001e0

0800780c <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 800780c:	b580      	push	{r7, lr}
 800780e:	b086      	sub	sp, #24
 8007810:	af00      	add	r7, sp, #0
 8007812:	6078      	str	r0, [r7, #4]
 8007814:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8007816:	4b36      	ldr	r3, [pc, #216]	; (80078f0 <prvAddCurrentTaskToDelayedList+0xe4>)
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800781c:	4b35      	ldr	r3, [pc, #212]	; (80078f4 <prvAddCurrentTaskToDelayedList+0xe8>)
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	3304      	adds	r3, #4
 8007822:	4618      	mov	r0, r3
 8007824:	f7fe f8dc 	bl	80059e0 <uxListRemove>
 8007828:	4603      	mov	r3, r0
 800782a:	2b00      	cmp	r3, #0
 800782c:	d10b      	bne.n	8007846 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800782e:	4b31      	ldr	r3, [pc, #196]	; (80078f4 <prvAddCurrentTaskToDelayedList+0xe8>)
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007834:	2201      	movs	r2, #1
 8007836:	fa02 f303 	lsl.w	r3, r2, r3
 800783a:	43da      	mvns	r2, r3
 800783c:	4b2e      	ldr	r3, [pc, #184]	; (80078f8 <prvAddCurrentTaskToDelayedList+0xec>)
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	4013      	ands	r3, r2
 8007842:	4a2d      	ldr	r2, [pc, #180]	; (80078f8 <prvAddCurrentTaskToDelayedList+0xec>)
 8007844:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	f1b3 3fff 	cmp.w	r3, #4294967295
 800784c:	d124      	bne.n	8007898 <prvAddCurrentTaskToDelayedList+0x8c>
 800784e:	683b      	ldr	r3, [r7, #0]
 8007850:	2b00      	cmp	r3, #0
 8007852:	d021      	beq.n	8007898 <prvAddCurrentTaskToDelayedList+0x8c>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007854:	4b29      	ldr	r3, [pc, #164]	; (80078fc <prvAddCurrentTaskToDelayedList+0xf0>)
 8007856:	685b      	ldr	r3, [r3, #4]
 8007858:	613b      	str	r3, [r7, #16]
 800785a:	4b26      	ldr	r3, [pc, #152]	; (80078f4 <prvAddCurrentTaskToDelayedList+0xe8>)
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	693a      	ldr	r2, [r7, #16]
 8007860:	609a      	str	r2, [r3, #8]
 8007862:	4b24      	ldr	r3, [pc, #144]	; (80078f4 <prvAddCurrentTaskToDelayedList+0xe8>)
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	693a      	ldr	r2, [r7, #16]
 8007868:	6892      	ldr	r2, [r2, #8]
 800786a:	60da      	str	r2, [r3, #12]
 800786c:	4b21      	ldr	r3, [pc, #132]	; (80078f4 <prvAddCurrentTaskToDelayedList+0xe8>)
 800786e:	681a      	ldr	r2, [r3, #0]
 8007870:	693b      	ldr	r3, [r7, #16]
 8007872:	689b      	ldr	r3, [r3, #8]
 8007874:	3204      	adds	r2, #4
 8007876:	605a      	str	r2, [r3, #4]
 8007878:	4b1e      	ldr	r3, [pc, #120]	; (80078f4 <prvAddCurrentTaskToDelayedList+0xe8>)
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	1d1a      	adds	r2, r3, #4
 800787e:	693b      	ldr	r3, [r7, #16]
 8007880:	609a      	str	r2, [r3, #8]
 8007882:	4b1c      	ldr	r3, [pc, #112]	; (80078f4 <prvAddCurrentTaskToDelayedList+0xe8>)
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	4a1d      	ldr	r2, [pc, #116]	; (80078fc <prvAddCurrentTaskToDelayedList+0xf0>)
 8007888:	615a      	str	r2, [r3, #20]
 800788a:	4b1c      	ldr	r3, [pc, #112]	; (80078fc <prvAddCurrentTaskToDelayedList+0xf0>)
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	3301      	adds	r3, #1
 8007890:	4a1a      	ldr	r2, [pc, #104]	; (80078fc <prvAddCurrentTaskToDelayedList+0xf0>)
 8007892:	6013      	str	r3, [r2, #0]
 8007894:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 8007896:	e026      	b.n	80078e6 <prvAddCurrentTaskToDelayedList+0xda>
            xTimeToWake = xConstTickCount + xTicksToWait;
 8007898:	697a      	ldr	r2, [r7, #20]
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	4413      	add	r3, r2
 800789e:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80078a0:	4b14      	ldr	r3, [pc, #80]	; (80078f4 <prvAddCurrentTaskToDelayedList+0xe8>)
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	68fa      	ldr	r2, [r7, #12]
 80078a6:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 80078a8:	68fa      	ldr	r2, [r7, #12]
 80078aa:	697b      	ldr	r3, [r7, #20]
 80078ac:	429a      	cmp	r2, r3
 80078ae:	d209      	bcs.n	80078c4 <prvAddCurrentTaskToDelayedList+0xb8>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80078b0:	4b13      	ldr	r3, [pc, #76]	; (8007900 <prvAddCurrentTaskToDelayedList+0xf4>)
 80078b2:	681a      	ldr	r2, [r3, #0]
 80078b4:	4b0f      	ldr	r3, [pc, #60]	; (80078f4 <prvAddCurrentTaskToDelayedList+0xe8>)
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	3304      	adds	r3, #4
 80078ba:	4619      	mov	r1, r3
 80078bc:	4610      	mov	r0, r2
 80078be:	f7fe f856 	bl	800596e <vListInsert>
}
 80078c2:	e010      	b.n	80078e6 <prvAddCurrentTaskToDelayedList+0xda>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80078c4:	4b0f      	ldr	r3, [pc, #60]	; (8007904 <prvAddCurrentTaskToDelayedList+0xf8>)
 80078c6:	681a      	ldr	r2, [r3, #0]
 80078c8:	4b0a      	ldr	r3, [pc, #40]	; (80078f4 <prvAddCurrentTaskToDelayedList+0xe8>)
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	3304      	adds	r3, #4
 80078ce:	4619      	mov	r1, r3
 80078d0:	4610      	mov	r0, r2
 80078d2:	f7fe f84c 	bl	800596e <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 80078d6:	4b0c      	ldr	r3, [pc, #48]	; (8007908 <prvAddCurrentTaskToDelayedList+0xfc>)
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	68fa      	ldr	r2, [r7, #12]
 80078dc:	429a      	cmp	r2, r3
 80078de:	d202      	bcs.n	80078e6 <prvAddCurrentTaskToDelayedList+0xda>
                    xNextTaskUnblockTime = xTimeToWake;
 80078e0:	4a09      	ldr	r2, [pc, #36]	; (8007908 <prvAddCurrentTaskToDelayedList+0xfc>)
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	6013      	str	r3, [r2, #0]
}
 80078e6:	bf00      	nop
 80078e8:	3718      	adds	r7, #24
 80078ea:	46bd      	mov	sp, r7
 80078ec:	bd80      	pop	{r7, pc}
 80078ee:	bf00      	nop
 80078f0:	200002bc 	.word	0x200002bc
 80078f4:	200001e0 	.word	0x200001e0
 80078f8:	200002c0 	.word	0x200002c0
 80078fc:	200002a4 	.word	0x200002a4
 8007900:	20000274 	.word	0x20000274
 8007904:	20000270 	.word	0x20000270
 8007908:	200002d8 	.word	0x200002d8

0800790c <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 800790c:	b580      	push	{r7, lr}
 800790e:	b084      	sub	sp, #16
 8007910:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8007912:	2300      	movs	r3, #0
 8007914:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8007916:	f000 fa47 	bl	8007da8 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 800791a:	4b11      	ldr	r3, [pc, #68]	; (8007960 <xTimerCreateTimerTask+0x54>)
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	2b00      	cmp	r3, #0
 8007920:	d00a      	beq.n	8007938 <xTimerCreateTimerTask+0x2c>
                    xReturn = pdPASS;
                }
            }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
            {
                xReturn = xTaskCreate( prvTimerTask,
 8007922:	4b10      	ldr	r3, [pc, #64]	; (8007964 <xTimerCreateTimerTask+0x58>)
 8007924:	9301      	str	r3, [sp, #4]
 8007926:	2303      	movs	r3, #3
 8007928:	9300      	str	r3, [sp, #0]
 800792a:	2300      	movs	r3, #0
 800792c:	2280      	movs	r2, #128	; 0x80
 800792e:	490e      	ldr	r1, [pc, #56]	; (8007968 <xTimerCreateTimerTask+0x5c>)
 8007930:	480e      	ldr	r0, [pc, #56]	; (800796c <xTimerCreateTimerTask+0x60>)
 8007932:	f7fe fe59 	bl	80065e8 <xTaskCreate>
 8007936:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	2b00      	cmp	r3, #0
 800793c:	d10a      	bne.n	8007954 <xTimerCreateTimerTask+0x48>
        __asm volatile
 800793e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007942:	f383 8811 	msr	BASEPRI, r3
 8007946:	f3bf 8f6f 	isb	sy
 800794a:	f3bf 8f4f 	dsb	sy
 800794e:	603b      	str	r3, [r7, #0]
    }
 8007950:	bf00      	nop
 8007952:	e7fe      	b.n	8007952 <xTimerCreateTimerTask+0x46>
        return xReturn;
 8007954:	687b      	ldr	r3, [r7, #4]
    }
 8007956:	4618      	mov	r0, r3
 8007958:	3708      	adds	r7, #8
 800795a:	46bd      	mov	sp, r7
 800795c:	bd80      	pop	{r7, pc}
 800795e:	bf00      	nop
 8007960:	20000314 	.word	0x20000314
 8007964:	20000318 	.word	0x20000318
 8007968:	08008fd8 	.word	0x08008fd8
 800796c:	08007a15 	.word	0x08007a15

08007970 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 8007970:	b580      	push	{r7, lr}
 8007972:	b084      	sub	sp, #16
 8007974:	af00      	add	r7, sp, #0
 8007976:	60f8      	str	r0, [r7, #12]
 8007978:	60b9      	str	r1, [r7, #8]
 800797a:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 800797c:	e008      	b.n	8007990 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	699b      	ldr	r3, [r3, #24]
 8007982:	68ba      	ldr	r2, [r7, #8]
 8007984:	4413      	add	r3, r2
 8007986:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	6a1b      	ldr	r3, [r3, #32]
 800798c:	68f8      	ldr	r0, [r7, #12]
 800798e:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	699a      	ldr	r2, [r3, #24]
 8007994:	68bb      	ldr	r3, [r7, #8]
 8007996:	18d1      	adds	r1, r2, r3
 8007998:	68bb      	ldr	r3, [r7, #8]
 800799a:	687a      	ldr	r2, [r7, #4]
 800799c:	68f8      	ldr	r0, [r7, #12]
 800799e:	f000 f8dd 	bl	8007b5c <prvInsertTimerInActiveList>
 80079a2:	4603      	mov	r3, r0
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d1ea      	bne.n	800797e <prvReloadTimer+0xe>
        }
    }
 80079a8:	bf00      	nop
 80079aa:	bf00      	nop
 80079ac:	3710      	adds	r7, #16
 80079ae:	46bd      	mov	sp, r7
 80079b0:	bd80      	pop	{r7, pc}
	...

080079b4 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 80079b4:	b580      	push	{r7, lr}
 80079b6:	b084      	sub	sp, #16
 80079b8:	af00      	add	r7, sp, #0
 80079ba:	6078      	str	r0, [r7, #4]
 80079bc:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80079be:	4b14      	ldr	r3, [pc, #80]	; (8007a10 <prvProcessExpiredTimer+0x5c>)
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	68db      	ldr	r3, [r3, #12]
 80079c4:	68db      	ldr	r3, [r3, #12]
 80079c6:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	3304      	adds	r3, #4
 80079cc:	4618      	mov	r0, r3
 80079ce:	f7fe f807 	bl	80059e0 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80079d8:	f003 0304 	and.w	r3, r3, #4
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d005      	beq.n	80079ec <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 80079e0:	683a      	ldr	r2, [r7, #0]
 80079e2:	6879      	ldr	r1, [r7, #4]
 80079e4:	68f8      	ldr	r0, [r7, #12]
 80079e6:	f7ff ffc3 	bl	8007970 <prvReloadTimer>
 80079ea:	e008      	b.n	80079fe <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80079f2:	f023 0301 	bic.w	r3, r3, #1
 80079f6:	b2da      	uxtb	r2, r3
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	6a1b      	ldr	r3, [r3, #32]
 8007a02:	68f8      	ldr	r0, [r7, #12]
 8007a04:	4798      	blx	r3
    }
 8007a06:	bf00      	nop
 8007a08:	3710      	adds	r7, #16
 8007a0a:	46bd      	mov	sp, r7
 8007a0c:	bd80      	pop	{r7, pc}
 8007a0e:	bf00      	nop
 8007a10:	2000030c 	.word	0x2000030c

08007a14 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8007a14:	b580      	push	{r7, lr}
 8007a16:	b084      	sub	sp, #16
 8007a18:	af00      	add	r7, sp, #0
 8007a1a:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007a1c:	f107 0308 	add.w	r3, r7, #8
 8007a20:	4618      	mov	r0, r3
 8007a22:	f000 f857 	bl	8007ad4 <prvGetNextExpireTime>
 8007a26:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007a28:	68bb      	ldr	r3, [r7, #8]
 8007a2a:	4619      	mov	r1, r3
 8007a2c:	68f8      	ldr	r0, [r7, #12]
 8007a2e:	f000 f803 	bl	8007a38 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8007a32:	f000 f8d5 	bl	8007be0 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007a36:	e7f1      	b.n	8007a1c <prvTimerTask+0x8>

08007a38 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8007a38:	b580      	push	{r7, lr}
 8007a3a:	b084      	sub	sp, #16
 8007a3c:	af00      	add	r7, sp, #0
 8007a3e:	6078      	str	r0, [r7, #4]
 8007a40:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8007a42:	f7fe ffb5 	bl	80069b0 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007a46:	f107 0308 	add.w	r3, r7, #8
 8007a4a:	4618      	mov	r0, r3
 8007a4c:	f000 f866 	bl	8007b1c <prvSampleTimeNow>
 8007a50:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8007a52:	68bb      	ldr	r3, [r7, #8]
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d130      	bne.n	8007aba <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007a58:	683b      	ldr	r3, [r7, #0]
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d10a      	bne.n	8007a74 <prvProcessTimerOrBlockTask+0x3c>
 8007a5e:	687a      	ldr	r2, [r7, #4]
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	429a      	cmp	r2, r3
 8007a64:	d806      	bhi.n	8007a74 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8007a66:	f7fe ffb1 	bl	80069cc <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007a6a:	68f9      	ldr	r1, [r7, #12]
 8007a6c:	6878      	ldr	r0, [r7, #4]
 8007a6e:	f7ff ffa1 	bl	80079b4 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8007a72:	e024      	b.n	8007abe <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8007a74:	683b      	ldr	r3, [r7, #0]
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d008      	beq.n	8007a8c <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007a7a:	4b13      	ldr	r3, [pc, #76]	; (8007ac8 <prvProcessTimerOrBlockTask+0x90>)
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d101      	bne.n	8007a88 <prvProcessTimerOrBlockTask+0x50>
 8007a84:	2301      	movs	r3, #1
 8007a86:	e000      	b.n	8007a8a <prvProcessTimerOrBlockTask+0x52>
 8007a88:	2300      	movs	r3, #0
 8007a8a:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007a8c:	4b0f      	ldr	r3, [pc, #60]	; (8007acc <prvProcessTimerOrBlockTask+0x94>)
 8007a8e:	6818      	ldr	r0, [r3, #0]
 8007a90:	687a      	ldr	r2, [r7, #4]
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	1ad3      	subs	r3, r2, r3
 8007a96:	683a      	ldr	r2, [r7, #0]
 8007a98:	4619      	mov	r1, r3
 8007a9a:	f7fe fd71 	bl	8006580 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8007a9e:	f7fe ff95 	bl	80069cc <xTaskResumeAll>
 8007aa2:	4603      	mov	r3, r0
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d10a      	bne.n	8007abe <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8007aa8:	4b09      	ldr	r3, [pc, #36]	; (8007ad0 <prvProcessTimerOrBlockTask+0x98>)
 8007aaa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007aae:	601a      	str	r2, [r3, #0]
 8007ab0:	f3bf 8f4f 	dsb	sy
 8007ab4:	f3bf 8f6f 	isb	sy
    }
 8007ab8:	e001      	b.n	8007abe <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8007aba:	f7fe ff87 	bl	80069cc <xTaskResumeAll>
    }
 8007abe:	bf00      	nop
 8007ac0:	3710      	adds	r7, #16
 8007ac2:	46bd      	mov	sp, r7
 8007ac4:	bd80      	pop	{r7, pc}
 8007ac6:	bf00      	nop
 8007ac8:	20000310 	.word	0x20000310
 8007acc:	20000314 	.word	0x20000314
 8007ad0:	e000ed04 	.word	0xe000ed04

08007ad4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8007ad4:	b480      	push	{r7}
 8007ad6:	b085      	sub	sp, #20
 8007ad8:	af00      	add	r7, sp, #0
 8007ada:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007adc:	4b0e      	ldr	r3, [pc, #56]	; (8007b18 <prvGetNextExpireTime+0x44>)
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d101      	bne.n	8007aea <prvGetNextExpireTime+0x16>
 8007ae6:	2201      	movs	r2, #1
 8007ae8:	e000      	b.n	8007aec <prvGetNextExpireTime+0x18>
 8007aea:	2200      	movs	r2, #0
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d105      	bne.n	8007b04 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007af8:	4b07      	ldr	r3, [pc, #28]	; (8007b18 <prvGetNextExpireTime+0x44>)
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	68db      	ldr	r3, [r3, #12]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	60fb      	str	r3, [r7, #12]
 8007b02:	e001      	b.n	8007b08 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8007b04:	2300      	movs	r3, #0
 8007b06:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8007b08:	68fb      	ldr	r3, [r7, #12]
    }
 8007b0a:	4618      	mov	r0, r3
 8007b0c:	3714      	adds	r7, #20
 8007b0e:	46bd      	mov	sp, r7
 8007b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b14:	4770      	bx	lr
 8007b16:	bf00      	nop
 8007b18:	2000030c 	.word	0x2000030c

08007b1c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8007b1c:	b580      	push	{r7, lr}
 8007b1e:	b084      	sub	sp, #16
 8007b20:	af00      	add	r7, sp, #0
 8007b22:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8007b24:	f7ff f84e 	bl	8006bc4 <xTaskGetTickCount>
 8007b28:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8007b2a:	4b0b      	ldr	r3, [pc, #44]	; (8007b58 <prvSampleTimeNow+0x3c>)
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	68fa      	ldr	r2, [r7, #12]
 8007b30:	429a      	cmp	r2, r3
 8007b32:	d205      	bcs.n	8007b40 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8007b34:	f000 f912 	bl	8007d5c <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	2201      	movs	r2, #1
 8007b3c:	601a      	str	r2, [r3, #0]
 8007b3e:	e002      	b.n	8007b46 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	2200      	movs	r2, #0
 8007b44:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8007b46:	4a04      	ldr	r2, [pc, #16]	; (8007b58 <prvSampleTimeNow+0x3c>)
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8007b4c:	68fb      	ldr	r3, [r7, #12]
    }
 8007b4e:	4618      	mov	r0, r3
 8007b50:	3710      	adds	r7, #16
 8007b52:	46bd      	mov	sp, r7
 8007b54:	bd80      	pop	{r7, pc}
 8007b56:	bf00      	nop
 8007b58:	2000031c 	.word	0x2000031c

08007b5c <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8007b5c:	b580      	push	{r7, lr}
 8007b5e:	b086      	sub	sp, #24
 8007b60:	af00      	add	r7, sp, #0
 8007b62:	60f8      	str	r0, [r7, #12]
 8007b64:	60b9      	str	r1, [r7, #8]
 8007b66:	607a      	str	r2, [r7, #4]
 8007b68:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8007b6a:	2300      	movs	r3, #0
 8007b6c:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	68ba      	ldr	r2, [r7, #8]
 8007b72:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	68fa      	ldr	r2, [r7, #12]
 8007b78:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8007b7a:	68ba      	ldr	r2, [r7, #8]
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	429a      	cmp	r2, r3
 8007b80:	d812      	bhi.n	8007ba8 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007b82:	687a      	ldr	r2, [r7, #4]
 8007b84:	683b      	ldr	r3, [r7, #0]
 8007b86:	1ad2      	subs	r2, r2, r3
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	699b      	ldr	r3, [r3, #24]
 8007b8c:	429a      	cmp	r2, r3
 8007b8e:	d302      	bcc.n	8007b96 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8007b90:	2301      	movs	r3, #1
 8007b92:	617b      	str	r3, [r7, #20]
 8007b94:	e01b      	b.n	8007bce <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007b96:	4b10      	ldr	r3, [pc, #64]	; (8007bd8 <prvInsertTimerInActiveList+0x7c>)
 8007b98:	681a      	ldr	r2, [r3, #0]
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	3304      	adds	r3, #4
 8007b9e:	4619      	mov	r1, r3
 8007ba0:	4610      	mov	r0, r2
 8007ba2:	f7fd fee4 	bl	800596e <vListInsert>
 8007ba6:	e012      	b.n	8007bce <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007ba8:	687a      	ldr	r2, [r7, #4]
 8007baa:	683b      	ldr	r3, [r7, #0]
 8007bac:	429a      	cmp	r2, r3
 8007bae:	d206      	bcs.n	8007bbe <prvInsertTimerInActiveList+0x62>
 8007bb0:	68ba      	ldr	r2, [r7, #8]
 8007bb2:	683b      	ldr	r3, [r7, #0]
 8007bb4:	429a      	cmp	r2, r3
 8007bb6:	d302      	bcc.n	8007bbe <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8007bb8:	2301      	movs	r3, #1
 8007bba:	617b      	str	r3, [r7, #20]
 8007bbc:	e007      	b.n	8007bce <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007bbe:	4b07      	ldr	r3, [pc, #28]	; (8007bdc <prvInsertTimerInActiveList+0x80>)
 8007bc0:	681a      	ldr	r2, [r3, #0]
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	3304      	adds	r3, #4
 8007bc6:	4619      	mov	r1, r3
 8007bc8:	4610      	mov	r0, r2
 8007bca:	f7fd fed0 	bl	800596e <vListInsert>
            }
        }

        return xProcessTimerNow;
 8007bce:	697b      	ldr	r3, [r7, #20]
    }
 8007bd0:	4618      	mov	r0, r3
 8007bd2:	3718      	adds	r7, #24
 8007bd4:	46bd      	mov	sp, r7
 8007bd6:	bd80      	pop	{r7, pc}
 8007bd8:	20000310 	.word	0x20000310
 8007bdc:	2000030c 	.word	0x2000030c

08007be0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8007be0:	b580      	push	{r7, lr}
 8007be2:	b088      	sub	sp, #32
 8007be4:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007be6:	e0a6      	b.n	8007d36 <prvProcessReceivedCommands+0x156>
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007be8:	68bb      	ldr	r3, [r7, #8]
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	f2c0 80a3 	blt.w	8007d36 <prvProcessReceivedCommands+0x156>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007bf0:	693b      	ldr	r3, [r7, #16]
 8007bf2:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007bf4:	69fb      	ldr	r3, [r7, #28]
 8007bf6:	695b      	ldr	r3, [r3, #20]
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d004      	beq.n	8007c06 <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007bfc:	69fb      	ldr	r3, [r7, #28]
 8007bfe:	3304      	adds	r3, #4
 8007c00:	4618      	mov	r0, r3
 8007c02:	f7fd feed 	bl	80059e0 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007c06:	1d3b      	adds	r3, r7, #4
 8007c08:	4618      	mov	r0, r3
 8007c0a:	f7ff ff87 	bl	8007b1c <prvSampleTimeNow>
 8007c0e:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 8007c10:	68bb      	ldr	r3, [r7, #8]
 8007c12:	3b01      	subs	r3, #1
 8007c14:	2b08      	cmp	r3, #8
 8007c16:	f200 808d 	bhi.w	8007d34 <prvProcessReceivedCommands+0x154>
 8007c1a:	a201      	add	r2, pc, #4	; (adr r2, 8007c20 <prvProcessReceivedCommands+0x40>)
 8007c1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c20:	08007c45 	.word	0x08007c45
 8007c24:	08007c45 	.word	0x08007c45
 8007c28:	08007cad 	.word	0x08007cad
 8007c2c:	08007cc1 	.word	0x08007cc1
 8007c30:	08007d0b 	.word	0x08007d0b
 8007c34:	08007c45 	.word	0x08007c45
 8007c38:	08007c45 	.word	0x08007c45
 8007c3c:	08007cad 	.word	0x08007cad
 8007c40:	08007cc1 	.word	0x08007cc1
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007c44:	69fb      	ldr	r3, [r7, #28]
 8007c46:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007c4a:	f043 0301 	orr.w	r3, r3, #1
 8007c4e:	b2da      	uxtb	r2, r3
 8007c50:	69fb      	ldr	r3, [r7, #28]
 8007c52:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007c56:	68fa      	ldr	r2, [r7, #12]
 8007c58:	69fb      	ldr	r3, [r7, #28]
 8007c5a:	699b      	ldr	r3, [r3, #24]
 8007c5c:	18d1      	adds	r1, r2, r3
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	69ba      	ldr	r2, [r7, #24]
 8007c62:	69f8      	ldr	r0, [r7, #28]
 8007c64:	f7ff ff7a 	bl	8007b5c <prvInsertTimerInActiveList>
 8007c68:	4603      	mov	r3, r0
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d063      	beq.n	8007d36 <prvProcessReceivedCommands+0x156>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007c6e:	69fb      	ldr	r3, [r7, #28]
 8007c70:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007c74:	f003 0304 	and.w	r3, r3, #4
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d009      	beq.n	8007c90 <prvProcessReceivedCommands+0xb0>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 8007c7c:	68fa      	ldr	r2, [r7, #12]
 8007c7e:	69fb      	ldr	r3, [r7, #28]
 8007c80:	699b      	ldr	r3, [r3, #24]
 8007c82:	4413      	add	r3, r2
 8007c84:	69ba      	ldr	r2, [r7, #24]
 8007c86:	4619      	mov	r1, r3
 8007c88:	69f8      	ldr	r0, [r7, #28]
 8007c8a:	f7ff fe71 	bl	8007970 <prvReloadTimer>
 8007c8e:	e008      	b.n	8007ca2 <prvProcessReceivedCommands+0xc2>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8007c90:	69fb      	ldr	r3, [r7, #28]
 8007c92:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007c96:	f023 0301 	bic.w	r3, r3, #1
 8007c9a:	b2da      	uxtb	r2, r3
 8007c9c:	69fb      	ldr	r3, [r7, #28]
 8007c9e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007ca2:	69fb      	ldr	r3, [r7, #28]
 8007ca4:	6a1b      	ldr	r3, [r3, #32]
 8007ca6:	69f8      	ldr	r0, [r7, #28]
 8007ca8:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 8007caa:	e044      	b.n	8007d36 <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8007cac:	69fb      	ldr	r3, [r7, #28]
 8007cae:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007cb2:	f023 0301 	bic.w	r3, r3, #1
 8007cb6:	b2da      	uxtb	r2, r3
 8007cb8:	69fb      	ldr	r3, [r7, #28]
 8007cba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
                        break;
 8007cbe:	e03a      	b.n	8007d36 <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007cc0:	69fb      	ldr	r3, [r7, #28]
 8007cc2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007cc6:	f043 0301 	orr.w	r3, r3, #1
 8007cca:	b2da      	uxtb	r2, r3
 8007ccc:	69fb      	ldr	r3, [r7, #28]
 8007cce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007cd2:	68fa      	ldr	r2, [r7, #12]
 8007cd4:	69fb      	ldr	r3, [r7, #28]
 8007cd6:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007cd8:	69fb      	ldr	r3, [r7, #28]
 8007cda:	699b      	ldr	r3, [r3, #24]
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d10a      	bne.n	8007cf6 <prvProcessReceivedCommands+0x116>
        __asm volatile
 8007ce0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ce4:	f383 8811 	msr	BASEPRI, r3
 8007ce8:	f3bf 8f6f 	isb	sy
 8007cec:	f3bf 8f4f 	dsb	sy
 8007cf0:	617b      	str	r3, [r7, #20]
    }
 8007cf2:	bf00      	nop
 8007cf4:	e7fe      	b.n	8007cf4 <prvProcessReceivedCommands+0x114>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007cf6:	69fb      	ldr	r3, [r7, #28]
 8007cf8:	699a      	ldr	r2, [r3, #24]
 8007cfa:	69bb      	ldr	r3, [r7, #24]
 8007cfc:	18d1      	adds	r1, r2, r3
 8007cfe:	69bb      	ldr	r3, [r7, #24]
 8007d00:	69ba      	ldr	r2, [r7, #24]
 8007d02:	69f8      	ldr	r0, [r7, #28]
 8007d04:	f7ff ff2a 	bl	8007b5c <prvInsertTimerInActiveList>
                        break;
 8007d08:	e015      	b.n	8007d36 <prvProcessReceivedCommands+0x156>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8007d0a:	69fb      	ldr	r3, [r7, #28]
 8007d0c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007d10:	f003 0302 	and.w	r3, r3, #2
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d103      	bne.n	8007d20 <prvProcessReceivedCommands+0x140>
                            {
                                vPortFree( pxTimer );
 8007d18:	69f8      	ldr	r0, [r7, #28]
 8007d1a:	f000 fb79 	bl	8008410 <vPortFree>
 8007d1e:	e00a      	b.n	8007d36 <prvProcessReceivedCommands+0x156>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8007d20:	69fb      	ldr	r3, [r7, #28]
 8007d22:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007d26:	f023 0301 	bic.w	r3, r3, #1
 8007d2a:	b2da      	uxtb	r2, r3
 8007d2c:	69fb      	ldr	r3, [r7, #28]
 8007d2e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8007d32:	e000      	b.n	8007d36 <prvProcessReceivedCommands+0x156>

                    default:
                        /* Don't expect to get here. */
                        break;
 8007d34:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007d36:	4b08      	ldr	r3, [pc, #32]	; (8007d58 <prvProcessReceivedCommands+0x178>)
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	f107 0108 	add.w	r1, r7, #8
 8007d3e:	2200      	movs	r2, #0
 8007d40:	4618      	mov	r0, r3
 8007d42:	f7fe f917 	bl	8005f74 <xQueueReceive>
 8007d46:	4603      	mov	r3, r0
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	f47f af4d 	bne.w	8007be8 <prvProcessReceivedCommands+0x8>
                }
            }
        }
    }
 8007d4e:	bf00      	nop
 8007d50:	bf00      	nop
 8007d52:	3720      	adds	r7, #32
 8007d54:	46bd      	mov	sp, r7
 8007d56:	bd80      	pop	{r7, pc}
 8007d58:	20000314 	.word	0x20000314

08007d5c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8007d5c:	b580      	push	{r7, lr}
 8007d5e:	b082      	sub	sp, #8
 8007d60:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007d62:	e009      	b.n	8007d78 <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007d64:	4b0e      	ldr	r3, [pc, #56]	; (8007da0 <prvSwitchTimerLists+0x44>)
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	68db      	ldr	r3, [r3, #12]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 8007d6e:	f04f 31ff 	mov.w	r1, #4294967295
 8007d72:	6838      	ldr	r0, [r7, #0]
 8007d74:	f7ff fe1e 	bl	80079b4 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007d78:	4b09      	ldr	r3, [pc, #36]	; (8007da0 <prvSwitchTimerLists+0x44>)
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d1f0      	bne.n	8007d64 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 8007d82:	4b07      	ldr	r3, [pc, #28]	; (8007da0 <prvSwitchTimerLists+0x44>)
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 8007d88:	4b06      	ldr	r3, [pc, #24]	; (8007da4 <prvSwitchTimerLists+0x48>)
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	4a04      	ldr	r2, [pc, #16]	; (8007da0 <prvSwitchTimerLists+0x44>)
 8007d8e:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8007d90:	4a04      	ldr	r2, [pc, #16]	; (8007da4 <prvSwitchTimerLists+0x48>)
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	6013      	str	r3, [r2, #0]
    }
 8007d96:	bf00      	nop
 8007d98:	3708      	adds	r7, #8
 8007d9a:	46bd      	mov	sp, r7
 8007d9c:	bd80      	pop	{r7, pc}
 8007d9e:	bf00      	nop
 8007da0:	2000030c 	.word	0x2000030c
 8007da4:	20000310 	.word	0x20000310

08007da8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8007da8:	b580      	push	{r7, lr}
 8007daa:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8007dac:	f000 f954 	bl	8008058 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8007db0:	4b0d      	ldr	r3, [pc, #52]	; (8007de8 <prvCheckForValidListAndQueue+0x40>)
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d113      	bne.n	8007de0 <prvCheckForValidListAndQueue+0x38>
            {
                vListInitialise( &xActiveTimerList1 );
 8007db8:	480c      	ldr	r0, [pc, #48]	; (8007dec <prvCheckForValidListAndQueue+0x44>)
 8007dba:	f7fd fdab 	bl	8005914 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8007dbe:	480c      	ldr	r0, [pc, #48]	; (8007df0 <prvCheckForValidListAndQueue+0x48>)
 8007dc0:	f7fd fda8 	bl	8005914 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8007dc4:	4b0b      	ldr	r3, [pc, #44]	; (8007df4 <prvCheckForValidListAndQueue+0x4c>)
 8007dc6:	4a09      	ldr	r2, [pc, #36]	; (8007dec <prvCheckForValidListAndQueue+0x44>)
 8007dc8:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8007dca:	4b0b      	ldr	r3, [pc, #44]	; (8007df8 <prvCheckForValidListAndQueue+0x50>)
 8007dcc:	4a08      	ldr	r2, [pc, #32]	; (8007df0 <prvCheckForValidListAndQueue+0x48>)
 8007dce:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8007dd0:	2200      	movs	r2, #0
 8007dd2:	210c      	movs	r1, #12
 8007dd4:	2005      	movs	r0, #5
 8007dd6:	f7fd febd 	bl	8005b54 <xQueueGenericCreate>
 8007dda:	4603      	mov	r3, r0
 8007ddc:	4a02      	ldr	r2, [pc, #8]	; (8007de8 <prvCheckForValidListAndQueue+0x40>)
 8007dde:	6013      	str	r3, [r2, #0]
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8007de0:	f000 f96a 	bl	80080b8 <vPortExitCritical>
    }
 8007de4:	bf00      	nop
 8007de6:	bd80      	pop	{r7, pc}
 8007de8:	20000314 	.word	0x20000314
 8007dec:	200002e4 	.word	0x200002e4
 8007df0:	200002f8 	.word	0x200002f8
 8007df4:	2000030c 	.word	0x2000030c
 8007df8:	20000310 	.word	0x20000310

08007dfc <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8007dfc:	b480      	push	{r7}
 8007dfe:	b085      	sub	sp, #20
 8007e00:	af00      	add	r7, sp, #0
 8007e02:	60f8      	str	r0, [r7, #12]
 8007e04:	60b9      	str	r1, [r7, #8]
 8007e06:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	3b04      	subs	r3, #4
 8007e0c:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007e14:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	3b04      	subs	r3, #4
 8007e1a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8007e1c:	68bb      	ldr	r3, [r7, #8]
 8007e1e:	f023 0201 	bic.w	r2, r3, #1
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	3b04      	subs	r3, #4
 8007e2a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8007e2c:	4a0c      	ldr	r2, [pc, #48]	; (8007e60 <pxPortInitialiseStack+0x64>)
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	3b14      	subs	r3, #20
 8007e36:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8007e38:	687a      	ldr	r2, [r7, #4]
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	3b04      	subs	r3, #4
 8007e42:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	f06f 0202 	mvn.w	r2, #2
 8007e4a:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	3b20      	subs	r3, #32
 8007e50:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8007e52:	68fb      	ldr	r3, [r7, #12]
}
 8007e54:	4618      	mov	r0, r3
 8007e56:	3714      	adds	r7, #20
 8007e58:	46bd      	mov	sp, r7
 8007e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e5e:	4770      	bx	lr
 8007e60:	08007e65 	.word	0x08007e65

08007e64 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007e64:	b480      	push	{r7}
 8007e66:	b085      	sub	sp, #20
 8007e68:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8007e6a:	2300      	movs	r3, #0
 8007e6c:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8007e6e:	4b12      	ldr	r3, [pc, #72]	; (8007eb8 <prvTaskExitError+0x54>)
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e76:	d00a      	beq.n	8007e8e <prvTaskExitError+0x2a>
        __asm volatile
 8007e78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e7c:	f383 8811 	msr	BASEPRI, r3
 8007e80:	f3bf 8f6f 	isb	sy
 8007e84:	f3bf 8f4f 	dsb	sy
 8007e88:	60fb      	str	r3, [r7, #12]
    }
 8007e8a:	bf00      	nop
 8007e8c:	e7fe      	b.n	8007e8c <prvTaskExitError+0x28>
        __asm volatile
 8007e8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e92:	f383 8811 	msr	BASEPRI, r3
 8007e96:	f3bf 8f6f 	isb	sy
 8007e9a:	f3bf 8f4f 	dsb	sy
 8007e9e:	60bb      	str	r3, [r7, #8]
    }
 8007ea0:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8007ea2:	bf00      	nop
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d0fc      	beq.n	8007ea4 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8007eaa:	bf00      	nop
 8007eac:	bf00      	nop
 8007eae:	3714      	adds	r7, #20
 8007eb0:	46bd      	mov	sp, r7
 8007eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb6:	4770      	bx	lr
 8007eb8:	20000010 	.word	0x20000010
 8007ebc:	00000000 	.word	0x00000000

08007ec0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8007ec0:	4b07      	ldr	r3, [pc, #28]	; (8007ee0 <pxCurrentTCBConst2>)
 8007ec2:	6819      	ldr	r1, [r3, #0]
 8007ec4:	6808      	ldr	r0, [r1, #0]
 8007ec6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007eca:	f380 8809 	msr	PSP, r0
 8007ece:	f3bf 8f6f 	isb	sy
 8007ed2:	f04f 0000 	mov.w	r0, #0
 8007ed6:	f380 8811 	msr	BASEPRI, r0
 8007eda:	4770      	bx	lr
 8007edc:	f3af 8000 	nop.w

08007ee0 <pxCurrentTCBConst2>:
 8007ee0:	200001e0 	.word	0x200001e0
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8007ee4:	bf00      	nop
 8007ee6:	bf00      	nop

08007ee8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8007ee8:	4808      	ldr	r0, [pc, #32]	; (8007f0c <prvPortStartFirstTask+0x24>)
 8007eea:	6800      	ldr	r0, [r0, #0]
 8007eec:	6800      	ldr	r0, [r0, #0]
 8007eee:	f380 8808 	msr	MSP, r0
 8007ef2:	f04f 0000 	mov.w	r0, #0
 8007ef6:	f380 8814 	msr	CONTROL, r0
 8007efa:	b662      	cpsie	i
 8007efc:	b661      	cpsie	f
 8007efe:	f3bf 8f4f 	dsb	sy
 8007f02:	f3bf 8f6f 	isb	sy
 8007f06:	df00      	svc	0
 8007f08:	bf00      	nop
 8007f0a:	0000      	.short	0x0000
 8007f0c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8007f10:	bf00      	nop
 8007f12:	bf00      	nop

08007f14 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007f14:	b580      	push	{r7, lr}
 8007f16:	b086      	sub	sp, #24
 8007f18:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007f1a:	4b46      	ldr	r3, [pc, #280]	; (8008034 <xPortStartScheduler+0x120>)
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	4a46      	ldr	r2, [pc, #280]	; (8008038 <xPortStartScheduler+0x124>)
 8007f20:	4293      	cmp	r3, r2
 8007f22:	d10a      	bne.n	8007f3a <xPortStartScheduler+0x26>
        __asm volatile
 8007f24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f28:	f383 8811 	msr	BASEPRI, r3
 8007f2c:	f3bf 8f6f 	isb	sy
 8007f30:	f3bf 8f4f 	dsb	sy
 8007f34:	613b      	str	r3, [r7, #16]
    }
 8007f36:	bf00      	nop
 8007f38:	e7fe      	b.n	8007f38 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007f3a:	4b3e      	ldr	r3, [pc, #248]	; (8008034 <xPortStartScheduler+0x120>)
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	4a3f      	ldr	r2, [pc, #252]	; (800803c <xPortStartScheduler+0x128>)
 8007f40:	4293      	cmp	r3, r2
 8007f42:	d10a      	bne.n	8007f5a <xPortStartScheduler+0x46>
        __asm volatile
 8007f44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f48:	f383 8811 	msr	BASEPRI, r3
 8007f4c:	f3bf 8f6f 	isb	sy
 8007f50:	f3bf 8f4f 	dsb	sy
 8007f54:	60fb      	str	r3, [r7, #12]
    }
 8007f56:	bf00      	nop
 8007f58:	e7fe      	b.n	8007f58 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint32_t ulOriginalPriority;
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007f5a:	4b39      	ldr	r3, [pc, #228]	; (8008040 <xPortStartScheduler+0x12c>)
 8007f5c:	617b      	str	r3, [r7, #20]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007f5e:	697b      	ldr	r3, [r7, #20]
 8007f60:	781b      	ldrb	r3, [r3, #0]
 8007f62:	b2db      	uxtb	r3, r3
 8007f64:	607b      	str	r3, [r7, #4]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007f66:	697b      	ldr	r3, [r7, #20]
 8007f68:	22ff      	movs	r2, #255	; 0xff
 8007f6a:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007f6c:	697b      	ldr	r3, [r7, #20]
 8007f6e:	781b      	ldrb	r3, [r3, #0]
 8007f70:	b2db      	uxtb	r3, r3
 8007f72:	70fb      	strb	r3, [r7, #3]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007f74:	78fb      	ldrb	r3, [r7, #3]
 8007f76:	b2db      	uxtb	r3, r3
 8007f78:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007f7c:	b2da      	uxtb	r2, r3
 8007f7e:	4b31      	ldr	r3, [pc, #196]	; (8008044 <xPortStartScheduler+0x130>)
 8007f80:	701a      	strb	r2, [r3, #0]

        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */
        ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007f82:	4b31      	ldr	r3, [pc, #196]	; (8008048 <xPortStartScheduler+0x134>)
 8007f84:	2207      	movs	r2, #7
 8007f86:	601a      	str	r2, [r3, #0]

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007f88:	e009      	b.n	8007f9e <xPortStartScheduler+0x8a>
        {
            ulMaxPRIGROUPValue--;
 8007f8a:	4b2f      	ldr	r3, [pc, #188]	; (8008048 <xPortStartScheduler+0x134>)
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	3b01      	subs	r3, #1
 8007f90:	4a2d      	ldr	r2, [pc, #180]	; (8008048 <xPortStartScheduler+0x134>)
 8007f92:	6013      	str	r3, [r2, #0]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007f94:	78fb      	ldrb	r3, [r7, #3]
 8007f96:	b2db      	uxtb	r3, r3
 8007f98:	005b      	lsls	r3, r3, #1
 8007f9a:	b2db      	uxtb	r3, r3
 8007f9c:	70fb      	strb	r3, [r7, #3]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007f9e:	78fb      	ldrb	r3, [r7, #3]
 8007fa0:	b2db      	uxtb	r3, r3
 8007fa2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007fa6:	2b80      	cmp	r3, #128	; 0x80
 8007fa8:	d0ef      	beq.n	8007f8a <xPortStartScheduler+0x76>
        #ifdef configPRIO_BITS
        {
            /* Check the FreeRTOS configuration that defines the number of
             * priority bits matches the number of priority bits actually queried
             * from the hardware. */
            configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007faa:	4b27      	ldr	r3, [pc, #156]	; (8008048 <xPortStartScheduler+0x134>)
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	f1c3 0307 	rsb	r3, r3, #7
 8007fb2:	2b04      	cmp	r3, #4
 8007fb4:	d00a      	beq.n	8007fcc <xPortStartScheduler+0xb8>
        __asm volatile
 8007fb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fba:	f383 8811 	msr	BASEPRI, r3
 8007fbe:	f3bf 8f6f 	isb	sy
 8007fc2:	f3bf 8f4f 	dsb	sy
 8007fc6:	60bb      	str	r3, [r7, #8]
    }
 8007fc8:	bf00      	nop
 8007fca:	e7fe      	b.n	8007fca <xPortStartScheduler+0xb6>
        }
        #endif

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007fcc:	4b1e      	ldr	r3, [pc, #120]	; (8008048 <xPortStartScheduler+0x134>)
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	021b      	lsls	r3, r3, #8
 8007fd2:	4a1d      	ldr	r2, [pc, #116]	; (8008048 <xPortStartScheduler+0x134>)
 8007fd4:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007fd6:	4b1c      	ldr	r3, [pc, #112]	; (8008048 <xPortStartScheduler+0x134>)
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007fde:	4a1a      	ldr	r2, [pc, #104]	; (8008048 <xPortStartScheduler+0x134>)
 8007fe0:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ulOriginalPriority;
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	b2da      	uxtb	r2, r3
 8007fe6:	697b      	ldr	r3, [r7, #20]
 8007fe8:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8007fea:	4b18      	ldr	r3, [pc, #96]	; (800804c <xPortStartScheduler+0x138>)
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	4a17      	ldr	r2, [pc, #92]	; (800804c <xPortStartScheduler+0x138>)
 8007ff0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007ff4:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8007ff6:	4b15      	ldr	r3, [pc, #84]	; (800804c <xPortStartScheduler+0x138>)
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	4a14      	ldr	r2, [pc, #80]	; (800804c <xPortStartScheduler+0x138>)
 8007ffc:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8008000:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8008002:	f000 f8db 	bl	80081bc <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8008006:	4b12      	ldr	r3, [pc, #72]	; (8008050 <xPortStartScheduler+0x13c>)
 8008008:	2200      	movs	r2, #0
 800800a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 800800c:	f000 f8fa 	bl	8008204 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008010:	4b10      	ldr	r3, [pc, #64]	; (8008054 <xPortStartScheduler+0x140>)
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	4a0f      	ldr	r2, [pc, #60]	; (8008054 <xPortStartScheduler+0x140>)
 8008016:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800801a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 800801c:	f7ff ff64 	bl	8007ee8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8008020:	f7fe ff02 	bl	8006e28 <vTaskSwitchContext>
    prvTaskExitError();
 8008024:	f7ff ff1e 	bl	8007e64 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8008028:	2300      	movs	r3, #0
}
 800802a:	4618      	mov	r0, r3
 800802c:	3718      	adds	r7, #24
 800802e:	46bd      	mov	sp, r7
 8008030:	bd80      	pop	{r7, pc}
 8008032:	bf00      	nop
 8008034:	e000ed00 	.word	0xe000ed00
 8008038:	410fc271 	.word	0x410fc271
 800803c:	410fc270 	.word	0x410fc270
 8008040:	e000e400 	.word	0xe000e400
 8008044:	20000320 	.word	0x20000320
 8008048:	20000324 	.word	0x20000324
 800804c:	e000ed20 	.word	0xe000ed20
 8008050:	20000010 	.word	0x20000010
 8008054:	e000ef34 	.word	0xe000ef34

08008058 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008058:	b480      	push	{r7}
 800805a:	b083      	sub	sp, #12
 800805c:	af00      	add	r7, sp, #0
        __asm volatile
 800805e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008062:	f383 8811 	msr	BASEPRI, r3
 8008066:	f3bf 8f6f 	isb	sy
 800806a:	f3bf 8f4f 	dsb	sy
 800806e:	607b      	str	r3, [r7, #4]
    }
 8008070:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8008072:	4b0f      	ldr	r3, [pc, #60]	; (80080b0 <vPortEnterCritical+0x58>)
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	3301      	adds	r3, #1
 8008078:	4a0d      	ldr	r2, [pc, #52]	; (80080b0 <vPortEnterCritical+0x58>)
 800807a:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 800807c:	4b0c      	ldr	r3, [pc, #48]	; (80080b0 <vPortEnterCritical+0x58>)
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	2b01      	cmp	r3, #1
 8008082:	d10f      	bne.n	80080a4 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008084:	4b0b      	ldr	r3, [pc, #44]	; (80080b4 <vPortEnterCritical+0x5c>)
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	b2db      	uxtb	r3, r3
 800808a:	2b00      	cmp	r3, #0
 800808c:	d00a      	beq.n	80080a4 <vPortEnterCritical+0x4c>
        __asm volatile
 800808e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008092:	f383 8811 	msr	BASEPRI, r3
 8008096:	f3bf 8f6f 	isb	sy
 800809a:	f3bf 8f4f 	dsb	sy
 800809e:	603b      	str	r3, [r7, #0]
    }
 80080a0:	bf00      	nop
 80080a2:	e7fe      	b.n	80080a2 <vPortEnterCritical+0x4a>
    }
}
 80080a4:	bf00      	nop
 80080a6:	370c      	adds	r7, #12
 80080a8:	46bd      	mov	sp, r7
 80080aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ae:	4770      	bx	lr
 80080b0:	20000010 	.word	0x20000010
 80080b4:	e000ed04 	.word	0xe000ed04

080080b8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80080b8:	b480      	push	{r7}
 80080ba:	b083      	sub	sp, #12
 80080bc:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 80080be:	4b12      	ldr	r3, [pc, #72]	; (8008108 <vPortExitCritical+0x50>)
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d10a      	bne.n	80080dc <vPortExitCritical+0x24>
        __asm volatile
 80080c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080ca:	f383 8811 	msr	BASEPRI, r3
 80080ce:	f3bf 8f6f 	isb	sy
 80080d2:	f3bf 8f4f 	dsb	sy
 80080d6:	607b      	str	r3, [r7, #4]
    }
 80080d8:	bf00      	nop
 80080da:	e7fe      	b.n	80080da <vPortExitCritical+0x22>
    uxCriticalNesting--;
 80080dc:	4b0a      	ldr	r3, [pc, #40]	; (8008108 <vPortExitCritical+0x50>)
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	3b01      	subs	r3, #1
 80080e2:	4a09      	ldr	r2, [pc, #36]	; (8008108 <vPortExitCritical+0x50>)
 80080e4:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 80080e6:	4b08      	ldr	r3, [pc, #32]	; (8008108 <vPortExitCritical+0x50>)
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d105      	bne.n	80080fa <vPortExitCritical+0x42>
 80080ee:	2300      	movs	r3, #0
 80080f0:	603b      	str	r3, [r7, #0]
        __asm volatile
 80080f2:	683b      	ldr	r3, [r7, #0]
 80080f4:	f383 8811 	msr	BASEPRI, r3
    }
 80080f8:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 80080fa:	bf00      	nop
 80080fc:	370c      	adds	r7, #12
 80080fe:	46bd      	mov	sp, r7
 8008100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008104:	4770      	bx	lr
 8008106:	bf00      	nop
 8008108:	20000010 	.word	0x20000010
 800810c:	00000000 	.word	0x00000000

08008110 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8008110:	f3ef 8009 	mrs	r0, PSP
 8008114:	f3bf 8f6f 	isb	sy
 8008118:	4b15      	ldr	r3, [pc, #84]	; (8008170 <pxCurrentTCBConst>)
 800811a:	681a      	ldr	r2, [r3, #0]
 800811c:	f01e 0f10 	tst.w	lr, #16
 8008120:	bf08      	it	eq
 8008122:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008126:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800812a:	6010      	str	r0, [r2, #0]
 800812c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008130:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008134:	f380 8811 	msr	BASEPRI, r0
 8008138:	f3bf 8f4f 	dsb	sy
 800813c:	f3bf 8f6f 	isb	sy
 8008140:	f7fe fe72 	bl	8006e28 <vTaskSwitchContext>
 8008144:	f04f 0000 	mov.w	r0, #0
 8008148:	f380 8811 	msr	BASEPRI, r0
 800814c:	bc09      	pop	{r0, r3}
 800814e:	6819      	ldr	r1, [r3, #0]
 8008150:	6808      	ldr	r0, [r1, #0]
 8008152:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008156:	f01e 0f10 	tst.w	lr, #16
 800815a:	bf08      	it	eq
 800815c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008160:	f380 8809 	msr	PSP, r0
 8008164:	f3bf 8f6f 	isb	sy
 8008168:	4770      	bx	lr
 800816a:	bf00      	nop
 800816c:	f3af 8000 	nop.w

08008170 <pxCurrentTCBConst>:
 8008170:	200001e0 	.word	0x200001e0
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8008174:	bf00      	nop
 8008176:	bf00      	nop

08008178 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008178:	b580      	push	{r7, lr}
 800817a:	b082      	sub	sp, #8
 800817c:	af00      	add	r7, sp, #0
        __asm volatile
 800817e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008182:	f383 8811 	msr	BASEPRI, r3
 8008186:	f3bf 8f6f 	isb	sy
 800818a:	f3bf 8f4f 	dsb	sy
 800818e:	607b      	str	r3, [r7, #4]
    }
 8008190:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8008192:	f7fe fd33 	bl	8006bfc <xTaskIncrementTick>
 8008196:	4603      	mov	r3, r0
 8008198:	2b00      	cmp	r3, #0
 800819a:	d003      	beq.n	80081a4 <SysTick_Handler+0x2c>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800819c:	4b06      	ldr	r3, [pc, #24]	; (80081b8 <SysTick_Handler+0x40>)
 800819e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80081a2:	601a      	str	r2, [r3, #0]
 80081a4:	2300      	movs	r3, #0
 80081a6:	603b      	str	r3, [r7, #0]
        __asm volatile
 80081a8:	683b      	ldr	r3, [r7, #0]
 80081aa:	f383 8811 	msr	BASEPRI, r3
    }
 80081ae:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 80081b0:	bf00      	nop
 80081b2:	3708      	adds	r7, #8
 80081b4:	46bd      	mov	sp, r7
 80081b6:	bd80      	pop	{r7, pc}
 80081b8:	e000ed04 	.word	0xe000ed04

080081bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 80081bc:	b480      	push	{r7}
 80081be:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 80081c0:	4b0b      	ldr	r3, [pc, #44]	; (80081f0 <vPortSetupTimerInterrupt+0x34>)
 80081c2:	2200      	movs	r2, #0
 80081c4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80081c6:	4b0b      	ldr	r3, [pc, #44]	; (80081f4 <vPortSetupTimerInterrupt+0x38>)
 80081c8:	2200      	movs	r2, #0
 80081ca:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80081cc:	4b0a      	ldr	r3, [pc, #40]	; (80081f8 <vPortSetupTimerInterrupt+0x3c>)
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	4a0a      	ldr	r2, [pc, #40]	; (80081fc <vPortSetupTimerInterrupt+0x40>)
 80081d2:	fba2 2303 	umull	r2, r3, r2, r3
 80081d6:	099b      	lsrs	r3, r3, #6
 80081d8:	4a09      	ldr	r2, [pc, #36]	; (8008200 <vPortSetupTimerInterrupt+0x44>)
 80081da:	3b01      	subs	r3, #1
 80081dc:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80081de:	4b04      	ldr	r3, [pc, #16]	; (80081f0 <vPortSetupTimerInterrupt+0x34>)
 80081e0:	2207      	movs	r2, #7
 80081e2:	601a      	str	r2, [r3, #0]
}
 80081e4:	bf00      	nop
 80081e6:	46bd      	mov	sp, r7
 80081e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ec:	4770      	bx	lr
 80081ee:	bf00      	nop
 80081f0:	e000e010 	.word	0xe000e010
 80081f4:	e000e018 	.word	0xe000e018
 80081f8:	20000000 	.word	0x20000000
 80081fc:	10624dd3 	.word	0x10624dd3
 8008200:	e000e014 	.word	0xe000e014

08008204 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8008204:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008214 <vPortEnableVFP+0x10>
 8008208:	6801      	ldr	r1, [r0, #0]
 800820a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800820e:	6001      	str	r1, [r0, #0]
 8008210:	4770      	bx	lr
 8008212:	0000      	.short	0x0000
 8008214:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8008218:	bf00      	nop
 800821a:	bf00      	nop

0800821c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 800821c:	b480      	push	{r7}
 800821e:	b085      	sub	sp, #20
 8008220:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8008222:	f3ef 8305 	mrs	r3, IPSR
 8008226:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	2b0f      	cmp	r3, #15
 800822c:	d914      	bls.n	8008258 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800822e:	4a17      	ldr	r2, [pc, #92]	; (800828c <vPortValidateInterruptPriority+0x70>)
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	4413      	add	r3, r2
 8008234:	781b      	ldrb	r3, [r3, #0]
 8008236:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008238:	4b15      	ldr	r3, [pc, #84]	; (8008290 <vPortValidateInterruptPriority+0x74>)
 800823a:	781b      	ldrb	r3, [r3, #0]
 800823c:	7afa      	ldrb	r2, [r7, #11]
 800823e:	429a      	cmp	r2, r3
 8008240:	d20a      	bcs.n	8008258 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 8008242:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008246:	f383 8811 	msr	BASEPRI, r3
 800824a:	f3bf 8f6f 	isb	sy
 800824e:	f3bf 8f4f 	dsb	sy
 8008252:	607b      	str	r3, [r7, #4]
    }
 8008254:	bf00      	nop
 8008256:	e7fe      	b.n	8008256 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008258:	4b0e      	ldr	r3, [pc, #56]	; (8008294 <vPortValidateInterruptPriority+0x78>)
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8008260:	4b0d      	ldr	r3, [pc, #52]	; (8008298 <vPortValidateInterruptPriority+0x7c>)
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	429a      	cmp	r2, r3
 8008266:	d90a      	bls.n	800827e <vPortValidateInterruptPriority+0x62>
        __asm volatile
 8008268:	f04f 0350 	mov.w	r3, #80	; 0x50
 800826c:	f383 8811 	msr	BASEPRI, r3
 8008270:	f3bf 8f6f 	isb	sy
 8008274:	f3bf 8f4f 	dsb	sy
 8008278:	603b      	str	r3, [r7, #0]
    }
 800827a:	bf00      	nop
 800827c:	e7fe      	b.n	800827c <vPortValidateInterruptPriority+0x60>
    }
 800827e:	bf00      	nop
 8008280:	3714      	adds	r7, #20
 8008282:	46bd      	mov	sp, r7
 8008284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008288:	4770      	bx	lr
 800828a:	bf00      	nop
 800828c:	e000e3f0 	.word	0xe000e3f0
 8008290:	20000320 	.word	0x20000320
 8008294:	e000ed0c 	.word	0xe000ed0c
 8008298:	20000324 	.word	0x20000324

0800829c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800829c:	b580      	push	{r7, lr}
 800829e:	b08a      	sub	sp, #40	; 0x28
 80082a0:	af00      	add	r7, sp, #0
 80082a2:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 80082a4:	2300      	movs	r3, #0
 80082a6:	61fb      	str	r3, [r7, #28]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 80082a8:	f7fe fb82 	bl	80069b0 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 80082ac:	4b53      	ldr	r3, [pc, #332]	; (80083fc <pvPortMalloc+0x160>)
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d101      	bne.n	80082b8 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 80082b4:	f000 f908 	bl	80084c8 <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d012      	beq.n	80082e4 <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 80082be:	2208      	movs	r2, #8
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	f003 0307 	and.w	r3, r3, #7
 80082c6:	1ad3      	subs	r3, r2, r3
 80082c8:	3308      	adds	r3, #8
 80082ca:	61bb      	str	r3, [r7, #24]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 80082cc:	69bb      	ldr	r3, [r7, #24]
 80082ce:	43db      	mvns	r3, r3
 80082d0:	687a      	ldr	r2, [r7, #4]
 80082d2:	429a      	cmp	r2, r3
 80082d4:	d804      	bhi.n	80082e0 <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 80082d6:	687a      	ldr	r2, [r7, #4]
 80082d8:	69bb      	ldr	r3, [r7, #24]
 80082da:	4413      	add	r3, r2
 80082dc:	607b      	str	r3, [r7, #4]
 80082de:	e001      	b.n	80082e4 <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 80082e0:	2300      	movs	r3, #0
 80082e2:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	db70      	blt.n	80083cc <pvPortMalloc+0x130>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d06d      	beq.n	80083cc <pvPortMalloc+0x130>
 80082f0:	4b43      	ldr	r3, [pc, #268]	; (8008400 <pvPortMalloc+0x164>)
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	687a      	ldr	r2, [r7, #4]
 80082f6:	429a      	cmp	r2, r3
 80082f8:	d868      	bhi.n	80083cc <pvPortMalloc+0x130>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 80082fa:	4b42      	ldr	r3, [pc, #264]	; (8008404 <pvPortMalloc+0x168>)
 80082fc:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 80082fe:	4b41      	ldr	r3, [pc, #260]	; (8008404 <pvPortMalloc+0x168>)
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008304:	e004      	b.n	8008310 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 8008306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008308:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 800830a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008312:	685b      	ldr	r3, [r3, #4]
 8008314:	687a      	ldr	r2, [r7, #4]
 8008316:	429a      	cmp	r2, r3
 8008318:	d903      	bls.n	8008322 <pvPortMalloc+0x86>
 800831a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	2b00      	cmp	r3, #0
 8008320:	d1f1      	bne.n	8008306 <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8008322:	4b36      	ldr	r3, [pc, #216]	; (80083fc <pvPortMalloc+0x160>)
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008328:	429a      	cmp	r2, r3
 800832a:	d04f      	beq.n	80083cc <pvPortMalloc+0x130>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800832c:	6a3b      	ldr	r3, [r7, #32]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	2208      	movs	r2, #8
 8008332:	4413      	add	r3, r2
 8008334:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008338:	681a      	ldr	r2, [r3, #0]
 800833a:	6a3b      	ldr	r3, [r7, #32]
 800833c:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800833e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008340:	685a      	ldr	r2, [r3, #4]
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	1ad2      	subs	r2, r2, r3
 8008346:	2308      	movs	r3, #8
 8008348:	005b      	lsls	r3, r3, #1
 800834a:	429a      	cmp	r2, r3
 800834c:	d91f      	bls.n	800838e <pvPortMalloc+0xf2>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800834e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	4413      	add	r3, r2
 8008354:	617b      	str	r3, [r7, #20]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008356:	697b      	ldr	r3, [r7, #20]
 8008358:	f003 0307 	and.w	r3, r3, #7
 800835c:	2b00      	cmp	r3, #0
 800835e:	d00a      	beq.n	8008376 <pvPortMalloc+0xda>
        __asm volatile
 8008360:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008364:	f383 8811 	msr	BASEPRI, r3
 8008368:	f3bf 8f6f 	isb	sy
 800836c:	f3bf 8f4f 	dsb	sy
 8008370:	613b      	str	r3, [r7, #16]
    }
 8008372:	bf00      	nop
 8008374:	e7fe      	b.n	8008374 <pvPortMalloc+0xd8>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008378:	685a      	ldr	r2, [r3, #4]
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	1ad2      	subs	r2, r2, r3
 800837e:	697b      	ldr	r3, [r7, #20]
 8008380:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8008382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008384:	687a      	ldr	r2, [r7, #4]
 8008386:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008388:	6978      	ldr	r0, [r7, #20]
 800838a:	f000 f8f9 	bl	8008580 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 800838e:	4b1c      	ldr	r3, [pc, #112]	; (8008400 <pvPortMalloc+0x164>)
 8008390:	681a      	ldr	r2, [r3, #0]
 8008392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008394:	685b      	ldr	r3, [r3, #4]
 8008396:	1ad3      	subs	r3, r2, r3
 8008398:	4a19      	ldr	r2, [pc, #100]	; (8008400 <pvPortMalloc+0x164>)
 800839a:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800839c:	4b18      	ldr	r3, [pc, #96]	; (8008400 <pvPortMalloc+0x164>)
 800839e:	681a      	ldr	r2, [r3, #0]
 80083a0:	4b19      	ldr	r3, [pc, #100]	; (8008408 <pvPortMalloc+0x16c>)
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	429a      	cmp	r2, r3
 80083a6:	d203      	bcs.n	80083b0 <pvPortMalloc+0x114>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80083a8:	4b15      	ldr	r3, [pc, #84]	; (8008400 <pvPortMalloc+0x164>)
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	4a16      	ldr	r2, [pc, #88]	; (8008408 <pvPortMalloc+0x16c>)
 80083ae:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 80083b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083b2:	685b      	ldr	r3, [r3, #4]
 80083b4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80083b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083ba:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 80083bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083be:	2200      	movs	r2, #0
 80083c0:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 80083c2:	4b12      	ldr	r3, [pc, #72]	; (800840c <pvPortMalloc+0x170>)
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	3301      	adds	r3, #1
 80083c8:	4a10      	ldr	r2, [pc, #64]	; (800840c <pvPortMalloc+0x170>)
 80083ca:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 80083cc:	f7fe fafe 	bl	80069cc <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80083d0:	69fb      	ldr	r3, [r7, #28]
 80083d2:	f003 0307 	and.w	r3, r3, #7
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d00a      	beq.n	80083f0 <pvPortMalloc+0x154>
        __asm volatile
 80083da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083de:	f383 8811 	msr	BASEPRI, r3
 80083e2:	f3bf 8f6f 	isb	sy
 80083e6:	f3bf 8f4f 	dsb	sy
 80083ea:	60fb      	str	r3, [r7, #12]
    }
 80083ec:	bf00      	nop
 80083ee:	e7fe      	b.n	80083ee <pvPortMalloc+0x152>
    return pvReturn;
 80083f0:	69fb      	ldr	r3, [r7, #28]
}
 80083f2:	4618      	mov	r0, r3
 80083f4:	3728      	adds	r7, #40	; 0x28
 80083f6:	46bd      	mov	sp, r7
 80083f8:	bd80      	pop	{r7, pc}
 80083fa:	bf00      	nop
 80083fc:	2001e330 	.word	0x2001e330
 8008400:	2001e334 	.word	0x2001e334
 8008404:	2001e328 	.word	0x2001e328
 8008408:	2001e338 	.word	0x2001e338
 800840c:	2001e33c 	.word	0x2001e33c

08008410 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8008410:	b580      	push	{r7, lr}
 8008412:	b086      	sub	sp, #24
 8008414:	af00      	add	r7, sp, #0
 8008416:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	2b00      	cmp	r3, #0
 8008420:	d049      	beq.n	80084b6 <vPortFree+0xa6>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8008422:	2308      	movs	r3, #8
 8008424:	425b      	negs	r3, r3
 8008426:	697a      	ldr	r2, [r7, #20]
 8008428:	4413      	add	r3, r2
 800842a:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 800842c:	697b      	ldr	r3, [r7, #20]
 800842e:	613b      	str	r3, [r7, #16]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 8008430:	693b      	ldr	r3, [r7, #16]
 8008432:	685b      	ldr	r3, [r3, #4]
 8008434:	2b00      	cmp	r3, #0
 8008436:	db0a      	blt.n	800844e <vPortFree+0x3e>
        __asm volatile
 8008438:	f04f 0350 	mov.w	r3, #80	; 0x50
 800843c:	f383 8811 	msr	BASEPRI, r3
 8008440:	f3bf 8f6f 	isb	sy
 8008444:	f3bf 8f4f 	dsb	sy
 8008448:	60fb      	str	r3, [r7, #12]
    }
 800844a:	bf00      	nop
 800844c:	e7fe      	b.n	800844c <vPortFree+0x3c>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 800844e:	693b      	ldr	r3, [r7, #16]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	2b00      	cmp	r3, #0
 8008454:	d00a      	beq.n	800846c <vPortFree+0x5c>
        __asm volatile
 8008456:	f04f 0350 	mov.w	r3, #80	; 0x50
 800845a:	f383 8811 	msr	BASEPRI, r3
 800845e:	f3bf 8f6f 	isb	sy
 8008462:	f3bf 8f4f 	dsb	sy
 8008466:	60bb      	str	r3, [r7, #8]
    }
 8008468:	bf00      	nop
 800846a:	e7fe      	b.n	800846a <vPortFree+0x5a>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 800846c:	693b      	ldr	r3, [r7, #16]
 800846e:	685b      	ldr	r3, [r3, #4]
 8008470:	0fdb      	lsrs	r3, r3, #31
 8008472:	f003 0301 	and.w	r3, r3, #1
 8008476:	b2db      	uxtb	r3, r3
 8008478:	2b00      	cmp	r3, #0
 800847a:	d01c      	beq.n	80084b6 <vPortFree+0xa6>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 800847c:	693b      	ldr	r3, [r7, #16]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	2b00      	cmp	r3, #0
 8008482:	d118      	bne.n	80084b6 <vPortFree+0xa6>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 8008484:	693b      	ldr	r3, [r7, #16]
 8008486:	685b      	ldr	r3, [r3, #4]
 8008488:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800848c:	693b      	ldr	r3, [r7, #16]
 800848e:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 8008490:	f7fe fa8e 	bl	80069b0 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8008494:	693b      	ldr	r3, [r7, #16]
 8008496:	685a      	ldr	r2, [r3, #4]
 8008498:	4b09      	ldr	r3, [pc, #36]	; (80084c0 <vPortFree+0xb0>)
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	4413      	add	r3, r2
 800849e:	4a08      	ldr	r2, [pc, #32]	; (80084c0 <vPortFree+0xb0>)
 80084a0:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80084a2:	6938      	ldr	r0, [r7, #16]
 80084a4:	f000 f86c 	bl	8008580 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 80084a8:	4b06      	ldr	r3, [pc, #24]	; (80084c4 <vPortFree+0xb4>)
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	3301      	adds	r3, #1
 80084ae:	4a05      	ldr	r2, [pc, #20]	; (80084c4 <vPortFree+0xb4>)
 80084b0:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 80084b2:	f7fe fa8b 	bl	80069cc <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 80084b6:	bf00      	nop
 80084b8:	3718      	adds	r7, #24
 80084ba:	46bd      	mov	sp, r7
 80084bc:	bd80      	pop	{r7, pc}
 80084be:	bf00      	nop
 80084c0:	2001e334 	.word	0x2001e334
 80084c4:	2001e340 	.word	0x2001e340

080084c8 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 80084c8:	b480      	push	{r7}
 80084ca:	b085      	sub	sp, #20
 80084cc:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80084ce:	f44f 33f0 	mov.w	r3, #122880	; 0x1e000
 80084d2:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 80084d4:	4b25      	ldr	r3, [pc, #148]	; (800856c <prvHeapInit+0xa4>)
 80084d6:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	f003 0307 	and.w	r3, r3, #7
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d00c      	beq.n	80084fc <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	3307      	adds	r3, #7
 80084e6:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	f023 0307 	bic.w	r3, r3, #7
 80084ee:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 80084f0:	68ba      	ldr	r2, [r7, #8]
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	1ad3      	subs	r3, r2, r3
 80084f6:	4a1d      	ldr	r2, [pc, #116]	; (800856c <prvHeapInit+0xa4>)
 80084f8:	4413      	add	r3, r2
 80084fa:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008500:	4a1b      	ldr	r2, [pc, #108]	; (8008570 <prvHeapInit+0xa8>)
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8008506:	4b1a      	ldr	r3, [pc, #104]	; (8008570 <prvHeapInit+0xa8>)
 8008508:	2200      	movs	r2, #0
 800850a:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	68ba      	ldr	r2, [r7, #8]
 8008510:	4413      	add	r3, r2
 8008512:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8008514:	2208      	movs	r2, #8
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	1a9b      	subs	r3, r3, r2
 800851a:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	f023 0307 	bic.w	r3, r3, #7
 8008522:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	4a13      	ldr	r2, [pc, #76]	; (8008574 <prvHeapInit+0xac>)
 8008528:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 800852a:	4b12      	ldr	r3, [pc, #72]	; (8008574 <prvHeapInit+0xac>)
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	2200      	movs	r2, #0
 8008530:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8008532:	4b10      	ldr	r3, [pc, #64]	; (8008574 <prvHeapInit+0xac>)
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	2200      	movs	r2, #0
 8008538:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 800853e:	683b      	ldr	r3, [r7, #0]
 8008540:	68fa      	ldr	r2, [r7, #12]
 8008542:	1ad2      	subs	r2, r2, r3
 8008544:	683b      	ldr	r3, [r7, #0]
 8008546:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008548:	4b0a      	ldr	r3, [pc, #40]	; (8008574 <prvHeapInit+0xac>)
 800854a:	681a      	ldr	r2, [r3, #0]
 800854c:	683b      	ldr	r3, [r7, #0]
 800854e:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008550:	683b      	ldr	r3, [r7, #0]
 8008552:	685b      	ldr	r3, [r3, #4]
 8008554:	4a08      	ldr	r2, [pc, #32]	; (8008578 <prvHeapInit+0xb0>)
 8008556:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008558:	683b      	ldr	r3, [r7, #0]
 800855a:	685b      	ldr	r3, [r3, #4]
 800855c:	4a07      	ldr	r2, [pc, #28]	; (800857c <prvHeapInit+0xb4>)
 800855e:	6013      	str	r3, [r2, #0]
}
 8008560:	bf00      	nop
 8008562:	3714      	adds	r7, #20
 8008564:	46bd      	mov	sp, r7
 8008566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800856a:	4770      	bx	lr
 800856c:	20000328 	.word	0x20000328
 8008570:	2001e328 	.word	0x2001e328
 8008574:	2001e330 	.word	0x2001e330
 8008578:	2001e338 	.word	0x2001e338
 800857c:	2001e334 	.word	0x2001e334

08008580 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8008580:	b480      	push	{r7}
 8008582:	b085      	sub	sp, #20
 8008584:	af00      	add	r7, sp, #0
 8008586:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008588:	4b28      	ldr	r3, [pc, #160]	; (800862c <prvInsertBlockIntoFreeList+0xac>)
 800858a:	60fb      	str	r3, [r7, #12]
 800858c:	e002      	b.n	8008594 <prvInsertBlockIntoFreeList+0x14>
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	60fb      	str	r3, [r7, #12]
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	687a      	ldr	r2, [r7, #4]
 800859a:	429a      	cmp	r2, r3
 800859c:	d8f7      	bhi.n	800858e <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	685b      	ldr	r3, [r3, #4]
 80085a6:	68ba      	ldr	r2, [r7, #8]
 80085a8:	4413      	add	r3, r2
 80085aa:	687a      	ldr	r2, [r7, #4]
 80085ac:	429a      	cmp	r2, r3
 80085ae:	d108      	bne.n	80085c2 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	685a      	ldr	r2, [r3, #4]
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	685b      	ldr	r3, [r3, #4]
 80085b8:	441a      	add	r2, r3
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	685b      	ldr	r3, [r3, #4]
 80085ca:	68ba      	ldr	r2, [r7, #8]
 80085cc:	441a      	add	r2, r3
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	429a      	cmp	r2, r3
 80085d4:	d118      	bne.n	8008608 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	681a      	ldr	r2, [r3, #0]
 80085da:	4b15      	ldr	r3, [pc, #84]	; (8008630 <prvInsertBlockIntoFreeList+0xb0>)
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	429a      	cmp	r2, r3
 80085e0:	d00d      	beq.n	80085fe <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	685a      	ldr	r2, [r3, #4]
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	685b      	ldr	r3, [r3, #4]
 80085ec:	441a      	add	r2, r3
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	681a      	ldr	r2, [r3, #0]
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	601a      	str	r2, [r3, #0]
 80085fc:	e008      	b.n	8008610 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80085fe:	4b0c      	ldr	r3, [pc, #48]	; (8008630 <prvInsertBlockIntoFreeList+0xb0>)
 8008600:	681a      	ldr	r2, [r3, #0]
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	601a      	str	r2, [r3, #0]
 8008606:	e003      	b.n	8008610 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	681a      	ldr	r2, [r3, #0]
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8008610:	68fa      	ldr	r2, [r7, #12]
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	429a      	cmp	r2, r3
 8008616:	d002      	beq.n	800861e <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	687a      	ldr	r2, [r7, #4]
 800861c:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800861e:	bf00      	nop
 8008620:	3714      	adds	r7, #20
 8008622:	46bd      	mov	sp, r7
 8008624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008628:	4770      	bx	lr
 800862a:	bf00      	nop
 800862c:	2001e328 	.word	0x2001e328
 8008630:	2001e330 	.word	0x2001e330

08008634 <siprintf>:
 8008634:	b40e      	push	{r1, r2, r3}
 8008636:	b500      	push	{lr}
 8008638:	b09c      	sub	sp, #112	; 0x70
 800863a:	ab1d      	add	r3, sp, #116	; 0x74
 800863c:	9002      	str	r0, [sp, #8]
 800863e:	9006      	str	r0, [sp, #24]
 8008640:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008644:	4809      	ldr	r0, [pc, #36]	; (800866c <siprintf+0x38>)
 8008646:	9107      	str	r1, [sp, #28]
 8008648:	9104      	str	r1, [sp, #16]
 800864a:	4909      	ldr	r1, [pc, #36]	; (8008670 <siprintf+0x3c>)
 800864c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008650:	9105      	str	r1, [sp, #20]
 8008652:	6800      	ldr	r0, [r0, #0]
 8008654:	9301      	str	r3, [sp, #4]
 8008656:	a902      	add	r1, sp, #8
 8008658:	f000 f9a0 	bl	800899c <_svfiprintf_r>
 800865c:	9b02      	ldr	r3, [sp, #8]
 800865e:	2200      	movs	r2, #0
 8008660:	701a      	strb	r2, [r3, #0]
 8008662:	b01c      	add	sp, #112	; 0x70
 8008664:	f85d eb04 	ldr.w	lr, [sp], #4
 8008668:	b003      	add	sp, #12
 800866a:	4770      	bx	lr
 800866c:	20000060 	.word	0x20000060
 8008670:	ffff0208 	.word	0xffff0208

08008674 <memset>:
 8008674:	4402      	add	r2, r0
 8008676:	4603      	mov	r3, r0
 8008678:	4293      	cmp	r3, r2
 800867a:	d100      	bne.n	800867e <memset+0xa>
 800867c:	4770      	bx	lr
 800867e:	f803 1b01 	strb.w	r1, [r3], #1
 8008682:	e7f9      	b.n	8008678 <memset+0x4>

08008684 <__errno>:
 8008684:	4b01      	ldr	r3, [pc, #4]	; (800868c <__errno+0x8>)
 8008686:	6818      	ldr	r0, [r3, #0]
 8008688:	4770      	bx	lr
 800868a:	bf00      	nop
 800868c:	20000060 	.word	0x20000060

08008690 <__libc_init_array>:
 8008690:	b570      	push	{r4, r5, r6, lr}
 8008692:	4d0d      	ldr	r5, [pc, #52]	; (80086c8 <__libc_init_array+0x38>)
 8008694:	4c0d      	ldr	r4, [pc, #52]	; (80086cc <__libc_init_array+0x3c>)
 8008696:	1b64      	subs	r4, r4, r5
 8008698:	10a4      	asrs	r4, r4, #2
 800869a:	2600      	movs	r6, #0
 800869c:	42a6      	cmp	r6, r4
 800869e:	d109      	bne.n	80086b4 <__libc_init_array+0x24>
 80086a0:	4d0b      	ldr	r5, [pc, #44]	; (80086d0 <__libc_init_array+0x40>)
 80086a2:	4c0c      	ldr	r4, [pc, #48]	; (80086d4 <__libc_init_array+0x44>)
 80086a4:	f000 fc6a 	bl	8008f7c <_init>
 80086a8:	1b64      	subs	r4, r4, r5
 80086aa:	10a4      	asrs	r4, r4, #2
 80086ac:	2600      	movs	r6, #0
 80086ae:	42a6      	cmp	r6, r4
 80086b0:	d105      	bne.n	80086be <__libc_init_array+0x2e>
 80086b2:	bd70      	pop	{r4, r5, r6, pc}
 80086b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80086b8:	4798      	blx	r3
 80086ba:	3601      	adds	r6, #1
 80086bc:	e7ee      	b.n	800869c <__libc_init_array+0xc>
 80086be:	f855 3b04 	ldr.w	r3, [r5], #4
 80086c2:	4798      	blx	r3
 80086c4:	3601      	adds	r6, #1
 80086c6:	e7f2      	b.n	80086ae <__libc_init_array+0x1e>
 80086c8:	0800908c 	.word	0x0800908c
 80086cc:	0800908c 	.word	0x0800908c
 80086d0:	0800908c 	.word	0x0800908c
 80086d4:	08009090 	.word	0x08009090

080086d8 <__retarget_lock_acquire_recursive>:
 80086d8:	4770      	bx	lr

080086da <__retarget_lock_release_recursive>:
 80086da:	4770      	bx	lr

080086dc <memcpy>:
 80086dc:	440a      	add	r2, r1
 80086de:	4291      	cmp	r1, r2
 80086e0:	f100 33ff 	add.w	r3, r0, #4294967295
 80086e4:	d100      	bne.n	80086e8 <memcpy+0xc>
 80086e6:	4770      	bx	lr
 80086e8:	b510      	push	{r4, lr}
 80086ea:	f811 4b01 	ldrb.w	r4, [r1], #1
 80086ee:	f803 4f01 	strb.w	r4, [r3, #1]!
 80086f2:	4291      	cmp	r1, r2
 80086f4:	d1f9      	bne.n	80086ea <memcpy+0xe>
 80086f6:	bd10      	pop	{r4, pc}

080086f8 <_free_r>:
 80086f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80086fa:	2900      	cmp	r1, #0
 80086fc:	d044      	beq.n	8008788 <_free_r+0x90>
 80086fe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008702:	9001      	str	r0, [sp, #4]
 8008704:	2b00      	cmp	r3, #0
 8008706:	f1a1 0404 	sub.w	r4, r1, #4
 800870a:	bfb8      	it	lt
 800870c:	18e4      	addlt	r4, r4, r3
 800870e:	f000 f8df 	bl	80088d0 <__malloc_lock>
 8008712:	4a1e      	ldr	r2, [pc, #120]	; (800878c <_free_r+0x94>)
 8008714:	9801      	ldr	r0, [sp, #4]
 8008716:	6813      	ldr	r3, [r2, #0]
 8008718:	b933      	cbnz	r3, 8008728 <_free_r+0x30>
 800871a:	6063      	str	r3, [r4, #4]
 800871c:	6014      	str	r4, [r2, #0]
 800871e:	b003      	add	sp, #12
 8008720:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008724:	f000 b8da 	b.w	80088dc <__malloc_unlock>
 8008728:	42a3      	cmp	r3, r4
 800872a:	d908      	bls.n	800873e <_free_r+0x46>
 800872c:	6825      	ldr	r5, [r4, #0]
 800872e:	1961      	adds	r1, r4, r5
 8008730:	428b      	cmp	r3, r1
 8008732:	bf01      	itttt	eq
 8008734:	6819      	ldreq	r1, [r3, #0]
 8008736:	685b      	ldreq	r3, [r3, #4]
 8008738:	1949      	addeq	r1, r1, r5
 800873a:	6021      	streq	r1, [r4, #0]
 800873c:	e7ed      	b.n	800871a <_free_r+0x22>
 800873e:	461a      	mov	r2, r3
 8008740:	685b      	ldr	r3, [r3, #4]
 8008742:	b10b      	cbz	r3, 8008748 <_free_r+0x50>
 8008744:	42a3      	cmp	r3, r4
 8008746:	d9fa      	bls.n	800873e <_free_r+0x46>
 8008748:	6811      	ldr	r1, [r2, #0]
 800874a:	1855      	adds	r5, r2, r1
 800874c:	42a5      	cmp	r5, r4
 800874e:	d10b      	bne.n	8008768 <_free_r+0x70>
 8008750:	6824      	ldr	r4, [r4, #0]
 8008752:	4421      	add	r1, r4
 8008754:	1854      	adds	r4, r2, r1
 8008756:	42a3      	cmp	r3, r4
 8008758:	6011      	str	r1, [r2, #0]
 800875a:	d1e0      	bne.n	800871e <_free_r+0x26>
 800875c:	681c      	ldr	r4, [r3, #0]
 800875e:	685b      	ldr	r3, [r3, #4]
 8008760:	6053      	str	r3, [r2, #4]
 8008762:	440c      	add	r4, r1
 8008764:	6014      	str	r4, [r2, #0]
 8008766:	e7da      	b.n	800871e <_free_r+0x26>
 8008768:	d902      	bls.n	8008770 <_free_r+0x78>
 800876a:	230c      	movs	r3, #12
 800876c:	6003      	str	r3, [r0, #0]
 800876e:	e7d6      	b.n	800871e <_free_r+0x26>
 8008770:	6825      	ldr	r5, [r4, #0]
 8008772:	1961      	adds	r1, r4, r5
 8008774:	428b      	cmp	r3, r1
 8008776:	bf04      	itt	eq
 8008778:	6819      	ldreq	r1, [r3, #0]
 800877a:	685b      	ldreq	r3, [r3, #4]
 800877c:	6063      	str	r3, [r4, #4]
 800877e:	bf04      	itt	eq
 8008780:	1949      	addeq	r1, r1, r5
 8008782:	6021      	streq	r1, [r4, #0]
 8008784:	6054      	str	r4, [r2, #4]
 8008786:	e7ca      	b.n	800871e <_free_r+0x26>
 8008788:	b003      	add	sp, #12
 800878a:	bd30      	pop	{r4, r5, pc}
 800878c:	2001e484 	.word	0x2001e484

08008790 <sbrk_aligned>:
 8008790:	b570      	push	{r4, r5, r6, lr}
 8008792:	4e0e      	ldr	r6, [pc, #56]	; (80087cc <sbrk_aligned+0x3c>)
 8008794:	460c      	mov	r4, r1
 8008796:	6831      	ldr	r1, [r6, #0]
 8008798:	4605      	mov	r5, r0
 800879a:	b911      	cbnz	r1, 80087a2 <sbrk_aligned+0x12>
 800879c:	f000 fba6 	bl	8008eec <_sbrk_r>
 80087a0:	6030      	str	r0, [r6, #0]
 80087a2:	4621      	mov	r1, r4
 80087a4:	4628      	mov	r0, r5
 80087a6:	f000 fba1 	bl	8008eec <_sbrk_r>
 80087aa:	1c43      	adds	r3, r0, #1
 80087ac:	d00a      	beq.n	80087c4 <sbrk_aligned+0x34>
 80087ae:	1cc4      	adds	r4, r0, #3
 80087b0:	f024 0403 	bic.w	r4, r4, #3
 80087b4:	42a0      	cmp	r0, r4
 80087b6:	d007      	beq.n	80087c8 <sbrk_aligned+0x38>
 80087b8:	1a21      	subs	r1, r4, r0
 80087ba:	4628      	mov	r0, r5
 80087bc:	f000 fb96 	bl	8008eec <_sbrk_r>
 80087c0:	3001      	adds	r0, #1
 80087c2:	d101      	bne.n	80087c8 <sbrk_aligned+0x38>
 80087c4:	f04f 34ff 	mov.w	r4, #4294967295
 80087c8:	4620      	mov	r0, r4
 80087ca:	bd70      	pop	{r4, r5, r6, pc}
 80087cc:	2001e488 	.word	0x2001e488

080087d0 <_malloc_r>:
 80087d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80087d4:	1ccd      	adds	r5, r1, #3
 80087d6:	f025 0503 	bic.w	r5, r5, #3
 80087da:	3508      	adds	r5, #8
 80087dc:	2d0c      	cmp	r5, #12
 80087de:	bf38      	it	cc
 80087e0:	250c      	movcc	r5, #12
 80087e2:	2d00      	cmp	r5, #0
 80087e4:	4607      	mov	r7, r0
 80087e6:	db01      	blt.n	80087ec <_malloc_r+0x1c>
 80087e8:	42a9      	cmp	r1, r5
 80087ea:	d905      	bls.n	80087f8 <_malloc_r+0x28>
 80087ec:	230c      	movs	r3, #12
 80087ee:	603b      	str	r3, [r7, #0]
 80087f0:	2600      	movs	r6, #0
 80087f2:	4630      	mov	r0, r6
 80087f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80087f8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80088cc <_malloc_r+0xfc>
 80087fc:	f000 f868 	bl	80088d0 <__malloc_lock>
 8008800:	f8d8 3000 	ldr.w	r3, [r8]
 8008804:	461c      	mov	r4, r3
 8008806:	bb5c      	cbnz	r4, 8008860 <_malloc_r+0x90>
 8008808:	4629      	mov	r1, r5
 800880a:	4638      	mov	r0, r7
 800880c:	f7ff ffc0 	bl	8008790 <sbrk_aligned>
 8008810:	1c43      	adds	r3, r0, #1
 8008812:	4604      	mov	r4, r0
 8008814:	d155      	bne.n	80088c2 <_malloc_r+0xf2>
 8008816:	f8d8 4000 	ldr.w	r4, [r8]
 800881a:	4626      	mov	r6, r4
 800881c:	2e00      	cmp	r6, #0
 800881e:	d145      	bne.n	80088ac <_malloc_r+0xdc>
 8008820:	2c00      	cmp	r4, #0
 8008822:	d048      	beq.n	80088b6 <_malloc_r+0xe6>
 8008824:	6823      	ldr	r3, [r4, #0]
 8008826:	4631      	mov	r1, r6
 8008828:	4638      	mov	r0, r7
 800882a:	eb04 0903 	add.w	r9, r4, r3
 800882e:	f000 fb5d 	bl	8008eec <_sbrk_r>
 8008832:	4581      	cmp	r9, r0
 8008834:	d13f      	bne.n	80088b6 <_malloc_r+0xe6>
 8008836:	6821      	ldr	r1, [r4, #0]
 8008838:	1a6d      	subs	r5, r5, r1
 800883a:	4629      	mov	r1, r5
 800883c:	4638      	mov	r0, r7
 800883e:	f7ff ffa7 	bl	8008790 <sbrk_aligned>
 8008842:	3001      	adds	r0, #1
 8008844:	d037      	beq.n	80088b6 <_malloc_r+0xe6>
 8008846:	6823      	ldr	r3, [r4, #0]
 8008848:	442b      	add	r3, r5
 800884a:	6023      	str	r3, [r4, #0]
 800884c:	f8d8 3000 	ldr.w	r3, [r8]
 8008850:	2b00      	cmp	r3, #0
 8008852:	d038      	beq.n	80088c6 <_malloc_r+0xf6>
 8008854:	685a      	ldr	r2, [r3, #4]
 8008856:	42a2      	cmp	r2, r4
 8008858:	d12b      	bne.n	80088b2 <_malloc_r+0xe2>
 800885a:	2200      	movs	r2, #0
 800885c:	605a      	str	r2, [r3, #4]
 800885e:	e00f      	b.n	8008880 <_malloc_r+0xb0>
 8008860:	6822      	ldr	r2, [r4, #0]
 8008862:	1b52      	subs	r2, r2, r5
 8008864:	d41f      	bmi.n	80088a6 <_malloc_r+0xd6>
 8008866:	2a0b      	cmp	r2, #11
 8008868:	d917      	bls.n	800889a <_malloc_r+0xca>
 800886a:	1961      	adds	r1, r4, r5
 800886c:	42a3      	cmp	r3, r4
 800886e:	6025      	str	r5, [r4, #0]
 8008870:	bf18      	it	ne
 8008872:	6059      	strne	r1, [r3, #4]
 8008874:	6863      	ldr	r3, [r4, #4]
 8008876:	bf08      	it	eq
 8008878:	f8c8 1000 	streq.w	r1, [r8]
 800887c:	5162      	str	r2, [r4, r5]
 800887e:	604b      	str	r3, [r1, #4]
 8008880:	4638      	mov	r0, r7
 8008882:	f104 060b 	add.w	r6, r4, #11
 8008886:	f000 f829 	bl	80088dc <__malloc_unlock>
 800888a:	f026 0607 	bic.w	r6, r6, #7
 800888e:	1d23      	adds	r3, r4, #4
 8008890:	1af2      	subs	r2, r6, r3
 8008892:	d0ae      	beq.n	80087f2 <_malloc_r+0x22>
 8008894:	1b9b      	subs	r3, r3, r6
 8008896:	50a3      	str	r3, [r4, r2]
 8008898:	e7ab      	b.n	80087f2 <_malloc_r+0x22>
 800889a:	42a3      	cmp	r3, r4
 800889c:	6862      	ldr	r2, [r4, #4]
 800889e:	d1dd      	bne.n	800885c <_malloc_r+0x8c>
 80088a0:	f8c8 2000 	str.w	r2, [r8]
 80088a4:	e7ec      	b.n	8008880 <_malloc_r+0xb0>
 80088a6:	4623      	mov	r3, r4
 80088a8:	6864      	ldr	r4, [r4, #4]
 80088aa:	e7ac      	b.n	8008806 <_malloc_r+0x36>
 80088ac:	4634      	mov	r4, r6
 80088ae:	6876      	ldr	r6, [r6, #4]
 80088b0:	e7b4      	b.n	800881c <_malloc_r+0x4c>
 80088b2:	4613      	mov	r3, r2
 80088b4:	e7cc      	b.n	8008850 <_malloc_r+0x80>
 80088b6:	230c      	movs	r3, #12
 80088b8:	603b      	str	r3, [r7, #0]
 80088ba:	4638      	mov	r0, r7
 80088bc:	f000 f80e 	bl	80088dc <__malloc_unlock>
 80088c0:	e797      	b.n	80087f2 <_malloc_r+0x22>
 80088c2:	6025      	str	r5, [r4, #0]
 80088c4:	e7dc      	b.n	8008880 <_malloc_r+0xb0>
 80088c6:	605b      	str	r3, [r3, #4]
 80088c8:	deff      	udf	#255	; 0xff
 80088ca:	bf00      	nop
 80088cc:	2001e484 	.word	0x2001e484

080088d0 <__malloc_lock>:
 80088d0:	4801      	ldr	r0, [pc, #4]	; (80088d8 <__malloc_lock+0x8>)
 80088d2:	f7ff bf01 	b.w	80086d8 <__retarget_lock_acquire_recursive>
 80088d6:	bf00      	nop
 80088d8:	2001e480 	.word	0x2001e480

080088dc <__malloc_unlock>:
 80088dc:	4801      	ldr	r0, [pc, #4]	; (80088e4 <__malloc_unlock+0x8>)
 80088de:	f7ff befc 	b.w	80086da <__retarget_lock_release_recursive>
 80088e2:	bf00      	nop
 80088e4:	2001e480 	.word	0x2001e480

080088e8 <__ssputs_r>:
 80088e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80088ec:	688e      	ldr	r6, [r1, #8]
 80088ee:	461f      	mov	r7, r3
 80088f0:	42be      	cmp	r6, r7
 80088f2:	680b      	ldr	r3, [r1, #0]
 80088f4:	4682      	mov	sl, r0
 80088f6:	460c      	mov	r4, r1
 80088f8:	4690      	mov	r8, r2
 80088fa:	d82c      	bhi.n	8008956 <__ssputs_r+0x6e>
 80088fc:	898a      	ldrh	r2, [r1, #12]
 80088fe:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008902:	d026      	beq.n	8008952 <__ssputs_r+0x6a>
 8008904:	6965      	ldr	r5, [r4, #20]
 8008906:	6909      	ldr	r1, [r1, #16]
 8008908:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800890c:	eba3 0901 	sub.w	r9, r3, r1
 8008910:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008914:	1c7b      	adds	r3, r7, #1
 8008916:	444b      	add	r3, r9
 8008918:	106d      	asrs	r5, r5, #1
 800891a:	429d      	cmp	r5, r3
 800891c:	bf38      	it	cc
 800891e:	461d      	movcc	r5, r3
 8008920:	0553      	lsls	r3, r2, #21
 8008922:	d527      	bpl.n	8008974 <__ssputs_r+0x8c>
 8008924:	4629      	mov	r1, r5
 8008926:	f7ff ff53 	bl	80087d0 <_malloc_r>
 800892a:	4606      	mov	r6, r0
 800892c:	b360      	cbz	r0, 8008988 <__ssputs_r+0xa0>
 800892e:	6921      	ldr	r1, [r4, #16]
 8008930:	464a      	mov	r2, r9
 8008932:	f7ff fed3 	bl	80086dc <memcpy>
 8008936:	89a3      	ldrh	r3, [r4, #12]
 8008938:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800893c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008940:	81a3      	strh	r3, [r4, #12]
 8008942:	6126      	str	r6, [r4, #16]
 8008944:	6165      	str	r5, [r4, #20]
 8008946:	444e      	add	r6, r9
 8008948:	eba5 0509 	sub.w	r5, r5, r9
 800894c:	6026      	str	r6, [r4, #0]
 800894e:	60a5      	str	r5, [r4, #8]
 8008950:	463e      	mov	r6, r7
 8008952:	42be      	cmp	r6, r7
 8008954:	d900      	bls.n	8008958 <__ssputs_r+0x70>
 8008956:	463e      	mov	r6, r7
 8008958:	6820      	ldr	r0, [r4, #0]
 800895a:	4632      	mov	r2, r6
 800895c:	4641      	mov	r1, r8
 800895e:	f000 faab 	bl	8008eb8 <memmove>
 8008962:	68a3      	ldr	r3, [r4, #8]
 8008964:	1b9b      	subs	r3, r3, r6
 8008966:	60a3      	str	r3, [r4, #8]
 8008968:	6823      	ldr	r3, [r4, #0]
 800896a:	4433      	add	r3, r6
 800896c:	6023      	str	r3, [r4, #0]
 800896e:	2000      	movs	r0, #0
 8008970:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008974:	462a      	mov	r2, r5
 8008976:	f000 fac9 	bl	8008f0c <_realloc_r>
 800897a:	4606      	mov	r6, r0
 800897c:	2800      	cmp	r0, #0
 800897e:	d1e0      	bne.n	8008942 <__ssputs_r+0x5a>
 8008980:	6921      	ldr	r1, [r4, #16]
 8008982:	4650      	mov	r0, sl
 8008984:	f7ff feb8 	bl	80086f8 <_free_r>
 8008988:	230c      	movs	r3, #12
 800898a:	f8ca 3000 	str.w	r3, [sl]
 800898e:	89a3      	ldrh	r3, [r4, #12]
 8008990:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008994:	81a3      	strh	r3, [r4, #12]
 8008996:	f04f 30ff 	mov.w	r0, #4294967295
 800899a:	e7e9      	b.n	8008970 <__ssputs_r+0x88>

0800899c <_svfiprintf_r>:
 800899c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089a0:	4698      	mov	r8, r3
 80089a2:	898b      	ldrh	r3, [r1, #12]
 80089a4:	061b      	lsls	r3, r3, #24
 80089a6:	b09d      	sub	sp, #116	; 0x74
 80089a8:	4607      	mov	r7, r0
 80089aa:	460d      	mov	r5, r1
 80089ac:	4614      	mov	r4, r2
 80089ae:	d50e      	bpl.n	80089ce <_svfiprintf_r+0x32>
 80089b0:	690b      	ldr	r3, [r1, #16]
 80089b2:	b963      	cbnz	r3, 80089ce <_svfiprintf_r+0x32>
 80089b4:	2140      	movs	r1, #64	; 0x40
 80089b6:	f7ff ff0b 	bl	80087d0 <_malloc_r>
 80089ba:	6028      	str	r0, [r5, #0]
 80089bc:	6128      	str	r0, [r5, #16]
 80089be:	b920      	cbnz	r0, 80089ca <_svfiprintf_r+0x2e>
 80089c0:	230c      	movs	r3, #12
 80089c2:	603b      	str	r3, [r7, #0]
 80089c4:	f04f 30ff 	mov.w	r0, #4294967295
 80089c8:	e0d0      	b.n	8008b6c <_svfiprintf_r+0x1d0>
 80089ca:	2340      	movs	r3, #64	; 0x40
 80089cc:	616b      	str	r3, [r5, #20]
 80089ce:	2300      	movs	r3, #0
 80089d0:	9309      	str	r3, [sp, #36]	; 0x24
 80089d2:	2320      	movs	r3, #32
 80089d4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80089d8:	f8cd 800c 	str.w	r8, [sp, #12]
 80089dc:	2330      	movs	r3, #48	; 0x30
 80089de:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8008b84 <_svfiprintf_r+0x1e8>
 80089e2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80089e6:	f04f 0901 	mov.w	r9, #1
 80089ea:	4623      	mov	r3, r4
 80089ec:	469a      	mov	sl, r3
 80089ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 80089f2:	b10a      	cbz	r2, 80089f8 <_svfiprintf_r+0x5c>
 80089f4:	2a25      	cmp	r2, #37	; 0x25
 80089f6:	d1f9      	bne.n	80089ec <_svfiprintf_r+0x50>
 80089f8:	ebba 0b04 	subs.w	fp, sl, r4
 80089fc:	d00b      	beq.n	8008a16 <_svfiprintf_r+0x7a>
 80089fe:	465b      	mov	r3, fp
 8008a00:	4622      	mov	r2, r4
 8008a02:	4629      	mov	r1, r5
 8008a04:	4638      	mov	r0, r7
 8008a06:	f7ff ff6f 	bl	80088e8 <__ssputs_r>
 8008a0a:	3001      	adds	r0, #1
 8008a0c:	f000 80a9 	beq.w	8008b62 <_svfiprintf_r+0x1c6>
 8008a10:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008a12:	445a      	add	r2, fp
 8008a14:	9209      	str	r2, [sp, #36]	; 0x24
 8008a16:	f89a 3000 	ldrb.w	r3, [sl]
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	f000 80a1 	beq.w	8008b62 <_svfiprintf_r+0x1c6>
 8008a20:	2300      	movs	r3, #0
 8008a22:	f04f 32ff 	mov.w	r2, #4294967295
 8008a26:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008a2a:	f10a 0a01 	add.w	sl, sl, #1
 8008a2e:	9304      	str	r3, [sp, #16]
 8008a30:	9307      	str	r3, [sp, #28]
 8008a32:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008a36:	931a      	str	r3, [sp, #104]	; 0x68
 8008a38:	4654      	mov	r4, sl
 8008a3a:	2205      	movs	r2, #5
 8008a3c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008a40:	4850      	ldr	r0, [pc, #320]	; (8008b84 <_svfiprintf_r+0x1e8>)
 8008a42:	f7f7 fbdd 	bl	8000200 <memchr>
 8008a46:	9a04      	ldr	r2, [sp, #16]
 8008a48:	b9d8      	cbnz	r0, 8008a82 <_svfiprintf_r+0xe6>
 8008a4a:	06d0      	lsls	r0, r2, #27
 8008a4c:	bf44      	itt	mi
 8008a4e:	2320      	movmi	r3, #32
 8008a50:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008a54:	0711      	lsls	r1, r2, #28
 8008a56:	bf44      	itt	mi
 8008a58:	232b      	movmi	r3, #43	; 0x2b
 8008a5a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008a5e:	f89a 3000 	ldrb.w	r3, [sl]
 8008a62:	2b2a      	cmp	r3, #42	; 0x2a
 8008a64:	d015      	beq.n	8008a92 <_svfiprintf_r+0xf6>
 8008a66:	9a07      	ldr	r2, [sp, #28]
 8008a68:	4654      	mov	r4, sl
 8008a6a:	2000      	movs	r0, #0
 8008a6c:	f04f 0c0a 	mov.w	ip, #10
 8008a70:	4621      	mov	r1, r4
 8008a72:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008a76:	3b30      	subs	r3, #48	; 0x30
 8008a78:	2b09      	cmp	r3, #9
 8008a7a:	d94d      	bls.n	8008b18 <_svfiprintf_r+0x17c>
 8008a7c:	b1b0      	cbz	r0, 8008aac <_svfiprintf_r+0x110>
 8008a7e:	9207      	str	r2, [sp, #28]
 8008a80:	e014      	b.n	8008aac <_svfiprintf_r+0x110>
 8008a82:	eba0 0308 	sub.w	r3, r0, r8
 8008a86:	fa09 f303 	lsl.w	r3, r9, r3
 8008a8a:	4313      	orrs	r3, r2
 8008a8c:	9304      	str	r3, [sp, #16]
 8008a8e:	46a2      	mov	sl, r4
 8008a90:	e7d2      	b.n	8008a38 <_svfiprintf_r+0x9c>
 8008a92:	9b03      	ldr	r3, [sp, #12]
 8008a94:	1d19      	adds	r1, r3, #4
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	9103      	str	r1, [sp, #12]
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	bfbb      	ittet	lt
 8008a9e:	425b      	neglt	r3, r3
 8008aa0:	f042 0202 	orrlt.w	r2, r2, #2
 8008aa4:	9307      	strge	r3, [sp, #28]
 8008aa6:	9307      	strlt	r3, [sp, #28]
 8008aa8:	bfb8      	it	lt
 8008aaa:	9204      	strlt	r2, [sp, #16]
 8008aac:	7823      	ldrb	r3, [r4, #0]
 8008aae:	2b2e      	cmp	r3, #46	; 0x2e
 8008ab0:	d10c      	bne.n	8008acc <_svfiprintf_r+0x130>
 8008ab2:	7863      	ldrb	r3, [r4, #1]
 8008ab4:	2b2a      	cmp	r3, #42	; 0x2a
 8008ab6:	d134      	bne.n	8008b22 <_svfiprintf_r+0x186>
 8008ab8:	9b03      	ldr	r3, [sp, #12]
 8008aba:	1d1a      	adds	r2, r3, #4
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	9203      	str	r2, [sp, #12]
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	bfb8      	it	lt
 8008ac4:	f04f 33ff 	movlt.w	r3, #4294967295
 8008ac8:	3402      	adds	r4, #2
 8008aca:	9305      	str	r3, [sp, #20]
 8008acc:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8008b94 <_svfiprintf_r+0x1f8>
 8008ad0:	7821      	ldrb	r1, [r4, #0]
 8008ad2:	2203      	movs	r2, #3
 8008ad4:	4650      	mov	r0, sl
 8008ad6:	f7f7 fb93 	bl	8000200 <memchr>
 8008ada:	b138      	cbz	r0, 8008aec <_svfiprintf_r+0x150>
 8008adc:	9b04      	ldr	r3, [sp, #16]
 8008ade:	eba0 000a 	sub.w	r0, r0, sl
 8008ae2:	2240      	movs	r2, #64	; 0x40
 8008ae4:	4082      	lsls	r2, r0
 8008ae6:	4313      	orrs	r3, r2
 8008ae8:	3401      	adds	r4, #1
 8008aea:	9304      	str	r3, [sp, #16]
 8008aec:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008af0:	4825      	ldr	r0, [pc, #148]	; (8008b88 <_svfiprintf_r+0x1ec>)
 8008af2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008af6:	2206      	movs	r2, #6
 8008af8:	f7f7 fb82 	bl	8000200 <memchr>
 8008afc:	2800      	cmp	r0, #0
 8008afe:	d038      	beq.n	8008b72 <_svfiprintf_r+0x1d6>
 8008b00:	4b22      	ldr	r3, [pc, #136]	; (8008b8c <_svfiprintf_r+0x1f0>)
 8008b02:	bb1b      	cbnz	r3, 8008b4c <_svfiprintf_r+0x1b0>
 8008b04:	9b03      	ldr	r3, [sp, #12]
 8008b06:	3307      	adds	r3, #7
 8008b08:	f023 0307 	bic.w	r3, r3, #7
 8008b0c:	3308      	adds	r3, #8
 8008b0e:	9303      	str	r3, [sp, #12]
 8008b10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b12:	4433      	add	r3, r6
 8008b14:	9309      	str	r3, [sp, #36]	; 0x24
 8008b16:	e768      	b.n	80089ea <_svfiprintf_r+0x4e>
 8008b18:	fb0c 3202 	mla	r2, ip, r2, r3
 8008b1c:	460c      	mov	r4, r1
 8008b1e:	2001      	movs	r0, #1
 8008b20:	e7a6      	b.n	8008a70 <_svfiprintf_r+0xd4>
 8008b22:	2300      	movs	r3, #0
 8008b24:	3401      	adds	r4, #1
 8008b26:	9305      	str	r3, [sp, #20]
 8008b28:	4619      	mov	r1, r3
 8008b2a:	f04f 0c0a 	mov.w	ip, #10
 8008b2e:	4620      	mov	r0, r4
 8008b30:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008b34:	3a30      	subs	r2, #48	; 0x30
 8008b36:	2a09      	cmp	r2, #9
 8008b38:	d903      	bls.n	8008b42 <_svfiprintf_r+0x1a6>
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d0c6      	beq.n	8008acc <_svfiprintf_r+0x130>
 8008b3e:	9105      	str	r1, [sp, #20]
 8008b40:	e7c4      	b.n	8008acc <_svfiprintf_r+0x130>
 8008b42:	fb0c 2101 	mla	r1, ip, r1, r2
 8008b46:	4604      	mov	r4, r0
 8008b48:	2301      	movs	r3, #1
 8008b4a:	e7f0      	b.n	8008b2e <_svfiprintf_r+0x192>
 8008b4c:	ab03      	add	r3, sp, #12
 8008b4e:	9300      	str	r3, [sp, #0]
 8008b50:	462a      	mov	r2, r5
 8008b52:	4b0f      	ldr	r3, [pc, #60]	; (8008b90 <_svfiprintf_r+0x1f4>)
 8008b54:	a904      	add	r1, sp, #16
 8008b56:	4638      	mov	r0, r7
 8008b58:	f3af 8000 	nop.w
 8008b5c:	1c42      	adds	r2, r0, #1
 8008b5e:	4606      	mov	r6, r0
 8008b60:	d1d6      	bne.n	8008b10 <_svfiprintf_r+0x174>
 8008b62:	89ab      	ldrh	r3, [r5, #12]
 8008b64:	065b      	lsls	r3, r3, #25
 8008b66:	f53f af2d 	bmi.w	80089c4 <_svfiprintf_r+0x28>
 8008b6a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008b6c:	b01d      	add	sp, #116	; 0x74
 8008b6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b72:	ab03      	add	r3, sp, #12
 8008b74:	9300      	str	r3, [sp, #0]
 8008b76:	462a      	mov	r2, r5
 8008b78:	4b05      	ldr	r3, [pc, #20]	; (8008b90 <_svfiprintf_r+0x1f4>)
 8008b7a:	a904      	add	r1, sp, #16
 8008b7c:	4638      	mov	r0, r7
 8008b7e:	f000 f879 	bl	8008c74 <_printf_i>
 8008b82:	e7eb      	b.n	8008b5c <_svfiprintf_r+0x1c0>
 8008b84:	08009050 	.word	0x08009050
 8008b88:	0800905a 	.word	0x0800905a
 8008b8c:	00000000 	.word	0x00000000
 8008b90:	080088e9 	.word	0x080088e9
 8008b94:	08009056 	.word	0x08009056

08008b98 <_printf_common>:
 8008b98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008b9c:	4616      	mov	r6, r2
 8008b9e:	4699      	mov	r9, r3
 8008ba0:	688a      	ldr	r2, [r1, #8]
 8008ba2:	690b      	ldr	r3, [r1, #16]
 8008ba4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008ba8:	4293      	cmp	r3, r2
 8008baa:	bfb8      	it	lt
 8008bac:	4613      	movlt	r3, r2
 8008bae:	6033      	str	r3, [r6, #0]
 8008bb0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008bb4:	4607      	mov	r7, r0
 8008bb6:	460c      	mov	r4, r1
 8008bb8:	b10a      	cbz	r2, 8008bbe <_printf_common+0x26>
 8008bba:	3301      	adds	r3, #1
 8008bbc:	6033      	str	r3, [r6, #0]
 8008bbe:	6823      	ldr	r3, [r4, #0]
 8008bc0:	0699      	lsls	r1, r3, #26
 8008bc2:	bf42      	ittt	mi
 8008bc4:	6833      	ldrmi	r3, [r6, #0]
 8008bc6:	3302      	addmi	r3, #2
 8008bc8:	6033      	strmi	r3, [r6, #0]
 8008bca:	6825      	ldr	r5, [r4, #0]
 8008bcc:	f015 0506 	ands.w	r5, r5, #6
 8008bd0:	d106      	bne.n	8008be0 <_printf_common+0x48>
 8008bd2:	f104 0a19 	add.w	sl, r4, #25
 8008bd6:	68e3      	ldr	r3, [r4, #12]
 8008bd8:	6832      	ldr	r2, [r6, #0]
 8008bda:	1a9b      	subs	r3, r3, r2
 8008bdc:	42ab      	cmp	r3, r5
 8008bde:	dc26      	bgt.n	8008c2e <_printf_common+0x96>
 8008be0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008be4:	1e13      	subs	r3, r2, #0
 8008be6:	6822      	ldr	r2, [r4, #0]
 8008be8:	bf18      	it	ne
 8008bea:	2301      	movne	r3, #1
 8008bec:	0692      	lsls	r2, r2, #26
 8008bee:	d42b      	bmi.n	8008c48 <_printf_common+0xb0>
 8008bf0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008bf4:	4649      	mov	r1, r9
 8008bf6:	4638      	mov	r0, r7
 8008bf8:	47c0      	blx	r8
 8008bfa:	3001      	adds	r0, #1
 8008bfc:	d01e      	beq.n	8008c3c <_printf_common+0xa4>
 8008bfe:	6823      	ldr	r3, [r4, #0]
 8008c00:	6922      	ldr	r2, [r4, #16]
 8008c02:	f003 0306 	and.w	r3, r3, #6
 8008c06:	2b04      	cmp	r3, #4
 8008c08:	bf02      	ittt	eq
 8008c0a:	68e5      	ldreq	r5, [r4, #12]
 8008c0c:	6833      	ldreq	r3, [r6, #0]
 8008c0e:	1aed      	subeq	r5, r5, r3
 8008c10:	68a3      	ldr	r3, [r4, #8]
 8008c12:	bf0c      	ite	eq
 8008c14:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008c18:	2500      	movne	r5, #0
 8008c1a:	4293      	cmp	r3, r2
 8008c1c:	bfc4      	itt	gt
 8008c1e:	1a9b      	subgt	r3, r3, r2
 8008c20:	18ed      	addgt	r5, r5, r3
 8008c22:	2600      	movs	r6, #0
 8008c24:	341a      	adds	r4, #26
 8008c26:	42b5      	cmp	r5, r6
 8008c28:	d11a      	bne.n	8008c60 <_printf_common+0xc8>
 8008c2a:	2000      	movs	r0, #0
 8008c2c:	e008      	b.n	8008c40 <_printf_common+0xa8>
 8008c2e:	2301      	movs	r3, #1
 8008c30:	4652      	mov	r2, sl
 8008c32:	4649      	mov	r1, r9
 8008c34:	4638      	mov	r0, r7
 8008c36:	47c0      	blx	r8
 8008c38:	3001      	adds	r0, #1
 8008c3a:	d103      	bne.n	8008c44 <_printf_common+0xac>
 8008c3c:	f04f 30ff 	mov.w	r0, #4294967295
 8008c40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c44:	3501      	adds	r5, #1
 8008c46:	e7c6      	b.n	8008bd6 <_printf_common+0x3e>
 8008c48:	18e1      	adds	r1, r4, r3
 8008c4a:	1c5a      	adds	r2, r3, #1
 8008c4c:	2030      	movs	r0, #48	; 0x30
 8008c4e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008c52:	4422      	add	r2, r4
 8008c54:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008c58:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008c5c:	3302      	adds	r3, #2
 8008c5e:	e7c7      	b.n	8008bf0 <_printf_common+0x58>
 8008c60:	2301      	movs	r3, #1
 8008c62:	4622      	mov	r2, r4
 8008c64:	4649      	mov	r1, r9
 8008c66:	4638      	mov	r0, r7
 8008c68:	47c0      	blx	r8
 8008c6a:	3001      	adds	r0, #1
 8008c6c:	d0e6      	beq.n	8008c3c <_printf_common+0xa4>
 8008c6e:	3601      	adds	r6, #1
 8008c70:	e7d9      	b.n	8008c26 <_printf_common+0x8e>
	...

08008c74 <_printf_i>:
 8008c74:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008c78:	7e0f      	ldrb	r7, [r1, #24]
 8008c7a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008c7c:	2f78      	cmp	r7, #120	; 0x78
 8008c7e:	4691      	mov	r9, r2
 8008c80:	4680      	mov	r8, r0
 8008c82:	460c      	mov	r4, r1
 8008c84:	469a      	mov	sl, r3
 8008c86:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008c8a:	d807      	bhi.n	8008c9c <_printf_i+0x28>
 8008c8c:	2f62      	cmp	r7, #98	; 0x62
 8008c8e:	d80a      	bhi.n	8008ca6 <_printf_i+0x32>
 8008c90:	2f00      	cmp	r7, #0
 8008c92:	f000 80d4 	beq.w	8008e3e <_printf_i+0x1ca>
 8008c96:	2f58      	cmp	r7, #88	; 0x58
 8008c98:	f000 80c0 	beq.w	8008e1c <_printf_i+0x1a8>
 8008c9c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008ca0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008ca4:	e03a      	b.n	8008d1c <_printf_i+0xa8>
 8008ca6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008caa:	2b15      	cmp	r3, #21
 8008cac:	d8f6      	bhi.n	8008c9c <_printf_i+0x28>
 8008cae:	a101      	add	r1, pc, #4	; (adr r1, 8008cb4 <_printf_i+0x40>)
 8008cb0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008cb4:	08008d0d 	.word	0x08008d0d
 8008cb8:	08008d21 	.word	0x08008d21
 8008cbc:	08008c9d 	.word	0x08008c9d
 8008cc0:	08008c9d 	.word	0x08008c9d
 8008cc4:	08008c9d 	.word	0x08008c9d
 8008cc8:	08008c9d 	.word	0x08008c9d
 8008ccc:	08008d21 	.word	0x08008d21
 8008cd0:	08008c9d 	.word	0x08008c9d
 8008cd4:	08008c9d 	.word	0x08008c9d
 8008cd8:	08008c9d 	.word	0x08008c9d
 8008cdc:	08008c9d 	.word	0x08008c9d
 8008ce0:	08008e25 	.word	0x08008e25
 8008ce4:	08008d4d 	.word	0x08008d4d
 8008ce8:	08008ddf 	.word	0x08008ddf
 8008cec:	08008c9d 	.word	0x08008c9d
 8008cf0:	08008c9d 	.word	0x08008c9d
 8008cf4:	08008e47 	.word	0x08008e47
 8008cf8:	08008c9d 	.word	0x08008c9d
 8008cfc:	08008d4d 	.word	0x08008d4d
 8008d00:	08008c9d 	.word	0x08008c9d
 8008d04:	08008c9d 	.word	0x08008c9d
 8008d08:	08008de7 	.word	0x08008de7
 8008d0c:	682b      	ldr	r3, [r5, #0]
 8008d0e:	1d1a      	adds	r2, r3, #4
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	602a      	str	r2, [r5, #0]
 8008d14:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008d18:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008d1c:	2301      	movs	r3, #1
 8008d1e:	e09f      	b.n	8008e60 <_printf_i+0x1ec>
 8008d20:	6820      	ldr	r0, [r4, #0]
 8008d22:	682b      	ldr	r3, [r5, #0]
 8008d24:	0607      	lsls	r7, r0, #24
 8008d26:	f103 0104 	add.w	r1, r3, #4
 8008d2a:	6029      	str	r1, [r5, #0]
 8008d2c:	d501      	bpl.n	8008d32 <_printf_i+0xbe>
 8008d2e:	681e      	ldr	r6, [r3, #0]
 8008d30:	e003      	b.n	8008d3a <_printf_i+0xc6>
 8008d32:	0646      	lsls	r6, r0, #25
 8008d34:	d5fb      	bpl.n	8008d2e <_printf_i+0xba>
 8008d36:	f9b3 6000 	ldrsh.w	r6, [r3]
 8008d3a:	2e00      	cmp	r6, #0
 8008d3c:	da03      	bge.n	8008d46 <_printf_i+0xd2>
 8008d3e:	232d      	movs	r3, #45	; 0x2d
 8008d40:	4276      	negs	r6, r6
 8008d42:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008d46:	485a      	ldr	r0, [pc, #360]	; (8008eb0 <_printf_i+0x23c>)
 8008d48:	230a      	movs	r3, #10
 8008d4a:	e012      	b.n	8008d72 <_printf_i+0xfe>
 8008d4c:	682b      	ldr	r3, [r5, #0]
 8008d4e:	6820      	ldr	r0, [r4, #0]
 8008d50:	1d19      	adds	r1, r3, #4
 8008d52:	6029      	str	r1, [r5, #0]
 8008d54:	0605      	lsls	r5, r0, #24
 8008d56:	d501      	bpl.n	8008d5c <_printf_i+0xe8>
 8008d58:	681e      	ldr	r6, [r3, #0]
 8008d5a:	e002      	b.n	8008d62 <_printf_i+0xee>
 8008d5c:	0641      	lsls	r1, r0, #25
 8008d5e:	d5fb      	bpl.n	8008d58 <_printf_i+0xe4>
 8008d60:	881e      	ldrh	r6, [r3, #0]
 8008d62:	4853      	ldr	r0, [pc, #332]	; (8008eb0 <_printf_i+0x23c>)
 8008d64:	2f6f      	cmp	r7, #111	; 0x6f
 8008d66:	bf0c      	ite	eq
 8008d68:	2308      	moveq	r3, #8
 8008d6a:	230a      	movne	r3, #10
 8008d6c:	2100      	movs	r1, #0
 8008d6e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008d72:	6865      	ldr	r5, [r4, #4]
 8008d74:	60a5      	str	r5, [r4, #8]
 8008d76:	2d00      	cmp	r5, #0
 8008d78:	bfa2      	ittt	ge
 8008d7a:	6821      	ldrge	r1, [r4, #0]
 8008d7c:	f021 0104 	bicge.w	r1, r1, #4
 8008d80:	6021      	strge	r1, [r4, #0]
 8008d82:	b90e      	cbnz	r6, 8008d88 <_printf_i+0x114>
 8008d84:	2d00      	cmp	r5, #0
 8008d86:	d04b      	beq.n	8008e20 <_printf_i+0x1ac>
 8008d88:	4615      	mov	r5, r2
 8008d8a:	fbb6 f1f3 	udiv	r1, r6, r3
 8008d8e:	fb03 6711 	mls	r7, r3, r1, r6
 8008d92:	5dc7      	ldrb	r7, [r0, r7]
 8008d94:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008d98:	4637      	mov	r7, r6
 8008d9a:	42bb      	cmp	r3, r7
 8008d9c:	460e      	mov	r6, r1
 8008d9e:	d9f4      	bls.n	8008d8a <_printf_i+0x116>
 8008da0:	2b08      	cmp	r3, #8
 8008da2:	d10b      	bne.n	8008dbc <_printf_i+0x148>
 8008da4:	6823      	ldr	r3, [r4, #0]
 8008da6:	07de      	lsls	r6, r3, #31
 8008da8:	d508      	bpl.n	8008dbc <_printf_i+0x148>
 8008daa:	6923      	ldr	r3, [r4, #16]
 8008dac:	6861      	ldr	r1, [r4, #4]
 8008dae:	4299      	cmp	r1, r3
 8008db0:	bfde      	ittt	le
 8008db2:	2330      	movle	r3, #48	; 0x30
 8008db4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008db8:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008dbc:	1b52      	subs	r2, r2, r5
 8008dbe:	6122      	str	r2, [r4, #16]
 8008dc0:	f8cd a000 	str.w	sl, [sp]
 8008dc4:	464b      	mov	r3, r9
 8008dc6:	aa03      	add	r2, sp, #12
 8008dc8:	4621      	mov	r1, r4
 8008dca:	4640      	mov	r0, r8
 8008dcc:	f7ff fee4 	bl	8008b98 <_printf_common>
 8008dd0:	3001      	adds	r0, #1
 8008dd2:	d14a      	bne.n	8008e6a <_printf_i+0x1f6>
 8008dd4:	f04f 30ff 	mov.w	r0, #4294967295
 8008dd8:	b004      	add	sp, #16
 8008dda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008dde:	6823      	ldr	r3, [r4, #0]
 8008de0:	f043 0320 	orr.w	r3, r3, #32
 8008de4:	6023      	str	r3, [r4, #0]
 8008de6:	4833      	ldr	r0, [pc, #204]	; (8008eb4 <_printf_i+0x240>)
 8008de8:	2778      	movs	r7, #120	; 0x78
 8008dea:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008dee:	6823      	ldr	r3, [r4, #0]
 8008df0:	6829      	ldr	r1, [r5, #0]
 8008df2:	061f      	lsls	r7, r3, #24
 8008df4:	f851 6b04 	ldr.w	r6, [r1], #4
 8008df8:	d402      	bmi.n	8008e00 <_printf_i+0x18c>
 8008dfa:	065f      	lsls	r7, r3, #25
 8008dfc:	bf48      	it	mi
 8008dfe:	b2b6      	uxthmi	r6, r6
 8008e00:	07df      	lsls	r7, r3, #31
 8008e02:	bf48      	it	mi
 8008e04:	f043 0320 	orrmi.w	r3, r3, #32
 8008e08:	6029      	str	r1, [r5, #0]
 8008e0a:	bf48      	it	mi
 8008e0c:	6023      	strmi	r3, [r4, #0]
 8008e0e:	b91e      	cbnz	r6, 8008e18 <_printf_i+0x1a4>
 8008e10:	6823      	ldr	r3, [r4, #0]
 8008e12:	f023 0320 	bic.w	r3, r3, #32
 8008e16:	6023      	str	r3, [r4, #0]
 8008e18:	2310      	movs	r3, #16
 8008e1a:	e7a7      	b.n	8008d6c <_printf_i+0xf8>
 8008e1c:	4824      	ldr	r0, [pc, #144]	; (8008eb0 <_printf_i+0x23c>)
 8008e1e:	e7e4      	b.n	8008dea <_printf_i+0x176>
 8008e20:	4615      	mov	r5, r2
 8008e22:	e7bd      	b.n	8008da0 <_printf_i+0x12c>
 8008e24:	682b      	ldr	r3, [r5, #0]
 8008e26:	6826      	ldr	r6, [r4, #0]
 8008e28:	6961      	ldr	r1, [r4, #20]
 8008e2a:	1d18      	adds	r0, r3, #4
 8008e2c:	6028      	str	r0, [r5, #0]
 8008e2e:	0635      	lsls	r5, r6, #24
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	d501      	bpl.n	8008e38 <_printf_i+0x1c4>
 8008e34:	6019      	str	r1, [r3, #0]
 8008e36:	e002      	b.n	8008e3e <_printf_i+0x1ca>
 8008e38:	0670      	lsls	r0, r6, #25
 8008e3a:	d5fb      	bpl.n	8008e34 <_printf_i+0x1c0>
 8008e3c:	8019      	strh	r1, [r3, #0]
 8008e3e:	2300      	movs	r3, #0
 8008e40:	6123      	str	r3, [r4, #16]
 8008e42:	4615      	mov	r5, r2
 8008e44:	e7bc      	b.n	8008dc0 <_printf_i+0x14c>
 8008e46:	682b      	ldr	r3, [r5, #0]
 8008e48:	1d1a      	adds	r2, r3, #4
 8008e4a:	602a      	str	r2, [r5, #0]
 8008e4c:	681d      	ldr	r5, [r3, #0]
 8008e4e:	6862      	ldr	r2, [r4, #4]
 8008e50:	2100      	movs	r1, #0
 8008e52:	4628      	mov	r0, r5
 8008e54:	f7f7 f9d4 	bl	8000200 <memchr>
 8008e58:	b108      	cbz	r0, 8008e5e <_printf_i+0x1ea>
 8008e5a:	1b40      	subs	r0, r0, r5
 8008e5c:	6060      	str	r0, [r4, #4]
 8008e5e:	6863      	ldr	r3, [r4, #4]
 8008e60:	6123      	str	r3, [r4, #16]
 8008e62:	2300      	movs	r3, #0
 8008e64:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008e68:	e7aa      	b.n	8008dc0 <_printf_i+0x14c>
 8008e6a:	6923      	ldr	r3, [r4, #16]
 8008e6c:	462a      	mov	r2, r5
 8008e6e:	4649      	mov	r1, r9
 8008e70:	4640      	mov	r0, r8
 8008e72:	47d0      	blx	sl
 8008e74:	3001      	adds	r0, #1
 8008e76:	d0ad      	beq.n	8008dd4 <_printf_i+0x160>
 8008e78:	6823      	ldr	r3, [r4, #0]
 8008e7a:	079b      	lsls	r3, r3, #30
 8008e7c:	d413      	bmi.n	8008ea6 <_printf_i+0x232>
 8008e7e:	68e0      	ldr	r0, [r4, #12]
 8008e80:	9b03      	ldr	r3, [sp, #12]
 8008e82:	4298      	cmp	r0, r3
 8008e84:	bfb8      	it	lt
 8008e86:	4618      	movlt	r0, r3
 8008e88:	e7a6      	b.n	8008dd8 <_printf_i+0x164>
 8008e8a:	2301      	movs	r3, #1
 8008e8c:	4632      	mov	r2, r6
 8008e8e:	4649      	mov	r1, r9
 8008e90:	4640      	mov	r0, r8
 8008e92:	47d0      	blx	sl
 8008e94:	3001      	adds	r0, #1
 8008e96:	d09d      	beq.n	8008dd4 <_printf_i+0x160>
 8008e98:	3501      	adds	r5, #1
 8008e9a:	68e3      	ldr	r3, [r4, #12]
 8008e9c:	9903      	ldr	r1, [sp, #12]
 8008e9e:	1a5b      	subs	r3, r3, r1
 8008ea0:	42ab      	cmp	r3, r5
 8008ea2:	dcf2      	bgt.n	8008e8a <_printf_i+0x216>
 8008ea4:	e7eb      	b.n	8008e7e <_printf_i+0x20a>
 8008ea6:	2500      	movs	r5, #0
 8008ea8:	f104 0619 	add.w	r6, r4, #25
 8008eac:	e7f5      	b.n	8008e9a <_printf_i+0x226>
 8008eae:	bf00      	nop
 8008eb0:	08009061 	.word	0x08009061
 8008eb4:	08009072 	.word	0x08009072

08008eb8 <memmove>:
 8008eb8:	4288      	cmp	r0, r1
 8008eba:	b510      	push	{r4, lr}
 8008ebc:	eb01 0402 	add.w	r4, r1, r2
 8008ec0:	d902      	bls.n	8008ec8 <memmove+0x10>
 8008ec2:	4284      	cmp	r4, r0
 8008ec4:	4623      	mov	r3, r4
 8008ec6:	d807      	bhi.n	8008ed8 <memmove+0x20>
 8008ec8:	1e43      	subs	r3, r0, #1
 8008eca:	42a1      	cmp	r1, r4
 8008ecc:	d008      	beq.n	8008ee0 <memmove+0x28>
 8008ece:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008ed2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008ed6:	e7f8      	b.n	8008eca <memmove+0x12>
 8008ed8:	4402      	add	r2, r0
 8008eda:	4601      	mov	r1, r0
 8008edc:	428a      	cmp	r2, r1
 8008ede:	d100      	bne.n	8008ee2 <memmove+0x2a>
 8008ee0:	bd10      	pop	{r4, pc}
 8008ee2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008ee6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008eea:	e7f7      	b.n	8008edc <memmove+0x24>

08008eec <_sbrk_r>:
 8008eec:	b538      	push	{r3, r4, r5, lr}
 8008eee:	4d06      	ldr	r5, [pc, #24]	; (8008f08 <_sbrk_r+0x1c>)
 8008ef0:	2300      	movs	r3, #0
 8008ef2:	4604      	mov	r4, r0
 8008ef4:	4608      	mov	r0, r1
 8008ef6:	602b      	str	r3, [r5, #0]
 8008ef8:	f7f8 f878 	bl	8000fec <_sbrk>
 8008efc:	1c43      	adds	r3, r0, #1
 8008efe:	d102      	bne.n	8008f06 <_sbrk_r+0x1a>
 8008f00:	682b      	ldr	r3, [r5, #0]
 8008f02:	b103      	cbz	r3, 8008f06 <_sbrk_r+0x1a>
 8008f04:	6023      	str	r3, [r4, #0]
 8008f06:	bd38      	pop	{r3, r4, r5, pc}
 8008f08:	2001e47c 	.word	0x2001e47c

08008f0c <_realloc_r>:
 8008f0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f10:	4680      	mov	r8, r0
 8008f12:	4614      	mov	r4, r2
 8008f14:	460e      	mov	r6, r1
 8008f16:	b921      	cbnz	r1, 8008f22 <_realloc_r+0x16>
 8008f18:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008f1c:	4611      	mov	r1, r2
 8008f1e:	f7ff bc57 	b.w	80087d0 <_malloc_r>
 8008f22:	b92a      	cbnz	r2, 8008f30 <_realloc_r+0x24>
 8008f24:	f7ff fbe8 	bl	80086f8 <_free_r>
 8008f28:	4625      	mov	r5, r4
 8008f2a:	4628      	mov	r0, r5
 8008f2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008f30:	f000 f81b 	bl	8008f6a <_malloc_usable_size_r>
 8008f34:	4284      	cmp	r4, r0
 8008f36:	4607      	mov	r7, r0
 8008f38:	d802      	bhi.n	8008f40 <_realloc_r+0x34>
 8008f3a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008f3e:	d812      	bhi.n	8008f66 <_realloc_r+0x5a>
 8008f40:	4621      	mov	r1, r4
 8008f42:	4640      	mov	r0, r8
 8008f44:	f7ff fc44 	bl	80087d0 <_malloc_r>
 8008f48:	4605      	mov	r5, r0
 8008f4a:	2800      	cmp	r0, #0
 8008f4c:	d0ed      	beq.n	8008f2a <_realloc_r+0x1e>
 8008f4e:	42bc      	cmp	r4, r7
 8008f50:	4622      	mov	r2, r4
 8008f52:	4631      	mov	r1, r6
 8008f54:	bf28      	it	cs
 8008f56:	463a      	movcs	r2, r7
 8008f58:	f7ff fbc0 	bl	80086dc <memcpy>
 8008f5c:	4631      	mov	r1, r6
 8008f5e:	4640      	mov	r0, r8
 8008f60:	f7ff fbca 	bl	80086f8 <_free_r>
 8008f64:	e7e1      	b.n	8008f2a <_realloc_r+0x1e>
 8008f66:	4635      	mov	r5, r6
 8008f68:	e7df      	b.n	8008f2a <_realloc_r+0x1e>

08008f6a <_malloc_usable_size_r>:
 8008f6a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008f6e:	1f18      	subs	r0, r3, #4
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	bfbc      	itt	lt
 8008f74:	580b      	ldrlt	r3, [r1, r0]
 8008f76:	18c0      	addlt	r0, r0, r3
 8008f78:	4770      	bx	lr
	...

08008f7c <_init>:
 8008f7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f7e:	bf00      	nop
 8008f80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008f82:	bc08      	pop	{r3}
 8008f84:	469e      	mov	lr, r3
 8008f86:	4770      	bx	lr

08008f88 <_fini>:
 8008f88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f8a:	bf00      	nop
 8008f8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008f8e:	bc08      	pop	{r3}
 8008f90:	469e      	mov	lr, r3
 8008f92:	4770      	bx	lr
