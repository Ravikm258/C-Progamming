
RTOS_Timers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006478  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c4  08006638  08006638  00016638  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080066fc  080066fc  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  080066fc  080066fc  000166fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006704  08006704  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006704  08006704  00016704  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006708  08006708  00016708  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  0800670c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0001e268  20000010  0800671c  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2001e278  0800671c  0002e278  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 13 .debug_info   00016ca6  00000000  00000000  00020083  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003185  00000000  00000000  00036d29  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000013d0  00000000  00000000  00039eb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f75  00000000  00000000  0003b280  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002b886  00000000  00000000  0003c1f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00017ff2  00000000  00000000  00067a7b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0010f11e  00000000  00000000  0007fa6d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000052e0  00000000  00000000  0018eb8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000051  00000000  00000000  00193e6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000010 	.word	0x20000010
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08006620 	.word	0x08006620

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000014 	.word	0x20000014
 80001fc:	08006620 	.word	0x08006620

08000200 <__aeabi_uldivmod>:
 8000200:	b953      	cbnz	r3, 8000218 <__aeabi_uldivmod+0x18>
 8000202:	b94a      	cbnz	r2, 8000218 <__aeabi_uldivmod+0x18>
 8000204:	2900      	cmp	r1, #0
 8000206:	bf08      	it	eq
 8000208:	2800      	cmpeq	r0, #0
 800020a:	bf1c      	itt	ne
 800020c:	f04f 31ff 	movne.w	r1, #4294967295
 8000210:	f04f 30ff 	movne.w	r0, #4294967295
 8000214:	f000 b970 	b.w	80004f8 <__aeabi_idiv0>
 8000218:	f1ad 0c08 	sub.w	ip, sp, #8
 800021c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000220:	f000 f806 	bl	8000230 <__udivmoddi4>
 8000224:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000228:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800022c:	b004      	add	sp, #16
 800022e:	4770      	bx	lr

08000230 <__udivmoddi4>:
 8000230:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000234:	9e08      	ldr	r6, [sp, #32]
 8000236:	460d      	mov	r5, r1
 8000238:	4604      	mov	r4, r0
 800023a:	460f      	mov	r7, r1
 800023c:	2b00      	cmp	r3, #0
 800023e:	d14a      	bne.n	80002d6 <__udivmoddi4+0xa6>
 8000240:	428a      	cmp	r2, r1
 8000242:	4694      	mov	ip, r2
 8000244:	d965      	bls.n	8000312 <__udivmoddi4+0xe2>
 8000246:	fab2 f382 	clz	r3, r2
 800024a:	b143      	cbz	r3, 800025e <__udivmoddi4+0x2e>
 800024c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000250:	f1c3 0220 	rsb	r2, r3, #32
 8000254:	409f      	lsls	r7, r3
 8000256:	fa20 f202 	lsr.w	r2, r0, r2
 800025a:	4317      	orrs	r7, r2
 800025c:	409c      	lsls	r4, r3
 800025e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000262:	fa1f f58c 	uxth.w	r5, ip
 8000266:	fbb7 f1fe 	udiv	r1, r7, lr
 800026a:	0c22      	lsrs	r2, r4, #16
 800026c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000270:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000274:	fb01 f005 	mul.w	r0, r1, r5
 8000278:	4290      	cmp	r0, r2
 800027a:	d90a      	bls.n	8000292 <__udivmoddi4+0x62>
 800027c:	eb1c 0202 	adds.w	r2, ip, r2
 8000280:	f101 37ff 	add.w	r7, r1, #4294967295
 8000284:	f080 811c 	bcs.w	80004c0 <__udivmoddi4+0x290>
 8000288:	4290      	cmp	r0, r2
 800028a:	f240 8119 	bls.w	80004c0 <__udivmoddi4+0x290>
 800028e:	3902      	subs	r1, #2
 8000290:	4462      	add	r2, ip
 8000292:	1a12      	subs	r2, r2, r0
 8000294:	b2a4      	uxth	r4, r4
 8000296:	fbb2 f0fe 	udiv	r0, r2, lr
 800029a:	fb0e 2210 	mls	r2, lr, r0, r2
 800029e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002a2:	fb00 f505 	mul.w	r5, r0, r5
 80002a6:	42a5      	cmp	r5, r4
 80002a8:	d90a      	bls.n	80002c0 <__udivmoddi4+0x90>
 80002aa:	eb1c 0404 	adds.w	r4, ip, r4
 80002ae:	f100 32ff 	add.w	r2, r0, #4294967295
 80002b2:	f080 8107 	bcs.w	80004c4 <__udivmoddi4+0x294>
 80002b6:	42a5      	cmp	r5, r4
 80002b8:	f240 8104 	bls.w	80004c4 <__udivmoddi4+0x294>
 80002bc:	4464      	add	r4, ip
 80002be:	3802      	subs	r0, #2
 80002c0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002c4:	1b64      	subs	r4, r4, r5
 80002c6:	2100      	movs	r1, #0
 80002c8:	b11e      	cbz	r6, 80002d2 <__udivmoddi4+0xa2>
 80002ca:	40dc      	lsrs	r4, r3
 80002cc:	2300      	movs	r3, #0
 80002ce:	e9c6 4300 	strd	r4, r3, [r6]
 80002d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d908      	bls.n	80002ec <__udivmoddi4+0xbc>
 80002da:	2e00      	cmp	r6, #0
 80002dc:	f000 80ed 	beq.w	80004ba <__udivmoddi4+0x28a>
 80002e0:	2100      	movs	r1, #0
 80002e2:	e9c6 0500 	strd	r0, r5, [r6]
 80002e6:	4608      	mov	r0, r1
 80002e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ec:	fab3 f183 	clz	r1, r3
 80002f0:	2900      	cmp	r1, #0
 80002f2:	d149      	bne.n	8000388 <__udivmoddi4+0x158>
 80002f4:	42ab      	cmp	r3, r5
 80002f6:	d302      	bcc.n	80002fe <__udivmoddi4+0xce>
 80002f8:	4282      	cmp	r2, r0
 80002fa:	f200 80f8 	bhi.w	80004ee <__udivmoddi4+0x2be>
 80002fe:	1a84      	subs	r4, r0, r2
 8000300:	eb65 0203 	sbc.w	r2, r5, r3
 8000304:	2001      	movs	r0, #1
 8000306:	4617      	mov	r7, r2
 8000308:	2e00      	cmp	r6, #0
 800030a:	d0e2      	beq.n	80002d2 <__udivmoddi4+0xa2>
 800030c:	e9c6 4700 	strd	r4, r7, [r6]
 8000310:	e7df      	b.n	80002d2 <__udivmoddi4+0xa2>
 8000312:	b902      	cbnz	r2, 8000316 <__udivmoddi4+0xe6>
 8000314:	deff      	udf	#255	; 0xff
 8000316:	fab2 f382 	clz	r3, r2
 800031a:	2b00      	cmp	r3, #0
 800031c:	f040 8090 	bne.w	8000440 <__udivmoddi4+0x210>
 8000320:	1a8a      	subs	r2, r1, r2
 8000322:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000326:	fa1f fe8c 	uxth.w	lr, ip
 800032a:	2101      	movs	r1, #1
 800032c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000330:	fb07 2015 	mls	r0, r7, r5, r2
 8000334:	0c22      	lsrs	r2, r4, #16
 8000336:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800033a:	fb0e f005 	mul.w	r0, lr, r5
 800033e:	4290      	cmp	r0, r2
 8000340:	d908      	bls.n	8000354 <__udivmoddi4+0x124>
 8000342:	eb1c 0202 	adds.w	r2, ip, r2
 8000346:	f105 38ff 	add.w	r8, r5, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x122>
 800034c:	4290      	cmp	r0, r2
 800034e:	f200 80cb 	bhi.w	80004e8 <__udivmoddi4+0x2b8>
 8000352:	4645      	mov	r5, r8
 8000354:	1a12      	subs	r2, r2, r0
 8000356:	b2a4      	uxth	r4, r4
 8000358:	fbb2 f0f7 	udiv	r0, r2, r7
 800035c:	fb07 2210 	mls	r2, r7, r0, r2
 8000360:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000364:	fb0e fe00 	mul.w	lr, lr, r0
 8000368:	45a6      	cmp	lr, r4
 800036a:	d908      	bls.n	800037e <__udivmoddi4+0x14e>
 800036c:	eb1c 0404 	adds.w	r4, ip, r4
 8000370:	f100 32ff 	add.w	r2, r0, #4294967295
 8000374:	d202      	bcs.n	800037c <__udivmoddi4+0x14c>
 8000376:	45a6      	cmp	lr, r4
 8000378:	f200 80bb 	bhi.w	80004f2 <__udivmoddi4+0x2c2>
 800037c:	4610      	mov	r0, r2
 800037e:	eba4 040e 	sub.w	r4, r4, lr
 8000382:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000386:	e79f      	b.n	80002c8 <__udivmoddi4+0x98>
 8000388:	f1c1 0720 	rsb	r7, r1, #32
 800038c:	408b      	lsls	r3, r1
 800038e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000392:	ea4c 0c03 	orr.w	ip, ip, r3
 8000396:	fa05 f401 	lsl.w	r4, r5, r1
 800039a:	fa20 f307 	lsr.w	r3, r0, r7
 800039e:	40fd      	lsrs	r5, r7
 80003a0:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003a4:	4323      	orrs	r3, r4
 80003a6:	fbb5 f8f9 	udiv	r8, r5, r9
 80003aa:	fa1f fe8c 	uxth.w	lr, ip
 80003ae:	fb09 5518 	mls	r5, r9, r8, r5
 80003b2:	0c1c      	lsrs	r4, r3, #16
 80003b4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003b8:	fb08 f50e 	mul.w	r5, r8, lr
 80003bc:	42a5      	cmp	r5, r4
 80003be:	fa02 f201 	lsl.w	r2, r2, r1
 80003c2:	fa00 f001 	lsl.w	r0, r0, r1
 80003c6:	d90b      	bls.n	80003e0 <__udivmoddi4+0x1b0>
 80003c8:	eb1c 0404 	adds.w	r4, ip, r4
 80003cc:	f108 3aff 	add.w	sl, r8, #4294967295
 80003d0:	f080 8088 	bcs.w	80004e4 <__udivmoddi4+0x2b4>
 80003d4:	42a5      	cmp	r5, r4
 80003d6:	f240 8085 	bls.w	80004e4 <__udivmoddi4+0x2b4>
 80003da:	f1a8 0802 	sub.w	r8, r8, #2
 80003de:	4464      	add	r4, ip
 80003e0:	1b64      	subs	r4, r4, r5
 80003e2:	b29d      	uxth	r5, r3
 80003e4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003e8:	fb09 4413 	mls	r4, r9, r3, r4
 80003ec:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003f0:	fb03 fe0e 	mul.w	lr, r3, lr
 80003f4:	45a6      	cmp	lr, r4
 80003f6:	d908      	bls.n	800040a <__udivmoddi4+0x1da>
 80003f8:	eb1c 0404 	adds.w	r4, ip, r4
 80003fc:	f103 35ff 	add.w	r5, r3, #4294967295
 8000400:	d26c      	bcs.n	80004dc <__udivmoddi4+0x2ac>
 8000402:	45a6      	cmp	lr, r4
 8000404:	d96a      	bls.n	80004dc <__udivmoddi4+0x2ac>
 8000406:	3b02      	subs	r3, #2
 8000408:	4464      	add	r4, ip
 800040a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800040e:	fba3 9502 	umull	r9, r5, r3, r2
 8000412:	eba4 040e 	sub.w	r4, r4, lr
 8000416:	42ac      	cmp	r4, r5
 8000418:	46c8      	mov	r8, r9
 800041a:	46ae      	mov	lr, r5
 800041c:	d356      	bcc.n	80004cc <__udivmoddi4+0x29c>
 800041e:	d053      	beq.n	80004c8 <__udivmoddi4+0x298>
 8000420:	b156      	cbz	r6, 8000438 <__udivmoddi4+0x208>
 8000422:	ebb0 0208 	subs.w	r2, r0, r8
 8000426:	eb64 040e 	sbc.w	r4, r4, lr
 800042a:	fa04 f707 	lsl.w	r7, r4, r7
 800042e:	40ca      	lsrs	r2, r1
 8000430:	40cc      	lsrs	r4, r1
 8000432:	4317      	orrs	r7, r2
 8000434:	e9c6 7400 	strd	r7, r4, [r6]
 8000438:	4618      	mov	r0, r3
 800043a:	2100      	movs	r1, #0
 800043c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000440:	f1c3 0120 	rsb	r1, r3, #32
 8000444:	fa02 fc03 	lsl.w	ip, r2, r3
 8000448:	fa20 f201 	lsr.w	r2, r0, r1
 800044c:	fa25 f101 	lsr.w	r1, r5, r1
 8000450:	409d      	lsls	r5, r3
 8000452:	432a      	orrs	r2, r5
 8000454:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000458:	fa1f fe8c 	uxth.w	lr, ip
 800045c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000460:	fb07 1510 	mls	r5, r7, r0, r1
 8000464:	0c11      	lsrs	r1, r2, #16
 8000466:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800046a:	fb00 f50e 	mul.w	r5, r0, lr
 800046e:	428d      	cmp	r5, r1
 8000470:	fa04 f403 	lsl.w	r4, r4, r3
 8000474:	d908      	bls.n	8000488 <__udivmoddi4+0x258>
 8000476:	eb1c 0101 	adds.w	r1, ip, r1
 800047a:	f100 38ff 	add.w	r8, r0, #4294967295
 800047e:	d22f      	bcs.n	80004e0 <__udivmoddi4+0x2b0>
 8000480:	428d      	cmp	r5, r1
 8000482:	d92d      	bls.n	80004e0 <__udivmoddi4+0x2b0>
 8000484:	3802      	subs	r0, #2
 8000486:	4461      	add	r1, ip
 8000488:	1b49      	subs	r1, r1, r5
 800048a:	b292      	uxth	r2, r2
 800048c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000490:	fb07 1115 	mls	r1, r7, r5, r1
 8000494:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000498:	fb05 f10e 	mul.w	r1, r5, lr
 800049c:	4291      	cmp	r1, r2
 800049e:	d908      	bls.n	80004b2 <__udivmoddi4+0x282>
 80004a0:	eb1c 0202 	adds.w	r2, ip, r2
 80004a4:	f105 38ff 	add.w	r8, r5, #4294967295
 80004a8:	d216      	bcs.n	80004d8 <__udivmoddi4+0x2a8>
 80004aa:	4291      	cmp	r1, r2
 80004ac:	d914      	bls.n	80004d8 <__udivmoddi4+0x2a8>
 80004ae:	3d02      	subs	r5, #2
 80004b0:	4462      	add	r2, ip
 80004b2:	1a52      	subs	r2, r2, r1
 80004b4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004b8:	e738      	b.n	800032c <__udivmoddi4+0xfc>
 80004ba:	4631      	mov	r1, r6
 80004bc:	4630      	mov	r0, r6
 80004be:	e708      	b.n	80002d2 <__udivmoddi4+0xa2>
 80004c0:	4639      	mov	r1, r7
 80004c2:	e6e6      	b.n	8000292 <__udivmoddi4+0x62>
 80004c4:	4610      	mov	r0, r2
 80004c6:	e6fb      	b.n	80002c0 <__udivmoddi4+0x90>
 80004c8:	4548      	cmp	r0, r9
 80004ca:	d2a9      	bcs.n	8000420 <__udivmoddi4+0x1f0>
 80004cc:	ebb9 0802 	subs.w	r8, r9, r2
 80004d0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004d4:	3b01      	subs	r3, #1
 80004d6:	e7a3      	b.n	8000420 <__udivmoddi4+0x1f0>
 80004d8:	4645      	mov	r5, r8
 80004da:	e7ea      	b.n	80004b2 <__udivmoddi4+0x282>
 80004dc:	462b      	mov	r3, r5
 80004de:	e794      	b.n	800040a <__udivmoddi4+0x1da>
 80004e0:	4640      	mov	r0, r8
 80004e2:	e7d1      	b.n	8000488 <__udivmoddi4+0x258>
 80004e4:	46d0      	mov	r8, sl
 80004e6:	e77b      	b.n	80003e0 <__udivmoddi4+0x1b0>
 80004e8:	3d02      	subs	r5, #2
 80004ea:	4462      	add	r2, ip
 80004ec:	e732      	b.n	8000354 <__udivmoddi4+0x124>
 80004ee:	4608      	mov	r0, r1
 80004f0:	e70a      	b.n	8000308 <__udivmoddi4+0xd8>
 80004f2:	4464      	add	r4, ip
 80004f4:	3802      	subs	r0, #2
 80004f6:	e742      	b.n	800037e <__udivmoddi4+0x14e>

080004f8 <__aeabi_idiv0>:
 80004f8:	4770      	bx	lr
 80004fa:	bf00      	nop

080004fc <uartTask>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void uartTask(void *params)
{
 80004fc:	b590      	push	{r4, r7, lr}
 80004fe:	b085      	sub	sp, #20
 8000500:	af02      	add	r7, sp, #8
 8000502:	6078      	str	r0, [r7, #4]
	xTimerStart(PR_handler,0);
 8000504:	4b0a      	ldr	r3, [pc, #40]	; (8000530 <uartTask+0x34>)
 8000506:	681c      	ldr	r4, [r3, #0]
 8000508:	f004 fcb8 	bl	8004e7c <xTaskGetTickCount>
 800050c:	4602      	mov	r2, r0
 800050e:	2300      	movs	r3, #0
 8000510:	9300      	str	r3, [sp, #0]
 8000512:	2300      	movs	r3, #0
 8000514:	2101      	movs	r1, #1
 8000516:	4620      	mov	r0, r4
 8000518:	f005 f948 	bl	80057ac <xTimerGenericCommand>
	while(1)
	{
		HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 800051c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000520:	4804      	ldr	r0, [pc, #16]	; (8000534 <uartTask+0x38>)
 8000522:	f000 fe5f 	bl	80011e4 <HAL_GPIO_TogglePin>
		vTaskDelay(pdMS_TO_TICKS(1000));
 8000526:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800052a:	f004 fb7b 	bl	8004c24 <vTaskDelay>
		HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 800052e:	e7f5      	b.n	800051c <uartTask+0x20>
 8000530:	200000c0 	.word	0x200000c0
 8000534:	48000400 	.word	0x48000400

08000538 <LedTask>:
	}
}

void LedTask(void *params)
{
 8000538:	b590      	push	{r4, r7, lr}
 800053a:	b085      	sub	sp, #20
 800053c:	af02      	add	r7, sp, #8
 800053e:	6078      	str	r0, [r7, #4]
	while(1)
	{
		if(HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin))
 8000540:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000544:	480b      	ldr	r0, [pc, #44]	; (8000574 <LedTask+0x3c>)
 8000546:	f000 fe1d 	bl	8001184 <HAL_GPIO_ReadPin>
 800054a:	4603      	mov	r3, r0
 800054c:	2b00      	cmp	r3, #0
 800054e:	d0f7      	beq.n	8000540 <LedTask+0x8>
		{
			HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, 1);
 8000550:	2201      	movs	r2, #1
 8000552:	2180      	movs	r1, #128	; 0x80
 8000554:	4808      	ldr	r0, [pc, #32]	; (8000578 <LedTask+0x40>)
 8000556:	f000 fe2d 	bl	80011b4 <HAL_GPIO_WritePin>
			xTimerStart(OST_handler,0);
 800055a:	4b08      	ldr	r3, [pc, #32]	; (800057c <LedTask+0x44>)
 800055c:	681c      	ldr	r4, [r3, #0]
 800055e:	f004 fc8d 	bl	8004e7c <xTaskGetTickCount>
 8000562:	4602      	mov	r2, r0
 8000564:	2300      	movs	r3, #0
 8000566:	9300      	str	r3, [sp, #0]
 8000568:	2300      	movs	r3, #0
 800056a:	2101      	movs	r1, #1
 800056c:	4620      	mov	r0, r4
 800056e:	f005 f91d 	bl	80057ac <xTimerGenericCommand>
		if(HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin))
 8000572:	e7e5      	b.n	8000540 <LedTask+0x8>
 8000574:	48000800 	.word	0x48000800
 8000578:	48000400 	.word	0x48000400
 800057c:	200000c4 	.word	0x200000c4

08000580 <timer_callback>:
		}
	}
}

void timer_callback(xTimerHandle xtimer)
{
 8000580:	b5b0      	push	{r4, r5, r7, lr}
 8000582:	b08c      	sub	sp, #48	; 0x30
 8000584:	af00      	add	r7, sp, #0
 8000586:	6078      	str	r0, [r7, #4]
	if(xtimer == PR_handler)
 8000588:	4b12      	ldr	r3, [pc, #72]	; (80005d4 <timer_callback+0x54>)
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	687a      	ldr	r2, [r7, #4]
 800058e:	429a      	cmp	r2, r3
 8000590:	d111      	bne.n	80005b6 <timer_callback+0x36>
	{
		uint8_t buf[] = "sending from Callback function\n\r";
 8000592:	4b11      	ldr	r3, [pc, #68]	; (80005d8 <timer_callback+0x58>)
 8000594:	f107 040c 	add.w	r4, r7, #12
 8000598:	461d      	mov	r5, r3
 800059a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800059c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800059e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005a0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005a2:	682b      	ldr	r3, [r5, #0]
 80005a4:	7023      	strb	r3, [r4, #0]
		HAL_UART_Transmit(&hlpuart1, buf, sizeof(buf), HAL_MAX_DELAY);
 80005a6:	f107 010c 	add.w	r1, r7, #12
 80005aa:	f04f 33ff 	mov.w	r3, #4294967295
 80005ae:	2221      	movs	r2, #33	; 0x21
 80005b0:	480a      	ldr	r0, [pc, #40]	; (80005dc <timer_callback+0x5c>)
 80005b2:	f002 fe2b 	bl	800320c <HAL_UART_Transmit>
	}
	if(xtimer == OST_handler)
 80005b6:	4b0a      	ldr	r3, [pc, #40]	; (80005e0 <timer_callback+0x60>)
 80005b8:	681b      	ldr	r3, [r3, #0]
 80005ba:	687a      	ldr	r2, [r7, #4]
 80005bc:	429a      	cmp	r2, r3
 80005be:	d104      	bne.n	80005ca <timer_callback+0x4a>
	{
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80005c0:	2200      	movs	r2, #0
 80005c2:	2180      	movs	r1, #128	; 0x80
 80005c4:	4807      	ldr	r0, [pc, #28]	; (80005e4 <timer_callback+0x64>)
 80005c6:	f000 fdf5 	bl	80011b4 <HAL_GPIO_WritePin>
	}
}
 80005ca:	bf00      	nop
 80005cc:	3730      	adds	r7, #48	; 0x30
 80005ce:	46bd      	mov	sp, r7
 80005d0:	bdb0      	pop	{r4, r5, r7, pc}
 80005d2:	bf00      	nop
 80005d4:	200000c0 	.word	0x200000c0
 80005d8:	08006638 	.word	0x08006638
 80005dc:	2000002c 	.word	0x2000002c
 80005e0:	200000c4 	.word	0x200000c4
 80005e4:	48000400 	.word	0x48000400

080005e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b082      	sub	sp, #8
 80005ec:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005ee:	f000 fb1c 	bl	8000c2a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005f2:	f000 f845 	bl	8000680 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005f6:	f000 f8d7 	bl	80007a8 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 80005fa:	f000 f889 	bl	8000710 <MX_LPUART1_UART_Init>
  /* USER CODE BEGIN 2 */

  xTaskCreate(uartTask, "task1", configMINIMAL_STACK_SIZE, NULL, 1, NULL);
 80005fe:	2300      	movs	r3, #0
 8000600:	9301      	str	r3, [sp, #4]
 8000602:	2301      	movs	r3, #1
 8000604:	9300      	str	r3, [sp, #0]
 8000606:	2300      	movs	r3, #0
 8000608:	2280      	movs	r2, #128	; 0x80
 800060a:	4914      	ldr	r1, [pc, #80]	; (800065c <main+0x74>)
 800060c:	4814      	ldr	r0, [pc, #80]	; (8000660 <main+0x78>)
 800060e:	f004 f9d7 	bl	80049c0 <xTaskCreate>
  xTaskCreate(LedTask, "task2", configMINIMAL_STACK_SIZE, NULL, 1, NULL);
 8000612:	2300      	movs	r3, #0
 8000614:	9301      	str	r3, [sp, #4]
 8000616:	2301      	movs	r3, #1
 8000618:	9300      	str	r3, [sp, #0]
 800061a:	2300      	movs	r3, #0
 800061c:	2280      	movs	r2, #128	; 0x80
 800061e:	4911      	ldr	r1, [pc, #68]	; (8000664 <main+0x7c>)
 8000620:	4811      	ldr	r0, [pc, #68]	; (8000668 <main+0x80>)
 8000622:	f004 f9cd 	bl	80049c0 <xTaskCreate>

  PR_handler = xTimerCreate("timer1", pdMS_TO_TICKS(2000), pdTRUE, (void*)1, timer_callback);
 8000626:	4b11      	ldr	r3, [pc, #68]	; (800066c <main+0x84>)
 8000628:	9300      	str	r3, [sp, #0]
 800062a:	2301      	movs	r3, #1
 800062c:	2201      	movs	r2, #1
 800062e:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8000632:	480f      	ldr	r0, [pc, #60]	; (8000670 <main+0x88>)
 8000634:	f005 f85e 	bl	80056f4 <xTimerCreate>
 8000638:	4603      	mov	r3, r0
 800063a:	4a0e      	ldr	r2, [pc, #56]	; (8000674 <main+0x8c>)
 800063c:	6013      	str	r3, [r2, #0]
  OST_handler = xTimerCreate("timer2", pdMS_TO_TICKS(4000), pdFALSE, (void*)2, timer_callback);
 800063e:	4b0b      	ldr	r3, [pc, #44]	; (800066c <main+0x84>)
 8000640:	9300      	str	r3, [sp, #0]
 8000642:	2302      	movs	r3, #2
 8000644:	2200      	movs	r2, #0
 8000646:	f44f 617a 	mov.w	r1, #4000	; 0xfa0
 800064a:	480b      	ldr	r0, [pc, #44]	; (8000678 <main+0x90>)
 800064c:	f005 f852 	bl	80056f4 <xTimerCreate>
 8000650:	4603      	mov	r3, r0
 8000652:	4a0a      	ldr	r2, [pc, #40]	; (800067c <main+0x94>)
 8000654:	6013      	str	r3, [r2, #0]

  vTaskStartScheduler();
 8000656:	f004 fb19 	bl	8004c8c <vTaskStartScheduler>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800065a:	e7fe      	b.n	800065a <main+0x72>
 800065c:	0800665c 	.word	0x0800665c
 8000660:	080004fd 	.word	0x080004fd
 8000664:	08006664 	.word	0x08006664
 8000668:	08000539 	.word	0x08000539
 800066c:	08000581 	.word	0x08000581
 8000670:	0800666c 	.word	0x0800666c
 8000674:	200000c0 	.word	0x200000c0
 8000678:	08006674 	.word	0x08006674
 800067c:	200000c4 	.word	0x200000c4

08000680 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b096      	sub	sp, #88	; 0x58
 8000684:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000686:	f107 0314 	add.w	r3, r7, #20
 800068a:	2244      	movs	r2, #68	; 0x44
 800068c:	2100      	movs	r1, #0
 800068e:	4618      	mov	r0, r3
 8000690:	f005 ff8c 	bl	80065ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000694:	463b      	mov	r3, r7
 8000696:	2200      	movs	r2, #0
 8000698:	601a      	str	r2, [r3, #0]
 800069a:	605a      	str	r2, [r3, #4]
 800069c:	609a      	str	r2, [r3, #8]
 800069e:	60da      	str	r2, [r3, #12]
 80006a0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80006a2:	f44f 7000 	mov.w	r0, #512	; 0x200
 80006a6:	f000 fdd7 	bl	8001258 <HAL_PWREx_ControlVoltageScaling>
 80006aa:	4603      	mov	r3, r0
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d001      	beq.n	80006b4 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80006b0:	f000 f95f 	bl	8000972 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80006b4:	2310      	movs	r3, #16
 80006b6:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80006b8:	2301      	movs	r3, #1
 80006ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80006bc:	2300      	movs	r3, #0
 80006be:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80006c0:	2360      	movs	r3, #96	; 0x60
 80006c2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006c4:	2300      	movs	r3, #0
 80006c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006c8:	f107 0314 	add.w	r3, r7, #20
 80006cc:	4618      	mov	r0, r3
 80006ce:	f000 fe77 	bl	80013c0 <HAL_RCC_OscConfig>
 80006d2:	4603      	mov	r3, r0
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d001      	beq.n	80006dc <SystemClock_Config+0x5c>
  {
    Error_Handler();
 80006d8:	f000 f94b 	bl	8000972 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006dc:	230f      	movs	r3, #15
 80006de:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80006e0:	2300      	movs	r3, #0
 80006e2:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006e4:	2300      	movs	r3, #0
 80006e6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80006ec:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006ee:	2300      	movs	r3, #0
 80006f0:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006f2:	463b      	mov	r3, r7
 80006f4:	2100      	movs	r1, #0
 80006f6:	4618      	mov	r0, r3
 80006f8:	f001 fa7c 	bl	8001bf4 <HAL_RCC_ClockConfig>
 80006fc:	4603      	mov	r3, r0
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d001      	beq.n	8000706 <SystemClock_Config+0x86>
  {
    Error_Handler();
 8000702:	f000 f936 	bl	8000972 <Error_Handler>
  }
}
 8000706:	bf00      	nop
 8000708:	3758      	adds	r7, #88	; 0x58
 800070a:	46bd      	mov	sp, r7
 800070c:	bd80      	pop	{r7, pc}
	...

08000710 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000714:	4b22      	ldr	r3, [pc, #136]	; (80007a0 <MX_LPUART1_UART_Init+0x90>)
 8000716:	4a23      	ldr	r2, [pc, #140]	; (80007a4 <MX_LPUART1_UART_Init+0x94>)
 8000718:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 800071a:	4b21      	ldr	r3, [pc, #132]	; (80007a0 <MX_LPUART1_UART_Init+0x90>)
 800071c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000720:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000722:	4b1f      	ldr	r3, [pc, #124]	; (80007a0 <MX_LPUART1_UART_Init+0x90>)
 8000724:	2200      	movs	r2, #0
 8000726:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000728:	4b1d      	ldr	r3, [pc, #116]	; (80007a0 <MX_LPUART1_UART_Init+0x90>)
 800072a:	2200      	movs	r2, #0
 800072c:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800072e:	4b1c      	ldr	r3, [pc, #112]	; (80007a0 <MX_LPUART1_UART_Init+0x90>)
 8000730:	2200      	movs	r2, #0
 8000732:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000734:	4b1a      	ldr	r3, [pc, #104]	; (80007a0 <MX_LPUART1_UART_Init+0x90>)
 8000736:	220c      	movs	r2, #12
 8000738:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800073a:	4b19      	ldr	r3, [pc, #100]	; (80007a0 <MX_LPUART1_UART_Init+0x90>)
 800073c:	2200      	movs	r2, #0
 800073e:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000740:	4b17      	ldr	r3, [pc, #92]	; (80007a0 <MX_LPUART1_UART_Init+0x90>)
 8000742:	2200      	movs	r2, #0
 8000744:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000746:	4b16      	ldr	r3, [pc, #88]	; (80007a0 <MX_LPUART1_UART_Init+0x90>)
 8000748:	2200      	movs	r2, #0
 800074a:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800074c:	4b14      	ldr	r3, [pc, #80]	; (80007a0 <MX_LPUART1_UART_Init+0x90>)
 800074e:	2200      	movs	r2, #0
 8000750:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8000752:	4b13      	ldr	r3, [pc, #76]	; (80007a0 <MX_LPUART1_UART_Init+0x90>)
 8000754:	2200      	movs	r2, #0
 8000756:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000758:	4811      	ldr	r0, [pc, #68]	; (80007a0 <MX_LPUART1_UART_Init+0x90>)
 800075a:	f002 fd07 	bl	800316c <HAL_UART_Init>
 800075e:	4603      	mov	r3, r0
 8000760:	2b00      	cmp	r3, #0
 8000762:	d001      	beq.n	8000768 <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 8000764:	f000 f905 	bl	8000972 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000768:	2100      	movs	r1, #0
 800076a:	480d      	ldr	r0, [pc, #52]	; (80007a0 <MX_LPUART1_UART_Init+0x90>)
 800076c:	f003 fb2c 	bl	8003dc8 <HAL_UARTEx_SetTxFifoThreshold>
 8000770:	4603      	mov	r3, r0
 8000772:	2b00      	cmp	r3, #0
 8000774:	d001      	beq.n	800077a <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000776:	f000 f8fc 	bl	8000972 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800077a:	2100      	movs	r1, #0
 800077c:	4808      	ldr	r0, [pc, #32]	; (80007a0 <MX_LPUART1_UART_Init+0x90>)
 800077e:	f003 fb61 	bl	8003e44 <HAL_UARTEx_SetRxFifoThreshold>
 8000782:	4603      	mov	r3, r0
 8000784:	2b00      	cmp	r3, #0
 8000786:	d001      	beq.n	800078c <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000788:	f000 f8f3 	bl	8000972 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 800078c:	4804      	ldr	r0, [pc, #16]	; (80007a0 <MX_LPUART1_UART_Init+0x90>)
 800078e:	f003 fae2 	bl	8003d56 <HAL_UARTEx_DisableFifoMode>
 8000792:	4603      	mov	r3, r0
 8000794:	2b00      	cmp	r3, #0
 8000796:	d001      	beq.n	800079c <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000798:	f000 f8eb 	bl	8000972 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 800079c:	bf00      	nop
 800079e:	bd80      	pop	{r7, pc}
 80007a0:	2000002c 	.word	0x2000002c
 80007a4:	40008000 	.word	0x40008000

080007a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b08c      	sub	sp, #48	; 0x30
 80007ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ae:	f107 031c 	add.w	r3, r7, #28
 80007b2:	2200      	movs	r2, #0
 80007b4:	601a      	str	r2, [r3, #0]
 80007b6:	605a      	str	r2, [r3, #4]
 80007b8:	609a      	str	r2, [r3, #8]
 80007ba:	60da      	str	r2, [r3, #12]
 80007bc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007be:	4b60      	ldr	r3, [pc, #384]	; (8000940 <MX_GPIO_Init+0x198>)
 80007c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007c2:	4a5f      	ldr	r2, [pc, #380]	; (8000940 <MX_GPIO_Init+0x198>)
 80007c4:	f043 0304 	orr.w	r3, r3, #4
 80007c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007ca:	4b5d      	ldr	r3, [pc, #372]	; (8000940 <MX_GPIO_Init+0x198>)
 80007cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007ce:	f003 0304 	and.w	r3, r3, #4
 80007d2:	61bb      	str	r3, [r7, #24]
 80007d4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007d6:	4b5a      	ldr	r3, [pc, #360]	; (8000940 <MX_GPIO_Init+0x198>)
 80007d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007da:	4a59      	ldr	r2, [pc, #356]	; (8000940 <MX_GPIO_Init+0x198>)
 80007dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007e2:	4b57      	ldr	r3, [pc, #348]	; (8000940 <MX_GPIO_Init+0x198>)
 80007e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007ea:	617b      	str	r3, [r7, #20]
 80007ec:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007ee:	4b54      	ldr	r3, [pc, #336]	; (8000940 <MX_GPIO_Init+0x198>)
 80007f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007f2:	4a53      	ldr	r2, [pc, #332]	; (8000940 <MX_GPIO_Init+0x198>)
 80007f4:	f043 0302 	orr.w	r3, r3, #2
 80007f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007fa:	4b51      	ldr	r3, [pc, #324]	; (8000940 <MX_GPIO_Init+0x198>)
 80007fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007fe:	f003 0302 	and.w	r3, r3, #2
 8000802:	613b      	str	r3, [r7, #16]
 8000804:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000806:	4b4e      	ldr	r3, [pc, #312]	; (8000940 <MX_GPIO_Init+0x198>)
 8000808:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800080a:	4a4d      	ldr	r2, [pc, #308]	; (8000940 <MX_GPIO_Init+0x198>)
 800080c:	f043 0308 	orr.w	r3, r3, #8
 8000810:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000812:	4b4b      	ldr	r3, [pc, #300]	; (8000940 <MX_GPIO_Init+0x198>)
 8000814:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000816:	f003 0308 	and.w	r3, r3, #8
 800081a:	60fb      	str	r3, [r7, #12]
 800081c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800081e:	4b48      	ldr	r3, [pc, #288]	; (8000940 <MX_GPIO_Init+0x198>)
 8000820:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000822:	4a47      	ldr	r2, [pc, #284]	; (8000940 <MX_GPIO_Init+0x198>)
 8000824:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000828:	64d3      	str	r3, [r2, #76]	; 0x4c
 800082a:	4b45      	ldr	r3, [pc, #276]	; (8000940 <MX_GPIO_Init+0x198>)
 800082c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800082e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000832:	60bb      	str	r3, [r7, #8]
 8000834:	68bb      	ldr	r3, [r7, #8]
  HAL_PWREx_EnableVddIO2();
 8000836:	f000 fdb3 	bl	80013a0 <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800083a:	4b41      	ldr	r3, [pc, #260]	; (8000940 <MX_GPIO_Init+0x198>)
 800083c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800083e:	4a40      	ldr	r2, [pc, #256]	; (8000940 <MX_GPIO_Init+0x198>)
 8000840:	f043 0301 	orr.w	r3, r3, #1
 8000844:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000846:	4b3e      	ldr	r3, [pc, #248]	; (8000940 <MX_GPIO_Init+0x198>)
 8000848:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800084a:	f003 0301 	and.w	r3, r3, #1
 800084e:	607b      	str	r3, [r7, #4]
 8000850:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000852:	2200      	movs	r2, #0
 8000854:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 8000858:	483a      	ldr	r0, [pc, #232]	; (8000944 <MX_GPIO_Init+0x19c>)
 800085a:	f000 fcab 	bl	80011b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800085e:	2200      	movs	r2, #0
 8000860:	2140      	movs	r1, #64	; 0x40
 8000862:	4839      	ldr	r0, [pc, #228]	; (8000948 <MX_GPIO_Init+0x1a0>)
 8000864:	f000 fca6 	bl	80011b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000868:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800086c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800086e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000872:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000874:	2300      	movs	r3, #0
 8000876:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000878:	f107 031c 	add.w	r3, r7, #28
 800087c:	4619      	mov	r1, r3
 800087e:	4833      	ldr	r0, [pc, #204]	; (800094c <MX_GPIO_Init+0x1a4>)
 8000880:	f000 faee 	bl	8000e60 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 8000884:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 8000888:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800088a:	2301      	movs	r3, #1
 800088c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088e:	2300      	movs	r3, #0
 8000890:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000892:	2300      	movs	r3, #0
 8000894:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000896:	f107 031c 	add.w	r3, r7, #28
 800089a:	4619      	mov	r1, r3
 800089c:	4829      	ldr	r0, [pc, #164]	; (8000944 <MX_GPIO_Init+0x19c>)
 800089e:	f000 fadf 	bl	8000e60 <HAL_GPIO_Init>

  /*Configure GPIO pins : STLK_RX_Pin STLK_TX_Pin */
  GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80008a2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80008a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008a8:	2302      	movs	r3, #2
 80008aa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ac:	2300      	movs	r3, #0
 80008ae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008b0:	2303      	movs	r3, #3
 80008b2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80008b4:	2307      	movs	r3, #7
 80008b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008b8:	f107 031c 	add.w	r3, r7, #28
 80008bc:	4619      	mov	r1, r3
 80008be:	4824      	ldr	r0, [pc, #144]	; (8000950 <MX_GPIO_Init+0x1a8>)
 80008c0:	f000 face 	bl	8000e60 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80008c4:	2320      	movs	r3, #32
 80008c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008c8:	2300      	movs	r3, #0
 80008ca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008cc:	2300      	movs	r3, #0
 80008ce:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80008d0:	f107 031c 	add.w	r3, r7, #28
 80008d4:	4619      	mov	r1, r3
 80008d6:	481c      	ldr	r0, [pc, #112]	; (8000948 <MX_GPIO_Init+0x1a0>)
 80008d8:	f000 fac2 	bl	8000e60 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80008dc:	2340      	movs	r3, #64	; 0x40
 80008de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008e0:	2301      	movs	r3, #1
 80008e2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e4:	2300      	movs	r3, #0
 80008e6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008e8:	2300      	movs	r3, #0
 80008ea:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80008ec:	f107 031c 	add.w	r3, r7, #28
 80008f0:	4619      	mov	r1, r3
 80008f2:	4815      	ldr	r0, [pc, #84]	; (8000948 <MX_GPIO_Init+0x1a0>)
 80008f4:	f000 fab4 	bl	8000e60 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80008f8:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80008fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008fe:	2302      	movs	r3, #2
 8000900:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000902:	2300      	movs	r3, #0
 8000904:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000906:	2303      	movs	r3, #3
 8000908:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800090a:	230a      	movs	r3, #10
 800090c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800090e:	f107 031c 	add.w	r3, r7, #28
 8000912:	4619      	mov	r1, r3
 8000914:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000918:	f000 faa2 	bl	8000e60 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800091c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000920:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000922:	2300      	movs	r3, #0
 8000924:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000926:	2300      	movs	r3, #0
 8000928:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800092a:	f107 031c 	add.w	r3, r7, #28
 800092e:	4619      	mov	r1, r3
 8000930:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000934:	f000 fa94 	bl	8000e60 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000938:	bf00      	nop
 800093a:	3730      	adds	r7, #48	; 0x30
 800093c:	46bd      	mov	sp, r7
 800093e:	bd80      	pop	{r7, pc}
 8000940:	40021000 	.word	0x40021000
 8000944:	48000400 	.word	0x48000400
 8000948:	48001800 	.word	0x48001800
 800094c:	48000800 	.word	0x48000800
 8000950:	48000c00 	.word	0x48000c00

08000954 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b082      	sub	sp, #8
 8000958:	af00      	add	r7, sp, #0
 800095a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000964:	d101      	bne.n	800096a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000966:	f000 f979 	bl	8000c5c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800096a:	bf00      	nop
 800096c:	3708      	adds	r7, #8
 800096e:	46bd      	mov	sp, r7
 8000970:	bd80      	pop	{r7, pc}

08000972 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000972:	b480      	push	{r7}
 8000974:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000976:	b672      	cpsid	i
}
 8000978:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800097a:	e7fe      	b.n	800097a <Error_Handler+0x8>

0800097c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800097c:	b480      	push	{r7}
 800097e:	b083      	sub	sp, #12
 8000980:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000982:	4b0f      	ldr	r3, [pc, #60]	; (80009c0 <HAL_MspInit+0x44>)
 8000984:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000986:	4a0e      	ldr	r2, [pc, #56]	; (80009c0 <HAL_MspInit+0x44>)
 8000988:	f043 0301 	orr.w	r3, r3, #1
 800098c:	6613      	str	r3, [r2, #96]	; 0x60
 800098e:	4b0c      	ldr	r3, [pc, #48]	; (80009c0 <HAL_MspInit+0x44>)
 8000990:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000992:	f003 0301 	and.w	r3, r3, #1
 8000996:	607b      	str	r3, [r7, #4]
 8000998:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800099a:	4b09      	ldr	r3, [pc, #36]	; (80009c0 <HAL_MspInit+0x44>)
 800099c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800099e:	4a08      	ldr	r2, [pc, #32]	; (80009c0 <HAL_MspInit+0x44>)
 80009a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009a4:	6593      	str	r3, [r2, #88]	; 0x58
 80009a6:	4b06      	ldr	r3, [pc, #24]	; (80009c0 <HAL_MspInit+0x44>)
 80009a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009ae:	603b      	str	r3, [r7, #0]
 80009b0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009b2:	bf00      	nop
 80009b4:	370c      	adds	r7, #12
 80009b6:	46bd      	mov	sp, r7
 80009b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009bc:	4770      	bx	lr
 80009be:	bf00      	nop
 80009c0:	40021000 	.word	0x40021000

080009c4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b0ae      	sub	sp, #184	; 0xb8
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009cc:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80009d0:	2200      	movs	r2, #0
 80009d2:	601a      	str	r2, [r3, #0]
 80009d4:	605a      	str	r2, [r3, #4]
 80009d6:	609a      	str	r2, [r3, #8]
 80009d8:	60da      	str	r2, [r3, #12]
 80009da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80009dc:	f107 0310 	add.w	r3, r7, #16
 80009e0:	2294      	movs	r2, #148	; 0x94
 80009e2:	2100      	movs	r1, #0
 80009e4:	4618      	mov	r0, r3
 80009e6:	f005 fde1 	bl	80065ac <memset>
  if(huart->Instance==LPUART1)
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	4a22      	ldr	r2, [pc, #136]	; (8000a78 <HAL_UART_MspInit+0xb4>)
 80009f0:	4293      	cmp	r3, r2
 80009f2:	d13d      	bne.n	8000a70 <HAL_UART_MspInit+0xac>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80009f4:	2320      	movs	r3, #32
 80009f6:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80009f8:	2300      	movs	r3, #0
 80009fa:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80009fc:	f107 0310 	add.w	r3, r7, #16
 8000a00:	4618      	mov	r0, r3
 8000a02:	f001 fbe7 	bl	80021d4 <HAL_RCCEx_PeriphCLKConfig>
 8000a06:	4603      	mov	r3, r0
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d001      	beq.n	8000a10 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000a0c:	f7ff ffb1 	bl	8000972 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000a10:	4b1a      	ldr	r3, [pc, #104]	; (8000a7c <HAL_UART_MspInit+0xb8>)
 8000a12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000a14:	4a19      	ldr	r2, [pc, #100]	; (8000a7c <HAL_UART_MspInit+0xb8>)
 8000a16:	f043 0301 	orr.w	r3, r3, #1
 8000a1a:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000a1c:	4b17      	ldr	r3, [pc, #92]	; (8000a7c <HAL_UART_MspInit+0xb8>)
 8000a1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000a20:	f003 0301 	and.w	r3, r3, #1
 8000a24:	60fb      	str	r3, [r7, #12]
 8000a26:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a28:	4b14      	ldr	r3, [pc, #80]	; (8000a7c <HAL_UART_MspInit+0xb8>)
 8000a2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a2c:	4a13      	ldr	r2, [pc, #76]	; (8000a7c <HAL_UART_MspInit+0xb8>)
 8000a2e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a32:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a34:	4b11      	ldr	r3, [pc, #68]	; (8000a7c <HAL_UART_MspInit+0xb8>)
 8000a36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a3c:	60bb      	str	r3, [r7, #8]
 8000a3e:	68bb      	ldr	r3, [r7, #8]
    HAL_PWREx_EnableVddIO2();
 8000a40:	f000 fcae 	bl	80013a0 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_TX_Pin|STLINK_RX_Pin;
 8000a44:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000a48:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a4c:	2302      	movs	r3, #2
 8000a4e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a52:	2300      	movs	r3, #0
 8000a54:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a58:	2303      	movs	r3, #3
 8000a5a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8000a5e:	2308      	movs	r3, #8
 8000a60:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000a64:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000a68:	4619      	mov	r1, r3
 8000a6a:	4805      	ldr	r0, [pc, #20]	; (8000a80 <HAL_UART_MspInit+0xbc>)
 8000a6c:	f000 f9f8 	bl	8000e60 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8000a70:	bf00      	nop
 8000a72:	37b8      	adds	r7, #184	; 0xb8
 8000a74:	46bd      	mov	sp, r7
 8000a76:	bd80      	pop	{r7, pc}
 8000a78:	40008000 	.word	0x40008000
 8000a7c:	40021000 	.word	0x40021000
 8000a80:	48001800 	.word	0x48001800

08000a84 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b08e      	sub	sp, #56	; 0x38
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8000a92:	4b34      	ldr	r3, [pc, #208]	; (8000b64 <HAL_InitTick+0xe0>)
 8000a94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a96:	4a33      	ldr	r2, [pc, #204]	; (8000b64 <HAL_InitTick+0xe0>)
 8000a98:	f043 0301 	orr.w	r3, r3, #1
 8000a9c:	6593      	str	r3, [r2, #88]	; 0x58
 8000a9e:	4b31      	ldr	r3, [pc, #196]	; (8000b64 <HAL_InitTick+0xe0>)
 8000aa0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000aa2:	f003 0301 	and.w	r3, r3, #1
 8000aa6:	60fb      	str	r3, [r7, #12]
 8000aa8:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000aaa:	f107 0210 	add.w	r2, r7, #16
 8000aae:	f107 0314 	add.w	r3, r7, #20
 8000ab2:	4611      	mov	r1, r2
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	f001 fa9b 	bl	8001ff0 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000aba:	6a3b      	ldr	r3, [r7, #32]
 8000abc:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000abe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d103      	bne.n	8000acc <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000ac4:	f001 fa68 	bl	8001f98 <HAL_RCC_GetPCLK1Freq>
 8000ac8:	6378      	str	r0, [r7, #52]	; 0x34
 8000aca:	e004      	b.n	8000ad6 <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000acc:	f001 fa64 	bl	8001f98 <HAL_RCC_GetPCLK1Freq>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	005b      	lsls	r3, r3, #1
 8000ad4:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000ad6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ad8:	4a23      	ldr	r2, [pc, #140]	; (8000b68 <HAL_InitTick+0xe4>)
 8000ada:	fba2 2303 	umull	r2, r3, r2, r3
 8000ade:	0c9b      	lsrs	r3, r3, #18
 8000ae0:	3b01      	subs	r3, #1
 8000ae2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8000ae4:	4b21      	ldr	r3, [pc, #132]	; (8000b6c <HAL_InitTick+0xe8>)
 8000ae6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000aea:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8000aec:	4b1f      	ldr	r3, [pc, #124]	; (8000b6c <HAL_InitTick+0xe8>)
 8000aee:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000af2:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8000af4:	4a1d      	ldr	r2, [pc, #116]	; (8000b6c <HAL_InitTick+0xe8>)
 8000af6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000af8:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8000afa:	4b1c      	ldr	r3, [pc, #112]	; (8000b6c <HAL_InitTick+0xe8>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b00:	4b1a      	ldr	r3, [pc, #104]	; (8000b6c <HAL_InitTick+0xe8>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b06:	4b19      	ldr	r3, [pc, #100]	; (8000b6c <HAL_InitTick+0xe8>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 8000b0c:	4817      	ldr	r0, [pc, #92]	; (8000b6c <HAL_InitTick+0xe8>)
 8000b0e:	f002 f879 	bl	8002c04 <HAL_TIM_Base_Init>
 8000b12:	4603      	mov	r3, r0
 8000b14:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000b18:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d11b      	bne.n	8000b58 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 8000b20:	4812      	ldr	r0, [pc, #72]	; (8000b6c <HAL_InitTick+0xe8>)
 8000b22:	f002 f8d1 	bl	8002cc8 <HAL_TIM_Base_Start_IT>
 8000b26:	4603      	mov	r3, r0
 8000b28:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000b2c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d111      	bne.n	8000b58 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000b34:	201c      	movs	r0, #28
 8000b36:	f000 f985 	bl	8000e44 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	2b0f      	cmp	r3, #15
 8000b3e:	d808      	bhi.n	8000b52 <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 8000b40:	2200      	movs	r2, #0
 8000b42:	6879      	ldr	r1, [r7, #4]
 8000b44:	201c      	movs	r0, #28
 8000b46:	f000 f961 	bl	8000e0c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b4a:	4a09      	ldr	r2, [pc, #36]	; (8000b70 <HAL_InitTick+0xec>)
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	6013      	str	r3, [r2, #0]
 8000b50:	e002      	b.n	8000b58 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 8000b52:	2301      	movs	r3, #1
 8000b54:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000b58:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	3738      	adds	r7, #56	; 0x38
 8000b60:	46bd      	mov	sp, r7
 8000b62:	bd80      	pop	{r7, pc}
 8000b64:	40021000 	.word	0x40021000
 8000b68:	431bde83 	.word	0x431bde83
 8000b6c:	200000c8 	.word	0x200000c8
 8000b70:	20000004 	.word	0x20000004

08000b74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b74:	b480      	push	{r7}
 8000b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b78:	e7fe      	b.n	8000b78 <NMI_Handler+0x4>

08000b7a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b7a:	b480      	push	{r7}
 8000b7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b7e:	e7fe      	b.n	8000b7e <HardFault_Handler+0x4>

08000b80 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b80:	b480      	push	{r7}
 8000b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b84:	e7fe      	b.n	8000b84 <MemManage_Handler+0x4>

08000b86 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b86:	b480      	push	{r7}
 8000b88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b8a:	e7fe      	b.n	8000b8a <BusFault_Handler+0x4>

08000b8c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b90:	e7fe      	b.n	8000b90 <UsageFault_Handler+0x4>

08000b92 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b92:	b480      	push	{r7}
 8000b94:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b96:	bf00      	nop
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9e:	4770      	bx	lr

08000ba0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000ba4:	4802      	ldr	r0, [pc, #8]	; (8000bb0 <TIM2_IRQHandler+0x10>)
 8000ba6:	f002 f8ff 	bl	8002da8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000baa:	bf00      	nop
 8000bac:	bd80      	pop	{r7, pc}
 8000bae:	bf00      	nop
 8000bb0:	200000c8 	.word	0x200000c8

08000bb4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000bb8:	4b06      	ldr	r3, [pc, #24]	; (8000bd4 <SystemInit+0x20>)
 8000bba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000bbe:	4a05      	ldr	r2, [pc, #20]	; (8000bd4 <SystemInit+0x20>)
 8000bc0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000bc4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000bc8:	bf00      	nop
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd0:	4770      	bx	lr
 8000bd2:	bf00      	nop
 8000bd4:	e000ed00 	.word	0xe000ed00

08000bd8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000bd8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c10 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000bdc:	f7ff ffea 	bl	8000bb4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000be0:	480c      	ldr	r0, [pc, #48]	; (8000c14 <LoopForever+0x6>)
  ldr r1, =_edata
 8000be2:	490d      	ldr	r1, [pc, #52]	; (8000c18 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000be4:	4a0d      	ldr	r2, [pc, #52]	; (8000c1c <LoopForever+0xe>)
  movs r3, #0
 8000be6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000be8:	e002      	b.n	8000bf0 <LoopCopyDataInit>

08000bea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bee:	3304      	adds	r3, #4

08000bf0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bf0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bf2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bf4:	d3f9      	bcc.n	8000bea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bf6:	4a0a      	ldr	r2, [pc, #40]	; (8000c20 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000bf8:	4c0a      	ldr	r4, [pc, #40]	; (8000c24 <LoopForever+0x16>)
  movs r3, #0
 8000bfa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bfc:	e001      	b.n	8000c02 <LoopFillZerobss>

08000bfe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bfe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c00:	3204      	adds	r2, #4

08000c02 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c02:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c04:	d3fb      	bcc.n	8000bfe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c06:	f005 fcd9 	bl	80065bc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000c0a:	f7ff fced 	bl	80005e8 <main>

08000c0e <LoopForever>:

LoopForever:
    b LoopForever
 8000c0e:	e7fe      	b.n	8000c0e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000c10:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8000c14:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c18:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000c1c:	0800670c 	.word	0x0800670c
  ldr r2, =_sbss
 8000c20:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000c24:	2001e278 	.word	0x2001e278

08000c28 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000c28:	e7fe      	b.n	8000c28 <ADC1_IRQHandler>

08000c2a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c2a:	b580      	push	{r7, lr}
 8000c2c:	b082      	sub	sp, #8
 8000c2e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000c30:	2300      	movs	r3, #0
 8000c32:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c34:	2003      	movs	r0, #3
 8000c36:	f000 f8de 	bl	8000df6 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c3a:	200f      	movs	r0, #15
 8000c3c:	f7ff ff22 	bl	8000a84 <HAL_InitTick>
 8000c40:	4603      	mov	r3, r0
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d002      	beq.n	8000c4c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000c46:	2301      	movs	r3, #1
 8000c48:	71fb      	strb	r3, [r7, #7]
 8000c4a:	e001      	b.n	8000c50 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000c4c:	f7ff fe96 	bl	800097c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000c50:	79fb      	ldrb	r3, [r7, #7]
}
 8000c52:	4618      	mov	r0, r3
 8000c54:	3708      	adds	r7, #8
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd80      	pop	{r7, pc}
	...

08000c5c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000c60:	4b06      	ldr	r3, [pc, #24]	; (8000c7c <HAL_IncTick+0x20>)
 8000c62:	781b      	ldrb	r3, [r3, #0]
 8000c64:	461a      	mov	r2, r3
 8000c66:	4b06      	ldr	r3, [pc, #24]	; (8000c80 <HAL_IncTick+0x24>)
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	4413      	add	r3, r2
 8000c6c:	4a04      	ldr	r2, [pc, #16]	; (8000c80 <HAL_IncTick+0x24>)
 8000c6e:	6013      	str	r3, [r2, #0]
}
 8000c70:	bf00      	nop
 8000c72:	46bd      	mov	sp, r7
 8000c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c78:	4770      	bx	lr
 8000c7a:	bf00      	nop
 8000c7c:	20000008 	.word	0x20000008
 8000c80:	20000114 	.word	0x20000114

08000c84 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c84:	b480      	push	{r7}
 8000c86:	af00      	add	r7, sp, #0
  return uwTick;
 8000c88:	4b03      	ldr	r3, [pc, #12]	; (8000c98 <HAL_GetTick+0x14>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
}
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop
 8000c98:	20000114 	.word	0x20000114

08000c9c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	b085      	sub	sp, #20
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	f003 0307 	and.w	r3, r3, #7
 8000caa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cac:	4b0c      	ldr	r3, [pc, #48]	; (8000ce0 <__NVIC_SetPriorityGrouping+0x44>)
 8000cae:	68db      	ldr	r3, [r3, #12]
 8000cb0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cb2:	68ba      	ldr	r2, [r7, #8]
 8000cb4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000cb8:	4013      	ands	r3, r2
 8000cba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000cbc:	68fb      	ldr	r3, [r7, #12]
 8000cbe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cc0:	68bb      	ldr	r3, [r7, #8]
 8000cc2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000cc4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000cc8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ccc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cce:	4a04      	ldr	r2, [pc, #16]	; (8000ce0 <__NVIC_SetPriorityGrouping+0x44>)
 8000cd0:	68bb      	ldr	r3, [r7, #8]
 8000cd2:	60d3      	str	r3, [r2, #12]
}
 8000cd4:	bf00      	nop
 8000cd6:	3714      	adds	r7, #20
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cde:	4770      	bx	lr
 8000ce0:	e000ed00 	.word	0xe000ed00

08000ce4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ce8:	4b04      	ldr	r3, [pc, #16]	; (8000cfc <__NVIC_GetPriorityGrouping+0x18>)
 8000cea:	68db      	ldr	r3, [r3, #12]
 8000cec:	0a1b      	lsrs	r3, r3, #8
 8000cee:	f003 0307 	and.w	r3, r3, #7
}
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfa:	4770      	bx	lr
 8000cfc:	e000ed00 	.word	0xe000ed00

08000d00 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d00:	b480      	push	{r7}
 8000d02:	b083      	sub	sp, #12
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	4603      	mov	r3, r0
 8000d08:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	db0b      	blt.n	8000d2a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d12:	79fb      	ldrb	r3, [r7, #7]
 8000d14:	f003 021f 	and.w	r2, r3, #31
 8000d18:	4907      	ldr	r1, [pc, #28]	; (8000d38 <__NVIC_EnableIRQ+0x38>)
 8000d1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d1e:	095b      	lsrs	r3, r3, #5
 8000d20:	2001      	movs	r0, #1
 8000d22:	fa00 f202 	lsl.w	r2, r0, r2
 8000d26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000d2a:	bf00      	nop
 8000d2c:	370c      	adds	r7, #12
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d34:	4770      	bx	lr
 8000d36:	bf00      	nop
 8000d38:	e000e100 	.word	0xe000e100

08000d3c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	b083      	sub	sp, #12
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	4603      	mov	r3, r0
 8000d44:	6039      	str	r1, [r7, #0]
 8000d46:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	db0a      	blt.n	8000d66 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d50:	683b      	ldr	r3, [r7, #0]
 8000d52:	b2da      	uxtb	r2, r3
 8000d54:	490c      	ldr	r1, [pc, #48]	; (8000d88 <__NVIC_SetPriority+0x4c>)
 8000d56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d5a:	0112      	lsls	r2, r2, #4
 8000d5c:	b2d2      	uxtb	r2, r2
 8000d5e:	440b      	add	r3, r1
 8000d60:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d64:	e00a      	b.n	8000d7c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d66:	683b      	ldr	r3, [r7, #0]
 8000d68:	b2da      	uxtb	r2, r3
 8000d6a:	4908      	ldr	r1, [pc, #32]	; (8000d8c <__NVIC_SetPriority+0x50>)
 8000d6c:	79fb      	ldrb	r3, [r7, #7]
 8000d6e:	f003 030f 	and.w	r3, r3, #15
 8000d72:	3b04      	subs	r3, #4
 8000d74:	0112      	lsls	r2, r2, #4
 8000d76:	b2d2      	uxtb	r2, r2
 8000d78:	440b      	add	r3, r1
 8000d7a:	761a      	strb	r2, [r3, #24]
}
 8000d7c:	bf00      	nop
 8000d7e:	370c      	adds	r7, #12
 8000d80:	46bd      	mov	sp, r7
 8000d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d86:	4770      	bx	lr
 8000d88:	e000e100 	.word	0xe000e100
 8000d8c:	e000ed00 	.word	0xe000ed00

08000d90 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d90:	b480      	push	{r7}
 8000d92:	b089      	sub	sp, #36	; 0x24
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	60f8      	str	r0, [r7, #12]
 8000d98:	60b9      	str	r1, [r7, #8]
 8000d9a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d9c:	68fb      	ldr	r3, [r7, #12]
 8000d9e:	f003 0307 	and.w	r3, r3, #7
 8000da2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000da4:	69fb      	ldr	r3, [r7, #28]
 8000da6:	f1c3 0307 	rsb	r3, r3, #7
 8000daa:	2b04      	cmp	r3, #4
 8000dac:	bf28      	it	cs
 8000dae:	2304      	movcs	r3, #4
 8000db0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000db2:	69fb      	ldr	r3, [r7, #28]
 8000db4:	3304      	adds	r3, #4
 8000db6:	2b06      	cmp	r3, #6
 8000db8:	d902      	bls.n	8000dc0 <NVIC_EncodePriority+0x30>
 8000dba:	69fb      	ldr	r3, [r7, #28]
 8000dbc:	3b03      	subs	r3, #3
 8000dbe:	e000      	b.n	8000dc2 <NVIC_EncodePriority+0x32>
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dc4:	f04f 32ff 	mov.w	r2, #4294967295
 8000dc8:	69bb      	ldr	r3, [r7, #24]
 8000dca:	fa02 f303 	lsl.w	r3, r2, r3
 8000dce:	43da      	mvns	r2, r3
 8000dd0:	68bb      	ldr	r3, [r7, #8]
 8000dd2:	401a      	ands	r2, r3
 8000dd4:	697b      	ldr	r3, [r7, #20]
 8000dd6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000dd8:	f04f 31ff 	mov.w	r1, #4294967295
 8000ddc:	697b      	ldr	r3, [r7, #20]
 8000dde:	fa01 f303 	lsl.w	r3, r1, r3
 8000de2:	43d9      	mvns	r1, r3
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000de8:	4313      	orrs	r3, r2
         );
}
 8000dea:	4618      	mov	r0, r3
 8000dec:	3724      	adds	r7, #36	; 0x24
 8000dee:	46bd      	mov	sp, r7
 8000df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df4:	4770      	bx	lr

08000df6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000df6:	b580      	push	{r7, lr}
 8000df8:	b082      	sub	sp, #8
 8000dfa:	af00      	add	r7, sp, #0
 8000dfc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000dfe:	6878      	ldr	r0, [r7, #4]
 8000e00:	f7ff ff4c 	bl	8000c9c <__NVIC_SetPriorityGrouping>
}
 8000e04:	bf00      	nop
 8000e06:	3708      	adds	r7, #8
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	bd80      	pop	{r7, pc}

08000e0c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b086      	sub	sp, #24
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	4603      	mov	r3, r0
 8000e14:	60b9      	str	r1, [r7, #8]
 8000e16:	607a      	str	r2, [r7, #4]
 8000e18:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000e1e:	f7ff ff61 	bl	8000ce4 <__NVIC_GetPriorityGrouping>
 8000e22:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e24:	687a      	ldr	r2, [r7, #4]
 8000e26:	68b9      	ldr	r1, [r7, #8]
 8000e28:	6978      	ldr	r0, [r7, #20]
 8000e2a:	f7ff ffb1 	bl	8000d90 <NVIC_EncodePriority>
 8000e2e:	4602      	mov	r2, r0
 8000e30:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e34:	4611      	mov	r1, r2
 8000e36:	4618      	mov	r0, r3
 8000e38:	f7ff ff80 	bl	8000d3c <__NVIC_SetPriority>
}
 8000e3c:	bf00      	nop
 8000e3e:	3718      	adds	r7, #24
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bd80      	pop	{r7, pc}

08000e44 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b082      	sub	sp, #8
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e52:	4618      	mov	r0, r3
 8000e54:	f7ff ff54 	bl	8000d00 <__NVIC_EnableIRQ>
}
 8000e58:	bf00      	nop
 8000e5a:	3708      	adds	r7, #8
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	bd80      	pop	{r7, pc}

08000e60 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e60:	b480      	push	{r7}
 8000e62:	b087      	sub	sp, #28
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
 8000e68:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e6e:	e166      	b.n	800113e <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000e70:	683b      	ldr	r3, [r7, #0]
 8000e72:	681a      	ldr	r2, [r3, #0]
 8000e74:	2101      	movs	r1, #1
 8000e76:	697b      	ldr	r3, [r7, #20]
 8000e78:	fa01 f303 	lsl.w	r3, r1, r3
 8000e7c:	4013      	ands	r3, r2
 8000e7e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000e80:	68fb      	ldr	r3, [r7, #12]
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	f000 8158 	beq.w	8001138 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000e88:	683b      	ldr	r3, [r7, #0]
 8000e8a:	685b      	ldr	r3, [r3, #4]
 8000e8c:	f003 0303 	and.w	r3, r3, #3
 8000e90:	2b01      	cmp	r3, #1
 8000e92:	d005      	beq.n	8000ea0 <HAL_GPIO_Init+0x40>
 8000e94:	683b      	ldr	r3, [r7, #0]
 8000e96:	685b      	ldr	r3, [r3, #4]
 8000e98:	f003 0303 	and.w	r3, r3, #3
 8000e9c:	2b02      	cmp	r3, #2
 8000e9e:	d130      	bne.n	8000f02 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	689b      	ldr	r3, [r3, #8]
 8000ea4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000ea6:	697b      	ldr	r3, [r7, #20]
 8000ea8:	005b      	lsls	r3, r3, #1
 8000eaa:	2203      	movs	r2, #3
 8000eac:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb0:	43db      	mvns	r3, r3
 8000eb2:	693a      	ldr	r2, [r7, #16]
 8000eb4:	4013      	ands	r3, r2
 8000eb6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000eb8:	683b      	ldr	r3, [r7, #0]
 8000eba:	68da      	ldr	r2, [r3, #12]
 8000ebc:	697b      	ldr	r3, [r7, #20]
 8000ebe:	005b      	lsls	r3, r3, #1
 8000ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec4:	693a      	ldr	r2, [r7, #16]
 8000ec6:	4313      	orrs	r3, r2
 8000ec8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	693a      	ldr	r2, [r7, #16]
 8000ece:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	685b      	ldr	r3, [r3, #4]
 8000ed4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000ed6:	2201      	movs	r2, #1
 8000ed8:	697b      	ldr	r3, [r7, #20]
 8000eda:	fa02 f303 	lsl.w	r3, r2, r3
 8000ede:	43db      	mvns	r3, r3
 8000ee0:	693a      	ldr	r2, [r7, #16]
 8000ee2:	4013      	ands	r3, r2
 8000ee4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ee6:	683b      	ldr	r3, [r7, #0]
 8000ee8:	685b      	ldr	r3, [r3, #4]
 8000eea:	091b      	lsrs	r3, r3, #4
 8000eec:	f003 0201 	and.w	r2, r3, #1
 8000ef0:	697b      	ldr	r3, [r7, #20]
 8000ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef6:	693a      	ldr	r2, [r7, #16]
 8000ef8:	4313      	orrs	r3, r2
 8000efa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	693a      	ldr	r2, [r7, #16]
 8000f00:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f02:	683b      	ldr	r3, [r7, #0]
 8000f04:	685b      	ldr	r3, [r3, #4]
 8000f06:	f003 0303 	and.w	r3, r3, #3
 8000f0a:	2b03      	cmp	r3, #3
 8000f0c:	d017      	beq.n	8000f3e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	68db      	ldr	r3, [r3, #12]
 8000f12:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000f14:	697b      	ldr	r3, [r7, #20]
 8000f16:	005b      	lsls	r3, r3, #1
 8000f18:	2203      	movs	r2, #3
 8000f1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f1e:	43db      	mvns	r3, r3
 8000f20:	693a      	ldr	r2, [r7, #16]
 8000f22:	4013      	ands	r3, r2
 8000f24:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f26:	683b      	ldr	r3, [r7, #0]
 8000f28:	689a      	ldr	r2, [r3, #8]
 8000f2a:	697b      	ldr	r3, [r7, #20]
 8000f2c:	005b      	lsls	r3, r3, #1
 8000f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f32:	693a      	ldr	r2, [r7, #16]
 8000f34:	4313      	orrs	r3, r2
 8000f36:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	693a      	ldr	r2, [r7, #16]
 8000f3c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f3e:	683b      	ldr	r3, [r7, #0]
 8000f40:	685b      	ldr	r3, [r3, #4]
 8000f42:	f003 0303 	and.w	r3, r3, #3
 8000f46:	2b02      	cmp	r3, #2
 8000f48:	d123      	bne.n	8000f92 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000f4a:	697b      	ldr	r3, [r7, #20]
 8000f4c:	08da      	lsrs	r2, r3, #3
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	3208      	adds	r2, #8
 8000f52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f56:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000f58:	697b      	ldr	r3, [r7, #20]
 8000f5a:	f003 0307 	and.w	r3, r3, #7
 8000f5e:	009b      	lsls	r3, r3, #2
 8000f60:	220f      	movs	r2, #15
 8000f62:	fa02 f303 	lsl.w	r3, r2, r3
 8000f66:	43db      	mvns	r3, r3
 8000f68:	693a      	ldr	r2, [r7, #16]
 8000f6a:	4013      	ands	r3, r2
 8000f6c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000f6e:	683b      	ldr	r3, [r7, #0]
 8000f70:	691a      	ldr	r2, [r3, #16]
 8000f72:	697b      	ldr	r3, [r7, #20]
 8000f74:	f003 0307 	and.w	r3, r3, #7
 8000f78:	009b      	lsls	r3, r3, #2
 8000f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7e:	693a      	ldr	r2, [r7, #16]
 8000f80:	4313      	orrs	r3, r2
 8000f82:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000f84:	697b      	ldr	r3, [r7, #20]
 8000f86:	08da      	lsrs	r2, r3, #3
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	3208      	adds	r2, #8
 8000f8c:	6939      	ldr	r1, [r7, #16]
 8000f8e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000f98:	697b      	ldr	r3, [r7, #20]
 8000f9a:	005b      	lsls	r3, r3, #1
 8000f9c:	2203      	movs	r2, #3
 8000f9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa2:	43db      	mvns	r3, r3
 8000fa4:	693a      	ldr	r2, [r7, #16]
 8000fa6:	4013      	ands	r3, r2
 8000fa8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000faa:	683b      	ldr	r3, [r7, #0]
 8000fac:	685b      	ldr	r3, [r3, #4]
 8000fae:	f003 0203 	and.w	r2, r3, #3
 8000fb2:	697b      	ldr	r3, [r7, #20]
 8000fb4:	005b      	lsls	r3, r3, #1
 8000fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fba:	693a      	ldr	r2, [r7, #16]
 8000fbc:	4313      	orrs	r3, r2
 8000fbe:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	693a      	ldr	r2, [r7, #16]
 8000fc4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000fc6:	683b      	ldr	r3, [r7, #0]
 8000fc8:	685b      	ldr	r3, [r3, #4]
 8000fca:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	f000 80b2 	beq.w	8001138 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fd4:	4b61      	ldr	r3, [pc, #388]	; (800115c <HAL_GPIO_Init+0x2fc>)
 8000fd6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000fd8:	4a60      	ldr	r2, [pc, #384]	; (800115c <HAL_GPIO_Init+0x2fc>)
 8000fda:	f043 0301 	orr.w	r3, r3, #1
 8000fde:	6613      	str	r3, [r2, #96]	; 0x60
 8000fe0:	4b5e      	ldr	r3, [pc, #376]	; (800115c <HAL_GPIO_Init+0x2fc>)
 8000fe2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000fe4:	f003 0301 	and.w	r3, r3, #1
 8000fe8:	60bb      	str	r3, [r7, #8]
 8000fea:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000fec:	4a5c      	ldr	r2, [pc, #368]	; (8001160 <HAL_GPIO_Init+0x300>)
 8000fee:	697b      	ldr	r3, [r7, #20]
 8000ff0:	089b      	lsrs	r3, r3, #2
 8000ff2:	3302      	adds	r3, #2
 8000ff4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ff8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000ffa:	697b      	ldr	r3, [r7, #20]
 8000ffc:	f003 0303 	and.w	r3, r3, #3
 8001000:	009b      	lsls	r3, r3, #2
 8001002:	220f      	movs	r2, #15
 8001004:	fa02 f303 	lsl.w	r3, r2, r3
 8001008:	43db      	mvns	r3, r3
 800100a:	693a      	ldr	r2, [r7, #16]
 800100c:	4013      	ands	r3, r2
 800100e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001016:	d02b      	beq.n	8001070 <HAL_GPIO_Init+0x210>
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	4a52      	ldr	r2, [pc, #328]	; (8001164 <HAL_GPIO_Init+0x304>)
 800101c:	4293      	cmp	r3, r2
 800101e:	d025      	beq.n	800106c <HAL_GPIO_Init+0x20c>
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	4a51      	ldr	r2, [pc, #324]	; (8001168 <HAL_GPIO_Init+0x308>)
 8001024:	4293      	cmp	r3, r2
 8001026:	d01f      	beq.n	8001068 <HAL_GPIO_Init+0x208>
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	4a50      	ldr	r2, [pc, #320]	; (800116c <HAL_GPIO_Init+0x30c>)
 800102c:	4293      	cmp	r3, r2
 800102e:	d019      	beq.n	8001064 <HAL_GPIO_Init+0x204>
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	4a4f      	ldr	r2, [pc, #316]	; (8001170 <HAL_GPIO_Init+0x310>)
 8001034:	4293      	cmp	r3, r2
 8001036:	d013      	beq.n	8001060 <HAL_GPIO_Init+0x200>
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	4a4e      	ldr	r2, [pc, #312]	; (8001174 <HAL_GPIO_Init+0x314>)
 800103c:	4293      	cmp	r3, r2
 800103e:	d00d      	beq.n	800105c <HAL_GPIO_Init+0x1fc>
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	4a4d      	ldr	r2, [pc, #308]	; (8001178 <HAL_GPIO_Init+0x318>)
 8001044:	4293      	cmp	r3, r2
 8001046:	d007      	beq.n	8001058 <HAL_GPIO_Init+0x1f8>
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	4a4c      	ldr	r2, [pc, #304]	; (800117c <HAL_GPIO_Init+0x31c>)
 800104c:	4293      	cmp	r3, r2
 800104e:	d101      	bne.n	8001054 <HAL_GPIO_Init+0x1f4>
 8001050:	2307      	movs	r3, #7
 8001052:	e00e      	b.n	8001072 <HAL_GPIO_Init+0x212>
 8001054:	2308      	movs	r3, #8
 8001056:	e00c      	b.n	8001072 <HAL_GPIO_Init+0x212>
 8001058:	2306      	movs	r3, #6
 800105a:	e00a      	b.n	8001072 <HAL_GPIO_Init+0x212>
 800105c:	2305      	movs	r3, #5
 800105e:	e008      	b.n	8001072 <HAL_GPIO_Init+0x212>
 8001060:	2304      	movs	r3, #4
 8001062:	e006      	b.n	8001072 <HAL_GPIO_Init+0x212>
 8001064:	2303      	movs	r3, #3
 8001066:	e004      	b.n	8001072 <HAL_GPIO_Init+0x212>
 8001068:	2302      	movs	r3, #2
 800106a:	e002      	b.n	8001072 <HAL_GPIO_Init+0x212>
 800106c:	2301      	movs	r3, #1
 800106e:	e000      	b.n	8001072 <HAL_GPIO_Init+0x212>
 8001070:	2300      	movs	r3, #0
 8001072:	697a      	ldr	r2, [r7, #20]
 8001074:	f002 0203 	and.w	r2, r2, #3
 8001078:	0092      	lsls	r2, r2, #2
 800107a:	4093      	lsls	r3, r2
 800107c:	693a      	ldr	r2, [r7, #16]
 800107e:	4313      	orrs	r3, r2
 8001080:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001082:	4937      	ldr	r1, [pc, #220]	; (8001160 <HAL_GPIO_Init+0x300>)
 8001084:	697b      	ldr	r3, [r7, #20]
 8001086:	089b      	lsrs	r3, r3, #2
 8001088:	3302      	adds	r3, #2
 800108a:	693a      	ldr	r2, [r7, #16]
 800108c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001090:	4b3b      	ldr	r3, [pc, #236]	; (8001180 <HAL_GPIO_Init+0x320>)
 8001092:	689b      	ldr	r3, [r3, #8]
 8001094:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	43db      	mvns	r3, r3
 800109a:	693a      	ldr	r2, [r7, #16]
 800109c:	4013      	ands	r3, r2
 800109e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	685b      	ldr	r3, [r3, #4]
 80010a4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d003      	beq.n	80010b4 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 80010ac:	693a      	ldr	r2, [r7, #16]
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	4313      	orrs	r3, r2
 80010b2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80010b4:	4a32      	ldr	r2, [pc, #200]	; (8001180 <HAL_GPIO_Init+0x320>)
 80010b6:	693b      	ldr	r3, [r7, #16]
 80010b8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80010ba:	4b31      	ldr	r3, [pc, #196]	; (8001180 <HAL_GPIO_Init+0x320>)
 80010bc:	68db      	ldr	r3, [r3, #12]
 80010be:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	43db      	mvns	r3, r3
 80010c4:	693a      	ldr	r2, [r7, #16]
 80010c6:	4013      	ands	r3, r2
 80010c8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	685b      	ldr	r3, [r3, #4]
 80010ce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d003      	beq.n	80010de <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 80010d6:	693a      	ldr	r2, [r7, #16]
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	4313      	orrs	r3, r2
 80010dc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80010de:	4a28      	ldr	r2, [pc, #160]	; (8001180 <HAL_GPIO_Init+0x320>)
 80010e0:	693b      	ldr	r3, [r7, #16]
 80010e2:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80010e4:	4b26      	ldr	r3, [pc, #152]	; (8001180 <HAL_GPIO_Init+0x320>)
 80010e6:	685b      	ldr	r3, [r3, #4]
 80010e8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	43db      	mvns	r3, r3
 80010ee:	693a      	ldr	r2, [r7, #16]
 80010f0:	4013      	ands	r3, r2
 80010f2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	685b      	ldr	r3, [r3, #4]
 80010f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d003      	beq.n	8001108 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8001100:	693a      	ldr	r2, [r7, #16]
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	4313      	orrs	r3, r2
 8001106:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001108:	4a1d      	ldr	r2, [pc, #116]	; (8001180 <HAL_GPIO_Init+0x320>)
 800110a:	693b      	ldr	r3, [r7, #16]
 800110c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800110e:	4b1c      	ldr	r3, [pc, #112]	; (8001180 <HAL_GPIO_Init+0x320>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	43db      	mvns	r3, r3
 8001118:	693a      	ldr	r2, [r7, #16]
 800111a:	4013      	ands	r3, r2
 800111c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800111e:	683b      	ldr	r3, [r7, #0]
 8001120:	685b      	ldr	r3, [r3, #4]
 8001122:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001126:	2b00      	cmp	r3, #0
 8001128:	d003      	beq.n	8001132 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 800112a:	693a      	ldr	r2, [r7, #16]
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	4313      	orrs	r3, r2
 8001130:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001132:	4a13      	ldr	r2, [pc, #76]	; (8001180 <HAL_GPIO_Init+0x320>)
 8001134:	693b      	ldr	r3, [r7, #16]
 8001136:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001138:	697b      	ldr	r3, [r7, #20]
 800113a:	3301      	adds	r3, #1
 800113c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800113e:	683b      	ldr	r3, [r7, #0]
 8001140:	681a      	ldr	r2, [r3, #0]
 8001142:	697b      	ldr	r3, [r7, #20]
 8001144:	fa22 f303 	lsr.w	r3, r2, r3
 8001148:	2b00      	cmp	r3, #0
 800114a:	f47f ae91 	bne.w	8000e70 <HAL_GPIO_Init+0x10>
  }
}
 800114e:	bf00      	nop
 8001150:	bf00      	nop
 8001152:	371c      	adds	r7, #28
 8001154:	46bd      	mov	sp, r7
 8001156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115a:	4770      	bx	lr
 800115c:	40021000 	.word	0x40021000
 8001160:	40010000 	.word	0x40010000
 8001164:	48000400 	.word	0x48000400
 8001168:	48000800 	.word	0x48000800
 800116c:	48000c00 	.word	0x48000c00
 8001170:	48001000 	.word	0x48001000
 8001174:	48001400 	.word	0x48001400
 8001178:	48001800 	.word	0x48001800
 800117c:	48001c00 	.word	0x48001c00
 8001180:	40010400 	.word	0x40010400

08001184 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001184:	b480      	push	{r7}
 8001186:	b085      	sub	sp, #20
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
 800118c:	460b      	mov	r3, r1
 800118e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	691a      	ldr	r2, [r3, #16]
 8001194:	887b      	ldrh	r3, [r7, #2]
 8001196:	4013      	ands	r3, r2
 8001198:	2b00      	cmp	r3, #0
 800119a:	d002      	beq.n	80011a2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800119c:	2301      	movs	r3, #1
 800119e:	73fb      	strb	r3, [r7, #15]
 80011a0:	e001      	b.n	80011a6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80011a2:	2300      	movs	r3, #0
 80011a4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80011a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80011a8:	4618      	mov	r0, r3
 80011aa:	3714      	adds	r7, #20
 80011ac:	46bd      	mov	sp, r7
 80011ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b2:	4770      	bx	lr

080011b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011b4:	b480      	push	{r7}
 80011b6:	b083      	sub	sp, #12
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
 80011bc:	460b      	mov	r3, r1
 80011be:	807b      	strh	r3, [r7, #2]
 80011c0:	4613      	mov	r3, r2
 80011c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80011c4:	787b      	ldrb	r3, [r7, #1]
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d003      	beq.n	80011d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80011ca:	887a      	ldrh	r2, [r7, #2]
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80011d0:	e002      	b.n	80011d8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80011d2:	887a      	ldrh	r2, [r7, #2]
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80011d8:	bf00      	nop
 80011da:	370c      	adds	r7, #12
 80011dc:	46bd      	mov	sp, r7
 80011de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e2:	4770      	bx	lr

080011e4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80011e4:	b480      	push	{r7}
 80011e6:	b085      	sub	sp, #20
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
 80011ec:	460b      	mov	r3, r1
 80011ee:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	695b      	ldr	r3, [r3, #20]
 80011f4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80011f6:	887a      	ldrh	r2, [r7, #2]
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	4013      	ands	r3, r2
 80011fc:	041a      	lsls	r2, r3, #16
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	43d9      	mvns	r1, r3
 8001202:	887b      	ldrh	r3, [r7, #2]
 8001204:	400b      	ands	r3, r1
 8001206:	431a      	orrs	r2, r3
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	619a      	str	r2, [r3, #24]
}
 800120c:	bf00      	nop
 800120e:	3714      	adds	r7, #20
 8001210:	46bd      	mov	sp, r7
 8001212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001216:	4770      	bx	lr

08001218 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001218:	b480      	push	{r7}
 800121a:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800121c:	4b0d      	ldr	r3, [pc, #52]	; (8001254 <HAL_PWREx_GetVoltageRange+0x3c>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001224:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001228:	d102      	bne.n	8001230 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 800122a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800122e:	e00b      	b.n	8001248 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8001230:	4b08      	ldr	r3, [pc, #32]	; (8001254 <HAL_PWREx_GetVoltageRange+0x3c>)
 8001232:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001236:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800123a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800123e:	d102      	bne.n	8001246 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8001240:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001244:	e000      	b.n	8001248 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8001246:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8001248:	4618      	mov	r0, r3
 800124a:	46bd      	mov	sp, r7
 800124c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001250:	4770      	bx	lr
 8001252:	bf00      	nop
 8001254:	40007000 	.word	0x40007000

08001258 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001258:	b480      	push	{r7}
 800125a:	b085      	sub	sp, #20
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	2b00      	cmp	r3, #0
 8001264:	d141      	bne.n	80012ea <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001266:	4b4b      	ldr	r3, [pc, #300]	; (8001394 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800126e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001272:	d131      	bne.n	80012d8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001274:	4b47      	ldr	r3, [pc, #284]	; (8001394 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001276:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800127a:	4a46      	ldr	r2, [pc, #280]	; (8001394 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800127c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001280:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001284:	4b43      	ldr	r3, [pc, #268]	; (8001394 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800128c:	4a41      	ldr	r2, [pc, #260]	; (8001394 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800128e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001292:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8001294:	4b40      	ldr	r3, [pc, #256]	; (8001398 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	2232      	movs	r2, #50	; 0x32
 800129a:	fb02 f303 	mul.w	r3, r2, r3
 800129e:	4a3f      	ldr	r2, [pc, #252]	; (800139c <HAL_PWREx_ControlVoltageScaling+0x144>)
 80012a0:	fba2 2303 	umull	r2, r3, r2, r3
 80012a4:	0c9b      	lsrs	r3, r3, #18
 80012a6:	3301      	adds	r3, #1
 80012a8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80012aa:	e002      	b.n	80012b2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	3b01      	subs	r3, #1
 80012b0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80012b2:	4b38      	ldr	r3, [pc, #224]	; (8001394 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012b4:	695b      	ldr	r3, [r3, #20]
 80012b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80012ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80012be:	d102      	bne.n	80012c6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d1f2      	bne.n	80012ac <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80012c6:	4b33      	ldr	r3, [pc, #204]	; (8001394 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012c8:	695b      	ldr	r3, [r3, #20]
 80012ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80012ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80012d2:	d158      	bne.n	8001386 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80012d4:	2303      	movs	r3, #3
 80012d6:	e057      	b.n	8001388 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80012d8:	4b2e      	ldr	r3, [pc, #184]	; (8001394 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012da:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80012de:	4a2d      	ldr	r2, [pc, #180]	; (8001394 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80012e4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80012e8:	e04d      	b.n	8001386 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80012f0:	d141      	bne.n	8001376 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80012f2:	4b28      	ldr	r3, [pc, #160]	; (8001394 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80012fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80012fe:	d131      	bne.n	8001364 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001300:	4b24      	ldr	r3, [pc, #144]	; (8001394 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001302:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001306:	4a23      	ldr	r2, [pc, #140]	; (8001394 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001308:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800130c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001310:	4b20      	ldr	r3, [pc, #128]	; (8001394 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001318:	4a1e      	ldr	r2, [pc, #120]	; (8001394 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800131a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800131e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8001320:	4b1d      	ldr	r3, [pc, #116]	; (8001398 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	2232      	movs	r2, #50	; 0x32
 8001326:	fb02 f303 	mul.w	r3, r2, r3
 800132a:	4a1c      	ldr	r2, [pc, #112]	; (800139c <HAL_PWREx_ControlVoltageScaling+0x144>)
 800132c:	fba2 2303 	umull	r2, r3, r2, r3
 8001330:	0c9b      	lsrs	r3, r3, #18
 8001332:	3301      	adds	r3, #1
 8001334:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001336:	e002      	b.n	800133e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	3b01      	subs	r3, #1
 800133c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800133e:	4b15      	ldr	r3, [pc, #84]	; (8001394 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001340:	695b      	ldr	r3, [r3, #20]
 8001342:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001346:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800134a:	d102      	bne.n	8001352 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	2b00      	cmp	r3, #0
 8001350:	d1f2      	bne.n	8001338 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001352:	4b10      	ldr	r3, [pc, #64]	; (8001394 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001354:	695b      	ldr	r3, [r3, #20]
 8001356:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800135a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800135e:	d112      	bne.n	8001386 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001360:	2303      	movs	r3, #3
 8001362:	e011      	b.n	8001388 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001364:	4b0b      	ldr	r3, [pc, #44]	; (8001394 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001366:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800136a:	4a0a      	ldr	r2, [pc, #40]	; (8001394 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800136c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001370:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001374:	e007      	b.n	8001386 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001376:	4b07      	ldr	r3, [pc, #28]	; (8001394 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800137e:	4a05      	ldr	r2, [pc, #20]	; (8001394 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001380:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001384:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001386:	2300      	movs	r3, #0
}
 8001388:	4618      	mov	r0, r3
 800138a:	3714      	adds	r7, #20
 800138c:	46bd      	mov	sp, r7
 800138e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001392:	4770      	bx	lr
 8001394:	40007000 	.word	0x40007000
 8001398:	20000000 	.word	0x20000000
 800139c:	431bde83 	.word	0x431bde83

080013a0 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 80013a0:	b480      	push	{r7}
 80013a2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 80013a4:	4b05      	ldr	r3, [pc, #20]	; (80013bc <HAL_PWREx_EnableVddIO2+0x1c>)
 80013a6:	685b      	ldr	r3, [r3, #4]
 80013a8:	4a04      	ldr	r2, [pc, #16]	; (80013bc <HAL_PWREx_EnableVddIO2+0x1c>)
 80013aa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80013ae:	6053      	str	r3, [r2, #4]
}
 80013b0:	bf00      	nop
 80013b2:	46bd      	mov	sp, r7
 80013b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b8:	4770      	bx	lr
 80013ba:	bf00      	nop
 80013bc:	40007000 	.word	0x40007000

080013c0 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b088      	sub	sp, #32
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d102      	bne.n	80013d4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80013ce:	2301      	movs	r3, #1
 80013d0:	f000 bc08 	b.w	8001be4 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80013d4:	4b96      	ldr	r3, [pc, #600]	; (8001630 <HAL_RCC_OscConfig+0x270>)
 80013d6:	689b      	ldr	r3, [r3, #8]
 80013d8:	f003 030c 	and.w	r3, r3, #12
 80013dc:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80013de:	4b94      	ldr	r3, [pc, #592]	; (8001630 <HAL_RCC_OscConfig+0x270>)
 80013e0:	68db      	ldr	r3, [r3, #12]
 80013e2:	f003 0303 	and.w	r3, r3, #3
 80013e6:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	f003 0310 	and.w	r3, r3, #16
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	f000 80e4 	beq.w	80015be <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80013f6:	69bb      	ldr	r3, [r7, #24]
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d007      	beq.n	800140c <HAL_RCC_OscConfig+0x4c>
 80013fc:	69bb      	ldr	r3, [r7, #24]
 80013fe:	2b0c      	cmp	r3, #12
 8001400:	f040 808b 	bne.w	800151a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001404:	697b      	ldr	r3, [r7, #20]
 8001406:	2b01      	cmp	r3, #1
 8001408:	f040 8087 	bne.w	800151a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800140c:	4b88      	ldr	r3, [pc, #544]	; (8001630 <HAL_RCC_OscConfig+0x270>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	f003 0302 	and.w	r3, r3, #2
 8001414:	2b00      	cmp	r3, #0
 8001416:	d005      	beq.n	8001424 <HAL_RCC_OscConfig+0x64>
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	699b      	ldr	r3, [r3, #24]
 800141c:	2b00      	cmp	r3, #0
 800141e:	d101      	bne.n	8001424 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001420:	2301      	movs	r3, #1
 8001422:	e3df      	b.n	8001be4 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	6a1a      	ldr	r2, [r3, #32]
 8001428:	4b81      	ldr	r3, [pc, #516]	; (8001630 <HAL_RCC_OscConfig+0x270>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	f003 0308 	and.w	r3, r3, #8
 8001430:	2b00      	cmp	r3, #0
 8001432:	d004      	beq.n	800143e <HAL_RCC_OscConfig+0x7e>
 8001434:	4b7e      	ldr	r3, [pc, #504]	; (8001630 <HAL_RCC_OscConfig+0x270>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800143c:	e005      	b.n	800144a <HAL_RCC_OscConfig+0x8a>
 800143e:	4b7c      	ldr	r3, [pc, #496]	; (8001630 <HAL_RCC_OscConfig+0x270>)
 8001440:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001444:	091b      	lsrs	r3, r3, #4
 8001446:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800144a:	4293      	cmp	r3, r2
 800144c:	d223      	bcs.n	8001496 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	6a1b      	ldr	r3, [r3, #32]
 8001452:	4618      	mov	r0, r3
 8001454:	f000 fdfe 	bl	8002054 <RCC_SetFlashLatencyFromMSIRange>
 8001458:	4603      	mov	r3, r0
 800145a:	2b00      	cmp	r3, #0
 800145c:	d001      	beq.n	8001462 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800145e:	2301      	movs	r3, #1
 8001460:	e3c0      	b.n	8001be4 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001462:	4b73      	ldr	r3, [pc, #460]	; (8001630 <HAL_RCC_OscConfig+0x270>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	4a72      	ldr	r2, [pc, #456]	; (8001630 <HAL_RCC_OscConfig+0x270>)
 8001468:	f043 0308 	orr.w	r3, r3, #8
 800146c:	6013      	str	r3, [r2, #0]
 800146e:	4b70      	ldr	r3, [pc, #448]	; (8001630 <HAL_RCC_OscConfig+0x270>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	6a1b      	ldr	r3, [r3, #32]
 800147a:	496d      	ldr	r1, [pc, #436]	; (8001630 <HAL_RCC_OscConfig+0x270>)
 800147c:	4313      	orrs	r3, r2
 800147e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001480:	4b6b      	ldr	r3, [pc, #428]	; (8001630 <HAL_RCC_OscConfig+0x270>)
 8001482:	685b      	ldr	r3, [r3, #4]
 8001484:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	69db      	ldr	r3, [r3, #28]
 800148c:	021b      	lsls	r3, r3, #8
 800148e:	4968      	ldr	r1, [pc, #416]	; (8001630 <HAL_RCC_OscConfig+0x270>)
 8001490:	4313      	orrs	r3, r2
 8001492:	604b      	str	r3, [r1, #4]
 8001494:	e025      	b.n	80014e2 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001496:	4b66      	ldr	r3, [pc, #408]	; (8001630 <HAL_RCC_OscConfig+0x270>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	4a65      	ldr	r2, [pc, #404]	; (8001630 <HAL_RCC_OscConfig+0x270>)
 800149c:	f043 0308 	orr.w	r3, r3, #8
 80014a0:	6013      	str	r3, [r2, #0]
 80014a2:	4b63      	ldr	r3, [pc, #396]	; (8001630 <HAL_RCC_OscConfig+0x270>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	6a1b      	ldr	r3, [r3, #32]
 80014ae:	4960      	ldr	r1, [pc, #384]	; (8001630 <HAL_RCC_OscConfig+0x270>)
 80014b0:	4313      	orrs	r3, r2
 80014b2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80014b4:	4b5e      	ldr	r3, [pc, #376]	; (8001630 <HAL_RCC_OscConfig+0x270>)
 80014b6:	685b      	ldr	r3, [r3, #4]
 80014b8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	69db      	ldr	r3, [r3, #28]
 80014c0:	021b      	lsls	r3, r3, #8
 80014c2:	495b      	ldr	r1, [pc, #364]	; (8001630 <HAL_RCC_OscConfig+0x270>)
 80014c4:	4313      	orrs	r3, r2
 80014c6:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80014c8:	69bb      	ldr	r3, [r7, #24]
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d109      	bne.n	80014e2 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	6a1b      	ldr	r3, [r3, #32]
 80014d2:	4618      	mov	r0, r3
 80014d4:	f000 fdbe 	bl	8002054 <RCC_SetFlashLatencyFromMSIRange>
 80014d8:	4603      	mov	r3, r0
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d001      	beq.n	80014e2 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80014de:	2301      	movs	r3, #1
 80014e0:	e380      	b.n	8001be4 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80014e2:	f000 fcc1 	bl	8001e68 <HAL_RCC_GetSysClockFreq>
 80014e6:	4602      	mov	r2, r0
 80014e8:	4b51      	ldr	r3, [pc, #324]	; (8001630 <HAL_RCC_OscConfig+0x270>)
 80014ea:	689b      	ldr	r3, [r3, #8]
 80014ec:	091b      	lsrs	r3, r3, #4
 80014ee:	f003 030f 	and.w	r3, r3, #15
 80014f2:	4950      	ldr	r1, [pc, #320]	; (8001634 <HAL_RCC_OscConfig+0x274>)
 80014f4:	5ccb      	ldrb	r3, [r1, r3]
 80014f6:	f003 031f 	and.w	r3, r3, #31
 80014fa:	fa22 f303 	lsr.w	r3, r2, r3
 80014fe:	4a4e      	ldr	r2, [pc, #312]	; (8001638 <HAL_RCC_OscConfig+0x278>)
 8001500:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001502:	4b4e      	ldr	r3, [pc, #312]	; (800163c <HAL_RCC_OscConfig+0x27c>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	4618      	mov	r0, r3
 8001508:	f7ff fabc 	bl	8000a84 <HAL_InitTick>
 800150c:	4603      	mov	r3, r0
 800150e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001510:	7bfb      	ldrb	r3, [r7, #15]
 8001512:	2b00      	cmp	r3, #0
 8001514:	d052      	beq.n	80015bc <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8001516:	7bfb      	ldrb	r3, [r7, #15]
 8001518:	e364      	b.n	8001be4 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	699b      	ldr	r3, [r3, #24]
 800151e:	2b00      	cmp	r3, #0
 8001520:	d032      	beq.n	8001588 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001522:	4b43      	ldr	r3, [pc, #268]	; (8001630 <HAL_RCC_OscConfig+0x270>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	4a42      	ldr	r2, [pc, #264]	; (8001630 <HAL_RCC_OscConfig+0x270>)
 8001528:	f043 0301 	orr.w	r3, r3, #1
 800152c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800152e:	f7ff fba9 	bl	8000c84 <HAL_GetTick>
 8001532:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001534:	e008      	b.n	8001548 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001536:	f7ff fba5 	bl	8000c84 <HAL_GetTick>
 800153a:	4602      	mov	r2, r0
 800153c:	693b      	ldr	r3, [r7, #16]
 800153e:	1ad3      	subs	r3, r2, r3
 8001540:	2b02      	cmp	r3, #2
 8001542:	d901      	bls.n	8001548 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001544:	2303      	movs	r3, #3
 8001546:	e34d      	b.n	8001be4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001548:	4b39      	ldr	r3, [pc, #228]	; (8001630 <HAL_RCC_OscConfig+0x270>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	f003 0302 	and.w	r3, r3, #2
 8001550:	2b00      	cmp	r3, #0
 8001552:	d0f0      	beq.n	8001536 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001554:	4b36      	ldr	r3, [pc, #216]	; (8001630 <HAL_RCC_OscConfig+0x270>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	4a35      	ldr	r2, [pc, #212]	; (8001630 <HAL_RCC_OscConfig+0x270>)
 800155a:	f043 0308 	orr.w	r3, r3, #8
 800155e:	6013      	str	r3, [r2, #0]
 8001560:	4b33      	ldr	r3, [pc, #204]	; (8001630 <HAL_RCC_OscConfig+0x270>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	6a1b      	ldr	r3, [r3, #32]
 800156c:	4930      	ldr	r1, [pc, #192]	; (8001630 <HAL_RCC_OscConfig+0x270>)
 800156e:	4313      	orrs	r3, r2
 8001570:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001572:	4b2f      	ldr	r3, [pc, #188]	; (8001630 <HAL_RCC_OscConfig+0x270>)
 8001574:	685b      	ldr	r3, [r3, #4]
 8001576:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	69db      	ldr	r3, [r3, #28]
 800157e:	021b      	lsls	r3, r3, #8
 8001580:	492b      	ldr	r1, [pc, #172]	; (8001630 <HAL_RCC_OscConfig+0x270>)
 8001582:	4313      	orrs	r3, r2
 8001584:	604b      	str	r3, [r1, #4]
 8001586:	e01a      	b.n	80015be <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001588:	4b29      	ldr	r3, [pc, #164]	; (8001630 <HAL_RCC_OscConfig+0x270>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	4a28      	ldr	r2, [pc, #160]	; (8001630 <HAL_RCC_OscConfig+0x270>)
 800158e:	f023 0301 	bic.w	r3, r3, #1
 8001592:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001594:	f7ff fb76 	bl	8000c84 <HAL_GetTick>
 8001598:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800159a:	e008      	b.n	80015ae <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800159c:	f7ff fb72 	bl	8000c84 <HAL_GetTick>
 80015a0:	4602      	mov	r2, r0
 80015a2:	693b      	ldr	r3, [r7, #16]
 80015a4:	1ad3      	subs	r3, r2, r3
 80015a6:	2b02      	cmp	r3, #2
 80015a8:	d901      	bls.n	80015ae <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80015aa:	2303      	movs	r3, #3
 80015ac:	e31a      	b.n	8001be4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80015ae:	4b20      	ldr	r3, [pc, #128]	; (8001630 <HAL_RCC_OscConfig+0x270>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f003 0302 	and.w	r3, r3, #2
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d1f0      	bne.n	800159c <HAL_RCC_OscConfig+0x1dc>
 80015ba:	e000      	b.n	80015be <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80015bc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f003 0301 	and.w	r3, r3, #1
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d073      	beq.n	80016b2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80015ca:	69bb      	ldr	r3, [r7, #24]
 80015cc:	2b08      	cmp	r3, #8
 80015ce:	d005      	beq.n	80015dc <HAL_RCC_OscConfig+0x21c>
 80015d0:	69bb      	ldr	r3, [r7, #24]
 80015d2:	2b0c      	cmp	r3, #12
 80015d4:	d10e      	bne.n	80015f4 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80015d6:	697b      	ldr	r3, [r7, #20]
 80015d8:	2b03      	cmp	r3, #3
 80015da:	d10b      	bne.n	80015f4 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015dc:	4b14      	ldr	r3, [pc, #80]	; (8001630 <HAL_RCC_OscConfig+0x270>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d063      	beq.n	80016b0 <HAL_RCC_OscConfig+0x2f0>
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	685b      	ldr	r3, [r3, #4]
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d15f      	bne.n	80016b0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80015f0:	2301      	movs	r3, #1
 80015f2:	e2f7      	b.n	8001be4 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	685b      	ldr	r3, [r3, #4]
 80015f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015fc:	d106      	bne.n	800160c <HAL_RCC_OscConfig+0x24c>
 80015fe:	4b0c      	ldr	r3, [pc, #48]	; (8001630 <HAL_RCC_OscConfig+0x270>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	4a0b      	ldr	r2, [pc, #44]	; (8001630 <HAL_RCC_OscConfig+0x270>)
 8001604:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001608:	6013      	str	r3, [r2, #0]
 800160a:	e025      	b.n	8001658 <HAL_RCC_OscConfig+0x298>
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	685b      	ldr	r3, [r3, #4]
 8001610:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001614:	d114      	bne.n	8001640 <HAL_RCC_OscConfig+0x280>
 8001616:	4b06      	ldr	r3, [pc, #24]	; (8001630 <HAL_RCC_OscConfig+0x270>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	4a05      	ldr	r2, [pc, #20]	; (8001630 <HAL_RCC_OscConfig+0x270>)
 800161c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001620:	6013      	str	r3, [r2, #0]
 8001622:	4b03      	ldr	r3, [pc, #12]	; (8001630 <HAL_RCC_OscConfig+0x270>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	4a02      	ldr	r2, [pc, #8]	; (8001630 <HAL_RCC_OscConfig+0x270>)
 8001628:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800162c:	6013      	str	r3, [r2, #0]
 800162e:	e013      	b.n	8001658 <HAL_RCC_OscConfig+0x298>
 8001630:	40021000 	.word	0x40021000
 8001634:	0800668c 	.word	0x0800668c
 8001638:	20000000 	.word	0x20000000
 800163c:	20000004 	.word	0x20000004
 8001640:	4ba0      	ldr	r3, [pc, #640]	; (80018c4 <HAL_RCC_OscConfig+0x504>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	4a9f      	ldr	r2, [pc, #636]	; (80018c4 <HAL_RCC_OscConfig+0x504>)
 8001646:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800164a:	6013      	str	r3, [r2, #0]
 800164c:	4b9d      	ldr	r3, [pc, #628]	; (80018c4 <HAL_RCC_OscConfig+0x504>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	4a9c      	ldr	r2, [pc, #624]	; (80018c4 <HAL_RCC_OscConfig+0x504>)
 8001652:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001656:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	685b      	ldr	r3, [r3, #4]
 800165c:	2b00      	cmp	r3, #0
 800165e:	d013      	beq.n	8001688 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001660:	f7ff fb10 	bl	8000c84 <HAL_GetTick>
 8001664:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001666:	e008      	b.n	800167a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001668:	f7ff fb0c 	bl	8000c84 <HAL_GetTick>
 800166c:	4602      	mov	r2, r0
 800166e:	693b      	ldr	r3, [r7, #16]
 8001670:	1ad3      	subs	r3, r2, r3
 8001672:	2b64      	cmp	r3, #100	; 0x64
 8001674:	d901      	bls.n	800167a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001676:	2303      	movs	r3, #3
 8001678:	e2b4      	b.n	8001be4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800167a:	4b92      	ldr	r3, [pc, #584]	; (80018c4 <HAL_RCC_OscConfig+0x504>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001682:	2b00      	cmp	r3, #0
 8001684:	d0f0      	beq.n	8001668 <HAL_RCC_OscConfig+0x2a8>
 8001686:	e014      	b.n	80016b2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001688:	f7ff fafc 	bl	8000c84 <HAL_GetTick>
 800168c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800168e:	e008      	b.n	80016a2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001690:	f7ff faf8 	bl	8000c84 <HAL_GetTick>
 8001694:	4602      	mov	r2, r0
 8001696:	693b      	ldr	r3, [r7, #16]
 8001698:	1ad3      	subs	r3, r2, r3
 800169a:	2b64      	cmp	r3, #100	; 0x64
 800169c:	d901      	bls.n	80016a2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800169e:	2303      	movs	r3, #3
 80016a0:	e2a0      	b.n	8001be4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80016a2:	4b88      	ldr	r3, [pc, #544]	; (80018c4 <HAL_RCC_OscConfig+0x504>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d1f0      	bne.n	8001690 <HAL_RCC_OscConfig+0x2d0>
 80016ae:	e000      	b.n	80016b2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f003 0302 	and.w	r3, r3, #2
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d060      	beq.n	8001780 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80016be:	69bb      	ldr	r3, [r7, #24]
 80016c0:	2b04      	cmp	r3, #4
 80016c2:	d005      	beq.n	80016d0 <HAL_RCC_OscConfig+0x310>
 80016c4:	69bb      	ldr	r3, [r7, #24]
 80016c6:	2b0c      	cmp	r3, #12
 80016c8:	d119      	bne.n	80016fe <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80016ca:	697b      	ldr	r3, [r7, #20]
 80016cc:	2b02      	cmp	r3, #2
 80016ce:	d116      	bne.n	80016fe <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80016d0:	4b7c      	ldr	r3, [pc, #496]	; (80018c4 <HAL_RCC_OscConfig+0x504>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d005      	beq.n	80016e8 <HAL_RCC_OscConfig+0x328>
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	68db      	ldr	r3, [r3, #12]
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d101      	bne.n	80016e8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80016e4:	2301      	movs	r3, #1
 80016e6:	e27d      	b.n	8001be4 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016e8:	4b76      	ldr	r3, [pc, #472]	; (80018c4 <HAL_RCC_OscConfig+0x504>)
 80016ea:	685b      	ldr	r3, [r3, #4]
 80016ec:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	691b      	ldr	r3, [r3, #16]
 80016f4:	061b      	lsls	r3, r3, #24
 80016f6:	4973      	ldr	r1, [pc, #460]	; (80018c4 <HAL_RCC_OscConfig+0x504>)
 80016f8:	4313      	orrs	r3, r2
 80016fa:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80016fc:	e040      	b.n	8001780 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	68db      	ldr	r3, [r3, #12]
 8001702:	2b00      	cmp	r3, #0
 8001704:	d023      	beq.n	800174e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001706:	4b6f      	ldr	r3, [pc, #444]	; (80018c4 <HAL_RCC_OscConfig+0x504>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	4a6e      	ldr	r2, [pc, #440]	; (80018c4 <HAL_RCC_OscConfig+0x504>)
 800170c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001710:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001712:	f7ff fab7 	bl	8000c84 <HAL_GetTick>
 8001716:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001718:	e008      	b.n	800172c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800171a:	f7ff fab3 	bl	8000c84 <HAL_GetTick>
 800171e:	4602      	mov	r2, r0
 8001720:	693b      	ldr	r3, [r7, #16]
 8001722:	1ad3      	subs	r3, r2, r3
 8001724:	2b02      	cmp	r3, #2
 8001726:	d901      	bls.n	800172c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001728:	2303      	movs	r3, #3
 800172a:	e25b      	b.n	8001be4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800172c:	4b65      	ldr	r3, [pc, #404]	; (80018c4 <HAL_RCC_OscConfig+0x504>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001734:	2b00      	cmp	r3, #0
 8001736:	d0f0      	beq.n	800171a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001738:	4b62      	ldr	r3, [pc, #392]	; (80018c4 <HAL_RCC_OscConfig+0x504>)
 800173a:	685b      	ldr	r3, [r3, #4]
 800173c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	691b      	ldr	r3, [r3, #16]
 8001744:	061b      	lsls	r3, r3, #24
 8001746:	495f      	ldr	r1, [pc, #380]	; (80018c4 <HAL_RCC_OscConfig+0x504>)
 8001748:	4313      	orrs	r3, r2
 800174a:	604b      	str	r3, [r1, #4]
 800174c:	e018      	b.n	8001780 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800174e:	4b5d      	ldr	r3, [pc, #372]	; (80018c4 <HAL_RCC_OscConfig+0x504>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	4a5c      	ldr	r2, [pc, #368]	; (80018c4 <HAL_RCC_OscConfig+0x504>)
 8001754:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001758:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800175a:	f7ff fa93 	bl	8000c84 <HAL_GetTick>
 800175e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001760:	e008      	b.n	8001774 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001762:	f7ff fa8f 	bl	8000c84 <HAL_GetTick>
 8001766:	4602      	mov	r2, r0
 8001768:	693b      	ldr	r3, [r7, #16]
 800176a:	1ad3      	subs	r3, r2, r3
 800176c:	2b02      	cmp	r3, #2
 800176e:	d901      	bls.n	8001774 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001770:	2303      	movs	r3, #3
 8001772:	e237      	b.n	8001be4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001774:	4b53      	ldr	r3, [pc, #332]	; (80018c4 <HAL_RCC_OscConfig+0x504>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800177c:	2b00      	cmp	r3, #0
 800177e:	d1f0      	bne.n	8001762 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f003 0308 	and.w	r3, r3, #8
 8001788:	2b00      	cmp	r3, #0
 800178a:	d03c      	beq.n	8001806 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	695b      	ldr	r3, [r3, #20]
 8001790:	2b00      	cmp	r3, #0
 8001792:	d01c      	beq.n	80017ce <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001794:	4b4b      	ldr	r3, [pc, #300]	; (80018c4 <HAL_RCC_OscConfig+0x504>)
 8001796:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800179a:	4a4a      	ldr	r2, [pc, #296]	; (80018c4 <HAL_RCC_OscConfig+0x504>)
 800179c:	f043 0301 	orr.w	r3, r3, #1
 80017a0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017a4:	f7ff fa6e 	bl	8000c84 <HAL_GetTick>
 80017a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80017aa:	e008      	b.n	80017be <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017ac:	f7ff fa6a 	bl	8000c84 <HAL_GetTick>
 80017b0:	4602      	mov	r2, r0
 80017b2:	693b      	ldr	r3, [r7, #16]
 80017b4:	1ad3      	subs	r3, r2, r3
 80017b6:	2b02      	cmp	r3, #2
 80017b8:	d901      	bls.n	80017be <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80017ba:	2303      	movs	r3, #3
 80017bc:	e212      	b.n	8001be4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80017be:	4b41      	ldr	r3, [pc, #260]	; (80018c4 <HAL_RCC_OscConfig+0x504>)
 80017c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80017c4:	f003 0302 	and.w	r3, r3, #2
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d0ef      	beq.n	80017ac <HAL_RCC_OscConfig+0x3ec>
 80017cc:	e01b      	b.n	8001806 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80017ce:	4b3d      	ldr	r3, [pc, #244]	; (80018c4 <HAL_RCC_OscConfig+0x504>)
 80017d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80017d4:	4a3b      	ldr	r2, [pc, #236]	; (80018c4 <HAL_RCC_OscConfig+0x504>)
 80017d6:	f023 0301 	bic.w	r3, r3, #1
 80017da:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017de:	f7ff fa51 	bl	8000c84 <HAL_GetTick>
 80017e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80017e4:	e008      	b.n	80017f8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017e6:	f7ff fa4d 	bl	8000c84 <HAL_GetTick>
 80017ea:	4602      	mov	r2, r0
 80017ec:	693b      	ldr	r3, [r7, #16]
 80017ee:	1ad3      	subs	r3, r2, r3
 80017f0:	2b02      	cmp	r3, #2
 80017f2:	d901      	bls.n	80017f8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80017f4:	2303      	movs	r3, #3
 80017f6:	e1f5      	b.n	8001be4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80017f8:	4b32      	ldr	r3, [pc, #200]	; (80018c4 <HAL_RCC_OscConfig+0x504>)
 80017fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80017fe:	f003 0302 	and.w	r3, r3, #2
 8001802:	2b00      	cmp	r3, #0
 8001804:	d1ef      	bne.n	80017e6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f003 0304 	and.w	r3, r3, #4
 800180e:	2b00      	cmp	r3, #0
 8001810:	f000 80a6 	beq.w	8001960 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001814:	2300      	movs	r3, #0
 8001816:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001818:	4b2a      	ldr	r3, [pc, #168]	; (80018c4 <HAL_RCC_OscConfig+0x504>)
 800181a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800181c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001820:	2b00      	cmp	r3, #0
 8001822:	d10d      	bne.n	8001840 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001824:	4b27      	ldr	r3, [pc, #156]	; (80018c4 <HAL_RCC_OscConfig+0x504>)
 8001826:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001828:	4a26      	ldr	r2, [pc, #152]	; (80018c4 <HAL_RCC_OscConfig+0x504>)
 800182a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800182e:	6593      	str	r3, [r2, #88]	; 0x58
 8001830:	4b24      	ldr	r3, [pc, #144]	; (80018c4 <HAL_RCC_OscConfig+0x504>)
 8001832:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001834:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001838:	60bb      	str	r3, [r7, #8]
 800183a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800183c:	2301      	movs	r3, #1
 800183e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001840:	4b21      	ldr	r3, [pc, #132]	; (80018c8 <HAL_RCC_OscConfig+0x508>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001848:	2b00      	cmp	r3, #0
 800184a:	d118      	bne.n	800187e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800184c:	4b1e      	ldr	r3, [pc, #120]	; (80018c8 <HAL_RCC_OscConfig+0x508>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	4a1d      	ldr	r2, [pc, #116]	; (80018c8 <HAL_RCC_OscConfig+0x508>)
 8001852:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001856:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001858:	f7ff fa14 	bl	8000c84 <HAL_GetTick>
 800185c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800185e:	e008      	b.n	8001872 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001860:	f7ff fa10 	bl	8000c84 <HAL_GetTick>
 8001864:	4602      	mov	r2, r0
 8001866:	693b      	ldr	r3, [r7, #16]
 8001868:	1ad3      	subs	r3, r2, r3
 800186a:	2b02      	cmp	r3, #2
 800186c:	d901      	bls.n	8001872 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800186e:	2303      	movs	r3, #3
 8001870:	e1b8      	b.n	8001be4 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001872:	4b15      	ldr	r3, [pc, #84]	; (80018c8 <HAL_RCC_OscConfig+0x508>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800187a:	2b00      	cmp	r3, #0
 800187c:	d0f0      	beq.n	8001860 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	689b      	ldr	r3, [r3, #8]
 8001882:	2b01      	cmp	r3, #1
 8001884:	d108      	bne.n	8001898 <HAL_RCC_OscConfig+0x4d8>
 8001886:	4b0f      	ldr	r3, [pc, #60]	; (80018c4 <HAL_RCC_OscConfig+0x504>)
 8001888:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800188c:	4a0d      	ldr	r2, [pc, #52]	; (80018c4 <HAL_RCC_OscConfig+0x504>)
 800188e:	f043 0301 	orr.w	r3, r3, #1
 8001892:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001896:	e029      	b.n	80018ec <HAL_RCC_OscConfig+0x52c>
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	689b      	ldr	r3, [r3, #8]
 800189c:	2b05      	cmp	r3, #5
 800189e:	d115      	bne.n	80018cc <HAL_RCC_OscConfig+0x50c>
 80018a0:	4b08      	ldr	r3, [pc, #32]	; (80018c4 <HAL_RCC_OscConfig+0x504>)
 80018a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018a6:	4a07      	ldr	r2, [pc, #28]	; (80018c4 <HAL_RCC_OscConfig+0x504>)
 80018a8:	f043 0304 	orr.w	r3, r3, #4
 80018ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80018b0:	4b04      	ldr	r3, [pc, #16]	; (80018c4 <HAL_RCC_OscConfig+0x504>)
 80018b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018b6:	4a03      	ldr	r2, [pc, #12]	; (80018c4 <HAL_RCC_OscConfig+0x504>)
 80018b8:	f043 0301 	orr.w	r3, r3, #1
 80018bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80018c0:	e014      	b.n	80018ec <HAL_RCC_OscConfig+0x52c>
 80018c2:	bf00      	nop
 80018c4:	40021000 	.word	0x40021000
 80018c8:	40007000 	.word	0x40007000
 80018cc:	4b9d      	ldr	r3, [pc, #628]	; (8001b44 <HAL_RCC_OscConfig+0x784>)
 80018ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018d2:	4a9c      	ldr	r2, [pc, #624]	; (8001b44 <HAL_RCC_OscConfig+0x784>)
 80018d4:	f023 0301 	bic.w	r3, r3, #1
 80018d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80018dc:	4b99      	ldr	r3, [pc, #612]	; (8001b44 <HAL_RCC_OscConfig+0x784>)
 80018de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018e2:	4a98      	ldr	r2, [pc, #608]	; (8001b44 <HAL_RCC_OscConfig+0x784>)
 80018e4:	f023 0304 	bic.w	r3, r3, #4
 80018e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	689b      	ldr	r3, [r3, #8]
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d016      	beq.n	8001922 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018f4:	f7ff f9c6 	bl	8000c84 <HAL_GetTick>
 80018f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80018fa:	e00a      	b.n	8001912 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018fc:	f7ff f9c2 	bl	8000c84 <HAL_GetTick>
 8001900:	4602      	mov	r2, r0
 8001902:	693b      	ldr	r3, [r7, #16]
 8001904:	1ad3      	subs	r3, r2, r3
 8001906:	f241 3288 	movw	r2, #5000	; 0x1388
 800190a:	4293      	cmp	r3, r2
 800190c:	d901      	bls.n	8001912 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800190e:	2303      	movs	r3, #3
 8001910:	e168      	b.n	8001be4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001912:	4b8c      	ldr	r3, [pc, #560]	; (8001b44 <HAL_RCC_OscConfig+0x784>)
 8001914:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001918:	f003 0302 	and.w	r3, r3, #2
 800191c:	2b00      	cmp	r3, #0
 800191e:	d0ed      	beq.n	80018fc <HAL_RCC_OscConfig+0x53c>
 8001920:	e015      	b.n	800194e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001922:	f7ff f9af 	bl	8000c84 <HAL_GetTick>
 8001926:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001928:	e00a      	b.n	8001940 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800192a:	f7ff f9ab 	bl	8000c84 <HAL_GetTick>
 800192e:	4602      	mov	r2, r0
 8001930:	693b      	ldr	r3, [r7, #16]
 8001932:	1ad3      	subs	r3, r2, r3
 8001934:	f241 3288 	movw	r2, #5000	; 0x1388
 8001938:	4293      	cmp	r3, r2
 800193a:	d901      	bls.n	8001940 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800193c:	2303      	movs	r3, #3
 800193e:	e151      	b.n	8001be4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001940:	4b80      	ldr	r3, [pc, #512]	; (8001b44 <HAL_RCC_OscConfig+0x784>)
 8001942:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001946:	f003 0302 	and.w	r3, r3, #2
 800194a:	2b00      	cmp	r3, #0
 800194c:	d1ed      	bne.n	800192a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800194e:	7ffb      	ldrb	r3, [r7, #31]
 8001950:	2b01      	cmp	r3, #1
 8001952:	d105      	bne.n	8001960 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001954:	4b7b      	ldr	r3, [pc, #492]	; (8001b44 <HAL_RCC_OscConfig+0x784>)
 8001956:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001958:	4a7a      	ldr	r2, [pc, #488]	; (8001b44 <HAL_RCC_OscConfig+0x784>)
 800195a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800195e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f003 0320 	and.w	r3, r3, #32
 8001968:	2b00      	cmp	r3, #0
 800196a:	d03c      	beq.n	80019e6 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001970:	2b00      	cmp	r3, #0
 8001972:	d01c      	beq.n	80019ae <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001974:	4b73      	ldr	r3, [pc, #460]	; (8001b44 <HAL_RCC_OscConfig+0x784>)
 8001976:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800197a:	4a72      	ldr	r2, [pc, #456]	; (8001b44 <HAL_RCC_OscConfig+0x784>)
 800197c:	f043 0301 	orr.w	r3, r3, #1
 8001980:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001984:	f7ff f97e 	bl	8000c84 <HAL_GetTick>
 8001988:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800198a:	e008      	b.n	800199e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800198c:	f7ff f97a 	bl	8000c84 <HAL_GetTick>
 8001990:	4602      	mov	r2, r0
 8001992:	693b      	ldr	r3, [r7, #16]
 8001994:	1ad3      	subs	r3, r2, r3
 8001996:	2b02      	cmp	r3, #2
 8001998:	d901      	bls.n	800199e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800199a:	2303      	movs	r3, #3
 800199c:	e122      	b.n	8001be4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800199e:	4b69      	ldr	r3, [pc, #420]	; (8001b44 <HAL_RCC_OscConfig+0x784>)
 80019a0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80019a4:	f003 0302 	and.w	r3, r3, #2
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d0ef      	beq.n	800198c <HAL_RCC_OscConfig+0x5cc>
 80019ac:	e01b      	b.n	80019e6 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80019ae:	4b65      	ldr	r3, [pc, #404]	; (8001b44 <HAL_RCC_OscConfig+0x784>)
 80019b0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80019b4:	4a63      	ldr	r2, [pc, #396]	; (8001b44 <HAL_RCC_OscConfig+0x784>)
 80019b6:	f023 0301 	bic.w	r3, r3, #1
 80019ba:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019be:	f7ff f961 	bl	8000c84 <HAL_GetTick>
 80019c2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80019c4:	e008      	b.n	80019d8 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80019c6:	f7ff f95d 	bl	8000c84 <HAL_GetTick>
 80019ca:	4602      	mov	r2, r0
 80019cc:	693b      	ldr	r3, [r7, #16]
 80019ce:	1ad3      	subs	r3, r2, r3
 80019d0:	2b02      	cmp	r3, #2
 80019d2:	d901      	bls.n	80019d8 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80019d4:	2303      	movs	r3, #3
 80019d6:	e105      	b.n	8001be4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80019d8:	4b5a      	ldr	r3, [pc, #360]	; (8001b44 <HAL_RCC_OscConfig+0x784>)
 80019da:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80019de:	f003 0302 	and.w	r3, r3, #2
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d1ef      	bne.n	80019c6 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	f000 80f9 	beq.w	8001be2 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019f4:	2b02      	cmp	r3, #2
 80019f6:	f040 80cf 	bne.w	8001b98 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80019fa:	4b52      	ldr	r3, [pc, #328]	; (8001b44 <HAL_RCC_OscConfig+0x784>)
 80019fc:	68db      	ldr	r3, [r3, #12]
 80019fe:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a00:	697b      	ldr	r3, [r7, #20]
 8001a02:	f003 0203 	and.w	r2, r3, #3
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a0a:	429a      	cmp	r2, r3
 8001a0c:	d12c      	bne.n	8001a68 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001a0e:	697b      	ldr	r3, [r7, #20]
 8001a10:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a18:	3b01      	subs	r3, #1
 8001a1a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a1c:	429a      	cmp	r2, r3
 8001a1e:	d123      	bne.n	8001a68 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001a20:	697b      	ldr	r3, [r7, #20]
 8001a22:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a2a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001a2c:	429a      	cmp	r2, r3
 8001a2e:	d11b      	bne.n	8001a68 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001a30:	697b      	ldr	r3, [r7, #20]
 8001a32:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a3a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001a3c:	429a      	cmp	r2, r3
 8001a3e:	d113      	bne.n	8001a68 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001a40:	697b      	ldr	r3, [r7, #20]
 8001a42:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a4a:	085b      	lsrs	r3, r3, #1
 8001a4c:	3b01      	subs	r3, #1
 8001a4e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001a50:	429a      	cmp	r2, r3
 8001a52:	d109      	bne.n	8001a68 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001a54:	697b      	ldr	r3, [r7, #20]
 8001a56:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a5e:	085b      	lsrs	r3, r3, #1
 8001a60:	3b01      	subs	r3, #1
 8001a62:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001a64:	429a      	cmp	r2, r3
 8001a66:	d071      	beq.n	8001b4c <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001a68:	69bb      	ldr	r3, [r7, #24]
 8001a6a:	2b0c      	cmp	r3, #12
 8001a6c:	d068      	beq.n	8001b40 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001a6e:	4b35      	ldr	r3, [pc, #212]	; (8001b44 <HAL_RCC_OscConfig+0x784>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d105      	bne.n	8001a86 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001a7a:	4b32      	ldr	r3, [pc, #200]	; (8001b44 <HAL_RCC_OscConfig+0x784>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d001      	beq.n	8001a8a <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8001a86:	2301      	movs	r3, #1
 8001a88:	e0ac      	b.n	8001be4 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001a8a:	4b2e      	ldr	r3, [pc, #184]	; (8001b44 <HAL_RCC_OscConfig+0x784>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	4a2d      	ldr	r2, [pc, #180]	; (8001b44 <HAL_RCC_OscConfig+0x784>)
 8001a90:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001a94:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001a96:	f7ff f8f5 	bl	8000c84 <HAL_GetTick>
 8001a9a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a9c:	e008      	b.n	8001ab0 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a9e:	f7ff f8f1 	bl	8000c84 <HAL_GetTick>
 8001aa2:	4602      	mov	r2, r0
 8001aa4:	693b      	ldr	r3, [r7, #16]
 8001aa6:	1ad3      	subs	r3, r2, r3
 8001aa8:	2b02      	cmp	r3, #2
 8001aaa:	d901      	bls.n	8001ab0 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8001aac:	2303      	movs	r3, #3
 8001aae:	e099      	b.n	8001be4 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ab0:	4b24      	ldr	r3, [pc, #144]	; (8001b44 <HAL_RCC_OscConfig+0x784>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d1f0      	bne.n	8001a9e <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001abc:	4b21      	ldr	r3, [pc, #132]	; (8001b44 <HAL_RCC_OscConfig+0x784>)
 8001abe:	68da      	ldr	r2, [r3, #12]
 8001ac0:	4b21      	ldr	r3, [pc, #132]	; (8001b48 <HAL_RCC_OscConfig+0x788>)
 8001ac2:	4013      	ands	r3, r2
 8001ac4:	687a      	ldr	r2, [r7, #4]
 8001ac6:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001ac8:	687a      	ldr	r2, [r7, #4]
 8001aca:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001acc:	3a01      	subs	r2, #1
 8001ace:	0112      	lsls	r2, r2, #4
 8001ad0:	4311      	orrs	r1, r2
 8001ad2:	687a      	ldr	r2, [r7, #4]
 8001ad4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001ad6:	0212      	lsls	r2, r2, #8
 8001ad8:	4311      	orrs	r1, r2
 8001ada:	687a      	ldr	r2, [r7, #4]
 8001adc:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001ade:	0852      	lsrs	r2, r2, #1
 8001ae0:	3a01      	subs	r2, #1
 8001ae2:	0552      	lsls	r2, r2, #21
 8001ae4:	4311      	orrs	r1, r2
 8001ae6:	687a      	ldr	r2, [r7, #4]
 8001ae8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001aea:	0852      	lsrs	r2, r2, #1
 8001aec:	3a01      	subs	r2, #1
 8001aee:	0652      	lsls	r2, r2, #25
 8001af0:	4311      	orrs	r1, r2
 8001af2:	687a      	ldr	r2, [r7, #4]
 8001af4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001af6:	06d2      	lsls	r2, r2, #27
 8001af8:	430a      	orrs	r2, r1
 8001afa:	4912      	ldr	r1, [pc, #72]	; (8001b44 <HAL_RCC_OscConfig+0x784>)
 8001afc:	4313      	orrs	r3, r2
 8001afe:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001b00:	4b10      	ldr	r3, [pc, #64]	; (8001b44 <HAL_RCC_OscConfig+0x784>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	4a0f      	ldr	r2, [pc, #60]	; (8001b44 <HAL_RCC_OscConfig+0x784>)
 8001b06:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b0a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001b0c:	4b0d      	ldr	r3, [pc, #52]	; (8001b44 <HAL_RCC_OscConfig+0x784>)
 8001b0e:	68db      	ldr	r3, [r3, #12]
 8001b10:	4a0c      	ldr	r2, [pc, #48]	; (8001b44 <HAL_RCC_OscConfig+0x784>)
 8001b12:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b16:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001b18:	f7ff f8b4 	bl	8000c84 <HAL_GetTick>
 8001b1c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b1e:	e008      	b.n	8001b32 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b20:	f7ff f8b0 	bl	8000c84 <HAL_GetTick>
 8001b24:	4602      	mov	r2, r0
 8001b26:	693b      	ldr	r3, [r7, #16]
 8001b28:	1ad3      	subs	r3, r2, r3
 8001b2a:	2b02      	cmp	r3, #2
 8001b2c:	d901      	bls.n	8001b32 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8001b2e:	2303      	movs	r3, #3
 8001b30:	e058      	b.n	8001be4 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b32:	4b04      	ldr	r3, [pc, #16]	; (8001b44 <HAL_RCC_OscConfig+0x784>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d0f0      	beq.n	8001b20 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001b3e:	e050      	b.n	8001be2 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001b40:	2301      	movs	r3, #1
 8001b42:	e04f      	b.n	8001be4 <HAL_RCC_OscConfig+0x824>
 8001b44:	40021000 	.word	0x40021000
 8001b48:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b4c:	4b27      	ldr	r3, [pc, #156]	; (8001bec <HAL_RCC_OscConfig+0x82c>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d144      	bne.n	8001be2 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001b58:	4b24      	ldr	r3, [pc, #144]	; (8001bec <HAL_RCC_OscConfig+0x82c>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	4a23      	ldr	r2, [pc, #140]	; (8001bec <HAL_RCC_OscConfig+0x82c>)
 8001b5e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b62:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001b64:	4b21      	ldr	r3, [pc, #132]	; (8001bec <HAL_RCC_OscConfig+0x82c>)
 8001b66:	68db      	ldr	r3, [r3, #12]
 8001b68:	4a20      	ldr	r2, [pc, #128]	; (8001bec <HAL_RCC_OscConfig+0x82c>)
 8001b6a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b6e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001b70:	f7ff f888 	bl	8000c84 <HAL_GetTick>
 8001b74:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b76:	e008      	b.n	8001b8a <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b78:	f7ff f884 	bl	8000c84 <HAL_GetTick>
 8001b7c:	4602      	mov	r2, r0
 8001b7e:	693b      	ldr	r3, [r7, #16]
 8001b80:	1ad3      	subs	r3, r2, r3
 8001b82:	2b02      	cmp	r3, #2
 8001b84:	d901      	bls.n	8001b8a <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8001b86:	2303      	movs	r3, #3
 8001b88:	e02c      	b.n	8001be4 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b8a:	4b18      	ldr	r3, [pc, #96]	; (8001bec <HAL_RCC_OscConfig+0x82c>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d0f0      	beq.n	8001b78 <HAL_RCC_OscConfig+0x7b8>
 8001b96:	e024      	b.n	8001be2 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001b98:	69bb      	ldr	r3, [r7, #24]
 8001b9a:	2b0c      	cmp	r3, #12
 8001b9c:	d01f      	beq.n	8001bde <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b9e:	4b13      	ldr	r3, [pc, #76]	; (8001bec <HAL_RCC_OscConfig+0x82c>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	4a12      	ldr	r2, [pc, #72]	; (8001bec <HAL_RCC_OscConfig+0x82c>)
 8001ba4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001ba8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001baa:	f7ff f86b 	bl	8000c84 <HAL_GetTick>
 8001bae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001bb0:	e008      	b.n	8001bc4 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bb2:	f7ff f867 	bl	8000c84 <HAL_GetTick>
 8001bb6:	4602      	mov	r2, r0
 8001bb8:	693b      	ldr	r3, [r7, #16]
 8001bba:	1ad3      	subs	r3, r2, r3
 8001bbc:	2b02      	cmp	r3, #2
 8001bbe:	d901      	bls.n	8001bc4 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8001bc0:	2303      	movs	r3, #3
 8001bc2:	e00f      	b.n	8001be4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001bc4:	4b09      	ldr	r3, [pc, #36]	; (8001bec <HAL_RCC_OscConfig+0x82c>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d1f0      	bne.n	8001bb2 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001bd0:	4b06      	ldr	r3, [pc, #24]	; (8001bec <HAL_RCC_OscConfig+0x82c>)
 8001bd2:	68da      	ldr	r2, [r3, #12]
 8001bd4:	4905      	ldr	r1, [pc, #20]	; (8001bec <HAL_RCC_OscConfig+0x82c>)
 8001bd6:	4b06      	ldr	r3, [pc, #24]	; (8001bf0 <HAL_RCC_OscConfig+0x830>)
 8001bd8:	4013      	ands	r3, r2
 8001bda:	60cb      	str	r3, [r1, #12]
 8001bdc:	e001      	b.n	8001be2 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001bde:	2301      	movs	r3, #1
 8001be0:	e000      	b.n	8001be4 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8001be2:	2300      	movs	r3, #0
}
 8001be4:	4618      	mov	r0, r3
 8001be6:	3720      	adds	r7, #32
 8001be8:	46bd      	mov	sp, r7
 8001bea:	bd80      	pop	{r7, pc}
 8001bec:	40021000 	.word	0x40021000
 8001bf0:	feeefffc 	.word	0xfeeefffc

08001bf4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b086      	sub	sp, #24
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
 8001bfc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001bfe:	2300      	movs	r3, #0
 8001c00:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d101      	bne.n	8001c0c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001c08:	2301      	movs	r3, #1
 8001c0a:	e11d      	b.n	8001e48 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001c0c:	4b90      	ldr	r3, [pc, #576]	; (8001e50 <HAL_RCC_ClockConfig+0x25c>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f003 030f 	and.w	r3, r3, #15
 8001c14:	683a      	ldr	r2, [r7, #0]
 8001c16:	429a      	cmp	r2, r3
 8001c18:	d910      	bls.n	8001c3c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c1a:	4b8d      	ldr	r3, [pc, #564]	; (8001e50 <HAL_RCC_ClockConfig+0x25c>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f023 020f 	bic.w	r2, r3, #15
 8001c22:	498b      	ldr	r1, [pc, #556]	; (8001e50 <HAL_RCC_ClockConfig+0x25c>)
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	4313      	orrs	r3, r2
 8001c28:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c2a:	4b89      	ldr	r3, [pc, #548]	; (8001e50 <HAL_RCC_ClockConfig+0x25c>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f003 030f 	and.w	r3, r3, #15
 8001c32:	683a      	ldr	r2, [r7, #0]
 8001c34:	429a      	cmp	r2, r3
 8001c36:	d001      	beq.n	8001c3c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001c38:	2301      	movs	r3, #1
 8001c3a:	e105      	b.n	8001e48 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f003 0302 	and.w	r3, r3, #2
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d010      	beq.n	8001c6a <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	689a      	ldr	r2, [r3, #8]
 8001c4c:	4b81      	ldr	r3, [pc, #516]	; (8001e54 <HAL_RCC_ClockConfig+0x260>)
 8001c4e:	689b      	ldr	r3, [r3, #8]
 8001c50:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001c54:	429a      	cmp	r2, r3
 8001c56:	d908      	bls.n	8001c6a <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c58:	4b7e      	ldr	r3, [pc, #504]	; (8001e54 <HAL_RCC_ClockConfig+0x260>)
 8001c5a:	689b      	ldr	r3, [r3, #8]
 8001c5c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	689b      	ldr	r3, [r3, #8]
 8001c64:	497b      	ldr	r1, [pc, #492]	; (8001e54 <HAL_RCC_ClockConfig+0x260>)
 8001c66:	4313      	orrs	r3, r2
 8001c68:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f003 0301 	and.w	r3, r3, #1
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d079      	beq.n	8001d6a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	685b      	ldr	r3, [r3, #4]
 8001c7a:	2b03      	cmp	r3, #3
 8001c7c:	d11e      	bne.n	8001cbc <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c7e:	4b75      	ldr	r3, [pc, #468]	; (8001e54 <HAL_RCC_ClockConfig+0x260>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d101      	bne.n	8001c8e <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	e0dc      	b.n	8001e48 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8001c8e:	f000 fa3b 	bl	8002108 <RCC_GetSysClockFreqFromPLLSource>
 8001c92:	4603      	mov	r3, r0
 8001c94:	4a70      	ldr	r2, [pc, #448]	; (8001e58 <HAL_RCC_ClockConfig+0x264>)
 8001c96:	4293      	cmp	r3, r2
 8001c98:	d946      	bls.n	8001d28 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8001c9a:	4b6e      	ldr	r3, [pc, #440]	; (8001e54 <HAL_RCC_ClockConfig+0x260>)
 8001c9c:	689b      	ldr	r3, [r3, #8]
 8001c9e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d140      	bne.n	8001d28 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001ca6:	4b6b      	ldr	r3, [pc, #428]	; (8001e54 <HAL_RCC_ClockConfig+0x260>)
 8001ca8:	689b      	ldr	r3, [r3, #8]
 8001caa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001cae:	4a69      	ldr	r2, [pc, #420]	; (8001e54 <HAL_RCC_ClockConfig+0x260>)
 8001cb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001cb4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001cb6:	2380      	movs	r3, #128	; 0x80
 8001cb8:	617b      	str	r3, [r7, #20]
 8001cba:	e035      	b.n	8001d28 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	685b      	ldr	r3, [r3, #4]
 8001cc0:	2b02      	cmp	r3, #2
 8001cc2:	d107      	bne.n	8001cd4 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001cc4:	4b63      	ldr	r3, [pc, #396]	; (8001e54 <HAL_RCC_ClockConfig+0x260>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d115      	bne.n	8001cfc <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8001cd0:	2301      	movs	r3, #1
 8001cd2:	e0b9      	b.n	8001e48 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d107      	bne.n	8001cec <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001cdc:	4b5d      	ldr	r3, [pc, #372]	; (8001e54 <HAL_RCC_ClockConfig+0x260>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f003 0302 	and.w	r3, r3, #2
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d109      	bne.n	8001cfc <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8001ce8:	2301      	movs	r3, #1
 8001cea:	e0ad      	b.n	8001e48 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001cec:	4b59      	ldr	r3, [pc, #356]	; (8001e54 <HAL_RCC_ClockConfig+0x260>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d101      	bne.n	8001cfc <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8001cf8:	2301      	movs	r3, #1
 8001cfa:	e0a5      	b.n	8001e48 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8001cfc:	f000 f8b4 	bl	8001e68 <HAL_RCC_GetSysClockFreq>
 8001d00:	4603      	mov	r3, r0
 8001d02:	4a55      	ldr	r2, [pc, #340]	; (8001e58 <HAL_RCC_ClockConfig+0x264>)
 8001d04:	4293      	cmp	r3, r2
 8001d06:	d90f      	bls.n	8001d28 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8001d08:	4b52      	ldr	r3, [pc, #328]	; (8001e54 <HAL_RCC_ClockConfig+0x260>)
 8001d0a:	689b      	ldr	r3, [r3, #8]
 8001d0c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d109      	bne.n	8001d28 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001d14:	4b4f      	ldr	r3, [pc, #316]	; (8001e54 <HAL_RCC_ClockConfig+0x260>)
 8001d16:	689b      	ldr	r3, [r3, #8]
 8001d18:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001d1c:	4a4d      	ldr	r2, [pc, #308]	; (8001e54 <HAL_RCC_ClockConfig+0x260>)
 8001d1e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d22:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001d24:	2380      	movs	r3, #128	; 0x80
 8001d26:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001d28:	4b4a      	ldr	r3, [pc, #296]	; (8001e54 <HAL_RCC_ClockConfig+0x260>)
 8001d2a:	689b      	ldr	r3, [r3, #8]
 8001d2c:	f023 0203 	bic.w	r2, r3, #3
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	685b      	ldr	r3, [r3, #4]
 8001d34:	4947      	ldr	r1, [pc, #284]	; (8001e54 <HAL_RCC_ClockConfig+0x260>)
 8001d36:	4313      	orrs	r3, r2
 8001d38:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001d3a:	f7fe ffa3 	bl	8000c84 <HAL_GetTick>
 8001d3e:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d40:	e00a      	b.n	8001d58 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d42:	f7fe ff9f 	bl	8000c84 <HAL_GetTick>
 8001d46:	4602      	mov	r2, r0
 8001d48:	693b      	ldr	r3, [r7, #16]
 8001d4a:	1ad3      	subs	r3, r2, r3
 8001d4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d50:	4293      	cmp	r3, r2
 8001d52:	d901      	bls.n	8001d58 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8001d54:	2303      	movs	r3, #3
 8001d56:	e077      	b.n	8001e48 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d58:	4b3e      	ldr	r3, [pc, #248]	; (8001e54 <HAL_RCC_ClockConfig+0x260>)
 8001d5a:	689b      	ldr	r3, [r3, #8]
 8001d5c:	f003 020c 	and.w	r2, r3, #12
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	685b      	ldr	r3, [r3, #4]
 8001d64:	009b      	lsls	r3, r3, #2
 8001d66:	429a      	cmp	r2, r3
 8001d68:	d1eb      	bne.n	8001d42 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8001d6a:	697b      	ldr	r3, [r7, #20]
 8001d6c:	2b80      	cmp	r3, #128	; 0x80
 8001d6e:	d105      	bne.n	8001d7c <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001d70:	4b38      	ldr	r3, [pc, #224]	; (8001e54 <HAL_RCC_ClockConfig+0x260>)
 8001d72:	689b      	ldr	r3, [r3, #8]
 8001d74:	4a37      	ldr	r2, [pc, #220]	; (8001e54 <HAL_RCC_ClockConfig+0x260>)
 8001d76:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001d7a:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f003 0302 	and.w	r3, r3, #2
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d010      	beq.n	8001daa <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	689a      	ldr	r2, [r3, #8]
 8001d8c:	4b31      	ldr	r3, [pc, #196]	; (8001e54 <HAL_RCC_ClockConfig+0x260>)
 8001d8e:	689b      	ldr	r3, [r3, #8]
 8001d90:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001d94:	429a      	cmp	r2, r3
 8001d96:	d208      	bcs.n	8001daa <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d98:	4b2e      	ldr	r3, [pc, #184]	; (8001e54 <HAL_RCC_ClockConfig+0x260>)
 8001d9a:	689b      	ldr	r3, [r3, #8]
 8001d9c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	689b      	ldr	r3, [r3, #8]
 8001da4:	492b      	ldr	r1, [pc, #172]	; (8001e54 <HAL_RCC_ClockConfig+0x260>)
 8001da6:	4313      	orrs	r3, r2
 8001da8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001daa:	4b29      	ldr	r3, [pc, #164]	; (8001e50 <HAL_RCC_ClockConfig+0x25c>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f003 030f 	and.w	r3, r3, #15
 8001db2:	683a      	ldr	r2, [r7, #0]
 8001db4:	429a      	cmp	r2, r3
 8001db6:	d210      	bcs.n	8001dda <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001db8:	4b25      	ldr	r3, [pc, #148]	; (8001e50 <HAL_RCC_ClockConfig+0x25c>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f023 020f 	bic.w	r2, r3, #15
 8001dc0:	4923      	ldr	r1, [pc, #140]	; (8001e50 <HAL_RCC_ClockConfig+0x25c>)
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	4313      	orrs	r3, r2
 8001dc6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dc8:	4b21      	ldr	r3, [pc, #132]	; (8001e50 <HAL_RCC_ClockConfig+0x25c>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f003 030f 	and.w	r3, r3, #15
 8001dd0:	683a      	ldr	r2, [r7, #0]
 8001dd2:	429a      	cmp	r2, r3
 8001dd4:	d001      	beq.n	8001dda <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8001dd6:	2301      	movs	r3, #1
 8001dd8:	e036      	b.n	8001e48 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f003 0304 	and.w	r3, r3, #4
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d008      	beq.n	8001df8 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001de6:	4b1b      	ldr	r3, [pc, #108]	; (8001e54 <HAL_RCC_ClockConfig+0x260>)
 8001de8:	689b      	ldr	r3, [r3, #8]
 8001dea:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	68db      	ldr	r3, [r3, #12]
 8001df2:	4918      	ldr	r1, [pc, #96]	; (8001e54 <HAL_RCC_ClockConfig+0x260>)
 8001df4:	4313      	orrs	r3, r2
 8001df6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f003 0308 	and.w	r3, r3, #8
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d009      	beq.n	8001e18 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001e04:	4b13      	ldr	r3, [pc, #76]	; (8001e54 <HAL_RCC_ClockConfig+0x260>)
 8001e06:	689b      	ldr	r3, [r3, #8]
 8001e08:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	691b      	ldr	r3, [r3, #16]
 8001e10:	00db      	lsls	r3, r3, #3
 8001e12:	4910      	ldr	r1, [pc, #64]	; (8001e54 <HAL_RCC_ClockConfig+0x260>)
 8001e14:	4313      	orrs	r3, r2
 8001e16:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001e18:	f000 f826 	bl	8001e68 <HAL_RCC_GetSysClockFreq>
 8001e1c:	4602      	mov	r2, r0
 8001e1e:	4b0d      	ldr	r3, [pc, #52]	; (8001e54 <HAL_RCC_ClockConfig+0x260>)
 8001e20:	689b      	ldr	r3, [r3, #8]
 8001e22:	091b      	lsrs	r3, r3, #4
 8001e24:	f003 030f 	and.w	r3, r3, #15
 8001e28:	490c      	ldr	r1, [pc, #48]	; (8001e5c <HAL_RCC_ClockConfig+0x268>)
 8001e2a:	5ccb      	ldrb	r3, [r1, r3]
 8001e2c:	f003 031f 	and.w	r3, r3, #31
 8001e30:	fa22 f303 	lsr.w	r3, r2, r3
 8001e34:	4a0a      	ldr	r2, [pc, #40]	; (8001e60 <HAL_RCC_ClockConfig+0x26c>)
 8001e36:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001e38:	4b0a      	ldr	r3, [pc, #40]	; (8001e64 <HAL_RCC_ClockConfig+0x270>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	f7fe fe21 	bl	8000a84 <HAL_InitTick>
 8001e42:	4603      	mov	r3, r0
 8001e44:	73fb      	strb	r3, [r7, #15]

  return status;
 8001e46:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e48:	4618      	mov	r0, r3
 8001e4a:	3718      	adds	r7, #24
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	bd80      	pop	{r7, pc}
 8001e50:	40022000 	.word	0x40022000
 8001e54:	40021000 	.word	0x40021000
 8001e58:	04c4b400 	.word	0x04c4b400
 8001e5c:	0800668c 	.word	0x0800668c
 8001e60:	20000000 	.word	0x20000000
 8001e64:	20000004 	.word	0x20000004

08001e68 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	b089      	sub	sp, #36	; 0x24
 8001e6c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	61fb      	str	r3, [r7, #28]
 8001e72:	2300      	movs	r3, #0
 8001e74:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001e76:	4b3e      	ldr	r3, [pc, #248]	; (8001f70 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e78:	689b      	ldr	r3, [r3, #8]
 8001e7a:	f003 030c 	and.w	r3, r3, #12
 8001e7e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001e80:	4b3b      	ldr	r3, [pc, #236]	; (8001f70 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e82:	68db      	ldr	r3, [r3, #12]
 8001e84:	f003 0303 	and.w	r3, r3, #3
 8001e88:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001e8a:	693b      	ldr	r3, [r7, #16]
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d005      	beq.n	8001e9c <HAL_RCC_GetSysClockFreq+0x34>
 8001e90:	693b      	ldr	r3, [r7, #16]
 8001e92:	2b0c      	cmp	r3, #12
 8001e94:	d121      	bne.n	8001eda <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	2b01      	cmp	r3, #1
 8001e9a:	d11e      	bne.n	8001eda <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001e9c:	4b34      	ldr	r3, [pc, #208]	; (8001f70 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f003 0308 	and.w	r3, r3, #8
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d107      	bne.n	8001eb8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001ea8:	4b31      	ldr	r3, [pc, #196]	; (8001f70 <HAL_RCC_GetSysClockFreq+0x108>)
 8001eaa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001eae:	0a1b      	lsrs	r3, r3, #8
 8001eb0:	f003 030f 	and.w	r3, r3, #15
 8001eb4:	61fb      	str	r3, [r7, #28]
 8001eb6:	e005      	b.n	8001ec4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001eb8:	4b2d      	ldr	r3, [pc, #180]	; (8001f70 <HAL_RCC_GetSysClockFreq+0x108>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	091b      	lsrs	r3, r3, #4
 8001ebe:	f003 030f 	and.w	r3, r3, #15
 8001ec2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001ec4:	4a2b      	ldr	r2, [pc, #172]	; (8001f74 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001ec6:	69fb      	ldr	r3, [r7, #28]
 8001ec8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ecc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001ece:	693b      	ldr	r3, [r7, #16]
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d10d      	bne.n	8001ef0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001ed4:	69fb      	ldr	r3, [r7, #28]
 8001ed6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001ed8:	e00a      	b.n	8001ef0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001eda:	693b      	ldr	r3, [r7, #16]
 8001edc:	2b04      	cmp	r3, #4
 8001ede:	d102      	bne.n	8001ee6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001ee0:	4b25      	ldr	r3, [pc, #148]	; (8001f78 <HAL_RCC_GetSysClockFreq+0x110>)
 8001ee2:	61bb      	str	r3, [r7, #24]
 8001ee4:	e004      	b.n	8001ef0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001ee6:	693b      	ldr	r3, [r7, #16]
 8001ee8:	2b08      	cmp	r3, #8
 8001eea:	d101      	bne.n	8001ef0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001eec:	4b23      	ldr	r3, [pc, #140]	; (8001f7c <HAL_RCC_GetSysClockFreq+0x114>)
 8001eee:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001ef0:	693b      	ldr	r3, [r7, #16]
 8001ef2:	2b0c      	cmp	r3, #12
 8001ef4:	d134      	bne.n	8001f60 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001ef6:	4b1e      	ldr	r3, [pc, #120]	; (8001f70 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ef8:	68db      	ldr	r3, [r3, #12]
 8001efa:	f003 0303 	and.w	r3, r3, #3
 8001efe:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001f00:	68bb      	ldr	r3, [r7, #8]
 8001f02:	2b02      	cmp	r3, #2
 8001f04:	d003      	beq.n	8001f0e <HAL_RCC_GetSysClockFreq+0xa6>
 8001f06:	68bb      	ldr	r3, [r7, #8]
 8001f08:	2b03      	cmp	r3, #3
 8001f0a:	d003      	beq.n	8001f14 <HAL_RCC_GetSysClockFreq+0xac>
 8001f0c:	e005      	b.n	8001f1a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001f0e:	4b1a      	ldr	r3, [pc, #104]	; (8001f78 <HAL_RCC_GetSysClockFreq+0x110>)
 8001f10:	617b      	str	r3, [r7, #20]
      break;
 8001f12:	e005      	b.n	8001f20 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001f14:	4b19      	ldr	r3, [pc, #100]	; (8001f7c <HAL_RCC_GetSysClockFreq+0x114>)
 8001f16:	617b      	str	r3, [r7, #20]
      break;
 8001f18:	e002      	b.n	8001f20 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001f1a:	69fb      	ldr	r3, [r7, #28]
 8001f1c:	617b      	str	r3, [r7, #20]
      break;
 8001f1e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001f20:	4b13      	ldr	r3, [pc, #76]	; (8001f70 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f22:	68db      	ldr	r3, [r3, #12]
 8001f24:	091b      	lsrs	r3, r3, #4
 8001f26:	f003 030f 	and.w	r3, r3, #15
 8001f2a:	3301      	adds	r3, #1
 8001f2c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001f2e:	4b10      	ldr	r3, [pc, #64]	; (8001f70 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f30:	68db      	ldr	r3, [r3, #12]
 8001f32:	0a1b      	lsrs	r3, r3, #8
 8001f34:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001f38:	697a      	ldr	r2, [r7, #20]
 8001f3a:	fb03 f202 	mul.w	r2, r3, r2
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f44:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001f46:	4b0a      	ldr	r3, [pc, #40]	; (8001f70 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f48:	68db      	ldr	r3, [r3, #12]
 8001f4a:	0e5b      	lsrs	r3, r3, #25
 8001f4c:	f003 0303 	and.w	r3, r3, #3
 8001f50:	3301      	adds	r3, #1
 8001f52:	005b      	lsls	r3, r3, #1
 8001f54:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001f56:	697a      	ldr	r2, [r7, #20]
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f5e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001f60:	69bb      	ldr	r3, [r7, #24]
}
 8001f62:	4618      	mov	r0, r3
 8001f64:	3724      	adds	r7, #36	; 0x24
 8001f66:	46bd      	mov	sp, r7
 8001f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6c:	4770      	bx	lr
 8001f6e:	bf00      	nop
 8001f70:	40021000 	.word	0x40021000
 8001f74:	080066a4 	.word	0x080066a4
 8001f78:	00f42400 	.word	0x00f42400
 8001f7c:	007a1200 	.word	0x007a1200

08001f80 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f80:	b480      	push	{r7}
 8001f82:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001f84:	4b03      	ldr	r3, [pc, #12]	; (8001f94 <HAL_RCC_GetHCLKFreq+0x14>)
 8001f86:	681b      	ldr	r3, [r3, #0]
}
 8001f88:	4618      	mov	r0, r3
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f90:	4770      	bx	lr
 8001f92:	bf00      	nop
 8001f94:	20000000 	.word	0x20000000

08001f98 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001f9c:	f7ff fff0 	bl	8001f80 <HAL_RCC_GetHCLKFreq>
 8001fa0:	4602      	mov	r2, r0
 8001fa2:	4b06      	ldr	r3, [pc, #24]	; (8001fbc <HAL_RCC_GetPCLK1Freq+0x24>)
 8001fa4:	689b      	ldr	r3, [r3, #8]
 8001fa6:	0a1b      	lsrs	r3, r3, #8
 8001fa8:	f003 0307 	and.w	r3, r3, #7
 8001fac:	4904      	ldr	r1, [pc, #16]	; (8001fc0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001fae:	5ccb      	ldrb	r3, [r1, r3]
 8001fb0:	f003 031f 	and.w	r3, r3, #31
 8001fb4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001fb8:	4618      	mov	r0, r3
 8001fba:	bd80      	pop	{r7, pc}
 8001fbc:	40021000 	.word	0x40021000
 8001fc0:	0800669c 	.word	0x0800669c

08001fc4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001fc8:	f7ff ffda 	bl	8001f80 <HAL_RCC_GetHCLKFreq>
 8001fcc:	4602      	mov	r2, r0
 8001fce:	4b06      	ldr	r3, [pc, #24]	; (8001fe8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001fd0:	689b      	ldr	r3, [r3, #8]
 8001fd2:	0adb      	lsrs	r3, r3, #11
 8001fd4:	f003 0307 	and.w	r3, r3, #7
 8001fd8:	4904      	ldr	r1, [pc, #16]	; (8001fec <HAL_RCC_GetPCLK2Freq+0x28>)
 8001fda:	5ccb      	ldrb	r3, [r1, r3]
 8001fdc:	f003 031f 	and.w	r3, r3, #31
 8001fe0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	bd80      	pop	{r7, pc}
 8001fe8:	40021000 	.word	0x40021000
 8001fec:	0800669c 	.word	0x0800669c

08001ff0 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	b083      	sub	sp, #12
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
 8001ff8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	220f      	movs	r2, #15
 8001ffe:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8002000:	4b12      	ldr	r3, [pc, #72]	; (800204c <HAL_RCC_GetClockConfig+0x5c>)
 8002002:	689b      	ldr	r3, [r3, #8]
 8002004:	f003 0203 	and.w	r2, r3, #3
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 800200c:	4b0f      	ldr	r3, [pc, #60]	; (800204c <HAL_RCC_GetClockConfig+0x5c>)
 800200e:	689b      	ldr	r3, [r3, #8]
 8002010:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8002018:	4b0c      	ldr	r3, [pc, #48]	; (800204c <HAL_RCC_GetClockConfig+0x5c>)
 800201a:	689b      	ldr	r3, [r3, #8]
 800201c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8002024:	4b09      	ldr	r3, [pc, #36]	; (800204c <HAL_RCC_GetClockConfig+0x5c>)
 8002026:	689b      	ldr	r3, [r3, #8]
 8002028:	08db      	lsrs	r3, r3, #3
 800202a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8002032:	4b07      	ldr	r3, [pc, #28]	; (8002050 <HAL_RCC_GetClockConfig+0x60>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f003 020f 	and.w	r2, r3, #15
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	601a      	str	r2, [r3, #0]
}
 800203e:	bf00      	nop
 8002040:	370c      	adds	r7, #12
 8002042:	46bd      	mov	sp, r7
 8002044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002048:	4770      	bx	lr
 800204a:	bf00      	nop
 800204c:	40021000 	.word	0x40021000
 8002050:	40022000 	.word	0x40022000

08002054 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b086      	sub	sp, #24
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800205c:	2300      	movs	r3, #0
 800205e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002060:	4b27      	ldr	r3, [pc, #156]	; (8002100 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002062:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002064:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002068:	2b00      	cmp	r3, #0
 800206a:	d003      	beq.n	8002074 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800206c:	f7ff f8d4 	bl	8001218 <HAL_PWREx_GetVoltageRange>
 8002070:	6178      	str	r0, [r7, #20]
 8002072:	e014      	b.n	800209e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002074:	4b22      	ldr	r3, [pc, #136]	; (8002100 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002076:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002078:	4a21      	ldr	r2, [pc, #132]	; (8002100 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800207a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800207e:	6593      	str	r3, [r2, #88]	; 0x58
 8002080:	4b1f      	ldr	r3, [pc, #124]	; (8002100 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002082:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002084:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002088:	60fb      	str	r3, [r7, #12]
 800208a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800208c:	f7ff f8c4 	bl	8001218 <HAL_PWREx_GetVoltageRange>
 8002090:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002092:	4b1b      	ldr	r3, [pc, #108]	; (8002100 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002094:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002096:	4a1a      	ldr	r2, [pc, #104]	; (8002100 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002098:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800209c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800209e:	697b      	ldr	r3, [r7, #20]
 80020a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80020a4:	d10b      	bne.n	80020be <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	2b80      	cmp	r3, #128	; 0x80
 80020aa:	d913      	bls.n	80020d4 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	2ba0      	cmp	r3, #160	; 0xa0
 80020b0:	d902      	bls.n	80020b8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80020b2:	2302      	movs	r3, #2
 80020b4:	613b      	str	r3, [r7, #16]
 80020b6:	e00d      	b.n	80020d4 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80020b8:	2301      	movs	r3, #1
 80020ba:	613b      	str	r3, [r7, #16]
 80020bc:	e00a      	b.n	80020d4 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	2b7f      	cmp	r3, #127	; 0x7f
 80020c2:	d902      	bls.n	80020ca <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 80020c4:	2302      	movs	r3, #2
 80020c6:	613b      	str	r3, [r7, #16]
 80020c8:	e004      	b.n	80020d4 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	2b70      	cmp	r3, #112	; 0x70
 80020ce:	d101      	bne.n	80020d4 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80020d0:	2301      	movs	r3, #1
 80020d2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80020d4:	4b0b      	ldr	r3, [pc, #44]	; (8002104 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f023 020f 	bic.w	r2, r3, #15
 80020dc:	4909      	ldr	r1, [pc, #36]	; (8002104 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80020de:	693b      	ldr	r3, [r7, #16]
 80020e0:	4313      	orrs	r3, r2
 80020e2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80020e4:	4b07      	ldr	r3, [pc, #28]	; (8002104 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f003 030f 	and.w	r3, r3, #15
 80020ec:	693a      	ldr	r2, [r7, #16]
 80020ee:	429a      	cmp	r2, r3
 80020f0:	d001      	beq.n	80020f6 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 80020f2:	2301      	movs	r3, #1
 80020f4:	e000      	b.n	80020f8 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 80020f6:	2300      	movs	r3, #0
}
 80020f8:	4618      	mov	r0, r3
 80020fa:	3718      	adds	r7, #24
 80020fc:	46bd      	mov	sp, r7
 80020fe:	bd80      	pop	{r7, pc}
 8002100:	40021000 	.word	0x40021000
 8002104:	40022000 	.word	0x40022000

08002108 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002108:	b480      	push	{r7}
 800210a:	b087      	sub	sp, #28
 800210c:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800210e:	4b2d      	ldr	r3, [pc, #180]	; (80021c4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002110:	68db      	ldr	r3, [r3, #12]
 8002112:	f003 0303 	and.w	r3, r3, #3
 8002116:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	2b03      	cmp	r3, #3
 800211c:	d00b      	beq.n	8002136 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	2b03      	cmp	r3, #3
 8002122:	d825      	bhi.n	8002170 <RCC_GetSysClockFreqFromPLLSource+0x68>
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	2b01      	cmp	r3, #1
 8002128:	d008      	beq.n	800213c <RCC_GetSysClockFreqFromPLLSource+0x34>
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	2b02      	cmp	r3, #2
 800212e:	d11f      	bne.n	8002170 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8002130:	4b25      	ldr	r3, [pc, #148]	; (80021c8 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002132:	613b      	str	r3, [r7, #16]
    break;
 8002134:	e01f      	b.n	8002176 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8002136:	4b25      	ldr	r3, [pc, #148]	; (80021cc <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8002138:	613b      	str	r3, [r7, #16]
    break;
 800213a:	e01c      	b.n	8002176 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800213c:	4b21      	ldr	r3, [pc, #132]	; (80021c4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f003 0308 	and.w	r3, r3, #8
 8002144:	2b00      	cmp	r3, #0
 8002146:	d107      	bne.n	8002158 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002148:	4b1e      	ldr	r3, [pc, #120]	; (80021c4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800214a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800214e:	0a1b      	lsrs	r3, r3, #8
 8002150:	f003 030f 	and.w	r3, r3, #15
 8002154:	617b      	str	r3, [r7, #20]
 8002156:	e005      	b.n	8002164 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002158:	4b1a      	ldr	r3, [pc, #104]	; (80021c4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	091b      	lsrs	r3, r3, #4
 800215e:	f003 030f 	and.w	r3, r3, #15
 8002162:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8002164:	4a1a      	ldr	r2, [pc, #104]	; (80021d0 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8002166:	697b      	ldr	r3, [r7, #20]
 8002168:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800216c:	613b      	str	r3, [r7, #16]
    break;
 800216e:	e002      	b.n	8002176 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8002170:	2300      	movs	r3, #0
 8002172:	613b      	str	r3, [r7, #16]
    break;
 8002174:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002176:	4b13      	ldr	r3, [pc, #76]	; (80021c4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002178:	68db      	ldr	r3, [r3, #12]
 800217a:	091b      	lsrs	r3, r3, #4
 800217c:	f003 030f 	and.w	r3, r3, #15
 8002180:	3301      	adds	r3, #1
 8002182:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002184:	4b0f      	ldr	r3, [pc, #60]	; (80021c4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002186:	68db      	ldr	r3, [r3, #12]
 8002188:	0a1b      	lsrs	r3, r3, #8
 800218a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800218e:	693a      	ldr	r2, [r7, #16]
 8002190:	fb03 f202 	mul.w	r2, r3, r2
 8002194:	68bb      	ldr	r3, [r7, #8]
 8002196:	fbb2 f3f3 	udiv	r3, r2, r3
 800219a:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800219c:	4b09      	ldr	r3, [pc, #36]	; (80021c4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800219e:	68db      	ldr	r3, [r3, #12]
 80021a0:	0e5b      	lsrs	r3, r3, #25
 80021a2:	f003 0303 	and.w	r3, r3, #3
 80021a6:	3301      	adds	r3, #1
 80021a8:	005b      	lsls	r3, r3, #1
 80021aa:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 80021ac:	693a      	ldr	r2, [r7, #16]
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80021b4:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 80021b6:	683b      	ldr	r3, [r7, #0]
}
 80021b8:	4618      	mov	r0, r3
 80021ba:	371c      	adds	r7, #28
 80021bc:	46bd      	mov	sp, r7
 80021be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c2:	4770      	bx	lr
 80021c4:	40021000 	.word	0x40021000
 80021c8:	00f42400 	.word	0x00f42400
 80021cc:	007a1200 	.word	0x007a1200
 80021d0:	080066a4 	.word	0x080066a4

080021d4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b086      	sub	sp, #24
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80021dc:	2300      	movs	r3, #0
 80021de:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80021e0:	2300      	movs	r3, #0
 80021e2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d040      	beq.n	8002272 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80021f4:	2b80      	cmp	r3, #128	; 0x80
 80021f6:	d02a      	beq.n	800224e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80021f8:	2b80      	cmp	r3, #128	; 0x80
 80021fa:	d825      	bhi.n	8002248 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80021fc:	2b60      	cmp	r3, #96	; 0x60
 80021fe:	d026      	beq.n	800224e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002200:	2b60      	cmp	r3, #96	; 0x60
 8002202:	d821      	bhi.n	8002248 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8002204:	2b40      	cmp	r3, #64	; 0x40
 8002206:	d006      	beq.n	8002216 <HAL_RCCEx_PeriphCLKConfig+0x42>
 8002208:	2b40      	cmp	r3, #64	; 0x40
 800220a:	d81d      	bhi.n	8002248 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800220c:	2b00      	cmp	r3, #0
 800220e:	d009      	beq.n	8002224 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8002210:	2b20      	cmp	r3, #32
 8002212:	d010      	beq.n	8002236 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8002214:	e018      	b.n	8002248 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002216:	4b89      	ldr	r3, [pc, #548]	; (800243c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002218:	68db      	ldr	r3, [r3, #12]
 800221a:	4a88      	ldr	r2, [pc, #544]	; (800243c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800221c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002220:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002222:	e015      	b.n	8002250 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	3304      	adds	r3, #4
 8002228:	2100      	movs	r1, #0
 800222a:	4618      	mov	r0, r3
 800222c:	f000 fb02 	bl	8002834 <RCCEx_PLLSAI1_Config>
 8002230:	4603      	mov	r3, r0
 8002232:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002234:	e00c      	b.n	8002250 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	3320      	adds	r3, #32
 800223a:	2100      	movs	r1, #0
 800223c:	4618      	mov	r0, r3
 800223e:	f000 fbed 	bl	8002a1c <RCCEx_PLLSAI2_Config>
 8002242:	4603      	mov	r3, r0
 8002244:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002246:	e003      	b.n	8002250 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002248:	2301      	movs	r3, #1
 800224a:	74fb      	strb	r3, [r7, #19]
      break;
 800224c:	e000      	b.n	8002250 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 800224e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002250:	7cfb      	ldrb	r3, [r7, #19]
 8002252:	2b00      	cmp	r3, #0
 8002254:	d10b      	bne.n	800226e <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002256:	4b79      	ldr	r3, [pc, #484]	; (800243c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002258:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800225c:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002264:	4975      	ldr	r1, [pc, #468]	; (800243c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002266:	4313      	orrs	r3, r2
 8002268:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 800226c:	e001      	b.n	8002272 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800226e:	7cfb      	ldrb	r3, [r7, #19]
 8002270:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800227a:	2b00      	cmp	r3, #0
 800227c:	d047      	beq.n	800230e <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002282:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002286:	d030      	beq.n	80022ea <HAL_RCCEx_PeriphCLKConfig+0x116>
 8002288:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800228c:	d82a      	bhi.n	80022e4 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800228e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002292:	d02a      	beq.n	80022ea <HAL_RCCEx_PeriphCLKConfig+0x116>
 8002294:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002298:	d824      	bhi.n	80022e4 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800229a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800229e:	d008      	beq.n	80022b2 <HAL_RCCEx_PeriphCLKConfig+0xde>
 80022a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80022a4:	d81e      	bhi.n	80022e4 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d00a      	beq.n	80022c0 <HAL_RCCEx_PeriphCLKConfig+0xec>
 80022aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80022ae:	d010      	beq.n	80022d2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80022b0:	e018      	b.n	80022e4 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80022b2:	4b62      	ldr	r3, [pc, #392]	; (800243c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80022b4:	68db      	ldr	r3, [r3, #12]
 80022b6:	4a61      	ldr	r2, [pc, #388]	; (800243c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80022b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022bc:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80022be:	e015      	b.n	80022ec <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	3304      	adds	r3, #4
 80022c4:	2100      	movs	r1, #0
 80022c6:	4618      	mov	r0, r3
 80022c8:	f000 fab4 	bl	8002834 <RCCEx_PLLSAI1_Config>
 80022cc:	4603      	mov	r3, r0
 80022ce:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80022d0:	e00c      	b.n	80022ec <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	3320      	adds	r3, #32
 80022d6:	2100      	movs	r1, #0
 80022d8:	4618      	mov	r0, r3
 80022da:	f000 fb9f 	bl	8002a1c <RCCEx_PLLSAI2_Config>
 80022de:	4603      	mov	r3, r0
 80022e0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80022e2:	e003      	b.n	80022ec <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80022e4:	2301      	movs	r3, #1
 80022e6:	74fb      	strb	r3, [r7, #19]
      break;
 80022e8:	e000      	b.n	80022ec <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 80022ea:	bf00      	nop
    }

    if(ret == HAL_OK)
 80022ec:	7cfb      	ldrb	r3, [r7, #19]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d10b      	bne.n	800230a <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80022f2:	4b52      	ldr	r3, [pc, #328]	; (800243c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80022f4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80022f8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002300:	494e      	ldr	r1, [pc, #312]	; (800243c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002302:	4313      	orrs	r3, r2
 8002304:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8002308:	e001      	b.n	800230e <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800230a:	7cfb      	ldrb	r3, [r7, #19]
 800230c:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002316:	2b00      	cmp	r3, #0
 8002318:	f000 809f 	beq.w	800245a <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 800231c:	2300      	movs	r3, #0
 800231e:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002320:	4b46      	ldr	r3, [pc, #280]	; (800243c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002322:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002324:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002328:	2b00      	cmp	r3, #0
 800232a:	d101      	bne.n	8002330 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 800232c:	2301      	movs	r3, #1
 800232e:	e000      	b.n	8002332 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8002330:	2300      	movs	r3, #0
 8002332:	2b00      	cmp	r3, #0
 8002334:	d00d      	beq.n	8002352 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002336:	4b41      	ldr	r3, [pc, #260]	; (800243c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002338:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800233a:	4a40      	ldr	r2, [pc, #256]	; (800243c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800233c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002340:	6593      	str	r3, [r2, #88]	; 0x58
 8002342:	4b3e      	ldr	r3, [pc, #248]	; (800243c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002344:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002346:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800234a:	60bb      	str	r3, [r7, #8]
 800234c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800234e:	2301      	movs	r3, #1
 8002350:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002352:	4b3b      	ldr	r3, [pc, #236]	; (8002440 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	4a3a      	ldr	r2, [pc, #232]	; (8002440 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8002358:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800235c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800235e:	f7fe fc91 	bl	8000c84 <HAL_GetTick>
 8002362:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002364:	e009      	b.n	800237a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002366:	f7fe fc8d 	bl	8000c84 <HAL_GetTick>
 800236a:	4602      	mov	r2, r0
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	1ad3      	subs	r3, r2, r3
 8002370:	2b02      	cmp	r3, #2
 8002372:	d902      	bls.n	800237a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8002374:	2303      	movs	r3, #3
 8002376:	74fb      	strb	r3, [r7, #19]
        break;
 8002378:	e005      	b.n	8002386 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800237a:	4b31      	ldr	r3, [pc, #196]	; (8002440 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002382:	2b00      	cmp	r3, #0
 8002384:	d0ef      	beq.n	8002366 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8002386:	7cfb      	ldrb	r3, [r7, #19]
 8002388:	2b00      	cmp	r3, #0
 800238a:	d15b      	bne.n	8002444 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800238c:	4b2b      	ldr	r3, [pc, #172]	; (800243c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800238e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002392:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002396:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002398:	697b      	ldr	r3, [r7, #20]
 800239a:	2b00      	cmp	r3, #0
 800239c:	d01f      	beq.n	80023de <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023a4:	697a      	ldr	r2, [r7, #20]
 80023a6:	429a      	cmp	r2, r3
 80023a8:	d019      	beq.n	80023de <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80023aa:	4b24      	ldr	r3, [pc, #144]	; (800243c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80023ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80023b4:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80023b6:	4b21      	ldr	r3, [pc, #132]	; (800243c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80023b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023bc:	4a1f      	ldr	r2, [pc, #124]	; (800243c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80023be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023c2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80023c6:	4b1d      	ldr	r3, [pc, #116]	; (800243c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80023c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023cc:	4a1b      	ldr	r2, [pc, #108]	; (800243c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80023ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023d2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80023d6:	4a19      	ldr	r2, [pc, #100]	; (800243c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80023d8:	697b      	ldr	r3, [r7, #20]
 80023da:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80023de:	697b      	ldr	r3, [r7, #20]
 80023e0:	f003 0301 	and.w	r3, r3, #1
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d016      	beq.n	8002416 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023e8:	f7fe fc4c 	bl	8000c84 <HAL_GetTick>
 80023ec:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80023ee:	e00b      	b.n	8002408 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023f0:	f7fe fc48 	bl	8000c84 <HAL_GetTick>
 80023f4:	4602      	mov	r2, r0
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	1ad3      	subs	r3, r2, r3
 80023fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80023fe:	4293      	cmp	r3, r2
 8002400:	d902      	bls.n	8002408 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8002402:	2303      	movs	r3, #3
 8002404:	74fb      	strb	r3, [r7, #19]
            break;
 8002406:	e006      	b.n	8002416 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002408:	4b0c      	ldr	r3, [pc, #48]	; (800243c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800240a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800240e:	f003 0302 	and.w	r3, r3, #2
 8002412:	2b00      	cmp	r3, #0
 8002414:	d0ec      	beq.n	80023f0 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8002416:	7cfb      	ldrb	r3, [r7, #19]
 8002418:	2b00      	cmp	r3, #0
 800241a:	d10c      	bne.n	8002436 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800241c:	4b07      	ldr	r3, [pc, #28]	; (800243c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800241e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002422:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800242c:	4903      	ldr	r1, [pc, #12]	; (800243c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800242e:	4313      	orrs	r3, r2
 8002430:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002434:	e008      	b.n	8002448 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002436:	7cfb      	ldrb	r3, [r7, #19]
 8002438:	74bb      	strb	r3, [r7, #18]
 800243a:	e005      	b.n	8002448 <HAL_RCCEx_PeriphCLKConfig+0x274>
 800243c:	40021000 	.word	0x40021000
 8002440:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002444:	7cfb      	ldrb	r3, [r7, #19]
 8002446:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002448:	7c7b      	ldrb	r3, [r7, #17]
 800244a:	2b01      	cmp	r3, #1
 800244c:	d105      	bne.n	800245a <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800244e:	4ba0      	ldr	r3, [pc, #640]	; (80026d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002450:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002452:	4a9f      	ldr	r2, [pc, #636]	; (80026d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002454:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002458:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f003 0301 	and.w	r3, r3, #1
 8002462:	2b00      	cmp	r3, #0
 8002464:	d00a      	beq.n	800247c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002466:	4b9a      	ldr	r3, [pc, #616]	; (80026d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002468:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800246c:	f023 0203 	bic.w	r2, r3, #3
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002474:	4996      	ldr	r1, [pc, #600]	; (80026d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002476:	4313      	orrs	r3, r2
 8002478:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f003 0302 	and.w	r3, r3, #2
 8002484:	2b00      	cmp	r3, #0
 8002486:	d00a      	beq.n	800249e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002488:	4b91      	ldr	r3, [pc, #580]	; (80026d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800248a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800248e:	f023 020c 	bic.w	r2, r3, #12
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002496:	498e      	ldr	r1, [pc, #568]	; (80026d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002498:	4313      	orrs	r3, r2
 800249a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f003 0304 	and.w	r3, r3, #4
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d00a      	beq.n	80024c0 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80024aa:	4b89      	ldr	r3, [pc, #548]	; (80026d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80024ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024b0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024b8:	4985      	ldr	r1, [pc, #532]	; (80026d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80024ba:	4313      	orrs	r3, r2
 80024bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f003 0308 	and.w	r3, r3, #8
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d00a      	beq.n	80024e2 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80024cc:	4b80      	ldr	r3, [pc, #512]	; (80026d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80024ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024d2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024da:	497d      	ldr	r1, [pc, #500]	; (80026d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80024dc:	4313      	orrs	r3, r2
 80024de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f003 0310 	and.w	r3, r3, #16
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d00a      	beq.n	8002504 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80024ee:	4b78      	ldr	r3, [pc, #480]	; (80026d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80024f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024f4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024fc:	4974      	ldr	r1, [pc, #464]	; (80026d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80024fe:	4313      	orrs	r3, r2
 8002500:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f003 0320 	and.w	r3, r3, #32
 800250c:	2b00      	cmp	r3, #0
 800250e:	d00a      	beq.n	8002526 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002510:	4b6f      	ldr	r3, [pc, #444]	; (80026d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002512:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002516:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800251e:	496c      	ldr	r1, [pc, #432]	; (80026d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002520:	4313      	orrs	r3, r2
 8002522:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800252e:	2b00      	cmp	r3, #0
 8002530:	d00a      	beq.n	8002548 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002532:	4b67      	ldr	r3, [pc, #412]	; (80026d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002534:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002538:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002540:	4963      	ldr	r1, [pc, #396]	; (80026d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002542:	4313      	orrs	r3, r2
 8002544:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002550:	2b00      	cmp	r3, #0
 8002552:	d00a      	beq.n	800256a <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002554:	4b5e      	ldr	r3, [pc, #376]	; (80026d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002556:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800255a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002562:	495b      	ldr	r1, [pc, #364]	; (80026d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002564:	4313      	orrs	r3, r2
 8002566:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002572:	2b00      	cmp	r3, #0
 8002574:	d00a      	beq.n	800258c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002576:	4b56      	ldr	r3, [pc, #344]	; (80026d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002578:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800257c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002584:	4952      	ldr	r1, [pc, #328]	; (80026d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002586:	4313      	orrs	r3, r2
 8002588:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002594:	2b00      	cmp	r3, #0
 8002596:	d00a      	beq.n	80025ae <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002598:	4b4d      	ldr	r3, [pc, #308]	; (80026d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800259a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800259e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025a6:	494a      	ldr	r1, [pc, #296]	; (80026d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80025a8:	4313      	orrs	r3, r2
 80025aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d00a      	beq.n	80025d0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80025ba:	4b45      	ldr	r3, [pc, #276]	; (80026d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80025bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025c0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025c8:	4941      	ldr	r1, [pc, #260]	; (80026d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80025ca:	4313      	orrs	r3, r2
 80025cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d00a      	beq.n	80025f2 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80025dc:	4b3c      	ldr	r3, [pc, #240]	; (80026d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80025de:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80025e2:	f023 0203 	bic.w	r2, r3, #3
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025ea:	4939      	ldr	r1, [pc, #228]	; (80026d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80025ec:	4313      	orrs	r3, r2
 80025ee:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d028      	beq.n	8002650 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80025fe:	4b34      	ldr	r3, [pc, #208]	; (80026d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002600:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002604:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800260c:	4930      	ldr	r1, [pc, #192]	; (80026d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800260e:	4313      	orrs	r3, r2
 8002610:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002618:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800261c:	d106      	bne.n	800262c <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800261e:	4b2c      	ldr	r3, [pc, #176]	; (80026d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002620:	68db      	ldr	r3, [r3, #12]
 8002622:	4a2b      	ldr	r2, [pc, #172]	; (80026d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002628:	60d3      	str	r3, [r2, #12]
 800262a:	e011      	b.n	8002650 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002630:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002634:	d10c      	bne.n	8002650 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	3304      	adds	r3, #4
 800263a:	2101      	movs	r1, #1
 800263c:	4618      	mov	r0, r3
 800263e:	f000 f8f9 	bl	8002834 <RCCEx_PLLSAI1_Config>
 8002642:	4603      	mov	r3, r0
 8002644:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002646:	7cfb      	ldrb	r3, [r7, #19]
 8002648:	2b00      	cmp	r3, #0
 800264a:	d001      	beq.n	8002650 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 800264c:	7cfb      	ldrb	r3, [r7, #19]
 800264e:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002658:	2b00      	cmp	r3, #0
 800265a:	d04d      	beq.n	80026f8 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002660:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002664:	d108      	bne.n	8002678 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8002666:	4b1a      	ldr	r3, [pc, #104]	; (80026d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002668:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800266c:	4a18      	ldr	r2, [pc, #96]	; (80026d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800266e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002672:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8002676:	e012      	b.n	800269e <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8002678:	4b15      	ldr	r3, [pc, #84]	; (80026d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800267a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800267e:	4a14      	ldr	r2, [pc, #80]	; (80026d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002680:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002684:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8002688:	4b11      	ldr	r3, [pc, #68]	; (80026d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800268a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800268e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002696:	490e      	ldr	r1, [pc, #56]	; (80026d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002698:	4313      	orrs	r3, r2
 800269a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80026a2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80026a6:	d106      	bne.n	80026b6 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80026a8:	4b09      	ldr	r3, [pc, #36]	; (80026d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80026aa:	68db      	ldr	r3, [r3, #12]
 80026ac:	4a08      	ldr	r2, [pc, #32]	; (80026d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80026ae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80026b2:	60d3      	str	r3, [r2, #12]
 80026b4:	e020      	b.n	80026f8 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80026ba:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80026be:	d109      	bne.n	80026d4 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80026c0:	4b03      	ldr	r3, [pc, #12]	; (80026d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80026c2:	68db      	ldr	r3, [r3, #12]
 80026c4:	4a02      	ldr	r2, [pc, #8]	; (80026d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80026c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026ca:	60d3      	str	r3, [r2, #12]
 80026cc:	e014      	b.n	80026f8 <HAL_RCCEx_PeriphCLKConfig+0x524>
 80026ce:	bf00      	nop
 80026d0:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80026d8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80026dc:	d10c      	bne.n	80026f8 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	3304      	adds	r3, #4
 80026e2:	2101      	movs	r1, #1
 80026e4:	4618      	mov	r0, r3
 80026e6:	f000 f8a5 	bl	8002834 <RCCEx_PLLSAI1_Config>
 80026ea:	4603      	mov	r3, r0
 80026ec:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80026ee:	7cfb      	ldrb	r3, [r7, #19]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d001      	beq.n	80026f8 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 80026f4:	7cfb      	ldrb	r3, [r7, #19]
 80026f6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002700:	2b00      	cmp	r3, #0
 8002702:	d028      	beq.n	8002756 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002704:	4b4a      	ldr	r3, [pc, #296]	; (8002830 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002706:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800270a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002712:	4947      	ldr	r1, [pc, #284]	; (8002830 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002714:	4313      	orrs	r3, r2
 8002716:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800271e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002722:	d106      	bne.n	8002732 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002724:	4b42      	ldr	r3, [pc, #264]	; (8002830 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002726:	68db      	ldr	r3, [r3, #12]
 8002728:	4a41      	ldr	r2, [pc, #260]	; (8002830 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800272a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800272e:	60d3      	str	r3, [r2, #12]
 8002730:	e011      	b.n	8002756 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002736:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800273a:	d10c      	bne.n	8002756 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	3304      	adds	r3, #4
 8002740:	2101      	movs	r1, #1
 8002742:	4618      	mov	r0, r3
 8002744:	f000 f876 	bl	8002834 <RCCEx_PLLSAI1_Config>
 8002748:	4603      	mov	r3, r0
 800274a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800274c:	7cfb      	ldrb	r3, [r7, #19]
 800274e:	2b00      	cmp	r3, #0
 8002750:	d001      	beq.n	8002756 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8002752:	7cfb      	ldrb	r3, [r7, #19]
 8002754:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800275e:	2b00      	cmp	r3, #0
 8002760:	d01e      	beq.n	80027a0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002762:	4b33      	ldr	r3, [pc, #204]	; (8002830 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002764:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002768:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002772:	492f      	ldr	r1, [pc, #188]	; (8002830 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002774:	4313      	orrs	r3, r2
 8002776:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002780:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002784:	d10c      	bne.n	80027a0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	3304      	adds	r3, #4
 800278a:	2102      	movs	r1, #2
 800278c:	4618      	mov	r0, r3
 800278e:	f000 f851 	bl	8002834 <RCCEx_PLLSAI1_Config>
 8002792:	4603      	mov	r3, r0
 8002794:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002796:	7cfb      	ldrb	r3, [r7, #19]
 8002798:	2b00      	cmp	r3, #0
 800279a:	d001      	beq.n	80027a0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 800279c:	7cfb      	ldrb	r3, [r7, #19]
 800279e:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d00b      	beq.n	80027c4 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80027ac:	4b20      	ldr	r3, [pc, #128]	; (8002830 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80027ae:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80027b2:	f023 0204 	bic.w	r2, r3, #4
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80027bc:	491c      	ldr	r1, [pc, #112]	; (8002830 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80027be:	4313      	orrs	r3, r2
 80027c0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d00b      	beq.n	80027e8 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80027d0:	4b17      	ldr	r3, [pc, #92]	; (8002830 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80027d2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80027d6:	f023 0218 	bic.w	r2, r3, #24
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027e0:	4913      	ldr	r1, [pc, #76]	; (8002830 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80027e2:	4313      	orrs	r3, r2
 80027e4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d017      	beq.n	8002824 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80027f4:	4b0e      	ldr	r3, [pc, #56]	; (8002830 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80027f6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80027fa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002804:	490a      	ldr	r1, [pc, #40]	; (8002830 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002806:	4313      	orrs	r3, r2
 8002808:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002812:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002816:	d105      	bne.n	8002824 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002818:	4b05      	ldr	r3, [pc, #20]	; (8002830 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800281a:	68db      	ldr	r3, [r3, #12]
 800281c:	4a04      	ldr	r2, [pc, #16]	; (8002830 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800281e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002822:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002824:	7cbb      	ldrb	r3, [r7, #18]
}
 8002826:	4618      	mov	r0, r3
 8002828:	3718      	adds	r7, #24
 800282a:	46bd      	mov	sp, r7
 800282c:	bd80      	pop	{r7, pc}
 800282e:	bf00      	nop
 8002830:	40021000 	.word	0x40021000

08002834 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b084      	sub	sp, #16
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
 800283c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800283e:	2300      	movs	r3, #0
 8002840:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002842:	4b72      	ldr	r3, [pc, #456]	; (8002a0c <RCCEx_PLLSAI1_Config+0x1d8>)
 8002844:	68db      	ldr	r3, [r3, #12]
 8002846:	f003 0303 	and.w	r3, r3, #3
 800284a:	2b00      	cmp	r3, #0
 800284c:	d00e      	beq.n	800286c <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800284e:	4b6f      	ldr	r3, [pc, #444]	; (8002a0c <RCCEx_PLLSAI1_Config+0x1d8>)
 8002850:	68db      	ldr	r3, [r3, #12]
 8002852:	f003 0203 	and.w	r2, r3, #3
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	429a      	cmp	r2, r3
 800285c:	d103      	bne.n	8002866 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
       ||
 8002862:	2b00      	cmp	r3, #0
 8002864:	d142      	bne.n	80028ec <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8002866:	2301      	movs	r3, #1
 8002868:	73fb      	strb	r3, [r7, #15]
 800286a:	e03f      	b.n	80028ec <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	2b03      	cmp	r3, #3
 8002872:	d018      	beq.n	80028a6 <RCCEx_PLLSAI1_Config+0x72>
 8002874:	2b03      	cmp	r3, #3
 8002876:	d825      	bhi.n	80028c4 <RCCEx_PLLSAI1_Config+0x90>
 8002878:	2b01      	cmp	r3, #1
 800287a:	d002      	beq.n	8002882 <RCCEx_PLLSAI1_Config+0x4e>
 800287c:	2b02      	cmp	r3, #2
 800287e:	d009      	beq.n	8002894 <RCCEx_PLLSAI1_Config+0x60>
 8002880:	e020      	b.n	80028c4 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002882:	4b62      	ldr	r3, [pc, #392]	; (8002a0c <RCCEx_PLLSAI1_Config+0x1d8>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f003 0302 	and.w	r3, r3, #2
 800288a:	2b00      	cmp	r3, #0
 800288c:	d11d      	bne.n	80028ca <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 800288e:	2301      	movs	r3, #1
 8002890:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002892:	e01a      	b.n	80028ca <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002894:	4b5d      	ldr	r3, [pc, #372]	; (8002a0c <RCCEx_PLLSAI1_Config+0x1d8>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800289c:	2b00      	cmp	r3, #0
 800289e:	d116      	bne.n	80028ce <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 80028a0:	2301      	movs	r3, #1
 80028a2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80028a4:	e013      	b.n	80028ce <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80028a6:	4b59      	ldr	r3, [pc, #356]	; (8002a0c <RCCEx_PLLSAI1_Config+0x1d8>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d10f      	bne.n	80028d2 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80028b2:	4b56      	ldr	r3, [pc, #344]	; (8002a0c <RCCEx_PLLSAI1_Config+0x1d8>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d109      	bne.n	80028d2 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 80028be:	2301      	movs	r3, #1
 80028c0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80028c2:	e006      	b.n	80028d2 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 80028c4:	2301      	movs	r3, #1
 80028c6:	73fb      	strb	r3, [r7, #15]
      break;
 80028c8:	e004      	b.n	80028d4 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80028ca:	bf00      	nop
 80028cc:	e002      	b.n	80028d4 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80028ce:	bf00      	nop
 80028d0:	e000      	b.n	80028d4 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80028d2:	bf00      	nop
    }

    if(status == HAL_OK)
 80028d4:	7bfb      	ldrb	r3, [r7, #15]
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d108      	bne.n	80028ec <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 80028da:	4b4c      	ldr	r3, [pc, #304]	; (8002a0c <RCCEx_PLLSAI1_Config+0x1d8>)
 80028dc:	68db      	ldr	r3, [r3, #12]
 80028de:	f023 0203 	bic.w	r2, r3, #3
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	4949      	ldr	r1, [pc, #292]	; (8002a0c <RCCEx_PLLSAI1_Config+0x1d8>)
 80028e8:	4313      	orrs	r3, r2
 80028ea:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80028ec:	7bfb      	ldrb	r3, [r7, #15]
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	f040 8086 	bne.w	8002a00 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80028f4:	4b45      	ldr	r3, [pc, #276]	; (8002a0c <RCCEx_PLLSAI1_Config+0x1d8>)
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	4a44      	ldr	r2, [pc, #272]	; (8002a0c <RCCEx_PLLSAI1_Config+0x1d8>)
 80028fa:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80028fe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002900:	f7fe f9c0 	bl	8000c84 <HAL_GetTick>
 8002904:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002906:	e009      	b.n	800291c <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002908:	f7fe f9bc 	bl	8000c84 <HAL_GetTick>
 800290c:	4602      	mov	r2, r0
 800290e:	68bb      	ldr	r3, [r7, #8]
 8002910:	1ad3      	subs	r3, r2, r3
 8002912:	2b02      	cmp	r3, #2
 8002914:	d902      	bls.n	800291c <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8002916:	2303      	movs	r3, #3
 8002918:	73fb      	strb	r3, [r7, #15]
        break;
 800291a:	e005      	b.n	8002928 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800291c:	4b3b      	ldr	r3, [pc, #236]	; (8002a0c <RCCEx_PLLSAI1_Config+0x1d8>)
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002924:	2b00      	cmp	r3, #0
 8002926:	d1ef      	bne.n	8002908 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8002928:	7bfb      	ldrb	r3, [r7, #15]
 800292a:	2b00      	cmp	r3, #0
 800292c:	d168      	bne.n	8002a00 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	2b00      	cmp	r3, #0
 8002932:	d113      	bne.n	800295c <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002934:	4b35      	ldr	r3, [pc, #212]	; (8002a0c <RCCEx_PLLSAI1_Config+0x1d8>)
 8002936:	691a      	ldr	r2, [r3, #16]
 8002938:	4b35      	ldr	r3, [pc, #212]	; (8002a10 <RCCEx_PLLSAI1_Config+0x1dc>)
 800293a:	4013      	ands	r3, r2
 800293c:	687a      	ldr	r2, [r7, #4]
 800293e:	6892      	ldr	r2, [r2, #8]
 8002940:	0211      	lsls	r1, r2, #8
 8002942:	687a      	ldr	r2, [r7, #4]
 8002944:	68d2      	ldr	r2, [r2, #12]
 8002946:	06d2      	lsls	r2, r2, #27
 8002948:	4311      	orrs	r1, r2
 800294a:	687a      	ldr	r2, [r7, #4]
 800294c:	6852      	ldr	r2, [r2, #4]
 800294e:	3a01      	subs	r2, #1
 8002950:	0112      	lsls	r2, r2, #4
 8002952:	430a      	orrs	r2, r1
 8002954:	492d      	ldr	r1, [pc, #180]	; (8002a0c <RCCEx_PLLSAI1_Config+0x1d8>)
 8002956:	4313      	orrs	r3, r2
 8002958:	610b      	str	r3, [r1, #16]
 800295a:	e02d      	b.n	80029b8 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	2b01      	cmp	r3, #1
 8002960:	d115      	bne.n	800298e <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002962:	4b2a      	ldr	r3, [pc, #168]	; (8002a0c <RCCEx_PLLSAI1_Config+0x1d8>)
 8002964:	691a      	ldr	r2, [r3, #16]
 8002966:	4b2b      	ldr	r3, [pc, #172]	; (8002a14 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002968:	4013      	ands	r3, r2
 800296a:	687a      	ldr	r2, [r7, #4]
 800296c:	6892      	ldr	r2, [r2, #8]
 800296e:	0211      	lsls	r1, r2, #8
 8002970:	687a      	ldr	r2, [r7, #4]
 8002972:	6912      	ldr	r2, [r2, #16]
 8002974:	0852      	lsrs	r2, r2, #1
 8002976:	3a01      	subs	r2, #1
 8002978:	0552      	lsls	r2, r2, #21
 800297a:	4311      	orrs	r1, r2
 800297c:	687a      	ldr	r2, [r7, #4]
 800297e:	6852      	ldr	r2, [r2, #4]
 8002980:	3a01      	subs	r2, #1
 8002982:	0112      	lsls	r2, r2, #4
 8002984:	430a      	orrs	r2, r1
 8002986:	4921      	ldr	r1, [pc, #132]	; (8002a0c <RCCEx_PLLSAI1_Config+0x1d8>)
 8002988:	4313      	orrs	r3, r2
 800298a:	610b      	str	r3, [r1, #16]
 800298c:	e014      	b.n	80029b8 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800298e:	4b1f      	ldr	r3, [pc, #124]	; (8002a0c <RCCEx_PLLSAI1_Config+0x1d8>)
 8002990:	691a      	ldr	r2, [r3, #16]
 8002992:	4b21      	ldr	r3, [pc, #132]	; (8002a18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002994:	4013      	ands	r3, r2
 8002996:	687a      	ldr	r2, [r7, #4]
 8002998:	6892      	ldr	r2, [r2, #8]
 800299a:	0211      	lsls	r1, r2, #8
 800299c:	687a      	ldr	r2, [r7, #4]
 800299e:	6952      	ldr	r2, [r2, #20]
 80029a0:	0852      	lsrs	r2, r2, #1
 80029a2:	3a01      	subs	r2, #1
 80029a4:	0652      	lsls	r2, r2, #25
 80029a6:	4311      	orrs	r1, r2
 80029a8:	687a      	ldr	r2, [r7, #4]
 80029aa:	6852      	ldr	r2, [r2, #4]
 80029ac:	3a01      	subs	r2, #1
 80029ae:	0112      	lsls	r2, r2, #4
 80029b0:	430a      	orrs	r2, r1
 80029b2:	4916      	ldr	r1, [pc, #88]	; (8002a0c <RCCEx_PLLSAI1_Config+0x1d8>)
 80029b4:	4313      	orrs	r3, r2
 80029b6:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80029b8:	4b14      	ldr	r3, [pc, #80]	; (8002a0c <RCCEx_PLLSAI1_Config+0x1d8>)
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	4a13      	ldr	r2, [pc, #76]	; (8002a0c <RCCEx_PLLSAI1_Config+0x1d8>)
 80029be:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80029c2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029c4:	f7fe f95e 	bl	8000c84 <HAL_GetTick>
 80029c8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80029ca:	e009      	b.n	80029e0 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80029cc:	f7fe f95a 	bl	8000c84 <HAL_GetTick>
 80029d0:	4602      	mov	r2, r0
 80029d2:	68bb      	ldr	r3, [r7, #8]
 80029d4:	1ad3      	subs	r3, r2, r3
 80029d6:	2b02      	cmp	r3, #2
 80029d8:	d902      	bls.n	80029e0 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 80029da:	2303      	movs	r3, #3
 80029dc:	73fb      	strb	r3, [r7, #15]
          break;
 80029de:	e005      	b.n	80029ec <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80029e0:	4b0a      	ldr	r3, [pc, #40]	; (8002a0c <RCCEx_PLLSAI1_Config+0x1d8>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d0ef      	beq.n	80029cc <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 80029ec:	7bfb      	ldrb	r3, [r7, #15]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d106      	bne.n	8002a00 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80029f2:	4b06      	ldr	r3, [pc, #24]	; (8002a0c <RCCEx_PLLSAI1_Config+0x1d8>)
 80029f4:	691a      	ldr	r2, [r3, #16]
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	699b      	ldr	r3, [r3, #24]
 80029fa:	4904      	ldr	r1, [pc, #16]	; (8002a0c <RCCEx_PLLSAI1_Config+0x1d8>)
 80029fc:	4313      	orrs	r3, r2
 80029fe:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002a00:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a02:	4618      	mov	r0, r3
 8002a04:	3710      	adds	r7, #16
 8002a06:	46bd      	mov	sp, r7
 8002a08:	bd80      	pop	{r7, pc}
 8002a0a:	bf00      	nop
 8002a0c:	40021000 	.word	0x40021000
 8002a10:	07ff800f 	.word	0x07ff800f
 8002a14:	ff9f800f 	.word	0xff9f800f
 8002a18:	f9ff800f 	.word	0xf9ff800f

08002a1c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b084      	sub	sp, #16
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
 8002a24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002a26:	2300      	movs	r3, #0
 8002a28:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002a2a:	4b72      	ldr	r3, [pc, #456]	; (8002bf4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002a2c:	68db      	ldr	r3, [r3, #12]
 8002a2e:	f003 0303 	and.w	r3, r3, #3
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d00e      	beq.n	8002a54 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002a36:	4b6f      	ldr	r3, [pc, #444]	; (8002bf4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002a38:	68db      	ldr	r3, [r3, #12]
 8002a3a:	f003 0203 	and.w	r2, r3, #3
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	429a      	cmp	r2, r3
 8002a44:	d103      	bne.n	8002a4e <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
       ||
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d142      	bne.n	8002ad4 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8002a4e:	2301      	movs	r3, #1
 8002a50:	73fb      	strb	r3, [r7, #15]
 8002a52:	e03f      	b.n	8002ad4 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	2b03      	cmp	r3, #3
 8002a5a:	d018      	beq.n	8002a8e <RCCEx_PLLSAI2_Config+0x72>
 8002a5c:	2b03      	cmp	r3, #3
 8002a5e:	d825      	bhi.n	8002aac <RCCEx_PLLSAI2_Config+0x90>
 8002a60:	2b01      	cmp	r3, #1
 8002a62:	d002      	beq.n	8002a6a <RCCEx_PLLSAI2_Config+0x4e>
 8002a64:	2b02      	cmp	r3, #2
 8002a66:	d009      	beq.n	8002a7c <RCCEx_PLLSAI2_Config+0x60>
 8002a68:	e020      	b.n	8002aac <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002a6a:	4b62      	ldr	r3, [pc, #392]	; (8002bf4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f003 0302 	and.w	r3, r3, #2
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d11d      	bne.n	8002ab2 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8002a76:	2301      	movs	r3, #1
 8002a78:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a7a:	e01a      	b.n	8002ab2 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002a7c:	4b5d      	ldr	r3, [pc, #372]	; (8002bf4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d116      	bne.n	8002ab6 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8002a88:	2301      	movs	r3, #1
 8002a8a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a8c:	e013      	b.n	8002ab6 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002a8e:	4b59      	ldr	r3, [pc, #356]	; (8002bf4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d10f      	bne.n	8002aba <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002a9a:	4b56      	ldr	r3, [pc, #344]	; (8002bf4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d109      	bne.n	8002aba <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8002aa6:	2301      	movs	r3, #1
 8002aa8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002aaa:	e006      	b.n	8002aba <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8002aac:	2301      	movs	r3, #1
 8002aae:	73fb      	strb	r3, [r7, #15]
      break;
 8002ab0:	e004      	b.n	8002abc <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8002ab2:	bf00      	nop
 8002ab4:	e002      	b.n	8002abc <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8002ab6:	bf00      	nop
 8002ab8:	e000      	b.n	8002abc <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8002aba:	bf00      	nop
    }

    if(status == HAL_OK)
 8002abc:	7bfb      	ldrb	r3, [r7, #15]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d108      	bne.n	8002ad4 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8002ac2:	4b4c      	ldr	r3, [pc, #304]	; (8002bf4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002ac4:	68db      	ldr	r3, [r3, #12]
 8002ac6:	f023 0203 	bic.w	r2, r3, #3
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	4949      	ldr	r1, [pc, #292]	; (8002bf4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002ad0:	4313      	orrs	r3, r2
 8002ad2:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8002ad4:	7bfb      	ldrb	r3, [r7, #15]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	f040 8086 	bne.w	8002be8 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002adc:	4b45      	ldr	r3, [pc, #276]	; (8002bf4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	4a44      	ldr	r2, [pc, #272]	; (8002bf4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002ae2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ae6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ae8:	f7fe f8cc 	bl	8000c84 <HAL_GetTick>
 8002aec:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002aee:	e009      	b.n	8002b04 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002af0:	f7fe f8c8 	bl	8000c84 <HAL_GetTick>
 8002af4:	4602      	mov	r2, r0
 8002af6:	68bb      	ldr	r3, [r7, #8]
 8002af8:	1ad3      	subs	r3, r2, r3
 8002afa:	2b02      	cmp	r3, #2
 8002afc:	d902      	bls.n	8002b04 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8002afe:	2303      	movs	r3, #3
 8002b00:	73fb      	strb	r3, [r7, #15]
        break;
 8002b02:	e005      	b.n	8002b10 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002b04:	4b3b      	ldr	r3, [pc, #236]	; (8002bf4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d1ef      	bne.n	8002af0 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8002b10:	7bfb      	ldrb	r3, [r7, #15]
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d168      	bne.n	8002be8 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d113      	bne.n	8002b44 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002b1c:	4b35      	ldr	r3, [pc, #212]	; (8002bf4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002b1e:	695a      	ldr	r2, [r3, #20]
 8002b20:	4b35      	ldr	r3, [pc, #212]	; (8002bf8 <RCCEx_PLLSAI2_Config+0x1dc>)
 8002b22:	4013      	ands	r3, r2
 8002b24:	687a      	ldr	r2, [r7, #4]
 8002b26:	6892      	ldr	r2, [r2, #8]
 8002b28:	0211      	lsls	r1, r2, #8
 8002b2a:	687a      	ldr	r2, [r7, #4]
 8002b2c:	68d2      	ldr	r2, [r2, #12]
 8002b2e:	06d2      	lsls	r2, r2, #27
 8002b30:	4311      	orrs	r1, r2
 8002b32:	687a      	ldr	r2, [r7, #4]
 8002b34:	6852      	ldr	r2, [r2, #4]
 8002b36:	3a01      	subs	r2, #1
 8002b38:	0112      	lsls	r2, r2, #4
 8002b3a:	430a      	orrs	r2, r1
 8002b3c:	492d      	ldr	r1, [pc, #180]	; (8002bf4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002b3e:	4313      	orrs	r3, r2
 8002b40:	614b      	str	r3, [r1, #20]
 8002b42:	e02d      	b.n	8002ba0 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	2b01      	cmp	r3, #1
 8002b48:	d115      	bne.n	8002b76 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002b4a:	4b2a      	ldr	r3, [pc, #168]	; (8002bf4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002b4c:	695a      	ldr	r2, [r3, #20]
 8002b4e:	4b2b      	ldr	r3, [pc, #172]	; (8002bfc <RCCEx_PLLSAI2_Config+0x1e0>)
 8002b50:	4013      	ands	r3, r2
 8002b52:	687a      	ldr	r2, [r7, #4]
 8002b54:	6892      	ldr	r2, [r2, #8]
 8002b56:	0211      	lsls	r1, r2, #8
 8002b58:	687a      	ldr	r2, [r7, #4]
 8002b5a:	6912      	ldr	r2, [r2, #16]
 8002b5c:	0852      	lsrs	r2, r2, #1
 8002b5e:	3a01      	subs	r2, #1
 8002b60:	0552      	lsls	r2, r2, #21
 8002b62:	4311      	orrs	r1, r2
 8002b64:	687a      	ldr	r2, [r7, #4]
 8002b66:	6852      	ldr	r2, [r2, #4]
 8002b68:	3a01      	subs	r2, #1
 8002b6a:	0112      	lsls	r2, r2, #4
 8002b6c:	430a      	orrs	r2, r1
 8002b6e:	4921      	ldr	r1, [pc, #132]	; (8002bf4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002b70:	4313      	orrs	r3, r2
 8002b72:	614b      	str	r3, [r1, #20]
 8002b74:	e014      	b.n	8002ba0 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002b76:	4b1f      	ldr	r3, [pc, #124]	; (8002bf4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002b78:	695a      	ldr	r2, [r3, #20]
 8002b7a:	4b21      	ldr	r3, [pc, #132]	; (8002c00 <RCCEx_PLLSAI2_Config+0x1e4>)
 8002b7c:	4013      	ands	r3, r2
 8002b7e:	687a      	ldr	r2, [r7, #4]
 8002b80:	6892      	ldr	r2, [r2, #8]
 8002b82:	0211      	lsls	r1, r2, #8
 8002b84:	687a      	ldr	r2, [r7, #4]
 8002b86:	6952      	ldr	r2, [r2, #20]
 8002b88:	0852      	lsrs	r2, r2, #1
 8002b8a:	3a01      	subs	r2, #1
 8002b8c:	0652      	lsls	r2, r2, #25
 8002b8e:	4311      	orrs	r1, r2
 8002b90:	687a      	ldr	r2, [r7, #4]
 8002b92:	6852      	ldr	r2, [r2, #4]
 8002b94:	3a01      	subs	r2, #1
 8002b96:	0112      	lsls	r2, r2, #4
 8002b98:	430a      	orrs	r2, r1
 8002b9a:	4916      	ldr	r1, [pc, #88]	; (8002bf4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002b9c:	4313      	orrs	r3, r2
 8002b9e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002ba0:	4b14      	ldr	r3, [pc, #80]	; (8002bf4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	4a13      	ldr	r2, [pc, #76]	; (8002bf4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002ba6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002baa:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bac:	f7fe f86a 	bl	8000c84 <HAL_GetTick>
 8002bb0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002bb2:	e009      	b.n	8002bc8 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002bb4:	f7fe f866 	bl	8000c84 <HAL_GetTick>
 8002bb8:	4602      	mov	r2, r0
 8002bba:	68bb      	ldr	r3, [r7, #8]
 8002bbc:	1ad3      	subs	r3, r2, r3
 8002bbe:	2b02      	cmp	r3, #2
 8002bc0:	d902      	bls.n	8002bc8 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8002bc2:	2303      	movs	r3, #3
 8002bc4:	73fb      	strb	r3, [r7, #15]
          break;
 8002bc6:	e005      	b.n	8002bd4 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002bc8:	4b0a      	ldr	r3, [pc, #40]	; (8002bf4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d0ef      	beq.n	8002bb4 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8002bd4:	7bfb      	ldrb	r3, [r7, #15]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d106      	bne.n	8002be8 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002bda:	4b06      	ldr	r3, [pc, #24]	; (8002bf4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002bdc:	695a      	ldr	r2, [r3, #20]
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	699b      	ldr	r3, [r3, #24]
 8002be2:	4904      	ldr	r1, [pc, #16]	; (8002bf4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002be4:	4313      	orrs	r3, r2
 8002be6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002be8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bea:	4618      	mov	r0, r3
 8002bec:	3710      	adds	r7, #16
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	bd80      	pop	{r7, pc}
 8002bf2:	bf00      	nop
 8002bf4:	40021000 	.word	0x40021000
 8002bf8:	07ff800f 	.word	0x07ff800f
 8002bfc:	ff9f800f 	.word	0xff9f800f
 8002c00:	f9ff800f 	.word	0xf9ff800f

08002c04 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b082      	sub	sp, #8
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d101      	bne.n	8002c16 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002c12:	2301      	movs	r3, #1
 8002c14:	e049      	b.n	8002caa <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c1c:	b2db      	uxtb	r3, r3
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d106      	bne.n	8002c30 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	2200      	movs	r2, #0
 8002c26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002c2a:	6878      	ldr	r0, [r7, #4]
 8002c2c:	f000 f841 	bl	8002cb2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2202      	movs	r2, #2
 8002c34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681a      	ldr	r2, [r3, #0]
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	3304      	adds	r3, #4
 8002c40:	4619      	mov	r1, r3
 8002c42:	4610      	mov	r0, r2
 8002c44:	f000 f9da 	bl	8002ffc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2201      	movs	r2, #1
 8002c4c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2201      	movs	r2, #1
 8002c54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2201      	movs	r2, #1
 8002c5c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2201      	movs	r2, #1
 8002c64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2201      	movs	r2, #1
 8002c6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2201      	movs	r2, #1
 8002c74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2201      	movs	r2, #1
 8002c7c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2201      	movs	r2, #1
 8002c84:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2201      	movs	r2, #1
 8002c8c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2201      	movs	r2, #1
 8002c94:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2201      	movs	r2, #1
 8002c9c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2201      	movs	r2, #1
 8002ca4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002ca8:	2300      	movs	r3, #0
}
 8002caa:	4618      	mov	r0, r3
 8002cac:	3708      	adds	r7, #8
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	bd80      	pop	{r7, pc}

08002cb2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002cb2:	b480      	push	{r7}
 8002cb4:	b083      	sub	sp, #12
 8002cb6:	af00      	add	r7, sp, #0
 8002cb8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002cba:	bf00      	nop
 8002cbc:	370c      	adds	r7, #12
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc4:	4770      	bx	lr
	...

08002cc8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002cc8:	b480      	push	{r7}
 8002cca:	b085      	sub	sp, #20
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002cd6:	b2db      	uxtb	r3, r3
 8002cd8:	2b01      	cmp	r3, #1
 8002cda:	d001      	beq.n	8002ce0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002cdc:	2301      	movs	r3, #1
 8002cde:	e04f      	b.n	8002d80 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2202      	movs	r2, #2
 8002ce4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	68da      	ldr	r2, [r3, #12]
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f042 0201 	orr.w	r2, r2, #1
 8002cf6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	4a23      	ldr	r2, [pc, #140]	; (8002d8c <HAL_TIM_Base_Start_IT+0xc4>)
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	d01d      	beq.n	8002d3e <HAL_TIM_Base_Start_IT+0x76>
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d0a:	d018      	beq.n	8002d3e <HAL_TIM_Base_Start_IT+0x76>
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	4a1f      	ldr	r2, [pc, #124]	; (8002d90 <HAL_TIM_Base_Start_IT+0xc8>)
 8002d12:	4293      	cmp	r3, r2
 8002d14:	d013      	beq.n	8002d3e <HAL_TIM_Base_Start_IT+0x76>
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	4a1e      	ldr	r2, [pc, #120]	; (8002d94 <HAL_TIM_Base_Start_IT+0xcc>)
 8002d1c:	4293      	cmp	r3, r2
 8002d1e:	d00e      	beq.n	8002d3e <HAL_TIM_Base_Start_IT+0x76>
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	4a1c      	ldr	r2, [pc, #112]	; (8002d98 <HAL_TIM_Base_Start_IT+0xd0>)
 8002d26:	4293      	cmp	r3, r2
 8002d28:	d009      	beq.n	8002d3e <HAL_TIM_Base_Start_IT+0x76>
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	4a1b      	ldr	r2, [pc, #108]	; (8002d9c <HAL_TIM_Base_Start_IT+0xd4>)
 8002d30:	4293      	cmp	r3, r2
 8002d32:	d004      	beq.n	8002d3e <HAL_TIM_Base_Start_IT+0x76>
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	4a19      	ldr	r2, [pc, #100]	; (8002da0 <HAL_TIM_Base_Start_IT+0xd8>)
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d115      	bne.n	8002d6a <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	689a      	ldr	r2, [r3, #8]
 8002d44:	4b17      	ldr	r3, [pc, #92]	; (8002da4 <HAL_TIM_Base_Start_IT+0xdc>)
 8002d46:	4013      	ands	r3, r2
 8002d48:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	2b06      	cmp	r3, #6
 8002d4e:	d015      	beq.n	8002d7c <HAL_TIM_Base_Start_IT+0xb4>
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d56:	d011      	beq.n	8002d7c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	681a      	ldr	r2, [r3, #0]
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f042 0201 	orr.w	r2, r2, #1
 8002d66:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d68:	e008      	b.n	8002d7c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	681a      	ldr	r2, [r3, #0]
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f042 0201 	orr.w	r2, r2, #1
 8002d78:	601a      	str	r2, [r3, #0]
 8002d7a:	e000      	b.n	8002d7e <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d7c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002d7e:	2300      	movs	r3, #0
}
 8002d80:	4618      	mov	r0, r3
 8002d82:	3714      	adds	r7, #20
 8002d84:	46bd      	mov	sp, r7
 8002d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8a:	4770      	bx	lr
 8002d8c:	40012c00 	.word	0x40012c00
 8002d90:	40000400 	.word	0x40000400
 8002d94:	40000800 	.word	0x40000800
 8002d98:	40000c00 	.word	0x40000c00
 8002d9c:	40013400 	.word	0x40013400
 8002da0:	40014000 	.word	0x40014000
 8002da4:	00010007 	.word	0x00010007

08002da8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b084      	sub	sp, #16
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	68db      	ldr	r3, [r3, #12]
 8002db6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	691b      	ldr	r3, [r3, #16]
 8002dbe:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002dc0:	68bb      	ldr	r3, [r7, #8]
 8002dc2:	f003 0302 	and.w	r3, r3, #2
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d020      	beq.n	8002e0c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	f003 0302 	and.w	r3, r3, #2
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d01b      	beq.n	8002e0c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f06f 0202 	mvn.w	r2, #2
 8002ddc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	2201      	movs	r2, #1
 8002de2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	699b      	ldr	r3, [r3, #24]
 8002dea:	f003 0303 	and.w	r3, r3, #3
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d003      	beq.n	8002dfa <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002df2:	6878      	ldr	r0, [r7, #4]
 8002df4:	f000 f8e4 	bl	8002fc0 <HAL_TIM_IC_CaptureCallback>
 8002df8:	e005      	b.n	8002e06 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002dfa:	6878      	ldr	r0, [r7, #4]
 8002dfc:	f000 f8d6 	bl	8002fac <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e00:	6878      	ldr	r0, [r7, #4]
 8002e02:	f000 f8e7 	bl	8002fd4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	2200      	movs	r2, #0
 8002e0a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002e0c:	68bb      	ldr	r3, [r7, #8]
 8002e0e:	f003 0304 	and.w	r3, r3, #4
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d020      	beq.n	8002e58 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	f003 0304 	and.w	r3, r3, #4
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d01b      	beq.n	8002e58 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f06f 0204 	mvn.w	r2, #4
 8002e28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	2202      	movs	r2, #2
 8002e2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	699b      	ldr	r3, [r3, #24]
 8002e36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d003      	beq.n	8002e46 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e3e:	6878      	ldr	r0, [r7, #4]
 8002e40:	f000 f8be 	bl	8002fc0 <HAL_TIM_IC_CaptureCallback>
 8002e44:	e005      	b.n	8002e52 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e46:	6878      	ldr	r0, [r7, #4]
 8002e48:	f000 f8b0 	bl	8002fac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e4c:	6878      	ldr	r0, [r7, #4]
 8002e4e:	f000 f8c1 	bl	8002fd4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	2200      	movs	r2, #0
 8002e56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002e58:	68bb      	ldr	r3, [r7, #8]
 8002e5a:	f003 0308 	and.w	r3, r3, #8
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d020      	beq.n	8002ea4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	f003 0308 	and.w	r3, r3, #8
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d01b      	beq.n	8002ea4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f06f 0208 	mvn.w	r2, #8
 8002e74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	2204      	movs	r2, #4
 8002e7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	69db      	ldr	r3, [r3, #28]
 8002e82:	f003 0303 	and.w	r3, r3, #3
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d003      	beq.n	8002e92 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e8a:	6878      	ldr	r0, [r7, #4]
 8002e8c:	f000 f898 	bl	8002fc0 <HAL_TIM_IC_CaptureCallback>
 8002e90:	e005      	b.n	8002e9e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e92:	6878      	ldr	r0, [r7, #4]
 8002e94:	f000 f88a 	bl	8002fac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e98:	6878      	ldr	r0, [r7, #4]
 8002e9a:	f000 f89b 	bl	8002fd4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002ea4:	68bb      	ldr	r3, [r7, #8]
 8002ea6:	f003 0310 	and.w	r3, r3, #16
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d020      	beq.n	8002ef0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	f003 0310 	and.w	r3, r3, #16
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d01b      	beq.n	8002ef0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f06f 0210 	mvn.w	r2, #16
 8002ec0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	2208      	movs	r2, #8
 8002ec6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	69db      	ldr	r3, [r3, #28]
 8002ece:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d003      	beq.n	8002ede <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ed6:	6878      	ldr	r0, [r7, #4]
 8002ed8:	f000 f872 	bl	8002fc0 <HAL_TIM_IC_CaptureCallback>
 8002edc:	e005      	b.n	8002eea <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ede:	6878      	ldr	r0, [r7, #4]
 8002ee0:	f000 f864 	bl	8002fac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ee4:	6878      	ldr	r0, [r7, #4]
 8002ee6:	f000 f875 	bl	8002fd4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	2200      	movs	r2, #0
 8002eee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002ef0:	68bb      	ldr	r3, [r7, #8]
 8002ef2:	f003 0301 	and.w	r3, r3, #1
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d00c      	beq.n	8002f14 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	f003 0301 	and.w	r3, r3, #1
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d007      	beq.n	8002f14 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f06f 0201 	mvn.w	r2, #1
 8002f0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002f0e:	6878      	ldr	r0, [r7, #4]
 8002f10:	f7fd fd20 	bl	8000954 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002f14:	68bb      	ldr	r3, [r7, #8]
 8002f16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d00c      	beq.n	8002f38 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d007      	beq.n	8002f38 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002f30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002f32:	6878      	ldr	r0, [r7, #4]
 8002f34:	f000 f906 	bl	8003144 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8002f38:	68bb      	ldr	r3, [r7, #8]
 8002f3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d00c      	beq.n	8002f5c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d007      	beq.n	8002f5c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002f54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002f56:	6878      	ldr	r0, [r7, #4]
 8002f58:	f000 f8fe 	bl	8003158 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002f5c:	68bb      	ldr	r3, [r7, #8]
 8002f5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d00c      	beq.n	8002f80 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d007      	beq.n	8002f80 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002f78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002f7a:	6878      	ldr	r0, [r7, #4]
 8002f7c:	f000 f834 	bl	8002fe8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002f80:	68bb      	ldr	r3, [r7, #8]
 8002f82:	f003 0320 	and.w	r3, r3, #32
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d00c      	beq.n	8002fa4 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	f003 0320 	and.w	r3, r3, #32
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d007      	beq.n	8002fa4 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f06f 0220 	mvn.w	r2, #32
 8002f9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002f9e:	6878      	ldr	r0, [r7, #4]
 8002fa0:	f000 f8c6 	bl	8003130 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002fa4:	bf00      	nop
 8002fa6:	3710      	adds	r7, #16
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	bd80      	pop	{r7, pc}

08002fac <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002fac:	b480      	push	{r7}
 8002fae:	b083      	sub	sp, #12
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002fb4:	bf00      	nop
 8002fb6:	370c      	adds	r7, #12
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fbe:	4770      	bx	lr

08002fc0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002fc0:	b480      	push	{r7}
 8002fc2:	b083      	sub	sp, #12
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002fc8:	bf00      	nop
 8002fca:	370c      	adds	r7, #12
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd2:	4770      	bx	lr

08002fd4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002fd4:	b480      	push	{r7}
 8002fd6:	b083      	sub	sp, #12
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002fdc:	bf00      	nop
 8002fde:	370c      	adds	r7, #12
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe6:	4770      	bx	lr

08002fe8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002fe8:	b480      	push	{r7}
 8002fea:	b083      	sub	sp, #12
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002ff0:	bf00      	nop
 8002ff2:	370c      	adds	r7, #12
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffa:	4770      	bx	lr

08002ffc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002ffc:	b480      	push	{r7}
 8002ffe:	b085      	sub	sp, #20
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
 8003004:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	4a40      	ldr	r2, [pc, #256]	; (8003110 <TIM_Base_SetConfig+0x114>)
 8003010:	4293      	cmp	r3, r2
 8003012:	d013      	beq.n	800303c <TIM_Base_SetConfig+0x40>
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800301a:	d00f      	beq.n	800303c <TIM_Base_SetConfig+0x40>
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	4a3d      	ldr	r2, [pc, #244]	; (8003114 <TIM_Base_SetConfig+0x118>)
 8003020:	4293      	cmp	r3, r2
 8003022:	d00b      	beq.n	800303c <TIM_Base_SetConfig+0x40>
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	4a3c      	ldr	r2, [pc, #240]	; (8003118 <TIM_Base_SetConfig+0x11c>)
 8003028:	4293      	cmp	r3, r2
 800302a:	d007      	beq.n	800303c <TIM_Base_SetConfig+0x40>
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	4a3b      	ldr	r2, [pc, #236]	; (800311c <TIM_Base_SetConfig+0x120>)
 8003030:	4293      	cmp	r3, r2
 8003032:	d003      	beq.n	800303c <TIM_Base_SetConfig+0x40>
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	4a3a      	ldr	r2, [pc, #232]	; (8003120 <TIM_Base_SetConfig+0x124>)
 8003038:	4293      	cmp	r3, r2
 800303a:	d108      	bne.n	800304e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003042:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	685b      	ldr	r3, [r3, #4]
 8003048:	68fa      	ldr	r2, [r7, #12]
 800304a:	4313      	orrs	r3, r2
 800304c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	4a2f      	ldr	r2, [pc, #188]	; (8003110 <TIM_Base_SetConfig+0x114>)
 8003052:	4293      	cmp	r3, r2
 8003054:	d01f      	beq.n	8003096 <TIM_Base_SetConfig+0x9a>
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800305c:	d01b      	beq.n	8003096 <TIM_Base_SetConfig+0x9a>
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	4a2c      	ldr	r2, [pc, #176]	; (8003114 <TIM_Base_SetConfig+0x118>)
 8003062:	4293      	cmp	r3, r2
 8003064:	d017      	beq.n	8003096 <TIM_Base_SetConfig+0x9a>
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	4a2b      	ldr	r2, [pc, #172]	; (8003118 <TIM_Base_SetConfig+0x11c>)
 800306a:	4293      	cmp	r3, r2
 800306c:	d013      	beq.n	8003096 <TIM_Base_SetConfig+0x9a>
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	4a2a      	ldr	r2, [pc, #168]	; (800311c <TIM_Base_SetConfig+0x120>)
 8003072:	4293      	cmp	r3, r2
 8003074:	d00f      	beq.n	8003096 <TIM_Base_SetConfig+0x9a>
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	4a29      	ldr	r2, [pc, #164]	; (8003120 <TIM_Base_SetConfig+0x124>)
 800307a:	4293      	cmp	r3, r2
 800307c:	d00b      	beq.n	8003096 <TIM_Base_SetConfig+0x9a>
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	4a28      	ldr	r2, [pc, #160]	; (8003124 <TIM_Base_SetConfig+0x128>)
 8003082:	4293      	cmp	r3, r2
 8003084:	d007      	beq.n	8003096 <TIM_Base_SetConfig+0x9a>
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	4a27      	ldr	r2, [pc, #156]	; (8003128 <TIM_Base_SetConfig+0x12c>)
 800308a:	4293      	cmp	r3, r2
 800308c:	d003      	beq.n	8003096 <TIM_Base_SetConfig+0x9a>
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	4a26      	ldr	r2, [pc, #152]	; (800312c <TIM_Base_SetConfig+0x130>)
 8003092:	4293      	cmp	r3, r2
 8003094:	d108      	bne.n	80030a8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800309c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	68db      	ldr	r3, [r3, #12]
 80030a2:	68fa      	ldr	r2, [r7, #12]
 80030a4:	4313      	orrs	r3, r2
 80030a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	695b      	ldr	r3, [r3, #20]
 80030b2:	4313      	orrs	r3, r2
 80030b4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	68fa      	ldr	r2, [r7, #12]
 80030ba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	689a      	ldr	r2, [r3, #8]
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	681a      	ldr	r2, [r3, #0]
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	4a10      	ldr	r2, [pc, #64]	; (8003110 <TIM_Base_SetConfig+0x114>)
 80030d0:	4293      	cmp	r3, r2
 80030d2:	d00f      	beq.n	80030f4 <TIM_Base_SetConfig+0xf8>
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	4a12      	ldr	r2, [pc, #72]	; (8003120 <TIM_Base_SetConfig+0x124>)
 80030d8:	4293      	cmp	r3, r2
 80030da:	d00b      	beq.n	80030f4 <TIM_Base_SetConfig+0xf8>
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	4a11      	ldr	r2, [pc, #68]	; (8003124 <TIM_Base_SetConfig+0x128>)
 80030e0:	4293      	cmp	r3, r2
 80030e2:	d007      	beq.n	80030f4 <TIM_Base_SetConfig+0xf8>
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	4a10      	ldr	r2, [pc, #64]	; (8003128 <TIM_Base_SetConfig+0x12c>)
 80030e8:	4293      	cmp	r3, r2
 80030ea:	d003      	beq.n	80030f4 <TIM_Base_SetConfig+0xf8>
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	4a0f      	ldr	r2, [pc, #60]	; (800312c <TIM_Base_SetConfig+0x130>)
 80030f0:	4293      	cmp	r3, r2
 80030f2:	d103      	bne.n	80030fc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	691a      	ldr	r2, [r3, #16]
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2201      	movs	r2, #1
 8003100:	615a      	str	r2, [r3, #20]
}
 8003102:	bf00      	nop
 8003104:	3714      	adds	r7, #20
 8003106:	46bd      	mov	sp, r7
 8003108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310c:	4770      	bx	lr
 800310e:	bf00      	nop
 8003110:	40012c00 	.word	0x40012c00
 8003114:	40000400 	.word	0x40000400
 8003118:	40000800 	.word	0x40000800
 800311c:	40000c00 	.word	0x40000c00
 8003120:	40013400 	.word	0x40013400
 8003124:	40014000 	.word	0x40014000
 8003128:	40014400 	.word	0x40014400
 800312c:	40014800 	.word	0x40014800

08003130 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003130:	b480      	push	{r7}
 8003132:	b083      	sub	sp, #12
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003138:	bf00      	nop
 800313a:	370c      	adds	r7, #12
 800313c:	46bd      	mov	sp, r7
 800313e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003142:	4770      	bx	lr

08003144 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003144:	b480      	push	{r7}
 8003146:	b083      	sub	sp, #12
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800314c:	bf00      	nop
 800314e:	370c      	adds	r7, #12
 8003150:	46bd      	mov	sp, r7
 8003152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003156:	4770      	bx	lr

08003158 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003158:	b480      	push	{r7}
 800315a:	b083      	sub	sp, #12
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003160:	bf00      	nop
 8003162:	370c      	adds	r7, #12
 8003164:	46bd      	mov	sp, r7
 8003166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316a:	4770      	bx	lr

0800316c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800316c:	b580      	push	{r7, lr}
 800316e:	b082      	sub	sp, #8
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2b00      	cmp	r3, #0
 8003178:	d101      	bne.n	800317e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800317a:	2301      	movs	r3, #1
 800317c:	e042      	b.n	8003204 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003184:	2b00      	cmp	r3, #0
 8003186:	d106      	bne.n	8003196 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2200      	movs	r2, #0
 800318c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003190:	6878      	ldr	r0, [r7, #4]
 8003192:	f7fd fc17 	bl	80009c4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	2224      	movs	r2, #36	; 0x24
 800319a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	681a      	ldr	r2, [r3, #0]
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f022 0201 	bic.w	r2, r2, #1
 80031ac:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d002      	beq.n	80031bc <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80031b6:	6878      	ldr	r0, [r7, #4]
 80031b8:	f000 fbb4 	bl	8003924 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80031bc:	6878      	ldr	r0, [r7, #4]
 80031be:	f000 f8b5 	bl	800332c <UART_SetConfig>
 80031c2:	4603      	mov	r3, r0
 80031c4:	2b01      	cmp	r3, #1
 80031c6:	d101      	bne.n	80031cc <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80031c8:	2301      	movs	r3, #1
 80031ca:	e01b      	b.n	8003204 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	685a      	ldr	r2, [r3, #4]
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80031da:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	689a      	ldr	r2, [r3, #8]
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80031ea:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	681a      	ldr	r2, [r3, #0]
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f042 0201 	orr.w	r2, r2, #1
 80031fa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80031fc:	6878      	ldr	r0, [r7, #4]
 80031fe:	f000 fc33 	bl	8003a68 <UART_CheckIdleState>
 8003202:	4603      	mov	r3, r0
}
 8003204:	4618      	mov	r0, r3
 8003206:	3708      	adds	r7, #8
 8003208:	46bd      	mov	sp, r7
 800320a:	bd80      	pop	{r7, pc}

0800320c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800320c:	b580      	push	{r7, lr}
 800320e:	b08a      	sub	sp, #40	; 0x28
 8003210:	af02      	add	r7, sp, #8
 8003212:	60f8      	str	r0, [r7, #12]
 8003214:	60b9      	str	r1, [r7, #8]
 8003216:	603b      	str	r3, [r7, #0]
 8003218:	4613      	mov	r3, r2
 800321a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003222:	2b20      	cmp	r3, #32
 8003224:	d17c      	bne.n	8003320 <HAL_UART_Transmit+0x114>
  {
    if ((pData == NULL) || (Size == 0U))
 8003226:	68bb      	ldr	r3, [r7, #8]
 8003228:	2b00      	cmp	r3, #0
 800322a:	d002      	beq.n	8003232 <HAL_UART_Transmit+0x26>
 800322c:	88fb      	ldrh	r3, [r7, #6]
 800322e:	2b00      	cmp	r3, #0
 8003230:	d101      	bne.n	8003236 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003232:	2301      	movs	r3, #1
 8003234:	e075      	b.n	8003322 <HAL_UART_Transmit+0x116>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	2200      	movs	r2, #0
 800323a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	2221      	movs	r2, #33	; 0x21
 8003242:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003246:	f7fd fd1d 	bl	8000c84 <HAL_GetTick>
 800324a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	88fa      	ldrh	r2, [r7, #6]
 8003250:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	88fa      	ldrh	r2, [r7, #6]
 8003258:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	689b      	ldr	r3, [r3, #8]
 8003260:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003264:	d108      	bne.n	8003278 <HAL_UART_Transmit+0x6c>
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	691b      	ldr	r3, [r3, #16]
 800326a:	2b00      	cmp	r3, #0
 800326c:	d104      	bne.n	8003278 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800326e:	2300      	movs	r3, #0
 8003270:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003272:	68bb      	ldr	r3, [r7, #8]
 8003274:	61bb      	str	r3, [r7, #24]
 8003276:	e003      	b.n	8003280 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003278:	68bb      	ldr	r3, [r7, #8]
 800327a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800327c:	2300      	movs	r3, #0
 800327e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003280:	e031      	b.n	80032e6 <HAL_UART_Transmit+0xda>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	9300      	str	r3, [sp, #0]
 8003286:	697b      	ldr	r3, [r7, #20]
 8003288:	2200      	movs	r2, #0
 800328a:	2180      	movs	r1, #128	; 0x80
 800328c:	68f8      	ldr	r0, [r7, #12]
 800328e:	f000 fc95 	bl	8003bbc <UART_WaitOnFlagUntilTimeout>
 8003292:	4603      	mov	r3, r0
 8003294:	2b00      	cmp	r3, #0
 8003296:	d005      	beq.n	80032a4 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	2220      	movs	r2, #32
 800329c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 80032a0:	2303      	movs	r3, #3
 80032a2:	e03e      	b.n	8003322 <HAL_UART_Transmit+0x116>
      }
      if (pdata8bits == NULL)
 80032a4:	69fb      	ldr	r3, [r7, #28]
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d10b      	bne.n	80032c2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80032aa:	69bb      	ldr	r3, [r7, #24]
 80032ac:	881a      	ldrh	r2, [r3, #0]
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80032b6:	b292      	uxth	r2, r2
 80032b8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80032ba:	69bb      	ldr	r3, [r7, #24]
 80032bc:	3302      	adds	r3, #2
 80032be:	61bb      	str	r3, [r7, #24]
 80032c0:	e008      	b.n	80032d4 <HAL_UART_Transmit+0xc8>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80032c2:	69fb      	ldr	r3, [r7, #28]
 80032c4:	781a      	ldrb	r2, [r3, #0]
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	b292      	uxth	r2, r2
 80032cc:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80032ce:	69fb      	ldr	r3, [r7, #28]
 80032d0:	3301      	adds	r3, #1
 80032d2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80032da:	b29b      	uxth	r3, r3
 80032dc:	3b01      	subs	r3, #1
 80032de:	b29a      	uxth	r2, r3
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80032ec:	b29b      	uxth	r3, r3
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d1c7      	bne.n	8003282 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	9300      	str	r3, [sp, #0]
 80032f6:	697b      	ldr	r3, [r7, #20]
 80032f8:	2200      	movs	r2, #0
 80032fa:	2140      	movs	r1, #64	; 0x40
 80032fc:	68f8      	ldr	r0, [r7, #12]
 80032fe:	f000 fc5d 	bl	8003bbc <UART_WaitOnFlagUntilTimeout>
 8003302:	4603      	mov	r3, r0
 8003304:	2b00      	cmp	r3, #0
 8003306:	d005      	beq.n	8003314 <HAL_UART_Transmit+0x108>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	2220      	movs	r2, #32
 800330c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8003310:	2303      	movs	r3, #3
 8003312:	e006      	b.n	8003322 <HAL_UART_Transmit+0x116>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	2220      	movs	r2, #32
 8003318:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800331c:	2300      	movs	r3, #0
 800331e:	e000      	b.n	8003322 <HAL_UART_Transmit+0x116>
  }
  else
  {
    return HAL_BUSY;
 8003320:	2302      	movs	r3, #2
  }
}
 8003322:	4618      	mov	r0, r3
 8003324:	3720      	adds	r7, #32
 8003326:	46bd      	mov	sp, r7
 8003328:	bd80      	pop	{r7, pc}
	...

0800332c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800332c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003330:	b08c      	sub	sp, #48	; 0x30
 8003332:	af00      	add	r7, sp, #0
 8003334:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003336:	2300      	movs	r3, #0
 8003338:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800333c:	697b      	ldr	r3, [r7, #20]
 800333e:	689a      	ldr	r2, [r3, #8]
 8003340:	697b      	ldr	r3, [r7, #20]
 8003342:	691b      	ldr	r3, [r3, #16]
 8003344:	431a      	orrs	r2, r3
 8003346:	697b      	ldr	r3, [r7, #20]
 8003348:	695b      	ldr	r3, [r3, #20]
 800334a:	431a      	orrs	r2, r3
 800334c:	697b      	ldr	r3, [r7, #20]
 800334e:	69db      	ldr	r3, [r3, #28]
 8003350:	4313      	orrs	r3, r2
 8003352:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003354:	697b      	ldr	r3, [r7, #20]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	681a      	ldr	r2, [r3, #0]
 800335a:	4baa      	ldr	r3, [pc, #680]	; (8003604 <UART_SetConfig+0x2d8>)
 800335c:	4013      	ands	r3, r2
 800335e:	697a      	ldr	r2, [r7, #20]
 8003360:	6812      	ldr	r2, [r2, #0]
 8003362:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003364:	430b      	orrs	r3, r1
 8003366:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003368:	697b      	ldr	r3, [r7, #20]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	685b      	ldr	r3, [r3, #4]
 800336e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003372:	697b      	ldr	r3, [r7, #20]
 8003374:	68da      	ldr	r2, [r3, #12]
 8003376:	697b      	ldr	r3, [r7, #20]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	430a      	orrs	r2, r1
 800337c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800337e:	697b      	ldr	r3, [r7, #20]
 8003380:	699b      	ldr	r3, [r3, #24]
 8003382:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003384:	697b      	ldr	r3, [r7, #20]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	4a9f      	ldr	r2, [pc, #636]	; (8003608 <UART_SetConfig+0x2dc>)
 800338a:	4293      	cmp	r3, r2
 800338c:	d004      	beq.n	8003398 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800338e:	697b      	ldr	r3, [r7, #20]
 8003390:	6a1b      	ldr	r3, [r3, #32]
 8003392:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003394:	4313      	orrs	r3, r2
 8003396:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003398:	697b      	ldr	r3, [r7, #20]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	689b      	ldr	r3, [r3, #8]
 800339e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80033a2:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80033a6:	697a      	ldr	r2, [r7, #20]
 80033a8:	6812      	ldr	r2, [r2, #0]
 80033aa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80033ac:	430b      	orrs	r3, r1
 80033ae:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80033b0:	697b      	ldr	r3, [r7, #20]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033b6:	f023 010f 	bic.w	r1, r3, #15
 80033ba:	697b      	ldr	r3, [r7, #20]
 80033bc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80033be:	697b      	ldr	r3, [r7, #20]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	430a      	orrs	r2, r1
 80033c4:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80033c6:	697b      	ldr	r3, [r7, #20]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	4a90      	ldr	r2, [pc, #576]	; (800360c <UART_SetConfig+0x2e0>)
 80033cc:	4293      	cmp	r3, r2
 80033ce:	d125      	bne.n	800341c <UART_SetConfig+0xf0>
 80033d0:	4b8f      	ldr	r3, [pc, #572]	; (8003610 <UART_SetConfig+0x2e4>)
 80033d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033d6:	f003 0303 	and.w	r3, r3, #3
 80033da:	2b03      	cmp	r3, #3
 80033dc:	d81a      	bhi.n	8003414 <UART_SetConfig+0xe8>
 80033de:	a201      	add	r2, pc, #4	; (adr r2, 80033e4 <UART_SetConfig+0xb8>)
 80033e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033e4:	080033f5 	.word	0x080033f5
 80033e8:	08003405 	.word	0x08003405
 80033ec:	080033fd 	.word	0x080033fd
 80033f0:	0800340d 	.word	0x0800340d
 80033f4:	2301      	movs	r3, #1
 80033f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80033fa:	e116      	b.n	800362a <UART_SetConfig+0x2fe>
 80033fc:	2302      	movs	r3, #2
 80033fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003402:	e112      	b.n	800362a <UART_SetConfig+0x2fe>
 8003404:	2304      	movs	r3, #4
 8003406:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800340a:	e10e      	b.n	800362a <UART_SetConfig+0x2fe>
 800340c:	2308      	movs	r3, #8
 800340e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003412:	e10a      	b.n	800362a <UART_SetConfig+0x2fe>
 8003414:	2310      	movs	r3, #16
 8003416:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800341a:	e106      	b.n	800362a <UART_SetConfig+0x2fe>
 800341c:	697b      	ldr	r3, [r7, #20]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	4a7c      	ldr	r2, [pc, #496]	; (8003614 <UART_SetConfig+0x2e8>)
 8003422:	4293      	cmp	r3, r2
 8003424:	d138      	bne.n	8003498 <UART_SetConfig+0x16c>
 8003426:	4b7a      	ldr	r3, [pc, #488]	; (8003610 <UART_SetConfig+0x2e4>)
 8003428:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800342c:	f003 030c 	and.w	r3, r3, #12
 8003430:	2b0c      	cmp	r3, #12
 8003432:	d82d      	bhi.n	8003490 <UART_SetConfig+0x164>
 8003434:	a201      	add	r2, pc, #4	; (adr r2, 800343c <UART_SetConfig+0x110>)
 8003436:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800343a:	bf00      	nop
 800343c:	08003471 	.word	0x08003471
 8003440:	08003491 	.word	0x08003491
 8003444:	08003491 	.word	0x08003491
 8003448:	08003491 	.word	0x08003491
 800344c:	08003481 	.word	0x08003481
 8003450:	08003491 	.word	0x08003491
 8003454:	08003491 	.word	0x08003491
 8003458:	08003491 	.word	0x08003491
 800345c:	08003479 	.word	0x08003479
 8003460:	08003491 	.word	0x08003491
 8003464:	08003491 	.word	0x08003491
 8003468:	08003491 	.word	0x08003491
 800346c:	08003489 	.word	0x08003489
 8003470:	2300      	movs	r3, #0
 8003472:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003476:	e0d8      	b.n	800362a <UART_SetConfig+0x2fe>
 8003478:	2302      	movs	r3, #2
 800347a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800347e:	e0d4      	b.n	800362a <UART_SetConfig+0x2fe>
 8003480:	2304      	movs	r3, #4
 8003482:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003486:	e0d0      	b.n	800362a <UART_SetConfig+0x2fe>
 8003488:	2308      	movs	r3, #8
 800348a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800348e:	e0cc      	b.n	800362a <UART_SetConfig+0x2fe>
 8003490:	2310      	movs	r3, #16
 8003492:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003496:	e0c8      	b.n	800362a <UART_SetConfig+0x2fe>
 8003498:	697b      	ldr	r3, [r7, #20]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	4a5e      	ldr	r2, [pc, #376]	; (8003618 <UART_SetConfig+0x2ec>)
 800349e:	4293      	cmp	r3, r2
 80034a0:	d125      	bne.n	80034ee <UART_SetConfig+0x1c2>
 80034a2:	4b5b      	ldr	r3, [pc, #364]	; (8003610 <UART_SetConfig+0x2e4>)
 80034a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034a8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80034ac:	2b30      	cmp	r3, #48	; 0x30
 80034ae:	d016      	beq.n	80034de <UART_SetConfig+0x1b2>
 80034b0:	2b30      	cmp	r3, #48	; 0x30
 80034b2:	d818      	bhi.n	80034e6 <UART_SetConfig+0x1ba>
 80034b4:	2b20      	cmp	r3, #32
 80034b6:	d00a      	beq.n	80034ce <UART_SetConfig+0x1a2>
 80034b8:	2b20      	cmp	r3, #32
 80034ba:	d814      	bhi.n	80034e6 <UART_SetConfig+0x1ba>
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d002      	beq.n	80034c6 <UART_SetConfig+0x19a>
 80034c0:	2b10      	cmp	r3, #16
 80034c2:	d008      	beq.n	80034d6 <UART_SetConfig+0x1aa>
 80034c4:	e00f      	b.n	80034e6 <UART_SetConfig+0x1ba>
 80034c6:	2300      	movs	r3, #0
 80034c8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80034cc:	e0ad      	b.n	800362a <UART_SetConfig+0x2fe>
 80034ce:	2302      	movs	r3, #2
 80034d0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80034d4:	e0a9      	b.n	800362a <UART_SetConfig+0x2fe>
 80034d6:	2304      	movs	r3, #4
 80034d8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80034dc:	e0a5      	b.n	800362a <UART_SetConfig+0x2fe>
 80034de:	2308      	movs	r3, #8
 80034e0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80034e4:	e0a1      	b.n	800362a <UART_SetConfig+0x2fe>
 80034e6:	2310      	movs	r3, #16
 80034e8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80034ec:	e09d      	b.n	800362a <UART_SetConfig+0x2fe>
 80034ee:	697b      	ldr	r3, [r7, #20]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	4a4a      	ldr	r2, [pc, #296]	; (800361c <UART_SetConfig+0x2f0>)
 80034f4:	4293      	cmp	r3, r2
 80034f6:	d125      	bne.n	8003544 <UART_SetConfig+0x218>
 80034f8:	4b45      	ldr	r3, [pc, #276]	; (8003610 <UART_SetConfig+0x2e4>)
 80034fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034fe:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003502:	2bc0      	cmp	r3, #192	; 0xc0
 8003504:	d016      	beq.n	8003534 <UART_SetConfig+0x208>
 8003506:	2bc0      	cmp	r3, #192	; 0xc0
 8003508:	d818      	bhi.n	800353c <UART_SetConfig+0x210>
 800350a:	2b80      	cmp	r3, #128	; 0x80
 800350c:	d00a      	beq.n	8003524 <UART_SetConfig+0x1f8>
 800350e:	2b80      	cmp	r3, #128	; 0x80
 8003510:	d814      	bhi.n	800353c <UART_SetConfig+0x210>
 8003512:	2b00      	cmp	r3, #0
 8003514:	d002      	beq.n	800351c <UART_SetConfig+0x1f0>
 8003516:	2b40      	cmp	r3, #64	; 0x40
 8003518:	d008      	beq.n	800352c <UART_SetConfig+0x200>
 800351a:	e00f      	b.n	800353c <UART_SetConfig+0x210>
 800351c:	2300      	movs	r3, #0
 800351e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003522:	e082      	b.n	800362a <UART_SetConfig+0x2fe>
 8003524:	2302      	movs	r3, #2
 8003526:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800352a:	e07e      	b.n	800362a <UART_SetConfig+0x2fe>
 800352c:	2304      	movs	r3, #4
 800352e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003532:	e07a      	b.n	800362a <UART_SetConfig+0x2fe>
 8003534:	2308      	movs	r3, #8
 8003536:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800353a:	e076      	b.n	800362a <UART_SetConfig+0x2fe>
 800353c:	2310      	movs	r3, #16
 800353e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003542:	e072      	b.n	800362a <UART_SetConfig+0x2fe>
 8003544:	697b      	ldr	r3, [r7, #20]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	4a35      	ldr	r2, [pc, #212]	; (8003620 <UART_SetConfig+0x2f4>)
 800354a:	4293      	cmp	r3, r2
 800354c:	d12a      	bne.n	80035a4 <UART_SetConfig+0x278>
 800354e:	4b30      	ldr	r3, [pc, #192]	; (8003610 <UART_SetConfig+0x2e4>)
 8003550:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003554:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003558:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800355c:	d01a      	beq.n	8003594 <UART_SetConfig+0x268>
 800355e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003562:	d81b      	bhi.n	800359c <UART_SetConfig+0x270>
 8003564:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003568:	d00c      	beq.n	8003584 <UART_SetConfig+0x258>
 800356a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800356e:	d815      	bhi.n	800359c <UART_SetConfig+0x270>
 8003570:	2b00      	cmp	r3, #0
 8003572:	d003      	beq.n	800357c <UART_SetConfig+0x250>
 8003574:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003578:	d008      	beq.n	800358c <UART_SetConfig+0x260>
 800357a:	e00f      	b.n	800359c <UART_SetConfig+0x270>
 800357c:	2300      	movs	r3, #0
 800357e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003582:	e052      	b.n	800362a <UART_SetConfig+0x2fe>
 8003584:	2302      	movs	r3, #2
 8003586:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800358a:	e04e      	b.n	800362a <UART_SetConfig+0x2fe>
 800358c:	2304      	movs	r3, #4
 800358e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003592:	e04a      	b.n	800362a <UART_SetConfig+0x2fe>
 8003594:	2308      	movs	r3, #8
 8003596:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800359a:	e046      	b.n	800362a <UART_SetConfig+0x2fe>
 800359c:	2310      	movs	r3, #16
 800359e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80035a2:	e042      	b.n	800362a <UART_SetConfig+0x2fe>
 80035a4:	697b      	ldr	r3, [r7, #20]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	4a17      	ldr	r2, [pc, #92]	; (8003608 <UART_SetConfig+0x2dc>)
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d13a      	bne.n	8003624 <UART_SetConfig+0x2f8>
 80035ae:	4b18      	ldr	r3, [pc, #96]	; (8003610 <UART_SetConfig+0x2e4>)
 80035b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035b4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80035b8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80035bc:	d01a      	beq.n	80035f4 <UART_SetConfig+0x2c8>
 80035be:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80035c2:	d81b      	bhi.n	80035fc <UART_SetConfig+0x2d0>
 80035c4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80035c8:	d00c      	beq.n	80035e4 <UART_SetConfig+0x2b8>
 80035ca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80035ce:	d815      	bhi.n	80035fc <UART_SetConfig+0x2d0>
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d003      	beq.n	80035dc <UART_SetConfig+0x2b0>
 80035d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035d8:	d008      	beq.n	80035ec <UART_SetConfig+0x2c0>
 80035da:	e00f      	b.n	80035fc <UART_SetConfig+0x2d0>
 80035dc:	2300      	movs	r3, #0
 80035de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80035e2:	e022      	b.n	800362a <UART_SetConfig+0x2fe>
 80035e4:	2302      	movs	r3, #2
 80035e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80035ea:	e01e      	b.n	800362a <UART_SetConfig+0x2fe>
 80035ec:	2304      	movs	r3, #4
 80035ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80035f2:	e01a      	b.n	800362a <UART_SetConfig+0x2fe>
 80035f4:	2308      	movs	r3, #8
 80035f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80035fa:	e016      	b.n	800362a <UART_SetConfig+0x2fe>
 80035fc:	2310      	movs	r3, #16
 80035fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003602:	e012      	b.n	800362a <UART_SetConfig+0x2fe>
 8003604:	cfff69f3 	.word	0xcfff69f3
 8003608:	40008000 	.word	0x40008000
 800360c:	40013800 	.word	0x40013800
 8003610:	40021000 	.word	0x40021000
 8003614:	40004400 	.word	0x40004400
 8003618:	40004800 	.word	0x40004800
 800361c:	40004c00 	.word	0x40004c00
 8003620:	40005000 	.word	0x40005000
 8003624:	2310      	movs	r3, #16
 8003626:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800362a:	697b      	ldr	r3, [r7, #20]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	4aae      	ldr	r2, [pc, #696]	; (80038e8 <UART_SetConfig+0x5bc>)
 8003630:	4293      	cmp	r3, r2
 8003632:	f040 8097 	bne.w	8003764 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003636:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800363a:	2b08      	cmp	r3, #8
 800363c:	d823      	bhi.n	8003686 <UART_SetConfig+0x35a>
 800363e:	a201      	add	r2, pc, #4	; (adr r2, 8003644 <UART_SetConfig+0x318>)
 8003640:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003644:	08003669 	.word	0x08003669
 8003648:	08003687 	.word	0x08003687
 800364c:	08003671 	.word	0x08003671
 8003650:	08003687 	.word	0x08003687
 8003654:	08003677 	.word	0x08003677
 8003658:	08003687 	.word	0x08003687
 800365c:	08003687 	.word	0x08003687
 8003660:	08003687 	.word	0x08003687
 8003664:	0800367f 	.word	0x0800367f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003668:	f7fe fc96 	bl	8001f98 <HAL_RCC_GetPCLK1Freq>
 800366c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800366e:	e010      	b.n	8003692 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003670:	4b9e      	ldr	r3, [pc, #632]	; (80038ec <UART_SetConfig+0x5c0>)
 8003672:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003674:	e00d      	b.n	8003692 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003676:	f7fe fbf7 	bl	8001e68 <HAL_RCC_GetSysClockFreq>
 800367a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800367c:	e009      	b.n	8003692 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800367e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003682:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003684:	e005      	b.n	8003692 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8003686:	2300      	movs	r3, #0
 8003688:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800368a:	2301      	movs	r3, #1
 800368c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003690:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003694:	2b00      	cmp	r3, #0
 8003696:	f000 8130 	beq.w	80038fa <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800369a:	697b      	ldr	r3, [r7, #20]
 800369c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800369e:	4a94      	ldr	r2, [pc, #592]	; (80038f0 <UART_SetConfig+0x5c4>)
 80036a0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80036a4:	461a      	mov	r2, r3
 80036a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036a8:	fbb3 f3f2 	udiv	r3, r3, r2
 80036ac:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80036ae:	697b      	ldr	r3, [r7, #20]
 80036b0:	685a      	ldr	r2, [r3, #4]
 80036b2:	4613      	mov	r3, r2
 80036b4:	005b      	lsls	r3, r3, #1
 80036b6:	4413      	add	r3, r2
 80036b8:	69ba      	ldr	r2, [r7, #24]
 80036ba:	429a      	cmp	r2, r3
 80036bc:	d305      	bcc.n	80036ca <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80036be:	697b      	ldr	r3, [r7, #20]
 80036c0:	685b      	ldr	r3, [r3, #4]
 80036c2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80036c4:	69ba      	ldr	r2, [r7, #24]
 80036c6:	429a      	cmp	r2, r3
 80036c8:	d903      	bls.n	80036d2 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80036ca:	2301      	movs	r3, #1
 80036cc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80036d0:	e113      	b.n	80038fa <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80036d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036d4:	2200      	movs	r2, #0
 80036d6:	60bb      	str	r3, [r7, #8]
 80036d8:	60fa      	str	r2, [r7, #12]
 80036da:	697b      	ldr	r3, [r7, #20]
 80036dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036de:	4a84      	ldr	r2, [pc, #528]	; (80038f0 <UART_SetConfig+0x5c4>)
 80036e0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80036e4:	b29b      	uxth	r3, r3
 80036e6:	2200      	movs	r2, #0
 80036e8:	603b      	str	r3, [r7, #0]
 80036ea:	607a      	str	r2, [r7, #4]
 80036ec:	e9d7 2300 	ldrd	r2, r3, [r7]
 80036f0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80036f4:	f7fc fd84 	bl	8000200 <__aeabi_uldivmod>
 80036f8:	4602      	mov	r2, r0
 80036fa:	460b      	mov	r3, r1
 80036fc:	4610      	mov	r0, r2
 80036fe:	4619      	mov	r1, r3
 8003700:	f04f 0200 	mov.w	r2, #0
 8003704:	f04f 0300 	mov.w	r3, #0
 8003708:	020b      	lsls	r3, r1, #8
 800370a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800370e:	0202      	lsls	r2, r0, #8
 8003710:	6979      	ldr	r1, [r7, #20]
 8003712:	6849      	ldr	r1, [r1, #4]
 8003714:	0849      	lsrs	r1, r1, #1
 8003716:	2000      	movs	r0, #0
 8003718:	460c      	mov	r4, r1
 800371a:	4605      	mov	r5, r0
 800371c:	eb12 0804 	adds.w	r8, r2, r4
 8003720:	eb43 0905 	adc.w	r9, r3, r5
 8003724:	697b      	ldr	r3, [r7, #20]
 8003726:	685b      	ldr	r3, [r3, #4]
 8003728:	2200      	movs	r2, #0
 800372a:	469a      	mov	sl, r3
 800372c:	4693      	mov	fp, r2
 800372e:	4652      	mov	r2, sl
 8003730:	465b      	mov	r3, fp
 8003732:	4640      	mov	r0, r8
 8003734:	4649      	mov	r1, r9
 8003736:	f7fc fd63 	bl	8000200 <__aeabi_uldivmod>
 800373a:	4602      	mov	r2, r0
 800373c:	460b      	mov	r3, r1
 800373e:	4613      	mov	r3, r2
 8003740:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003742:	6a3b      	ldr	r3, [r7, #32]
 8003744:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003748:	d308      	bcc.n	800375c <UART_SetConfig+0x430>
 800374a:	6a3b      	ldr	r3, [r7, #32]
 800374c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003750:	d204      	bcs.n	800375c <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8003752:	697b      	ldr	r3, [r7, #20]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	6a3a      	ldr	r2, [r7, #32]
 8003758:	60da      	str	r2, [r3, #12]
 800375a:	e0ce      	b.n	80038fa <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800375c:	2301      	movs	r3, #1
 800375e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003762:	e0ca      	b.n	80038fa <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003764:	697b      	ldr	r3, [r7, #20]
 8003766:	69db      	ldr	r3, [r3, #28]
 8003768:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800376c:	d166      	bne.n	800383c <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800376e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003772:	2b08      	cmp	r3, #8
 8003774:	d827      	bhi.n	80037c6 <UART_SetConfig+0x49a>
 8003776:	a201      	add	r2, pc, #4	; (adr r2, 800377c <UART_SetConfig+0x450>)
 8003778:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800377c:	080037a1 	.word	0x080037a1
 8003780:	080037a9 	.word	0x080037a9
 8003784:	080037b1 	.word	0x080037b1
 8003788:	080037c7 	.word	0x080037c7
 800378c:	080037b7 	.word	0x080037b7
 8003790:	080037c7 	.word	0x080037c7
 8003794:	080037c7 	.word	0x080037c7
 8003798:	080037c7 	.word	0x080037c7
 800379c:	080037bf 	.word	0x080037bf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80037a0:	f7fe fbfa 	bl	8001f98 <HAL_RCC_GetPCLK1Freq>
 80037a4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80037a6:	e014      	b.n	80037d2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80037a8:	f7fe fc0c 	bl	8001fc4 <HAL_RCC_GetPCLK2Freq>
 80037ac:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80037ae:	e010      	b.n	80037d2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80037b0:	4b4e      	ldr	r3, [pc, #312]	; (80038ec <UART_SetConfig+0x5c0>)
 80037b2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80037b4:	e00d      	b.n	80037d2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80037b6:	f7fe fb57 	bl	8001e68 <HAL_RCC_GetSysClockFreq>
 80037ba:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80037bc:	e009      	b.n	80037d2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80037be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80037c2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80037c4:	e005      	b.n	80037d2 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 80037c6:	2300      	movs	r3, #0
 80037c8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80037ca:	2301      	movs	r3, #1
 80037cc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80037d0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80037d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	f000 8090 	beq.w	80038fa <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80037da:	697b      	ldr	r3, [r7, #20]
 80037dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037de:	4a44      	ldr	r2, [pc, #272]	; (80038f0 <UART_SetConfig+0x5c4>)
 80037e0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80037e4:	461a      	mov	r2, r3
 80037e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037e8:	fbb3 f3f2 	udiv	r3, r3, r2
 80037ec:	005a      	lsls	r2, r3, #1
 80037ee:	697b      	ldr	r3, [r7, #20]
 80037f0:	685b      	ldr	r3, [r3, #4]
 80037f2:	085b      	lsrs	r3, r3, #1
 80037f4:	441a      	add	r2, r3
 80037f6:	697b      	ldr	r3, [r7, #20]
 80037f8:	685b      	ldr	r3, [r3, #4]
 80037fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80037fe:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003800:	6a3b      	ldr	r3, [r7, #32]
 8003802:	2b0f      	cmp	r3, #15
 8003804:	d916      	bls.n	8003834 <UART_SetConfig+0x508>
 8003806:	6a3b      	ldr	r3, [r7, #32]
 8003808:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800380c:	d212      	bcs.n	8003834 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800380e:	6a3b      	ldr	r3, [r7, #32]
 8003810:	b29b      	uxth	r3, r3
 8003812:	f023 030f 	bic.w	r3, r3, #15
 8003816:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003818:	6a3b      	ldr	r3, [r7, #32]
 800381a:	085b      	lsrs	r3, r3, #1
 800381c:	b29b      	uxth	r3, r3
 800381e:	f003 0307 	and.w	r3, r3, #7
 8003822:	b29a      	uxth	r2, r3
 8003824:	8bfb      	ldrh	r3, [r7, #30]
 8003826:	4313      	orrs	r3, r2
 8003828:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800382a:	697b      	ldr	r3, [r7, #20]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	8bfa      	ldrh	r2, [r7, #30]
 8003830:	60da      	str	r2, [r3, #12]
 8003832:	e062      	b.n	80038fa <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8003834:	2301      	movs	r3, #1
 8003836:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800383a:	e05e      	b.n	80038fa <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800383c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003840:	2b08      	cmp	r3, #8
 8003842:	d828      	bhi.n	8003896 <UART_SetConfig+0x56a>
 8003844:	a201      	add	r2, pc, #4	; (adr r2, 800384c <UART_SetConfig+0x520>)
 8003846:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800384a:	bf00      	nop
 800384c:	08003871 	.word	0x08003871
 8003850:	08003879 	.word	0x08003879
 8003854:	08003881 	.word	0x08003881
 8003858:	08003897 	.word	0x08003897
 800385c:	08003887 	.word	0x08003887
 8003860:	08003897 	.word	0x08003897
 8003864:	08003897 	.word	0x08003897
 8003868:	08003897 	.word	0x08003897
 800386c:	0800388f 	.word	0x0800388f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003870:	f7fe fb92 	bl	8001f98 <HAL_RCC_GetPCLK1Freq>
 8003874:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003876:	e014      	b.n	80038a2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003878:	f7fe fba4 	bl	8001fc4 <HAL_RCC_GetPCLK2Freq>
 800387c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800387e:	e010      	b.n	80038a2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003880:	4b1a      	ldr	r3, [pc, #104]	; (80038ec <UART_SetConfig+0x5c0>)
 8003882:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003884:	e00d      	b.n	80038a2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003886:	f7fe faef 	bl	8001e68 <HAL_RCC_GetSysClockFreq>
 800388a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800388c:	e009      	b.n	80038a2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800388e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003892:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003894:	e005      	b.n	80038a2 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8003896:	2300      	movs	r3, #0
 8003898:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800389a:	2301      	movs	r3, #1
 800389c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80038a0:	bf00      	nop
    }

    if (pclk != 0U)
 80038a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d028      	beq.n	80038fa <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80038a8:	697b      	ldr	r3, [r7, #20]
 80038aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ac:	4a10      	ldr	r2, [pc, #64]	; (80038f0 <UART_SetConfig+0x5c4>)
 80038ae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80038b2:	461a      	mov	r2, r3
 80038b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038b6:	fbb3 f2f2 	udiv	r2, r3, r2
 80038ba:	697b      	ldr	r3, [r7, #20]
 80038bc:	685b      	ldr	r3, [r3, #4]
 80038be:	085b      	lsrs	r3, r3, #1
 80038c0:	441a      	add	r2, r3
 80038c2:	697b      	ldr	r3, [r7, #20]
 80038c4:	685b      	ldr	r3, [r3, #4]
 80038c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80038ca:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80038cc:	6a3b      	ldr	r3, [r7, #32]
 80038ce:	2b0f      	cmp	r3, #15
 80038d0:	d910      	bls.n	80038f4 <UART_SetConfig+0x5c8>
 80038d2:	6a3b      	ldr	r3, [r7, #32]
 80038d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038d8:	d20c      	bcs.n	80038f4 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80038da:	6a3b      	ldr	r3, [r7, #32]
 80038dc:	b29a      	uxth	r2, r3
 80038de:	697b      	ldr	r3, [r7, #20]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	60da      	str	r2, [r3, #12]
 80038e4:	e009      	b.n	80038fa <UART_SetConfig+0x5ce>
 80038e6:	bf00      	nop
 80038e8:	40008000 	.word	0x40008000
 80038ec:	00f42400 	.word	0x00f42400
 80038f0:	080066d4 	.word	0x080066d4
      }
      else
      {
        ret = HAL_ERROR;
 80038f4:	2301      	movs	r3, #1
 80038f6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80038fa:	697b      	ldr	r3, [r7, #20]
 80038fc:	2201      	movs	r2, #1
 80038fe:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8003902:	697b      	ldr	r3, [r7, #20]
 8003904:	2201      	movs	r2, #1
 8003906:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800390a:	697b      	ldr	r3, [r7, #20]
 800390c:	2200      	movs	r2, #0
 800390e:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8003910:	697b      	ldr	r3, [r7, #20]
 8003912:	2200      	movs	r2, #0
 8003914:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8003916:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800391a:	4618      	mov	r0, r3
 800391c:	3730      	adds	r7, #48	; 0x30
 800391e:	46bd      	mov	sp, r7
 8003920:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08003924 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003924:	b480      	push	{r7}
 8003926:	b083      	sub	sp, #12
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003930:	f003 0308 	and.w	r3, r3, #8
 8003934:	2b00      	cmp	r3, #0
 8003936:	d00a      	beq.n	800394e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	685b      	ldr	r3, [r3, #4]
 800393e:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	430a      	orrs	r2, r1
 800394c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003952:	f003 0301 	and.w	r3, r3, #1
 8003956:	2b00      	cmp	r3, #0
 8003958:	d00a      	beq.n	8003970 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	685b      	ldr	r3, [r3, #4]
 8003960:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	430a      	orrs	r2, r1
 800396e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003974:	f003 0302 	and.w	r3, r3, #2
 8003978:	2b00      	cmp	r3, #0
 800397a:	d00a      	beq.n	8003992 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	685b      	ldr	r3, [r3, #4]
 8003982:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	430a      	orrs	r2, r1
 8003990:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003996:	f003 0304 	and.w	r3, r3, #4
 800399a:	2b00      	cmp	r3, #0
 800399c:	d00a      	beq.n	80039b4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	685b      	ldr	r3, [r3, #4]
 80039a4:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	430a      	orrs	r2, r1
 80039b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039b8:	f003 0310 	and.w	r3, r3, #16
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d00a      	beq.n	80039d6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	689b      	ldr	r3, [r3, #8]
 80039c6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	430a      	orrs	r2, r1
 80039d4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039da:	f003 0320 	and.w	r3, r3, #32
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d00a      	beq.n	80039f8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	689b      	ldr	r3, [r3, #8]
 80039e8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	430a      	orrs	r2, r1
 80039f6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d01a      	beq.n	8003a3a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	685b      	ldr	r3, [r3, #4]
 8003a0a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	430a      	orrs	r2, r1
 8003a18:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a1e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003a22:	d10a      	bne.n	8003a3a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	685b      	ldr	r3, [r3, #4]
 8003a2a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	430a      	orrs	r2, r1
 8003a38:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d00a      	beq.n	8003a5c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	685b      	ldr	r3, [r3, #4]
 8003a4c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	430a      	orrs	r2, r1
 8003a5a:	605a      	str	r2, [r3, #4]
  }
}
 8003a5c:	bf00      	nop
 8003a5e:	370c      	adds	r7, #12
 8003a60:	46bd      	mov	sp, r7
 8003a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a66:	4770      	bx	lr

08003a68 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	b098      	sub	sp, #96	; 0x60
 8003a6c:	af02      	add	r7, sp, #8
 8003a6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2200      	movs	r2, #0
 8003a74:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003a78:	f7fd f904 	bl	8000c84 <HAL_GetTick>
 8003a7c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f003 0308 	and.w	r3, r3, #8
 8003a88:	2b08      	cmp	r3, #8
 8003a8a:	d12f      	bne.n	8003aec <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003a8c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003a90:	9300      	str	r3, [sp, #0]
 8003a92:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a94:	2200      	movs	r2, #0
 8003a96:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003a9a:	6878      	ldr	r0, [r7, #4]
 8003a9c:	f000 f88e 	bl	8003bbc <UART_WaitOnFlagUntilTimeout>
 8003aa0:	4603      	mov	r3, r0
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d022      	beq.n	8003aec <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003aac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003aae:	e853 3f00 	ldrex	r3, [r3]
 8003ab2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003ab4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ab6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003aba:	653b      	str	r3, [r7, #80]	; 0x50
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	461a      	mov	r2, r3
 8003ac2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003ac4:	647b      	str	r3, [r7, #68]	; 0x44
 8003ac6:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ac8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003aca:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003acc:	e841 2300 	strex	r3, r2, [r1]
 8003ad0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003ad2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d1e6      	bne.n	8003aa6 <UART_CheckIdleState+0x3e>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2220      	movs	r2, #32
 8003adc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003ae8:	2303      	movs	r3, #3
 8003aea:	e063      	b.n	8003bb4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f003 0304 	and.w	r3, r3, #4
 8003af6:	2b04      	cmp	r3, #4
 8003af8:	d149      	bne.n	8003b8e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003afa:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003afe:	9300      	str	r3, [sp, #0]
 8003b00:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b02:	2200      	movs	r2, #0
 8003b04:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003b08:	6878      	ldr	r0, [r7, #4]
 8003b0a:	f000 f857 	bl	8003bbc <UART_WaitOnFlagUntilTimeout>
 8003b0e:	4603      	mov	r3, r0
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d03c      	beq.n	8003b8e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b1c:	e853 3f00 	ldrex	r3, [r3]
 8003b20:	623b      	str	r3, [r7, #32]
   return(result);
 8003b22:	6a3b      	ldr	r3, [r7, #32]
 8003b24:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003b28:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	461a      	mov	r2, r3
 8003b30:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b32:	633b      	str	r3, [r7, #48]	; 0x30
 8003b34:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b36:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003b38:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b3a:	e841 2300 	strex	r3, r2, [r1]
 8003b3e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003b40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d1e6      	bne.n	8003b14 <UART_CheckIdleState+0xac>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	3308      	adds	r3, #8
 8003b4c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b4e:	693b      	ldr	r3, [r7, #16]
 8003b50:	e853 3f00 	ldrex	r3, [r3]
 8003b54:	60fb      	str	r3, [r7, #12]
   return(result);
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	f023 0301 	bic.w	r3, r3, #1
 8003b5c:	64bb      	str	r3, [r7, #72]	; 0x48
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	3308      	adds	r3, #8
 8003b64:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003b66:	61fa      	str	r2, [r7, #28]
 8003b68:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b6a:	69b9      	ldr	r1, [r7, #24]
 8003b6c:	69fa      	ldr	r2, [r7, #28]
 8003b6e:	e841 2300 	strex	r3, r2, [r1]
 8003b72:	617b      	str	r3, [r7, #20]
   return(result);
 8003b74:	697b      	ldr	r3, [r7, #20]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d1e5      	bne.n	8003b46 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	2220      	movs	r2, #32
 8003b7e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	2200      	movs	r2, #0
 8003b86:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003b8a:	2303      	movs	r3, #3
 8003b8c:	e012      	b.n	8003bb4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	2220      	movs	r2, #32
 8003b92:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	2220      	movs	r2, #32
 8003b9a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	2200      	movs	r2, #0
 8003bae:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8003bb2:	2300      	movs	r3, #0
}
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	3758      	adds	r7, #88	; 0x58
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	bd80      	pop	{r7, pc}

08003bbc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	b084      	sub	sp, #16
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	60f8      	str	r0, [r7, #12]
 8003bc4:	60b9      	str	r1, [r7, #8]
 8003bc6:	603b      	str	r3, [r7, #0]
 8003bc8:	4613      	mov	r3, r2
 8003bca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003bcc:	e049      	b.n	8003c62 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003bce:	69bb      	ldr	r3, [r7, #24]
 8003bd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bd4:	d045      	beq.n	8003c62 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003bd6:	f7fd f855 	bl	8000c84 <HAL_GetTick>
 8003bda:	4602      	mov	r2, r0
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	1ad3      	subs	r3, r2, r3
 8003be0:	69ba      	ldr	r2, [r7, #24]
 8003be2:	429a      	cmp	r2, r3
 8003be4:	d302      	bcc.n	8003bec <UART_WaitOnFlagUntilTimeout+0x30>
 8003be6:	69bb      	ldr	r3, [r7, #24]
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d101      	bne.n	8003bf0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003bec:	2303      	movs	r3, #3
 8003bee:	e048      	b.n	8003c82 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f003 0304 	and.w	r3, r3, #4
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d031      	beq.n	8003c62 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	69db      	ldr	r3, [r3, #28]
 8003c04:	f003 0308 	and.w	r3, r3, #8
 8003c08:	2b08      	cmp	r3, #8
 8003c0a:	d110      	bne.n	8003c2e <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	2208      	movs	r2, #8
 8003c12:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003c14:	68f8      	ldr	r0, [r7, #12]
 8003c16:	f000 f838 	bl	8003c8a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	2208      	movs	r2, #8
 8003c1e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	2200      	movs	r2, #0
 8003c26:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8003c2a:	2301      	movs	r3, #1
 8003c2c:	e029      	b.n	8003c82 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	69db      	ldr	r3, [r3, #28]
 8003c34:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c38:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c3c:	d111      	bne.n	8003c62 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003c46:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003c48:	68f8      	ldr	r0, [r7, #12]
 8003c4a:	f000 f81e 	bl	8003c8a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	2220      	movs	r2, #32
 8003c52:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	2200      	movs	r2, #0
 8003c5a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8003c5e:	2303      	movs	r3, #3
 8003c60:	e00f      	b.n	8003c82 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	69da      	ldr	r2, [r3, #28]
 8003c68:	68bb      	ldr	r3, [r7, #8]
 8003c6a:	4013      	ands	r3, r2
 8003c6c:	68ba      	ldr	r2, [r7, #8]
 8003c6e:	429a      	cmp	r2, r3
 8003c70:	bf0c      	ite	eq
 8003c72:	2301      	moveq	r3, #1
 8003c74:	2300      	movne	r3, #0
 8003c76:	b2db      	uxtb	r3, r3
 8003c78:	461a      	mov	r2, r3
 8003c7a:	79fb      	ldrb	r3, [r7, #7]
 8003c7c:	429a      	cmp	r2, r3
 8003c7e:	d0a6      	beq.n	8003bce <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003c80:	2300      	movs	r3, #0
}
 8003c82:	4618      	mov	r0, r3
 8003c84:	3710      	adds	r7, #16
 8003c86:	46bd      	mov	sp, r7
 8003c88:	bd80      	pop	{r7, pc}

08003c8a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003c8a:	b480      	push	{r7}
 8003c8c:	b095      	sub	sp, #84	; 0x54
 8003c8e:	af00      	add	r7, sp, #0
 8003c90:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c9a:	e853 3f00 	ldrex	r3, [r3]
 8003c9e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003ca0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ca2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003ca6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	461a      	mov	r2, r3
 8003cae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003cb0:	643b      	str	r3, [r7, #64]	; 0x40
 8003cb2:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cb4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003cb6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003cb8:	e841 2300 	strex	r3, r2, [r1]
 8003cbc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003cbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d1e6      	bne.n	8003c92 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	3308      	adds	r3, #8
 8003cca:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ccc:	6a3b      	ldr	r3, [r7, #32]
 8003cce:	e853 3f00 	ldrex	r3, [r3]
 8003cd2:	61fb      	str	r3, [r7, #28]
   return(result);
 8003cd4:	69fb      	ldr	r3, [r7, #28]
 8003cd6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003cda:	f023 0301 	bic.w	r3, r3, #1
 8003cde:	64bb      	str	r3, [r7, #72]	; 0x48
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	3308      	adds	r3, #8
 8003ce6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003ce8:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003cea:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003cee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003cf0:	e841 2300 	strex	r3, r2, [r1]
 8003cf4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d1e3      	bne.n	8003cc4 <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003d00:	2b01      	cmp	r3, #1
 8003d02:	d118      	bne.n	8003d36 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	e853 3f00 	ldrex	r3, [r3]
 8003d10:	60bb      	str	r3, [r7, #8]
   return(result);
 8003d12:	68bb      	ldr	r3, [r7, #8]
 8003d14:	f023 0310 	bic.w	r3, r3, #16
 8003d18:	647b      	str	r3, [r7, #68]	; 0x44
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	461a      	mov	r2, r3
 8003d20:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d22:	61bb      	str	r3, [r7, #24]
 8003d24:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d26:	6979      	ldr	r1, [r7, #20]
 8003d28:	69ba      	ldr	r2, [r7, #24]
 8003d2a:	e841 2300 	strex	r3, r2, [r1]
 8003d2e:	613b      	str	r3, [r7, #16]
   return(result);
 8003d30:	693b      	ldr	r3, [r7, #16]
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d1e6      	bne.n	8003d04 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	2220      	movs	r2, #32
 8003d3a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	2200      	movs	r2, #0
 8003d42:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2200      	movs	r2, #0
 8003d48:	675a      	str	r2, [r3, #116]	; 0x74
}
 8003d4a:	bf00      	nop
 8003d4c:	3754      	adds	r7, #84	; 0x54
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d54:	4770      	bx	lr

08003d56 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8003d56:	b480      	push	{r7}
 8003d58:	b085      	sub	sp, #20
 8003d5a:	af00      	add	r7, sp, #0
 8003d5c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8003d64:	2b01      	cmp	r3, #1
 8003d66:	d101      	bne.n	8003d6c <HAL_UARTEx_DisableFifoMode+0x16>
 8003d68:	2302      	movs	r3, #2
 8003d6a:	e027      	b.n	8003dbc <HAL_UARTEx_DisableFifoMode+0x66>
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2201      	movs	r2, #1
 8003d70:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2224      	movs	r2, #36	; 0x24
 8003d78:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	681a      	ldr	r2, [r3, #0]
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f022 0201 	bic.w	r2, r2, #1
 8003d92:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8003d9a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2200      	movs	r2, #0
 8003da0:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	68fa      	ldr	r2, [r7, #12]
 8003da8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	2220      	movs	r2, #32
 8003dae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	2200      	movs	r2, #0
 8003db6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8003dba:	2300      	movs	r3, #0
}
 8003dbc:	4618      	mov	r0, r3
 8003dbe:	3714      	adds	r7, #20
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc6:	4770      	bx	lr

08003dc8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b084      	sub	sp, #16
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
 8003dd0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8003dd8:	2b01      	cmp	r3, #1
 8003dda:	d101      	bne.n	8003de0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8003ddc:	2302      	movs	r3, #2
 8003dde:	e02d      	b.n	8003e3c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2201      	movs	r2, #1
 8003de4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2224      	movs	r2, #36	; 0x24
 8003dec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	681a      	ldr	r2, [r3, #0]
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f022 0201 	bic.w	r2, r2, #1
 8003e06:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	689b      	ldr	r3, [r3, #8]
 8003e0e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	683a      	ldr	r2, [r7, #0]
 8003e18:	430a      	orrs	r2, r1
 8003e1a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003e1c:	6878      	ldr	r0, [r7, #4]
 8003e1e:	f000 f84f 	bl	8003ec0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	68fa      	ldr	r2, [r7, #12]
 8003e28:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	2220      	movs	r2, #32
 8003e2e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	2200      	movs	r2, #0
 8003e36:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8003e3a:	2300      	movs	r3, #0
}
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	3710      	adds	r7, #16
 8003e40:	46bd      	mov	sp, r7
 8003e42:	bd80      	pop	{r7, pc}

08003e44 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b084      	sub	sp, #16
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
 8003e4c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8003e54:	2b01      	cmp	r3, #1
 8003e56:	d101      	bne.n	8003e5c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8003e58:	2302      	movs	r3, #2
 8003e5a:	e02d      	b.n	8003eb8 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2201      	movs	r2, #1
 8003e60:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2224      	movs	r2, #36	; 0x24
 8003e68:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	681a      	ldr	r2, [r3, #0]
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f022 0201 	bic.w	r2, r2, #1
 8003e82:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	689b      	ldr	r3, [r3, #8]
 8003e8a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	683a      	ldr	r2, [r7, #0]
 8003e94:	430a      	orrs	r2, r1
 8003e96:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003e98:	6878      	ldr	r0, [r7, #4]
 8003e9a:	f000 f811 	bl	8003ec0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	68fa      	ldr	r2, [r7, #12]
 8003ea4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	2220      	movs	r2, #32
 8003eaa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8003eb6:	2300      	movs	r3, #0
}
 8003eb8:	4618      	mov	r0, r3
 8003eba:	3710      	adds	r7, #16
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	bd80      	pop	{r7, pc}

08003ec0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8003ec0:	b480      	push	{r7}
 8003ec2:	b085      	sub	sp, #20
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d108      	bne.n	8003ee2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2201      	movs	r2, #1
 8003ed4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2201      	movs	r2, #1
 8003edc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8003ee0:	e031      	b.n	8003f46 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8003ee2:	2308      	movs	r3, #8
 8003ee4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8003ee6:	2308      	movs	r3, #8
 8003ee8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	689b      	ldr	r3, [r3, #8]
 8003ef0:	0e5b      	lsrs	r3, r3, #25
 8003ef2:	b2db      	uxtb	r3, r3
 8003ef4:	f003 0307 	and.w	r3, r3, #7
 8003ef8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	689b      	ldr	r3, [r3, #8]
 8003f00:	0f5b      	lsrs	r3, r3, #29
 8003f02:	b2db      	uxtb	r3, r3
 8003f04:	f003 0307 	and.w	r3, r3, #7
 8003f08:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003f0a:	7bbb      	ldrb	r3, [r7, #14]
 8003f0c:	7b3a      	ldrb	r2, [r7, #12]
 8003f0e:	4911      	ldr	r1, [pc, #68]	; (8003f54 <UARTEx_SetNbDataToProcess+0x94>)
 8003f10:	5c8a      	ldrb	r2, [r1, r2]
 8003f12:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8003f16:	7b3a      	ldrb	r2, [r7, #12]
 8003f18:	490f      	ldr	r1, [pc, #60]	; (8003f58 <UARTEx_SetNbDataToProcess+0x98>)
 8003f1a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003f1c:	fb93 f3f2 	sdiv	r3, r3, r2
 8003f20:	b29a      	uxth	r2, r3
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003f28:	7bfb      	ldrb	r3, [r7, #15]
 8003f2a:	7b7a      	ldrb	r2, [r7, #13]
 8003f2c:	4909      	ldr	r1, [pc, #36]	; (8003f54 <UARTEx_SetNbDataToProcess+0x94>)
 8003f2e:	5c8a      	ldrb	r2, [r1, r2]
 8003f30:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8003f34:	7b7a      	ldrb	r2, [r7, #13]
 8003f36:	4908      	ldr	r1, [pc, #32]	; (8003f58 <UARTEx_SetNbDataToProcess+0x98>)
 8003f38:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003f3a:	fb93 f3f2 	sdiv	r3, r3, r2
 8003f3e:	b29a      	uxth	r2, r3
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8003f46:	bf00      	nop
 8003f48:	3714      	adds	r7, #20
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f50:	4770      	bx	lr
 8003f52:	bf00      	nop
 8003f54:	080066ec 	.word	0x080066ec
 8003f58:	080066f4 	.word	0x080066f4

08003f5c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003f5c:	b480      	push	{r7}
 8003f5e:	b083      	sub	sp, #12
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	f103 0208 	add.w	r2, r3, #8
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	f04f 32ff 	mov.w	r2, #4294967295
 8003f74:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	f103 0208 	add.w	r2, r3, #8
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	f103 0208 	add.w	r2, r3, #8
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003f90:	bf00      	nop
 8003f92:	370c      	adds	r7, #12
 8003f94:	46bd      	mov	sp, r7
 8003f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9a:	4770      	bx	lr

08003f9c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003f9c:	b480      	push	{r7}
 8003f9e:	b083      	sub	sp, #12
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003faa:	bf00      	nop
 8003fac:	370c      	adds	r7, #12
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb4:	4770      	bx	lr

08003fb6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003fb6:	b480      	push	{r7}
 8003fb8:	b085      	sub	sp, #20
 8003fba:	af00      	add	r7, sp, #0
 8003fbc:	6078      	str	r0, [r7, #4]
 8003fbe:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	685b      	ldr	r3, [r3, #4]
 8003fc4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003fc6:	683b      	ldr	r3, [r7, #0]
 8003fc8:	68fa      	ldr	r2, [r7, #12]
 8003fca:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	689a      	ldr	r2, [r3, #8]
 8003fd0:	683b      	ldr	r3, [r7, #0]
 8003fd2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	689b      	ldr	r3, [r3, #8]
 8003fd8:	683a      	ldr	r2, [r7, #0]
 8003fda:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	683a      	ldr	r2, [r7, #0]
 8003fe0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003fe2:	683b      	ldr	r3, [r7, #0]
 8003fe4:	687a      	ldr	r2, [r7, #4]
 8003fe6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	1c5a      	adds	r2, r3, #1
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	601a      	str	r2, [r3, #0]
}
 8003ff2:	bf00      	nop
 8003ff4:	3714      	adds	r7, #20
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffc:	4770      	bx	lr

08003ffe <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003ffe:	b480      	push	{r7}
 8004000:	b085      	sub	sp, #20
 8004002:	af00      	add	r7, sp, #0
 8004004:	6078      	str	r0, [r7, #4]
 8004006:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800400e:	68bb      	ldr	r3, [r7, #8]
 8004010:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004014:	d103      	bne.n	800401e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	691b      	ldr	r3, [r3, #16]
 800401a:	60fb      	str	r3, [r7, #12]
 800401c:	e00c      	b.n	8004038 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	3308      	adds	r3, #8
 8004022:	60fb      	str	r3, [r7, #12]
 8004024:	e002      	b.n	800402c <vListInsert+0x2e>
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	685b      	ldr	r3, [r3, #4]
 800402a:	60fb      	str	r3, [r7, #12]
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	685b      	ldr	r3, [r3, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	68ba      	ldr	r2, [r7, #8]
 8004034:	429a      	cmp	r2, r3
 8004036:	d2f6      	bcs.n	8004026 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	685a      	ldr	r2, [r3, #4]
 800403c:	683b      	ldr	r3, [r7, #0]
 800403e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	685b      	ldr	r3, [r3, #4]
 8004044:	683a      	ldr	r2, [r7, #0]
 8004046:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004048:	683b      	ldr	r3, [r7, #0]
 800404a:	68fa      	ldr	r2, [r7, #12]
 800404c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	683a      	ldr	r2, [r7, #0]
 8004052:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004054:	683b      	ldr	r3, [r7, #0]
 8004056:	687a      	ldr	r2, [r7, #4]
 8004058:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	1c5a      	adds	r2, r3, #1
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	601a      	str	r2, [r3, #0]
}
 8004064:	bf00      	nop
 8004066:	3714      	adds	r7, #20
 8004068:	46bd      	mov	sp, r7
 800406a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406e:	4770      	bx	lr

08004070 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004070:	b480      	push	{r7}
 8004072:	b085      	sub	sp, #20
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	691b      	ldr	r3, [r3, #16]
 800407c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	685b      	ldr	r3, [r3, #4]
 8004082:	687a      	ldr	r2, [r7, #4]
 8004084:	6892      	ldr	r2, [r2, #8]
 8004086:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	689b      	ldr	r3, [r3, #8]
 800408c:	687a      	ldr	r2, [r7, #4]
 800408e:	6852      	ldr	r2, [r2, #4]
 8004090:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	685b      	ldr	r3, [r3, #4]
 8004096:	687a      	ldr	r2, [r7, #4]
 8004098:	429a      	cmp	r2, r3
 800409a:	d103      	bne.n	80040a4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	689a      	ldr	r2, [r3, #8]
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2200      	movs	r2, #0
 80040a8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	1e5a      	subs	r2, r3, #1
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	681b      	ldr	r3, [r3, #0]
}
 80040b8:	4618      	mov	r0, r3
 80040ba:	3714      	adds	r7, #20
 80040bc:	46bd      	mov	sp, r7
 80040be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c2:	4770      	bx	lr

080040c4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80040c4:	b580      	push	{r7, lr}
 80040c6:	b084      	sub	sp, #16
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
 80040cc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d10a      	bne.n	80040ee <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80040d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040dc:	f383 8811 	msr	BASEPRI, r3
 80040e0:	f3bf 8f6f 	isb	sy
 80040e4:	f3bf 8f4f 	dsb	sy
 80040e8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80040ea:	bf00      	nop
 80040ec:	e7fe      	b.n	80040ec <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80040ee:	f001 ff61 	bl	8005fb4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	681a      	ldr	r2, [r3, #0]
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040fa:	68f9      	ldr	r1, [r7, #12]
 80040fc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80040fe:	fb01 f303 	mul.w	r3, r1, r3
 8004102:	441a      	add	r2, r3
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	2200      	movs	r2, #0
 800410c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	681a      	ldr	r2, [r3, #0]
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	681a      	ldr	r2, [r3, #0]
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800411e:	3b01      	subs	r3, #1
 8004120:	68f9      	ldr	r1, [r7, #12]
 8004122:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004124:	fb01 f303 	mul.w	r3, r1, r3
 8004128:	441a      	add	r2, r3
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	22ff      	movs	r2, #255	; 0xff
 8004132:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	22ff      	movs	r2, #255	; 0xff
 800413a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800413e:	683b      	ldr	r3, [r7, #0]
 8004140:	2b00      	cmp	r3, #0
 8004142:	d114      	bne.n	800416e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	691b      	ldr	r3, [r3, #16]
 8004148:	2b00      	cmp	r3, #0
 800414a:	d01a      	beq.n	8004182 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	3310      	adds	r3, #16
 8004150:	4618      	mov	r0, r3
 8004152:	f001 f807 	bl	8005164 <xTaskRemoveFromEventList>
 8004156:	4603      	mov	r3, r0
 8004158:	2b00      	cmp	r3, #0
 800415a:	d012      	beq.n	8004182 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800415c:	4b0c      	ldr	r3, [pc, #48]	; (8004190 <xQueueGenericReset+0xcc>)
 800415e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004162:	601a      	str	r2, [r3, #0]
 8004164:	f3bf 8f4f 	dsb	sy
 8004168:	f3bf 8f6f 	isb	sy
 800416c:	e009      	b.n	8004182 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	3310      	adds	r3, #16
 8004172:	4618      	mov	r0, r3
 8004174:	f7ff fef2 	bl	8003f5c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	3324      	adds	r3, #36	; 0x24
 800417c:	4618      	mov	r0, r3
 800417e:	f7ff feed 	bl	8003f5c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004182:	f001 ff47 	bl	8006014 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004186:	2301      	movs	r3, #1
}
 8004188:	4618      	mov	r0, r3
 800418a:	3710      	adds	r7, #16
 800418c:	46bd      	mov	sp, r7
 800418e:	bd80      	pop	{r7, pc}
 8004190:	e000ed04 	.word	0xe000ed04

08004194 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004194:	b580      	push	{r7, lr}
 8004196:	b08a      	sub	sp, #40	; 0x28
 8004198:	af02      	add	r7, sp, #8
 800419a:	60f8      	str	r0, [r7, #12]
 800419c:	60b9      	str	r1, [r7, #8]
 800419e:	4613      	mov	r3, r2
 80041a0:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d10a      	bne.n	80041be <xQueueGenericCreate+0x2a>
	__asm volatile
 80041a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041ac:	f383 8811 	msr	BASEPRI, r3
 80041b0:	f3bf 8f6f 	isb	sy
 80041b4:	f3bf 8f4f 	dsb	sy
 80041b8:	613b      	str	r3, [r7, #16]
}
 80041ba:	bf00      	nop
 80041bc:	e7fe      	b.n	80041bc <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80041be:	68bb      	ldr	r3, [r7, #8]
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d102      	bne.n	80041ca <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80041c4:	2300      	movs	r3, #0
 80041c6:	61fb      	str	r3, [r7, #28]
 80041c8:	e004      	b.n	80041d4 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	68ba      	ldr	r2, [r7, #8]
 80041ce:	fb02 f303 	mul.w	r3, r2, r3
 80041d2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80041d4:	69fb      	ldr	r3, [r7, #28]
 80041d6:	3348      	adds	r3, #72	; 0x48
 80041d8:	4618      	mov	r0, r3
 80041da:	f002 f80d 	bl	80061f8 <pvPortMalloc>
 80041de:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80041e0:	69bb      	ldr	r3, [r7, #24]
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d00d      	beq.n	8004202 <xQueueGenericCreate+0x6e>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80041e6:	69bb      	ldr	r3, [r7, #24]
 80041e8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80041ea:	697b      	ldr	r3, [r7, #20]
 80041ec:	3348      	adds	r3, #72	; 0x48
 80041ee:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80041f0:	79fa      	ldrb	r2, [r7, #7]
 80041f2:	69bb      	ldr	r3, [r7, #24]
 80041f4:	9300      	str	r3, [sp, #0]
 80041f6:	4613      	mov	r3, r2
 80041f8:	697a      	ldr	r2, [r7, #20]
 80041fa:	68b9      	ldr	r1, [r7, #8]
 80041fc:	68f8      	ldr	r0, [r7, #12]
 80041fe:	f000 f805 	bl	800420c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004202:	69bb      	ldr	r3, [r7, #24]
	}
 8004204:	4618      	mov	r0, r3
 8004206:	3720      	adds	r7, #32
 8004208:	46bd      	mov	sp, r7
 800420a:	bd80      	pop	{r7, pc}

0800420c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800420c:	b580      	push	{r7, lr}
 800420e:	b084      	sub	sp, #16
 8004210:	af00      	add	r7, sp, #0
 8004212:	60f8      	str	r0, [r7, #12]
 8004214:	60b9      	str	r1, [r7, #8]
 8004216:	607a      	str	r2, [r7, #4]
 8004218:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800421a:	68bb      	ldr	r3, [r7, #8]
 800421c:	2b00      	cmp	r3, #0
 800421e:	d103      	bne.n	8004228 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004220:	69bb      	ldr	r3, [r7, #24]
 8004222:	69ba      	ldr	r2, [r7, #24]
 8004224:	601a      	str	r2, [r3, #0]
 8004226:	e002      	b.n	800422e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004228:	69bb      	ldr	r3, [r7, #24]
 800422a:	687a      	ldr	r2, [r7, #4]
 800422c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800422e:	69bb      	ldr	r3, [r7, #24]
 8004230:	68fa      	ldr	r2, [r7, #12]
 8004232:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004234:	69bb      	ldr	r3, [r7, #24]
 8004236:	68ba      	ldr	r2, [r7, #8]
 8004238:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800423a:	2101      	movs	r1, #1
 800423c:	69b8      	ldr	r0, [r7, #24]
 800423e:	f7ff ff41 	bl	80040c4 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004242:	bf00      	nop
 8004244:	3710      	adds	r7, #16
 8004246:	46bd      	mov	sp, r7
 8004248:	bd80      	pop	{r7, pc}
	...

0800424c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800424c:	b580      	push	{r7, lr}
 800424e:	b08e      	sub	sp, #56	; 0x38
 8004250:	af00      	add	r7, sp, #0
 8004252:	60f8      	str	r0, [r7, #12]
 8004254:	60b9      	str	r1, [r7, #8]
 8004256:	607a      	str	r2, [r7, #4]
 8004258:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800425a:	2300      	movs	r3, #0
 800425c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004262:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004264:	2b00      	cmp	r3, #0
 8004266:	d10a      	bne.n	800427e <xQueueGenericSend+0x32>
	__asm volatile
 8004268:	f04f 0350 	mov.w	r3, #80	; 0x50
 800426c:	f383 8811 	msr	BASEPRI, r3
 8004270:	f3bf 8f6f 	isb	sy
 8004274:	f3bf 8f4f 	dsb	sy
 8004278:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800427a:	bf00      	nop
 800427c:	e7fe      	b.n	800427c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800427e:	68bb      	ldr	r3, [r7, #8]
 8004280:	2b00      	cmp	r3, #0
 8004282:	d103      	bne.n	800428c <xQueueGenericSend+0x40>
 8004284:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004286:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004288:	2b00      	cmp	r3, #0
 800428a:	d101      	bne.n	8004290 <xQueueGenericSend+0x44>
 800428c:	2301      	movs	r3, #1
 800428e:	e000      	b.n	8004292 <xQueueGenericSend+0x46>
 8004290:	2300      	movs	r3, #0
 8004292:	2b00      	cmp	r3, #0
 8004294:	d10a      	bne.n	80042ac <xQueueGenericSend+0x60>
	__asm volatile
 8004296:	f04f 0350 	mov.w	r3, #80	; 0x50
 800429a:	f383 8811 	msr	BASEPRI, r3
 800429e:	f3bf 8f6f 	isb	sy
 80042a2:	f3bf 8f4f 	dsb	sy
 80042a6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80042a8:	bf00      	nop
 80042aa:	e7fe      	b.n	80042aa <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80042ac:	683b      	ldr	r3, [r7, #0]
 80042ae:	2b02      	cmp	r3, #2
 80042b0:	d103      	bne.n	80042ba <xQueueGenericSend+0x6e>
 80042b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042b6:	2b01      	cmp	r3, #1
 80042b8:	d101      	bne.n	80042be <xQueueGenericSend+0x72>
 80042ba:	2301      	movs	r3, #1
 80042bc:	e000      	b.n	80042c0 <xQueueGenericSend+0x74>
 80042be:	2300      	movs	r3, #0
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d10a      	bne.n	80042da <xQueueGenericSend+0x8e>
	__asm volatile
 80042c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042c8:	f383 8811 	msr	BASEPRI, r3
 80042cc:	f3bf 8f6f 	isb	sy
 80042d0:	f3bf 8f4f 	dsb	sy
 80042d4:	623b      	str	r3, [r7, #32]
}
 80042d6:	bf00      	nop
 80042d8:	e7fe      	b.n	80042d8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80042da:	f001 f8cf 	bl	800547c <xTaskGetSchedulerState>
 80042de:	4603      	mov	r3, r0
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d102      	bne.n	80042ea <xQueueGenericSend+0x9e>
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d101      	bne.n	80042ee <xQueueGenericSend+0xa2>
 80042ea:	2301      	movs	r3, #1
 80042ec:	e000      	b.n	80042f0 <xQueueGenericSend+0xa4>
 80042ee:	2300      	movs	r3, #0
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d10a      	bne.n	800430a <xQueueGenericSend+0xbe>
	__asm volatile
 80042f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042f8:	f383 8811 	msr	BASEPRI, r3
 80042fc:	f3bf 8f6f 	isb	sy
 8004300:	f3bf 8f4f 	dsb	sy
 8004304:	61fb      	str	r3, [r7, #28]
}
 8004306:	bf00      	nop
 8004308:	e7fe      	b.n	8004308 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800430a:	f001 fe53 	bl	8005fb4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800430e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004310:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004312:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004314:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004316:	429a      	cmp	r2, r3
 8004318:	d302      	bcc.n	8004320 <xQueueGenericSend+0xd4>
 800431a:	683b      	ldr	r3, [r7, #0]
 800431c:	2b02      	cmp	r3, #2
 800431e:	d129      	bne.n	8004374 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004320:	683a      	ldr	r2, [r7, #0]
 8004322:	68b9      	ldr	r1, [r7, #8]
 8004324:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004326:	f000 fa07 	bl	8004738 <prvCopyDataToQueue>
 800432a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800432c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800432e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004330:	2b00      	cmp	r3, #0
 8004332:	d010      	beq.n	8004356 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004334:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004336:	3324      	adds	r3, #36	; 0x24
 8004338:	4618      	mov	r0, r3
 800433a:	f000 ff13 	bl	8005164 <xTaskRemoveFromEventList>
 800433e:	4603      	mov	r3, r0
 8004340:	2b00      	cmp	r3, #0
 8004342:	d013      	beq.n	800436c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004344:	4b3f      	ldr	r3, [pc, #252]	; (8004444 <xQueueGenericSend+0x1f8>)
 8004346:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800434a:	601a      	str	r2, [r3, #0]
 800434c:	f3bf 8f4f 	dsb	sy
 8004350:	f3bf 8f6f 	isb	sy
 8004354:	e00a      	b.n	800436c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004356:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004358:	2b00      	cmp	r3, #0
 800435a:	d007      	beq.n	800436c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800435c:	4b39      	ldr	r3, [pc, #228]	; (8004444 <xQueueGenericSend+0x1f8>)
 800435e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004362:	601a      	str	r2, [r3, #0]
 8004364:	f3bf 8f4f 	dsb	sy
 8004368:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800436c:	f001 fe52 	bl	8006014 <vPortExitCritical>
				return pdPASS;
 8004370:	2301      	movs	r3, #1
 8004372:	e063      	b.n	800443c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2b00      	cmp	r3, #0
 8004378:	d103      	bne.n	8004382 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800437a:	f001 fe4b 	bl	8006014 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800437e:	2300      	movs	r3, #0
 8004380:	e05c      	b.n	800443c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004382:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004384:	2b00      	cmp	r3, #0
 8004386:	d106      	bne.n	8004396 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004388:	f107 0314 	add.w	r3, r7, #20
 800438c:	4618      	mov	r0, r3
 800438e:	f000 ff4b 	bl	8005228 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004392:	2301      	movs	r3, #1
 8004394:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004396:	f001 fe3d 	bl	8006014 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800439a:	f000 fcc5 	bl	8004d28 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800439e:	f001 fe09 	bl	8005fb4 <vPortEnterCritical>
 80043a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043a4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80043a8:	b25b      	sxtb	r3, r3
 80043aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043ae:	d103      	bne.n	80043b8 <xQueueGenericSend+0x16c>
 80043b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043b2:	2200      	movs	r2, #0
 80043b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80043b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043ba:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80043be:	b25b      	sxtb	r3, r3
 80043c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043c4:	d103      	bne.n	80043ce <xQueueGenericSend+0x182>
 80043c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043c8:	2200      	movs	r2, #0
 80043ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80043ce:	f001 fe21 	bl	8006014 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80043d2:	1d3a      	adds	r2, r7, #4
 80043d4:	f107 0314 	add.w	r3, r7, #20
 80043d8:	4611      	mov	r1, r2
 80043da:	4618      	mov	r0, r3
 80043dc:	f000 ff3a 	bl	8005254 <xTaskCheckForTimeOut>
 80043e0:	4603      	mov	r3, r0
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d124      	bne.n	8004430 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80043e6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80043e8:	f000 fa9e 	bl	8004928 <prvIsQueueFull>
 80043ec:	4603      	mov	r3, r0
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d018      	beq.n	8004424 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80043f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043f4:	3310      	adds	r3, #16
 80043f6:	687a      	ldr	r2, [r7, #4]
 80043f8:	4611      	mov	r1, r2
 80043fa:	4618      	mov	r0, r3
 80043fc:	f000 fe62 	bl	80050c4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004400:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004402:	f000 fa29 	bl	8004858 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004406:	f000 fc9d 	bl	8004d44 <xTaskResumeAll>
 800440a:	4603      	mov	r3, r0
 800440c:	2b00      	cmp	r3, #0
 800440e:	f47f af7c 	bne.w	800430a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8004412:	4b0c      	ldr	r3, [pc, #48]	; (8004444 <xQueueGenericSend+0x1f8>)
 8004414:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004418:	601a      	str	r2, [r3, #0]
 800441a:	f3bf 8f4f 	dsb	sy
 800441e:	f3bf 8f6f 	isb	sy
 8004422:	e772      	b.n	800430a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004424:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004426:	f000 fa17 	bl	8004858 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800442a:	f000 fc8b 	bl	8004d44 <xTaskResumeAll>
 800442e:	e76c      	b.n	800430a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004430:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004432:	f000 fa11 	bl	8004858 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004436:	f000 fc85 	bl	8004d44 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800443a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800443c:	4618      	mov	r0, r3
 800443e:	3738      	adds	r7, #56	; 0x38
 8004440:	46bd      	mov	sp, r7
 8004442:	bd80      	pop	{r7, pc}
 8004444:	e000ed04 	.word	0xe000ed04

08004448 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004448:	b580      	push	{r7, lr}
 800444a:	b08e      	sub	sp, #56	; 0x38
 800444c:	af00      	add	r7, sp, #0
 800444e:	60f8      	str	r0, [r7, #12]
 8004450:	60b9      	str	r1, [r7, #8]
 8004452:	607a      	str	r2, [r7, #4]
 8004454:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800445a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800445c:	2b00      	cmp	r3, #0
 800445e:	d10a      	bne.n	8004476 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8004460:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004464:	f383 8811 	msr	BASEPRI, r3
 8004468:	f3bf 8f6f 	isb	sy
 800446c:	f3bf 8f4f 	dsb	sy
 8004470:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004472:	bf00      	nop
 8004474:	e7fe      	b.n	8004474 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004476:	68bb      	ldr	r3, [r7, #8]
 8004478:	2b00      	cmp	r3, #0
 800447a:	d103      	bne.n	8004484 <xQueueGenericSendFromISR+0x3c>
 800447c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800447e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004480:	2b00      	cmp	r3, #0
 8004482:	d101      	bne.n	8004488 <xQueueGenericSendFromISR+0x40>
 8004484:	2301      	movs	r3, #1
 8004486:	e000      	b.n	800448a <xQueueGenericSendFromISR+0x42>
 8004488:	2300      	movs	r3, #0
 800448a:	2b00      	cmp	r3, #0
 800448c:	d10a      	bne.n	80044a4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800448e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004492:	f383 8811 	msr	BASEPRI, r3
 8004496:	f3bf 8f6f 	isb	sy
 800449a:	f3bf 8f4f 	dsb	sy
 800449e:	623b      	str	r3, [r7, #32]
}
 80044a0:	bf00      	nop
 80044a2:	e7fe      	b.n	80044a2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80044a4:	683b      	ldr	r3, [r7, #0]
 80044a6:	2b02      	cmp	r3, #2
 80044a8:	d103      	bne.n	80044b2 <xQueueGenericSendFromISR+0x6a>
 80044aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044ae:	2b01      	cmp	r3, #1
 80044b0:	d101      	bne.n	80044b6 <xQueueGenericSendFromISR+0x6e>
 80044b2:	2301      	movs	r3, #1
 80044b4:	e000      	b.n	80044b8 <xQueueGenericSendFromISR+0x70>
 80044b6:	2300      	movs	r3, #0
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d10a      	bne.n	80044d2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80044bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044c0:	f383 8811 	msr	BASEPRI, r3
 80044c4:	f3bf 8f6f 	isb	sy
 80044c8:	f3bf 8f4f 	dsb	sy
 80044cc:	61fb      	str	r3, [r7, #28]
}
 80044ce:	bf00      	nop
 80044d0:	e7fe      	b.n	80044d0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80044d2:	f001 fe51 	bl	8006178 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80044d6:	f3ef 8211 	mrs	r2, BASEPRI
 80044da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044de:	f383 8811 	msr	BASEPRI, r3
 80044e2:	f3bf 8f6f 	isb	sy
 80044e6:	f3bf 8f4f 	dsb	sy
 80044ea:	61ba      	str	r2, [r7, #24]
 80044ec:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80044ee:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80044f0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80044f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80044f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044fa:	429a      	cmp	r2, r3
 80044fc:	d302      	bcc.n	8004504 <xQueueGenericSendFromISR+0xbc>
 80044fe:	683b      	ldr	r3, [r7, #0]
 8004500:	2b02      	cmp	r3, #2
 8004502:	d12c      	bne.n	800455e <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004504:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004506:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800450a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800450e:	683a      	ldr	r2, [r7, #0]
 8004510:	68b9      	ldr	r1, [r7, #8]
 8004512:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004514:	f000 f910 	bl	8004738 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004518:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800451c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004520:	d112      	bne.n	8004548 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004522:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004526:	2b00      	cmp	r3, #0
 8004528:	d016      	beq.n	8004558 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800452a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800452c:	3324      	adds	r3, #36	; 0x24
 800452e:	4618      	mov	r0, r3
 8004530:	f000 fe18 	bl	8005164 <xTaskRemoveFromEventList>
 8004534:	4603      	mov	r3, r0
 8004536:	2b00      	cmp	r3, #0
 8004538:	d00e      	beq.n	8004558 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	2b00      	cmp	r3, #0
 800453e:	d00b      	beq.n	8004558 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2201      	movs	r2, #1
 8004544:	601a      	str	r2, [r3, #0]
 8004546:	e007      	b.n	8004558 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004548:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800454c:	3301      	adds	r3, #1
 800454e:	b2db      	uxtb	r3, r3
 8004550:	b25a      	sxtb	r2, r3
 8004552:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004554:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004558:	2301      	movs	r3, #1
 800455a:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800455c:	e001      	b.n	8004562 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800455e:	2300      	movs	r3, #0
 8004560:	637b      	str	r3, [r7, #52]	; 0x34
 8004562:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004564:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004566:	693b      	ldr	r3, [r7, #16]
 8004568:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800456c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800456e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004570:	4618      	mov	r0, r3
 8004572:	3738      	adds	r7, #56	; 0x38
 8004574:	46bd      	mov	sp, r7
 8004576:	bd80      	pop	{r7, pc}

08004578 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004578:	b580      	push	{r7, lr}
 800457a:	b08c      	sub	sp, #48	; 0x30
 800457c:	af00      	add	r7, sp, #0
 800457e:	60f8      	str	r0, [r7, #12]
 8004580:	60b9      	str	r1, [r7, #8]
 8004582:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004584:	2300      	movs	r3, #0
 8004586:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800458c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800458e:	2b00      	cmp	r3, #0
 8004590:	d10a      	bne.n	80045a8 <xQueueReceive+0x30>
	__asm volatile
 8004592:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004596:	f383 8811 	msr	BASEPRI, r3
 800459a:	f3bf 8f6f 	isb	sy
 800459e:	f3bf 8f4f 	dsb	sy
 80045a2:	623b      	str	r3, [r7, #32]
}
 80045a4:	bf00      	nop
 80045a6:	e7fe      	b.n	80045a6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80045a8:	68bb      	ldr	r3, [r7, #8]
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d103      	bne.n	80045b6 <xQueueReceive+0x3e>
 80045ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d101      	bne.n	80045ba <xQueueReceive+0x42>
 80045b6:	2301      	movs	r3, #1
 80045b8:	e000      	b.n	80045bc <xQueueReceive+0x44>
 80045ba:	2300      	movs	r3, #0
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d10a      	bne.n	80045d6 <xQueueReceive+0x5e>
	__asm volatile
 80045c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045c4:	f383 8811 	msr	BASEPRI, r3
 80045c8:	f3bf 8f6f 	isb	sy
 80045cc:	f3bf 8f4f 	dsb	sy
 80045d0:	61fb      	str	r3, [r7, #28]
}
 80045d2:	bf00      	nop
 80045d4:	e7fe      	b.n	80045d4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80045d6:	f000 ff51 	bl	800547c <xTaskGetSchedulerState>
 80045da:	4603      	mov	r3, r0
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d102      	bne.n	80045e6 <xQueueReceive+0x6e>
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d101      	bne.n	80045ea <xQueueReceive+0x72>
 80045e6:	2301      	movs	r3, #1
 80045e8:	e000      	b.n	80045ec <xQueueReceive+0x74>
 80045ea:	2300      	movs	r3, #0
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d10a      	bne.n	8004606 <xQueueReceive+0x8e>
	__asm volatile
 80045f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045f4:	f383 8811 	msr	BASEPRI, r3
 80045f8:	f3bf 8f6f 	isb	sy
 80045fc:	f3bf 8f4f 	dsb	sy
 8004600:	61bb      	str	r3, [r7, #24]
}
 8004602:	bf00      	nop
 8004604:	e7fe      	b.n	8004604 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004606:	f001 fcd5 	bl	8005fb4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800460a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800460c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800460e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004612:	2b00      	cmp	r3, #0
 8004614:	d01f      	beq.n	8004656 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004616:	68b9      	ldr	r1, [r7, #8]
 8004618:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800461a:	f000 f8f7 	bl	800480c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800461e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004620:	1e5a      	subs	r2, r3, #1
 8004622:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004624:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004626:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004628:	691b      	ldr	r3, [r3, #16]
 800462a:	2b00      	cmp	r3, #0
 800462c:	d00f      	beq.n	800464e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800462e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004630:	3310      	adds	r3, #16
 8004632:	4618      	mov	r0, r3
 8004634:	f000 fd96 	bl	8005164 <xTaskRemoveFromEventList>
 8004638:	4603      	mov	r3, r0
 800463a:	2b00      	cmp	r3, #0
 800463c:	d007      	beq.n	800464e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800463e:	4b3d      	ldr	r3, [pc, #244]	; (8004734 <xQueueReceive+0x1bc>)
 8004640:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004644:	601a      	str	r2, [r3, #0]
 8004646:	f3bf 8f4f 	dsb	sy
 800464a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800464e:	f001 fce1 	bl	8006014 <vPortExitCritical>
				return pdPASS;
 8004652:	2301      	movs	r3, #1
 8004654:	e069      	b.n	800472a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	2b00      	cmp	r3, #0
 800465a:	d103      	bne.n	8004664 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800465c:	f001 fcda 	bl	8006014 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004660:	2300      	movs	r3, #0
 8004662:	e062      	b.n	800472a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004664:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004666:	2b00      	cmp	r3, #0
 8004668:	d106      	bne.n	8004678 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800466a:	f107 0310 	add.w	r3, r7, #16
 800466e:	4618      	mov	r0, r3
 8004670:	f000 fdda 	bl	8005228 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004674:	2301      	movs	r3, #1
 8004676:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004678:	f001 fccc 	bl	8006014 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800467c:	f000 fb54 	bl	8004d28 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004680:	f001 fc98 	bl	8005fb4 <vPortEnterCritical>
 8004684:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004686:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800468a:	b25b      	sxtb	r3, r3
 800468c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004690:	d103      	bne.n	800469a <xQueueReceive+0x122>
 8004692:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004694:	2200      	movs	r2, #0
 8004696:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800469a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800469c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80046a0:	b25b      	sxtb	r3, r3
 80046a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046a6:	d103      	bne.n	80046b0 <xQueueReceive+0x138>
 80046a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046aa:	2200      	movs	r2, #0
 80046ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80046b0:	f001 fcb0 	bl	8006014 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80046b4:	1d3a      	adds	r2, r7, #4
 80046b6:	f107 0310 	add.w	r3, r7, #16
 80046ba:	4611      	mov	r1, r2
 80046bc:	4618      	mov	r0, r3
 80046be:	f000 fdc9 	bl	8005254 <xTaskCheckForTimeOut>
 80046c2:	4603      	mov	r3, r0
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d123      	bne.n	8004710 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80046c8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80046ca:	f000 f917 	bl	80048fc <prvIsQueueEmpty>
 80046ce:	4603      	mov	r3, r0
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d017      	beq.n	8004704 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80046d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046d6:	3324      	adds	r3, #36	; 0x24
 80046d8:	687a      	ldr	r2, [r7, #4]
 80046da:	4611      	mov	r1, r2
 80046dc:	4618      	mov	r0, r3
 80046de:	f000 fcf1 	bl	80050c4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80046e2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80046e4:	f000 f8b8 	bl	8004858 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80046e8:	f000 fb2c 	bl	8004d44 <xTaskResumeAll>
 80046ec:	4603      	mov	r3, r0
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d189      	bne.n	8004606 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80046f2:	4b10      	ldr	r3, [pc, #64]	; (8004734 <xQueueReceive+0x1bc>)
 80046f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80046f8:	601a      	str	r2, [r3, #0]
 80046fa:	f3bf 8f4f 	dsb	sy
 80046fe:	f3bf 8f6f 	isb	sy
 8004702:	e780      	b.n	8004606 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004704:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004706:	f000 f8a7 	bl	8004858 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800470a:	f000 fb1b 	bl	8004d44 <xTaskResumeAll>
 800470e:	e77a      	b.n	8004606 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004710:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004712:	f000 f8a1 	bl	8004858 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004716:	f000 fb15 	bl	8004d44 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800471a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800471c:	f000 f8ee 	bl	80048fc <prvIsQueueEmpty>
 8004720:	4603      	mov	r3, r0
 8004722:	2b00      	cmp	r3, #0
 8004724:	f43f af6f 	beq.w	8004606 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004728:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800472a:	4618      	mov	r0, r3
 800472c:	3730      	adds	r7, #48	; 0x30
 800472e:	46bd      	mov	sp, r7
 8004730:	bd80      	pop	{r7, pc}
 8004732:	bf00      	nop
 8004734:	e000ed04 	.word	0xe000ed04

08004738 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004738:	b580      	push	{r7, lr}
 800473a:	b086      	sub	sp, #24
 800473c:	af00      	add	r7, sp, #0
 800473e:	60f8      	str	r0, [r7, #12]
 8004740:	60b9      	str	r1, [r7, #8]
 8004742:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004744:	2300      	movs	r3, #0
 8004746:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800474c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004752:	2b00      	cmp	r3, #0
 8004754:	d10d      	bne.n	8004772 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	2b00      	cmp	r3, #0
 800475c:	d14d      	bne.n	80047fa <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	689b      	ldr	r3, [r3, #8]
 8004762:	4618      	mov	r0, r3
 8004764:	f000 fea8 	bl	80054b8 <xTaskPriorityDisinherit>
 8004768:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	2200      	movs	r2, #0
 800476e:	609a      	str	r2, [r3, #8]
 8004770:	e043      	b.n	80047fa <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	2b00      	cmp	r3, #0
 8004776:	d119      	bne.n	80047ac <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	6858      	ldr	r0, [r3, #4]
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004780:	461a      	mov	r2, r3
 8004782:	68b9      	ldr	r1, [r7, #8]
 8004784:	f001 ff3e 	bl	8006604 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	685a      	ldr	r2, [r3, #4]
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004790:	441a      	add	r2, r3
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	685a      	ldr	r2, [r3, #4]
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	689b      	ldr	r3, [r3, #8]
 800479e:	429a      	cmp	r2, r3
 80047a0:	d32b      	bcc.n	80047fa <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	681a      	ldr	r2, [r3, #0]
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	605a      	str	r2, [r3, #4]
 80047aa:	e026      	b.n	80047fa <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	68d8      	ldr	r0, [r3, #12]
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047b4:	461a      	mov	r2, r3
 80047b6:	68b9      	ldr	r1, [r7, #8]
 80047b8:	f001 ff24 	bl	8006604 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	68da      	ldr	r2, [r3, #12]
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047c4:	425b      	negs	r3, r3
 80047c6:	441a      	add	r2, r3
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	68da      	ldr	r2, [r3, #12]
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	429a      	cmp	r2, r3
 80047d6:	d207      	bcs.n	80047e8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	689a      	ldr	r2, [r3, #8]
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047e0:	425b      	negs	r3, r3
 80047e2:	441a      	add	r2, r3
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2b02      	cmp	r3, #2
 80047ec:	d105      	bne.n	80047fa <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80047ee:	693b      	ldr	r3, [r7, #16]
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d002      	beq.n	80047fa <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80047f4:	693b      	ldr	r3, [r7, #16]
 80047f6:	3b01      	subs	r3, #1
 80047f8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80047fa:	693b      	ldr	r3, [r7, #16]
 80047fc:	1c5a      	adds	r2, r3, #1
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004802:	697b      	ldr	r3, [r7, #20]
}
 8004804:	4618      	mov	r0, r3
 8004806:	3718      	adds	r7, #24
 8004808:	46bd      	mov	sp, r7
 800480a:	bd80      	pop	{r7, pc}

0800480c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800480c:	b580      	push	{r7, lr}
 800480e:	b082      	sub	sp, #8
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
 8004814:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800481a:	2b00      	cmp	r3, #0
 800481c:	d018      	beq.n	8004850 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	68da      	ldr	r2, [r3, #12]
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004826:	441a      	add	r2, r3
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	68da      	ldr	r2, [r3, #12]
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	689b      	ldr	r3, [r3, #8]
 8004834:	429a      	cmp	r2, r3
 8004836:	d303      	bcc.n	8004840 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681a      	ldr	r2, [r3, #0]
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	68d9      	ldr	r1, [r3, #12]
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004848:	461a      	mov	r2, r3
 800484a:	6838      	ldr	r0, [r7, #0]
 800484c:	f001 feda 	bl	8006604 <memcpy>
	}
}
 8004850:	bf00      	nop
 8004852:	3708      	adds	r7, #8
 8004854:	46bd      	mov	sp, r7
 8004856:	bd80      	pop	{r7, pc}

08004858 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004858:	b580      	push	{r7, lr}
 800485a:	b084      	sub	sp, #16
 800485c:	af00      	add	r7, sp, #0
 800485e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004860:	f001 fba8 	bl	8005fb4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800486a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800486c:	e011      	b.n	8004892 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004872:	2b00      	cmp	r3, #0
 8004874:	d012      	beq.n	800489c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	3324      	adds	r3, #36	; 0x24
 800487a:	4618      	mov	r0, r3
 800487c:	f000 fc72 	bl	8005164 <xTaskRemoveFromEventList>
 8004880:	4603      	mov	r3, r0
 8004882:	2b00      	cmp	r3, #0
 8004884:	d001      	beq.n	800488a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004886:	f000 fd47 	bl	8005318 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800488a:	7bfb      	ldrb	r3, [r7, #15]
 800488c:	3b01      	subs	r3, #1
 800488e:	b2db      	uxtb	r3, r3
 8004890:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004892:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004896:	2b00      	cmp	r3, #0
 8004898:	dce9      	bgt.n	800486e <prvUnlockQueue+0x16>
 800489a:	e000      	b.n	800489e <prvUnlockQueue+0x46>
					break;
 800489c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	22ff      	movs	r2, #255	; 0xff
 80048a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80048a6:	f001 fbb5 	bl	8006014 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80048aa:	f001 fb83 	bl	8005fb4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80048b4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80048b6:	e011      	b.n	80048dc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	691b      	ldr	r3, [r3, #16]
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d012      	beq.n	80048e6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	3310      	adds	r3, #16
 80048c4:	4618      	mov	r0, r3
 80048c6:	f000 fc4d 	bl	8005164 <xTaskRemoveFromEventList>
 80048ca:	4603      	mov	r3, r0
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d001      	beq.n	80048d4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80048d0:	f000 fd22 	bl	8005318 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80048d4:	7bbb      	ldrb	r3, [r7, #14]
 80048d6:	3b01      	subs	r3, #1
 80048d8:	b2db      	uxtb	r3, r3
 80048da:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80048dc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	dce9      	bgt.n	80048b8 <prvUnlockQueue+0x60>
 80048e4:	e000      	b.n	80048e8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80048e6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	22ff      	movs	r2, #255	; 0xff
 80048ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80048f0:	f001 fb90 	bl	8006014 <vPortExitCritical>
}
 80048f4:	bf00      	nop
 80048f6:	3710      	adds	r7, #16
 80048f8:	46bd      	mov	sp, r7
 80048fa:	bd80      	pop	{r7, pc}

080048fc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80048fc:	b580      	push	{r7, lr}
 80048fe:	b084      	sub	sp, #16
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004904:	f001 fb56 	bl	8005fb4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800490c:	2b00      	cmp	r3, #0
 800490e:	d102      	bne.n	8004916 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004910:	2301      	movs	r3, #1
 8004912:	60fb      	str	r3, [r7, #12]
 8004914:	e001      	b.n	800491a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004916:	2300      	movs	r3, #0
 8004918:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800491a:	f001 fb7b 	bl	8006014 <vPortExitCritical>

	return xReturn;
 800491e:	68fb      	ldr	r3, [r7, #12]
}
 8004920:	4618      	mov	r0, r3
 8004922:	3710      	adds	r7, #16
 8004924:	46bd      	mov	sp, r7
 8004926:	bd80      	pop	{r7, pc}

08004928 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004928:	b580      	push	{r7, lr}
 800492a:	b084      	sub	sp, #16
 800492c:	af00      	add	r7, sp, #0
 800492e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004930:	f001 fb40 	bl	8005fb4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800493c:	429a      	cmp	r2, r3
 800493e:	d102      	bne.n	8004946 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004940:	2301      	movs	r3, #1
 8004942:	60fb      	str	r3, [r7, #12]
 8004944:	e001      	b.n	800494a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004946:	2300      	movs	r3, #0
 8004948:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800494a:	f001 fb63 	bl	8006014 <vPortExitCritical>

	return xReturn;
 800494e:	68fb      	ldr	r3, [r7, #12]
}
 8004950:	4618      	mov	r0, r3
 8004952:	3710      	adds	r7, #16
 8004954:	46bd      	mov	sp, r7
 8004956:	bd80      	pop	{r7, pc}

08004958 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004958:	b580      	push	{r7, lr}
 800495a:	b086      	sub	sp, #24
 800495c:	af00      	add	r7, sp, #0
 800495e:	60f8      	str	r0, [r7, #12]
 8004960:	60b9      	str	r1, [r7, #8]
 8004962:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004968:	f001 fb24 	bl	8005fb4 <vPortEnterCritical>
 800496c:	697b      	ldr	r3, [r7, #20]
 800496e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004972:	b25b      	sxtb	r3, r3
 8004974:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004978:	d103      	bne.n	8004982 <vQueueWaitForMessageRestricted+0x2a>
 800497a:	697b      	ldr	r3, [r7, #20]
 800497c:	2200      	movs	r2, #0
 800497e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004982:	697b      	ldr	r3, [r7, #20]
 8004984:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004988:	b25b      	sxtb	r3, r3
 800498a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800498e:	d103      	bne.n	8004998 <vQueueWaitForMessageRestricted+0x40>
 8004990:	697b      	ldr	r3, [r7, #20]
 8004992:	2200      	movs	r2, #0
 8004994:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004998:	f001 fb3c 	bl	8006014 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800499c:	697b      	ldr	r3, [r7, #20]
 800499e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d106      	bne.n	80049b2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80049a4:	697b      	ldr	r3, [r7, #20]
 80049a6:	3324      	adds	r3, #36	; 0x24
 80049a8:	687a      	ldr	r2, [r7, #4]
 80049aa:	68b9      	ldr	r1, [r7, #8]
 80049ac:	4618      	mov	r0, r3
 80049ae:	f000 fbad 	bl	800510c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80049b2:	6978      	ldr	r0, [r7, #20]
 80049b4:	f7ff ff50 	bl	8004858 <prvUnlockQueue>
	}
 80049b8:	bf00      	nop
 80049ba:	3718      	adds	r7, #24
 80049bc:	46bd      	mov	sp, r7
 80049be:	bd80      	pop	{r7, pc}

080049c0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80049c0:	b580      	push	{r7, lr}
 80049c2:	b08c      	sub	sp, #48	; 0x30
 80049c4:	af04      	add	r7, sp, #16
 80049c6:	60f8      	str	r0, [r7, #12]
 80049c8:	60b9      	str	r1, [r7, #8]
 80049ca:	603b      	str	r3, [r7, #0]
 80049cc:	4613      	mov	r3, r2
 80049ce:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80049d0:	88fb      	ldrh	r3, [r7, #6]
 80049d2:	009b      	lsls	r3, r3, #2
 80049d4:	4618      	mov	r0, r3
 80049d6:	f001 fc0f 	bl	80061f8 <pvPortMalloc>
 80049da:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80049dc:	697b      	ldr	r3, [r7, #20]
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d00e      	beq.n	8004a00 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80049e2:	2050      	movs	r0, #80	; 0x50
 80049e4:	f001 fc08 	bl	80061f8 <pvPortMalloc>
 80049e8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80049ea:	69fb      	ldr	r3, [r7, #28]
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d003      	beq.n	80049f8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80049f0:	69fb      	ldr	r3, [r7, #28]
 80049f2:	697a      	ldr	r2, [r7, #20]
 80049f4:	631a      	str	r2, [r3, #48]	; 0x30
 80049f6:	e005      	b.n	8004a04 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80049f8:	6978      	ldr	r0, [r7, #20]
 80049fa:	f001 fcc1 	bl	8006380 <vPortFree>
 80049fe:	e001      	b.n	8004a04 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004a00:	2300      	movs	r3, #0
 8004a02:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004a04:	69fb      	ldr	r3, [r7, #28]
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d013      	beq.n	8004a32 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004a0a:	88fa      	ldrh	r2, [r7, #6]
 8004a0c:	2300      	movs	r3, #0
 8004a0e:	9303      	str	r3, [sp, #12]
 8004a10:	69fb      	ldr	r3, [r7, #28]
 8004a12:	9302      	str	r3, [sp, #8]
 8004a14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a16:	9301      	str	r3, [sp, #4]
 8004a18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a1a:	9300      	str	r3, [sp, #0]
 8004a1c:	683b      	ldr	r3, [r7, #0]
 8004a1e:	68b9      	ldr	r1, [r7, #8]
 8004a20:	68f8      	ldr	r0, [r7, #12]
 8004a22:	f000 f80e 	bl	8004a42 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004a26:	69f8      	ldr	r0, [r7, #28]
 8004a28:	f000 f892 	bl	8004b50 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004a2c:	2301      	movs	r3, #1
 8004a2e:	61bb      	str	r3, [r7, #24]
 8004a30:	e002      	b.n	8004a38 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004a32:	f04f 33ff 	mov.w	r3, #4294967295
 8004a36:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004a38:	69bb      	ldr	r3, [r7, #24]
	}
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	3720      	adds	r7, #32
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	bd80      	pop	{r7, pc}

08004a42 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004a42:	b580      	push	{r7, lr}
 8004a44:	b088      	sub	sp, #32
 8004a46:	af00      	add	r7, sp, #0
 8004a48:	60f8      	str	r0, [r7, #12]
 8004a4a:	60b9      	str	r1, [r7, #8]
 8004a4c:	607a      	str	r2, [r7, #4]
 8004a4e:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004a50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a52:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004a5a:	3b01      	subs	r3, #1
 8004a5c:	009b      	lsls	r3, r3, #2
 8004a5e:	4413      	add	r3, r2
 8004a60:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004a62:	69bb      	ldr	r3, [r7, #24]
 8004a64:	f023 0307 	bic.w	r3, r3, #7
 8004a68:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004a6a:	69bb      	ldr	r3, [r7, #24]
 8004a6c:	f003 0307 	and.w	r3, r3, #7
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d00a      	beq.n	8004a8a <prvInitialiseNewTask+0x48>
	__asm volatile
 8004a74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a78:	f383 8811 	msr	BASEPRI, r3
 8004a7c:	f3bf 8f6f 	isb	sy
 8004a80:	f3bf 8f4f 	dsb	sy
 8004a84:	617b      	str	r3, [r7, #20]
}
 8004a86:	bf00      	nop
 8004a88:	e7fe      	b.n	8004a88 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004a8a:	68bb      	ldr	r3, [r7, #8]
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d01f      	beq.n	8004ad0 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004a90:	2300      	movs	r3, #0
 8004a92:	61fb      	str	r3, [r7, #28]
 8004a94:	e012      	b.n	8004abc <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004a96:	68ba      	ldr	r2, [r7, #8]
 8004a98:	69fb      	ldr	r3, [r7, #28]
 8004a9a:	4413      	add	r3, r2
 8004a9c:	7819      	ldrb	r1, [r3, #0]
 8004a9e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004aa0:	69fb      	ldr	r3, [r7, #28]
 8004aa2:	4413      	add	r3, r2
 8004aa4:	3334      	adds	r3, #52	; 0x34
 8004aa6:	460a      	mov	r2, r1
 8004aa8:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004aaa:	68ba      	ldr	r2, [r7, #8]
 8004aac:	69fb      	ldr	r3, [r7, #28]
 8004aae:	4413      	add	r3, r2
 8004ab0:	781b      	ldrb	r3, [r3, #0]
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d006      	beq.n	8004ac4 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004ab6:	69fb      	ldr	r3, [r7, #28]
 8004ab8:	3301      	adds	r3, #1
 8004aba:	61fb      	str	r3, [r7, #28]
 8004abc:	69fb      	ldr	r3, [r7, #28]
 8004abe:	2b09      	cmp	r3, #9
 8004ac0:	d9e9      	bls.n	8004a96 <prvInitialiseNewTask+0x54>
 8004ac2:	e000      	b.n	8004ac6 <prvInitialiseNewTask+0x84>
			{
				break;
 8004ac4:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004ac6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ac8:	2200      	movs	r2, #0
 8004aca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004ace:	e003      	b.n	8004ad8 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004ad0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ad2:	2200      	movs	r2, #0
 8004ad4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004ad8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ada:	2b04      	cmp	r3, #4
 8004adc:	d901      	bls.n	8004ae2 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004ade:	2304      	movs	r3, #4
 8004ae0:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004ae2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ae4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004ae6:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004ae8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004aea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004aec:	641a      	str	r2, [r3, #64]	; 0x40
		pxNewTCB->uxMutexesHeld = 0;
 8004aee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004af0:	2200      	movs	r2, #0
 8004af2:	645a      	str	r2, [r3, #68]	; 0x44
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004af4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004af6:	3304      	adds	r3, #4
 8004af8:	4618      	mov	r0, r3
 8004afa:	f7ff fa4f 	bl	8003f9c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004afe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b00:	3318      	adds	r3, #24
 8004b02:	4618      	mov	r0, r3
 8004b04:	f7ff fa4a 	bl	8003f9c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004b08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b0a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004b0c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004b0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b10:	f1c3 0205 	rsb	r2, r3, #5
 8004b14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b16:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004b18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b1a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004b1c:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004b1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b20:	2200      	movs	r2, #0
 8004b22:	649a      	str	r2, [r3, #72]	; 0x48
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004b24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b26:	2200      	movs	r2, #0
 8004b28:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004b2c:	683a      	ldr	r2, [r7, #0]
 8004b2e:	68f9      	ldr	r1, [r7, #12]
 8004b30:	69b8      	ldr	r0, [r7, #24]
 8004b32:	f001 f90f 	bl	8005d54 <pxPortInitialiseStack>
 8004b36:	4602      	mov	r2, r0
 8004b38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b3a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004b3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d002      	beq.n	8004b48 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004b42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004b46:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004b48:	bf00      	nop
 8004b4a:	3720      	adds	r7, #32
 8004b4c:	46bd      	mov	sp, r7
 8004b4e:	bd80      	pop	{r7, pc}

08004b50 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004b50:	b580      	push	{r7, lr}
 8004b52:	b082      	sub	sp, #8
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004b58:	f001 fa2c 	bl	8005fb4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004b5c:	4b2a      	ldr	r3, [pc, #168]	; (8004c08 <prvAddNewTaskToReadyList+0xb8>)
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	3301      	adds	r3, #1
 8004b62:	4a29      	ldr	r2, [pc, #164]	; (8004c08 <prvAddNewTaskToReadyList+0xb8>)
 8004b64:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004b66:	4b29      	ldr	r3, [pc, #164]	; (8004c0c <prvAddNewTaskToReadyList+0xbc>)
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d109      	bne.n	8004b82 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004b6e:	4a27      	ldr	r2, [pc, #156]	; (8004c0c <prvAddNewTaskToReadyList+0xbc>)
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004b74:	4b24      	ldr	r3, [pc, #144]	; (8004c08 <prvAddNewTaskToReadyList+0xb8>)
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	2b01      	cmp	r3, #1
 8004b7a:	d110      	bne.n	8004b9e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004b7c:	f000 fbe0 	bl	8005340 <prvInitialiseTaskLists>
 8004b80:	e00d      	b.n	8004b9e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004b82:	4b23      	ldr	r3, [pc, #140]	; (8004c10 <prvAddNewTaskToReadyList+0xc0>)
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d109      	bne.n	8004b9e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004b8a:	4b20      	ldr	r3, [pc, #128]	; (8004c0c <prvAddNewTaskToReadyList+0xbc>)
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b94:	429a      	cmp	r2, r3
 8004b96:	d802      	bhi.n	8004b9e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004b98:	4a1c      	ldr	r2, [pc, #112]	; (8004c0c <prvAddNewTaskToReadyList+0xbc>)
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004b9e:	4b1d      	ldr	r3, [pc, #116]	; (8004c14 <prvAddNewTaskToReadyList+0xc4>)
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	3301      	adds	r3, #1
 8004ba4:	4a1b      	ldr	r2, [pc, #108]	; (8004c14 <prvAddNewTaskToReadyList+0xc4>)
 8004ba6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bac:	2201      	movs	r2, #1
 8004bae:	409a      	lsls	r2, r3
 8004bb0:	4b19      	ldr	r3, [pc, #100]	; (8004c18 <prvAddNewTaskToReadyList+0xc8>)
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	4313      	orrs	r3, r2
 8004bb6:	4a18      	ldr	r2, [pc, #96]	; (8004c18 <prvAddNewTaskToReadyList+0xc8>)
 8004bb8:	6013      	str	r3, [r2, #0]
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004bbe:	4613      	mov	r3, r2
 8004bc0:	009b      	lsls	r3, r3, #2
 8004bc2:	4413      	add	r3, r2
 8004bc4:	009b      	lsls	r3, r3, #2
 8004bc6:	4a15      	ldr	r2, [pc, #84]	; (8004c1c <prvAddNewTaskToReadyList+0xcc>)
 8004bc8:	441a      	add	r2, r3
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	3304      	adds	r3, #4
 8004bce:	4619      	mov	r1, r3
 8004bd0:	4610      	mov	r0, r2
 8004bd2:	f7ff f9f0 	bl	8003fb6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004bd6:	f001 fa1d 	bl	8006014 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004bda:	4b0d      	ldr	r3, [pc, #52]	; (8004c10 <prvAddNewTaskToReadyList+0xc0>)
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d00e      	beq.n	8004c00 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004be2:	4b0a      	ldr	r3, [pc, #40]	; (8004c0c <prvAddNewTaskToReadyList+0xbc>)
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bec:	429a      	cmp	r2, r3
 8004bee:	d207      	bcs.n	8004c00 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004bf0:	4b0b      	ldr	r3, [pc, #44]	; (8004c20 <prvAddNewTaskToReadyList+0xd0>)
 8004bf2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004bf6:	601a      	str	r2, [r3, #0]
 8004bf8:	f3bf 8f4f 	dsb	sy
 8004bfc:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004c00:	bf00      	nop
 8004c02:	3708      	adds	r7, #8
 8004c04:	46bd      	mov	sp, r7
 8004c06:	bd80      	pop	{r7, pc}
 8004c08:	200001f0 	.word	0x200001f0
 8004c0c:	20000118 	.word	0x20000118
 8004c10:	200001fc 	.word	0x200001fc
 8004c14:	2000020c 	.word	0x2000020c
 8004c18:	200001f8 	.word	0x200001f8
 8004c1c:	2000011c 	.word	0x2000011c
 8004c20:	e000ed04 	.word	0xe000ed04

08004c24 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004c24:	b580      	push	{r7, lr}
 8004c26:	b084      	sub	sp, #16
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004c2c:	2300      	movs	r3, #0
 8004c2e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d017      	beq.n	8004c66 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004c36:	4b13      	ldr	r3, [pc, #76]	; (8004c84 <vTaskDelay+0x60>)
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d00a      	beq.n	8004c54 <vTaskDelay+0x30>
	__asm volatile
 8004c3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c42:	f383 8811 	msr	BASEPRI, r3
 8004c46:	f3bf 8f6f 	isb	sy
 8004c4a:	f3bf 8f4f 	dsb	sy
 8004c4e:	60bb      	str	r3, [r7, #8]
}
 8004c50:	bf00      	nop
 8004c52:	e7fe      	b.n	8004c52 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004c54:	f000 f868 	bl	8004d28 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004c58:	2100      	movs	r1, #0
 8004c5a:	6878      	ldr	r0, [r7, #4]
 8004c5c:	f000 fcb2 	bl	80055c4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004c60:	f000 f870 	bl	8004d44 <xTaskResumeAll>
 8004c64:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d107      	bne.n	8004c7c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8004c6c:	4b06      	ldr	r3, [pc, #24]	; (8004c88 <vTaskDelay+0x64>)
 8004c6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c72:	601a      	str	r2, [r3, #0]
 8004c74:	f3bf 8f4f 	dsb	sy
 8004c78:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004c7c:	bf00      	nop
 8004c7e:	3710      	adds	r7, #16
 8004c80:	46bd      	mov	sp, r7
 8004c82:	bd80      	pop	{r7, pc}
 8004c84:	20000218 	.word	0x20000218
 8004c88:	e000ed04 	.word	0xe000ed04

08004c8c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004c8c:	b580      	push	{r7, lr}
 8004c8e:	b086      	sub	sp, #24
 8004c90:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8004c92:	4b1f      	ldr	r3, [pc, #124]	; (8004d10 <vTaskStartScheduler+0x84>)
 8004c94:	9301      	str	r3, [sp, #4]
 8004c96:	2300      	movs	r3, #0
 8004c98:	9300      	str	r3, [sp, #0]
 8004c9a:	2300      	movs	r3, #0
 8004c9c:	2280      	movs	r2, #128	; 0x80
 8004c9e:	491d      	ldr	r1, [pc, #116]	; (8004d14 <vTaskStartScheduler+0x88>)
 8004ca0:	481d      	ldr	r0, [pc, #116]	; (8004d18 <vTaskStartScheduler+0x8c>)
 8004ca2:	f7ff fe8d 	bl	80049c0 <xTaskCreate>
 8004ca6:	60f8      	str	r0, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	2b01      	cmp	r3, #1
 8004cac:	d102      	bne.n	8004cb4 <vTaskStartScheduler+0x28>
		{
			xReturn = xTimerCreateTimerTask();
 8004cae:	f000 fcef 	bl	8005690 <xTimerCreateTimerTask>
 8004cb2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	2b01      	cmp	r3, #1
 8004cb8:	d116      	bne.n	8004ce8 <vTaskStartScheduler+0x5c>
	__asm volatile
 8004cba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cbe:	f383 8811 	msr	BASEPRI, r3
 8004cc2:	f3bf 8f6f 	isb	sy
 8004cc6:	f3bf 8f4f 	dsb	sy
 8004cca:	60bb      	str	r3, [r7, #8]
}
 8004ccc:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004cce:	4b13      	ldr	r3, [pc, #76]	; (8004d1c <vTaskStartScheduler+0x90>)
 8004cd0:	f04f 32ff 	mov.w	r2, #4294967295
 8004cd4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004cd6:	4b12      	ldr	r3, [pc, #72]	; (8004d20 <vTaskStartScheduler+0x94>)
 8004cd8:	2201      	movs	r2, #1
 8004cda:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004cdc:	4b11      	ldr	r3, [pc, #68]	; (8004d24 <vTaskStartScheduler+0x98>)
 8004cde:	2200      	movs	r2, #0
 8004ce0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004ce2:	f001 f8c5 	bl	8005e70 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004ce6:	e00e      	b.n	8004d06 <vTaskStartScheduler+0x7a>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cee:	d10a      	bne.n	8004d06 <vTaskStartScheduler+0x7a>
	__asm volatile
 8004cf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cf4:	f383 8811 	msr	BASEPRI, r3
 8004cf8:	f3bf 8f6f 	isb	sy
 8004cfc:	f3bf 8f4f 	dsb	sy
 8004d00:	607b      	str	r3, [r7, #4]
}
 8004d02:	bf00      	nop
 8004d04:	e7fe      	b.n	8004d04 <vTaskStartScheduler+0x78>
}
 8004d06:	bf00      	nop
 8004d08:	3710      	adds	r7, #16
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	bd80      	pop	{r7, pc}
 8004d0e:	bf00      	nop
 8004d10:	20000214 	.word	0x20000214
 8004d14:	0800667c 	.word	0x0800667c
 8004d18:	08005331 	.word	0x08005331
 8004d1c:	20000210 	.word	0x20000210
 8004d20:	200001fc 	.word	0x200001fc
 8004d24:	200001f4 	.word	0x200001f4

08004d28 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004d28:	b480      	push	{r7}
 8004d2a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8004d2c:	4b04      	ldr	r3, [pc, #16]	; (8004d40 <vTaskSuspendAll+0x18>)
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	3301      	adds	r3, #1
 8004d32:	4a03      	ldr	r2, [pc, #12]	; (8004d40 <vTaskSuspendAll+0x18>)
 8004d34:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8004d36:	bf00      	nop
 8004d38:	46bd      	mov	sp, r7
 8004d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3e:	4770      	bx	lr
 8004d40:	20000218 	.word	0x20000218

08004d44 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004d44:	b580      	push	{r7, lr}
 8004d46:	b084      	sub	sp, #16
 8004d48:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004d4a:	2300      	movs	r3, #0
 8004d4c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004d4e:	2300      	movs	r3, #0
 8004d50:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004d52:	4b41      	ldr	r3, [pc, #260]	; (8004e58 <xTaskResumeAll+0x114>)
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d10a      	bne.n	8004d70 <xTaskResumeAll+0x2c>
	__asm volatile
 8004d5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d5e:	f383 8811 	msr	BASEPRI, r3
 8004d62:	f3bf 8f6f 	isb	sy
 8004d66:	f3bf 8f4f 	dsb	sy
 8004d6a:	603b      	str	r3, [r7, #0]
}
 8004d6c:	bf00      	nop
 8004d6e:	e7fe      	b.n	8004d6e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004d70:	f001 f920 	bl	8005fb4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004d74:	4b38      	ldr	r3, [pc, #224]	; (8004e58 <xTaskResumeAll+0x114>)
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	3b01      	subs	r3, #1
 8004d7a:	4a37      	ldr	r2, [pc, #220]	; (8004e58 <xTaskResumeAll+0x114>)
 8004d7c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004d7e:	4b36      	ldr	r3, [pc, #216]	; (8004e58 <xTaskResumeAll+0x114>)
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d161      	bne.n	8004e4a <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004d86:	4b35      	ldr	r3, [pc, #212]	; (8004e5c <xTaskResumeAll+0x118>)
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d05d      	beq.n	8004e4a <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004d8e:	e02e      	b.n	8004dee <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004d90:	4b33      	ldr	r3, [pc, #204]	; (8004e60 <xTaskResumeAll+0x11c>)
 8004d92:	68db      	ldr	r3, [r3, #12]
 8004d94:	68db      	ldr	r3, [r3, #12]
 8004d96:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	3318      	adds	r3, #24
 8004d9c:	4618      	mov	r0, r3
 8004d9e:	f7ff f967 	bl	8004070 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	3304      	adds	r3, #4
 8004da6:	4618      	mov	r0, r3
 8004da8:	f7ff f962 	bl	8004070 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004db0:	2201      	movs	r2, #1
 8004db2:	409a      	lsls	r2, r3
 8004db4:	4b2b      	ldr	r3, [pc, #172]	; (8004e64 <xTaskResumeAll+0x120>)
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	4313      	orrs	r3, r2
 8004dba:	4a2a      	ldr	r2, [pc, #168]	; (8004e64 <xTaskResumeAll+0x120>)
 8004dbc:	6013      	str	r3, [r2, #0]
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004dc2:	4613      	mov	r3, r2
 8004dc4:	009b      	lsls	r3, r3, #2
 8004dc6:	4413      	add	r3, r2
 8004dc8:	009b      	lsls	r3, r3, #2
 8004dca:	4a27      	ldr	r2, [pc, #156]	; (8004e68 <xTaskResumeAll+0x124>)
 8004dcc:	441a      	add	r2, r3
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	3304      	adds	r3, #4
 8004dd2:	4619      	mov	r1, r3
 8004dd4:	4610      	mov	r0, r2
 8004dd6:	f7ff f8ee 	bl	8003fb6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004dde:	4b23      	ldr	r3, [pc, #140]	; (8004e6c <xTaskResumeAll+0x128>)
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004de4:	429a      	cmp	r2, r3
 8004de6:	d302      	bcc.n	8004dee <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8004de8:	4b21      	ldr	r3, [pc, #132]	; (8004e70 <xTaskResumeAll+0x12c>)
 8004dea:	2201      	movs	r2, #1
 8004dec:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004dee:	4b1c      	ldr	r3, [pc, #112]	; (8004e60 <xTaskResumeAll+0x11c>)
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d1cc      	bne.n	8004d90 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d001      	beq.n	8004e00 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004dfc:	f000 fb1e 	bl	800543c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8004e00:	4b1c      	ldr	r3, [pc, #112]	; (8004e74 <xTaskResumeAll+0x130>)
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d010      	beq.n	8004e2e <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004e0c:	f000 f846 	bl	8004e9c <xTaskIncrementTick>
 8004e10:	4603      	mov	r3, r0
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d002      	beq.n	8004e1c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8004e16:	4b16      	ldr	r3, [pc, #88]	; (8004e70 <xTaskResumeAll+0x12c>)
 8004e18:	2201      	movs	r2, #1
 8004e1a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	3b01      	subs	r3, #1
 8004e20:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d1f1      	bne.n	8004e0c <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8004e28:	4b12      	ldr	r3, [pc, #72]	; (8004e74 <xTaskResumeAll+0x130>)
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004e2e:	4b10      	ldr	r3, [pc, #64]	; (8004e70 <xTaskResumeAll+0x12c>)
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d009      	beq.n	8004e4a <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004e36:	2301      	movs	r3, #1
 8004e38:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004e3a:	4b0f      	ldr	r3, [pc, #60]	; (8004e78 <xTaskResumeAll+0x134>)
 8004e3c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e40:	601a      	str	r2, [r3, #0]
 8004e42:	f3bf 8f4f 	dsb	sy
 8004e46:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004e4a:	f001 f8e3 	bl	8006014 <vPortExitCritical>

	return xAlreadyYielded;
 8004e4e:	68bb      	ldr	r3, [r7, #8]
}
 8004e50:	4618      	mov	r0, r3
 8004e52:	3710      	adds	r7, #16
 8004e54:	46bd      	mov	sp, r7
 8004e56:	bd80      	pop	{r7, pc}
 8004e58:	20000218 	.word	0x20000218
 8004e5c:	200001f0 	.word	0x200001f0
 8004e60:	200001b0 	.word	0x200001b0
 8004e64:	200001f8 	.word	0x200001f8
 8004e68:	2000011c 	.word	0x2000011c
 8004e6c:	20000118 	.word	0x20000118
 8004e70:	20000204 	.word	0x20000204
 8004e74:	20000200 	.word	0x20000200
 8004e78:	e000ed04 	.word	0xe000ed04

08004e7c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004e7c:	b480      	push	{r7}
 8004e7e:	b083      	sub	sp, #12
 8004e80:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004e82:	4b05      	ldr	r3, [pc, #20]	; (8004e98 <xTaskGetTickCount+0x1c>)
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004e88:	687b      	ldr	r3, [r7, #4]
}
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	370c      	adds	r7, #12
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e94:	4770      	bx	lr
 8004e96:	bf00      	nop
 8004e98:	200001f4 	.word	0x200001f4

08004e9c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004e9c:	b580      	push	{r7, lr}
 8004e9e:	b086      	sub	sp, #24
 8004ea0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004ea2:	2300      	movs	r3, #0
 8004ea4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004ea6:	4b4e      	ldr	r3, [pc, #312]	; (8004fe0 <xTaskIncrementTick+0x144>)
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	f040 8088 	bne.w	8004fc0 <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004eb0:	4b4c      	ldr	r3, [pc, #304]	; (8004fe4 <xTaskIncrementTick+0x148>)
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	3301      	adds	r3, #1
 8004eb6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004eb8:	4a4a      	ldr	r2, [pc, #296]	; (8004fe4 <xTaskIncrementTick+0x148>)
 8004eba:	693b      	ldr	r3, [r7, #16]
 8004ebc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004ebe:	693b      	ldr	r3, [r7, #16]
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d120      	bne.n	8004f06 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8004ec4:	4b48      	ldr	r3, [pc, #288]	; (8004fe8 <xTaskIncrementTick+0x14c>)
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d00a      	beq.n	8004ee4 <xTaskIncrementTick+0x48>
	__asm volatile
 8004ece:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ed2:	f383 8811 	msr	BASEPRI, r3
 8004ed6:	f3bf 8f6f 	isb	sy
 8004eda:	f3bf 8f4f 	dsb	sy
 8004ede:	603b      	str	r3, [r7, #0]
}
 8004ee0:	bf00      	nop
 8004ee2:	e7fe      	b.n	8004ee2 <xTaskIncrementTick+0x46>
 8004ee4:	4b40      	ldr	r3, [pc, #256]	; (8004fe8 <xTaskIncrementTick+0x14c>)
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	60fb      	str	r3, [r7, #12]
 8004eea:	4b40      	ldr	r3, [pc, #256]	; (8004fec <xTaskIncrementTick+0x150>)
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	4a3e      	ldr	r2, [pc, #248]	; (8004fe8 <xTaskIncrementTick+0x14c>)
 8004ef0:	6013      	str	r3, [r2, #0]
 8004ef2:	4a3e      	ldr	r2, [pc, #248]	; (8004fec <xTaskIncrementTick+0x150>)
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	6013      	str	r3, [r2, #0]
 8004ef8:	4b3d      	ldr	r3, [pc, #244]	; (8004ff0 <xTaskIncrementTick+0x154>)
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	3301      	adds	r3, #1
 8004efe:	4a3c      	ldr	r2, [pc, #240]	; (8004ff0 <xTaskIncrementTick+0x154>)
 8004f00:	6013      	str	r3, [r2, #0]
 8004f02:	f000 fa9b 	bl	800543c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004f06:	4b3b      	ldr	r3, [pc, #236]	; (8004ff4 <xTaskIncrementTick+0x158>)
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	693a      	ldr	r2, [r7, #16]
 8004f0c:	429a      	cmp	r2, r3
 8004f0e:	d348      	bcc.n	8004fa2 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004f10:	4b35      	ldr	r3, [pc, #212]	; (8004fe8 <xTaskIncrementTick+0x14c>)
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d104      	bne.n	8004f24 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004f1a:	4b36      	ldr	r3, [pc, #216]	; (8004ff4 <xTaskIncrementTick+0x158>)
 8004f1c:	f04f 32ff 	mov.w	r2, #4294967295
 8004f20:	601a      	str	r2, [r3, #0]
					break;
 8004f22:	e03e      	b.n	8004fa2 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004f24:	4b30      	ldr	r3, [pc, #192]	; (8004fe8 <xTaskIncrementTick+0x14c>)
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	68db      	ldr	r3, [r3, #12]
 8004f2a:	68db      	ldr	r3, [r3, #12]
 8004f2c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004f2e:	68bb      	ldr	r3, [r7, #8]
 8004f30:	685b      	ldr	r3, [r3, #4]
 8004f32:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004f34:	693a      	ldr	r2, [r7, #16]
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	429a      	cmp	r2, r3
 8004f3a:	d203      	bcs.n	8004f44 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004f3c:	4a2d      	ldr	r2, [pc, #180]	; (8004ff4 <xTaskIncrementTick+0x158>)
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004f42:	e02e      	b.n	8004fa2 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004f44:	68bb      	ldr	r3, [r7, #8]
 8004f46:	3304      	adds	r3, #4
 8004f48:	4618      	mov	r0, r3
 8004f4a:	f7ff f891 	bl	8004070 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004f4e:	68bb      	ldr	r3, [r7, #8]
 8004f50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d004      	beq.n	8004f60 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004f56:	68bb      	ldr	r3, [r7, #8]
 8004f58:	3318      	adds	r3, #24
 8004f5a:	4618      	mov	r0, r3
 8004f5c:	f7ff f888 	bl	8004070 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004f60:	68bb      	ldr	r3, [r7, #8]
 8004f62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f64:	2201      	movs	r2, #1
 8004f66:	409a      	lsls	r2, r3
 8004f68:	4b23      	ldr	r3, [pc, #140]	; (8004ff8 <xTaskIncrementTick+0x15c>)
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	4313      	orrs	r3, r2
 8004f6e:	4a22      	ldr	r2, [pc, #136]	; (8004ff8 <xTaskIncrementTick+0x15c>)
 8004f70:	6013      	str	r3, [r2, #0]
 8004f72:	68bb      	ldr	r3, [r7, #8]
 8004f74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f76:	4613      	mov	r3, r2
 8004f78:	009b      	lsls	r3, r3, #2
 8004f7a:	4413      	add	r3, r2
 8004f7c:	009b      	lsls	r3, r3, #2
 8004f7e:	4a1f      	ldr	r2, [pc, #124]	; (8004ffc <xTaskIncrementTick+0x160>)
 8004f80:	441a      	add	r2, r3
 8004f82:	68bb      	ldr	r3, [r7, #8]
 8004f84:	3304      	adds	r3, #4
 8004f86:	4619      	mov	r1, r3
 8004f88:	4610      	mov	r0, r2
 8004f8a:	f7ff f814 	bl	8003fb6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004f8e:	68bb      	ldr	r3, [r7, #8]
 8004f90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f92:	4b1b      	ldr	r3, [pc, #108]	; (8005000 <xTaskIncrementTick+0x164>)
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f98:	429a      	cmp	r2, r3
 8004f9a:	d3b9      	bcc.n	8004f10 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8004f9c:	2301      	movs	r3, #1
 8004f9e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004fa0:	e7b6      	b.n	8004f10 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004fa2:	4b17      	ldr	r3, [pc, #92]	; (8005000 <xTaskIncrementTick+0x164>)
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fa8:	4914      	ldr	r1, [pc, #80]	; (8004ffc <xTaskIncrementTick+0x160>)
 8004faa:	4613      	mov	r3, r2
 8004fac:	009b      	lsls	r3, r3, #2
 8004fae:	4413      	add	r3, r2
 8004fb0:	009b      	lsls	r3, r3, #2
 8004fb2:	440b      	add	r3, r1
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	2b01      	cmp	r3, #1
 8004fb8:	d907      	bls.n	8004fca <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 8004fba:	2301      	movs	r3, #1
 8004fbc:	617b      	str	r3, [r7, #20]
 8004fbe:	e004      	b.n	8004fca <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8004fc0:	4b10      	ldr	r3, [pc, #64]	; (8005004 <xTaskIncrementTick+0x168>)
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	3301      	adds	r3, #1
 8004fc6:	4a0f      	ldr	r2, [pc, #60]	; (8005004 <xTaskIncrementTick+0x168>)
 8004fc8:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8004fca:	4b0f      	ldr	r3, [pc, #60]	; (8005008 <xTaskIncrementTick+0x16c>)
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d001      	beq.n	8004fd6 <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 8004fd2:	2301      	movs	r3, #1
 8004fd4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8004fd6:	697b      	ldr	r3, [r7, #20]
}
 8004fd8:	4618      	mov	r0, r3
 8004fda:	3718      	adds	r7, #24
 8004fdc:	46bd      	mov	sp, r7
 8004fde:	bd80      	pop	{r7, pc}
 8004fe0:	20000218 	.word	0x20000218
 8004fe4:	200001f4 	.word	0x200001f4
 8004fe8:	200001a8 	.word	0x200001a8
 8004fec:	200001ac 	.word	0x200001ac
 8004ff0:	20000208 	.word	0x20000208
 8004ff4:	20000210 	.word	0x20000210
 8004ff8:	200001f8 	.word	0x200001f8
 8004ffc:	2000011c 	.word	0x2000011c
 8005000:	20000118 	.word	0x20000118
 8005004:	20000200 	.word	0x20000200
 8005008:	20000204 	.word	0x20000204

0800500c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800500c:	b480      	push	{r7}
 800500e:	b087      	sub	sp, #28
 8005010:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005012:	4b27      	ldr	r3, [pc, #156]	; (80050b0 <vTaskSwitchContext+0xa4>)
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	2b00      	cmp	r3, #0
 8005018:	d003      	beq.n	8005022 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800501a:	4b26      	ldr	r3, [pc, #152]	; (80050b4 <vTaskSwitchContext+0xa8>)
 800501c:	2201      	movs	r2, #1
 800501e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005020:	e03f      	b.n	80050a2 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8005022:	4b24      	ldr	r3, [pc, #144]	; (80050b4 <vTaskSwitchContext+0xa8>)
 8005024:	2200      	movs	r2, #0
 8005026:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005028:	4b23      	ldr	r3, [pc, #140]	; (80050b8 <vTaskSwitchContext+0xac>)
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	fab3 f383 	clz	r3, r3
 8005034:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8005036:	7afb      	ldrb	r3, [r7, #11]
 8005038:	f1c3 031f 	rsb	r3, r3, #31
 800503c:	617b      	str	r3, [r7, #20]
 800503e:	491f      	ldr	r1, [pc, #124]	; (80050bc <vTaskSwitchContext+0xb0>)
 8005040:	697a      	ldr	r2, [r7, #20]
 8005042:	4613      	mov	r3, r2
 8005044:	009b      	lsls	r3, r3, #2
 8005046:	4413      	add	r3, r2
 8005048:	009b      	lsls	r3, r3, #2
 800504a:	440b      	add	r3, r1
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	2b00      	cmp	r3, #0
 8005050:	d10a      	bne.n	8005068 <vTaskSwitchContext+0x5c>
	__asm volatile
 8005052:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005056:	f383 8811 	msr	BASEPRI, r3
 800505a:	f3bf 8f6f 	isb	sy
 800505e:	f3bf 8f4f 	dsb	sy
 8005062:	607b      	str	r3, [r7, #4]
}
 8005064:	bf00      	nop
 8005066:	e7fe      	b.n	8005066 <vTaskSwitchContext+0x5a>
 8005068:	697a      	ldr	r2, [r7, #20]
 800506a:	4613      	mov	r3, r2
 800506c:	009b      	lsls	r3, r3, #2
 800506e:	4413      	add	r3, r2
 8005070:	009b      	lsls	r3, r3, #2
 8005072:	4a12      	ldr	r2, [pc, #72]	; (80050bc <vTaskSwitchContext+0xb0>)
 8005074:	4413      	add	r3, r2
 8005076:	613b      	str	r3, [r7, #16]
 8005078:	693b      	ldr	r3, [r7, #16]
 800507a:	685b      	ldr	r3, [r3, #4]
 800507c:	685a      	ldr	r2, [r3, #4]
 800507e:	693b      	ldr	r3, [r7, #16]
 8005080:	605a      	str	r2, [r3, #4]
 8005082:	693b      	ldr	r3, [r7, #16]
 8005084:	685a      	ldr	r2, [r3, #4]
 8005086:	693b      	ldr	r3, [r7, #16]
 8005088:	3308      	adds	r3, #8
 800508a:	429a      	cmp	r2, r3
 800508c:	d104      	bne.n	8005098 <vTaskSwitchContext+0x8c>
 800508e:	693b      	ldr	r3, [r7, #16]
 8005090:	685b      	ldr	r3, [r3, #4]
 8005092:	685a      	ldr	r2, [r3, #4]
 8005094:	693b      	ldr	r3, [r7, #16]
 8005096:	605a      	str	r2, [r3, #4]
 8005098:	693b      	ldr	r3, [r7, #16]
 800509a:	685b      	ldr	r3, [r3, #4]
 800509c:	68db      	ldr	r3, [r3, #12]
 800509e:	4a08      	ldr	r2, [pc, #32]	; (80050c0 <vTaskSwitchContext+0xb4>)
 80050a0:	6013      	str	r3, [r2, #0]
}
 80050a2:	bf00      	nop
 80050a4:	371c      	adds	r7, #28
 80050a6:	46bd      	mov	sp, r7
 80050a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ac:	4770      	bx	lr
 80050ae:	bf00      	nop
 80050b0:	20000218 	.word	0x20000218
 80050b4:	20000204 	.word	0x20000204
 80050b8:	200001f8 	.word	0x200001f8
 80050bc:	2000011c 	.word	0x2000011c
 80050c0:	20000118 	.word	0x20000118

080050c4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80050c4:	b580      	push	{r7, lr}
 80050c6:	b084      	sub	sp, #16
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	6078      	str	r0, [r7, #4]
 80050cc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d10a      	bne.n	80050ea <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80050d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050d8:	f383 8811 	msr	BASEPRI, r3
 80050dc:	f3bf 8f6f 	isb	sy
 80050e0:	f3bf 8f4f 	dsb	sy
 80050e4:	60fb      	str	r3, [r7, #12]
}
 80050e6:	bf00      	nop
 80050e8:	e7fe      	b.n	80050e8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80050ea:	4b07      	ldr	r3, [pc, #28]	; (8005108 <vTaskPlaceOnEventList+0x44>)
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	3318      	adds	r3, #24
 80050f0:	4619      	mov	r1, r3
 80050f2:	6878      	ldr	r0, [r7, #4]
 80050f4:	f7fe ff83 	bl	8003ffe <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80050f8:	2101      	movs	r1, #1
 80050fa:	6838      	ldr	r0, [r7, #0]
 80050fc:	f000 fa62 	bl	80055c4 <prvAddCurrentTaskToDelayedList>
}
 8005100:	bf00      	nop
 8005102:	3710      	adds	r7, #16
 8005104:	46bd      	mov	sp, r7
 8005106:	bd80      	pop	{r7, pc}
 8005108:	20000118 	.word	0x20000118

0800510c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800510c:	b580      	push	{r7, lr}
 800510e:	b086      	sub	sp, #24
 8005110:	af00      	add	r7, sp, #0
 8005112:	60f8      	str	r0, [r7, #12]
 8005114:	60b9      	str	r1, [r7, #8]
 8005116:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	2b00      	cmp	r3, #0
 800511c:	d10a      	bne.n	8005134 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800511e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005122:	f383 8811 	msr	BASEPRI, r3
 8005126:	f3bf 8f6f 	isb	sy
 800512a:	f3bf 8f4f 	dsb	sy
 800512e:	617b      	str	r3, [r7, #20]
}
 8005130:	bf00      	nop
 8005132:	e7fe      	b.n	8005132 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005134:	4b0a      	ldr	r3, [pc, #40]	; (8005160 <vTaskPlaceOnEventListRestricted+0x54>)
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	3318      	adds	r3, #24
 800513a:	4619      	mov	r1, r3
 800513c:	68f8      	ldr	r0, [r7, #12]
 800513e:	f7fe ff3a 	bl	8003fb6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	2b00      	cmp	r3, #0
 8005146:	d002      	beq.n	800514e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8005148:	f04f 33ff 	mov.w	r3, #4294967295
 800514c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800514e:	6879      	ldr	r1, [r7, #4]
 8005150:	68b8      	ldr	r0, [r7, #8]
 8005152:	f000 fa37 	bl	80055c4 <prvAddCurrentTaskToDelayedList>
	}
 8005156:	bf00      	nop
 8005158:	3718      	adds	r7, #24
 800515a:	46bd      	mov	sp, r7
 800515c:	bd80      	pop	{r7, pc}
 800515e:	bf00      	nop
 8005160:	20000118 	.word	0x20000118

08005164 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005164:	b580      	push	{r7, lr}
 8005166:	b086      	sub	sp, #24
 8005168:	af00      	add	r7, sp, #0
 800516a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	68db      	ldr	r3, [r3, #12]
 8005170:	68db      	ldr	r3, [r3, #12]
 8005172:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005174:	693b      	ldr	r3, [r7, #16]
 8005176:	2b00      	cmp	r3, #0
 8005178:	d10a      	bne.n	8005190 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800517a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800517e:	f383 8811 	msr	BASEPRI, r3
 8005182:	f3bf 8f6f 	isb	sy
 8005186:	f3bf 8f4f 	dsb	sy
 800518a:	60fb      	str	r3, [r7, #12]
}
 800518c:	bf00      	nop
 800518e:	e7fe      	b.n	800518e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005190:	693b      	ldr	r3, [r7, #16]
 8005192:	3318      	adds	r3, #24
 8005194:	4618      	mov	r0, r3
 8005196:	f7fe ff6b 	bl	8004070 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800519a:	4b1d      	ldr	r3, [pc, #116]	; (8005210 <xTaskRemoveFromEventList+0xac>)
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d11c      	bne.n	80051dc <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80051a2:	693b      	ldr	r3, [r7, #16]
 80051a4:	3304      	adds	r3, #4
 80051a6:	4618      	mov	r0, r3
 80051a8:	f7fe ff62 	bl	8004070 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80051ac:	693b      	ldr	r3, [r7, #16]
 80051ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051b0:	2201      	movs	r2, #1
 80051b2:	409a      	lsls	r2, r3
 80051b4:	4b17      	ldr	r3, [pc, #92]	; (8005214 <xTaskRemoveFromEventList+0xb0>)
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	4313      	orrs	r3, r2
 80051ba:	4a16      	ldr	r2, [pc, #88]	; (8005214 <xTaskRemoveFromEventList+0xb0>)
 80051bc:	6013      	str	r3, [r2, #0]
 80051be:	693b      	ldr	r3, [r7, #16]
 80051c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051c2:	4613      	mov	r3, r2
 80051c4:	009b      	lsls	r3, r3, #2
 80051c6:	4413      	add	r3, r2
 80051c8:	009b      	lsls	r3, r3, #2
 80051ca:	4a13      	ldr	r2, [pc, #76]	; (8005218 <xTaskRemoveFromEventList+0xb4>)
 80051cc:	441a      	add	r2, r3
 80051ce:	693b      	ldr	r3, [r7, #16]
 80051d0:	3304      	adds	r3, #4
 80051d2:	4619      	mov	r1, r3
 80051d4:	4610      	mov	r0, r2
 80051d6:	f7fe feee 	bl	8003fb6 <vListInsertEnd>
 80051da:	e005      	b.n	80051e8 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80051dc:	693b      	ldr	r3, [r7, #16]
 80051de:	3318      	adds	r3, #24
 80051e0:	4619      	mov	r1, r3
 80051e2:	480e      	ldr	r0, [pc, #56]	; (800521c <xTaskRemoveFromEventList+0xb8>)
 80051e4:	f7fe fee7 	bl	8003fb6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80051e8:	693b      	ldr	r3, [r7, #16]
 80051ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051ec:	4b0c      	ldr	r3, [pc, #48]	; (8005220 <xTaskRemoveFromEventList+0xbc>)
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051f2:	429a      	cmp	r2, r3
 80051f4:	d905      	bls.n	8005202 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80051f6:	2301      	movs	r3, #1
 80051f8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80051fa:	4b0a      	ldr	r3, [pc, #40]	; (8005224 <xTaskRemoveFromEventList+0xc0>)
 80051fc:	2201      	movs	r2, #1
 80051fe:	601a      	str	r2, [r3, #0]
 8005200:	e001      	b.n	8005206 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8005202:	2300      	movs	r3, #0
 8005204:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005206:	697b      	ldr	r3, [r7, #20]
}
 8005208:	4618      	mov	r0, r3
 800520a:	3718      	adds	r7, #24
 800520c:	46bd      	mov	sp, r7
 800520e:	bd80      	pop	{r7, pc}
 8005210:	20000218 	.word	0x20000218
 8005214:	200001f8 	.word	0x200001f8
 8005218:	2000011c 	.word	0x2000011c
 800521c:	200001b0 	.word	0x200001b0
 8005220:	20000118 	.word	0x20000118
 8005224:	20000204 	.word	0x20000204

08005228 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005228:	b480      	push	{r7}
 800522a:	b083      	sub	sp, #12
 800522c:	af00      	add	r7, sp, #0
 800522e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005230:	4b06      	ldr	r3, [pc, #24]	; (800524c <vTaskInternalSetTimeOutState+0x24>)
 8005232:	681a      	ldr	r2, [r3, #0]
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005238:	4b05      	ldr	r3, [pc, #20]	; (8005250 <vTaskInternalSetTimeOutState+0x28>)
 800523a:	681a      	ldr	r2, [r3, #0]
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	605a      	str	r2, [r3, #4]
}
 8005240:	bf00      	nop
 8005242:	370c      	adds	r7, #12
 8005244:	46bd      	mov	sp, r7
 8005246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524a:	4770      	bx	lr
 800524c:	20000208 	.word	0x20000208
 8005250:	200001f4 	.word	0x200001f4

08005254 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005254:	b580      	push	{r7, lr}
 8005256:	b088      	sub	sp, #32
 8005258:	af00      	add	r7, sp, #0
 800525a:	6078      	str	r0, [r7, #4]
 800525c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	2b00      	cmp	r3, #0
 8005262:	d10a      	bne.n	800527a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8005264:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005268:	f383 8811 	msr	BASEPRI, r3
 800526c:	f3bf 8f6f 	isb	sy
 8005270:	f3bf 8f4f 	dsb	sy
 8005274:	613b      	str	r3, [r7, #16]
}
 8005276:	bf00      	nop
 8005278:	e7fe      	b.n	8005278 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800527a:	683b      	ldr	r3, [r7, #0]
 800527c:	2b00      	cmp	r3, #0
 800527e:	d10a      	bne.n	8005296 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8005280:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005284:	f383 8811 	msr	BASEPRI, r3
 8005288:	f3bf 8f6f 	isb	sy
 800528c:	f3bf 8f4f 	dsb	sy
 8005290:	60fb      	str	r3, [r7, #12]
}
 8005292:	bf00      	nop
 8005294:	e7fe      	b.n	8005294 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8005296:	f000 fe8d 	bl	8005fb4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800529a:	4b1d      	ldr	r3, [pc, #116]	; (8005310 <xTaskCheckForTimeOut+0xbc>)
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	685b      	ldr	r3, [r3, #4]
 80052a4:	69ba      	ldr	r2, [r7, #24]
 80052a6:	1ad3      	subs	r3, r2, r3
 80052a8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80052aa:	683b      	ldr	r3, [r7, #0]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052b2:	d102      	bne.n	80052ba <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80052b4:	2300      	movs	r3, #0
 80052b6:	61fb      	str	r3, [r7, #28]
 80052b8:	e023      	b.n	8005302 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681a      	ldr	r2, [r3, #0]
 80052be:	4b15      	ldr	r3, [pc, #84]	; (8005314 <xTaskCheckForTimeOut+0xc0>)
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	429a      	cmp	r2, r3
 80052c4:	d007      	beq.n	80052d6 <xTaskCheckForTimeOut+0x82>
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	685b      	ldr	r3, [r3, #4]
 80052ca:	69ba      	ldr	r2, [r7, #24]
 80052cc:	429a      	cmp	r2, r3
 80052ce:	d302      	bcc.n	80052d6 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80052d0:	2301      	movs	r3, #1
 80052d2:	61fb      	str	r3, [r7, #28]
 80052d4:	e015      	b.n	8005302 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80052d6:	683b      	ldr	r3, [r7, #0]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	697a      	ldr	r2, [r7, #20]
 80052dc:	429a      	cmp	r2, r3
 80052de:	d20b      	bcs.n	80052f8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80052e0:	683b      	ldr	r3, [r7, #0]
 80052e2:	681a      	ldr	r2, [r3, #0]
 80052e4:	697b      	ldr	r3, [r7, #20]
 80052e6:	1ad2      	subs	r2, r2, r3
 80052e8:	683b      	ldr	r3, [r7, #0]
 80052ea:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80052ec:	6878      	ldr	r0, [r7, #4]
 80052ee:	f7ff ff9b 	bl	8005228 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80052f2:	2300      	movs	r3, #0
 80052f4:	61fb      	str	r3, [r7, #28]
 80052f6:	e004      	b.n	8005302 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80052f8:	683b      	ldr	r3, [r7, #0]
 80052fa:	2200      	movs	r2, #0
 80052fc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80052fe:	2301      	movs	r3, #1
 8005300:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005302:	f000 fe87 	bl	8006014 <vPortExitCritical>

	return xReturn;
 8005306:	69fb      	ldr	r3, [r7, #28]
}
 8005308:	4618      	mov	r0, r3
 800530a:	3720      	adds	r7, #32
 800530c:	46bd      	mov	sp, r7
 800530e:	bd80      	pop	{r7, pc}
 8005310:	200001f4 	.word	0x200001f4
 8005314:	20000208 	.word	0x20000208

08005318 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005318:	b480      	push	{r7}
 800531a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800531c:	4b03      	ldr	r3, [pc, #12]	; (800532c <vTaskMissedYield+0x14>)
 800531e:	2201      	movs	r2, #1
 8005320:	601a      	str	r2, [r3, #0]
}
 8005322:	bf00      	nop
 8005324:	46bd      	mov	sp, r7
 8005326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532a:	4770      	bx	lr
 800532c:	20000204 	.word	0x20000204

08005330 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005330:	b580      	push	{r7, lr}
 8005332:	b082      	sub	sp, #8
 8005334:	af00      	add	r7, sp, #0
 8005336:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005338:	f000 f842 	bl	80053c0 <prvCheckTasksWaitingTermination>
 800533c:	e7fc      	b.n	8005338 <prvIdleTask+0x8>
	...

08005340 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005340:	b580      	push	{r7, lr}
 8005342:	b082      	sub	sp, #8
 8005344:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005346:	2300      	movs	r3, #0
 8005348:	607b      	str	r3, [r7, #4]
 800534a:	e00c      	b.n	8005366 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800534c:	687a      	ldr	r2, [r7, #4]
 800534e:	4613      	mov	r3, r2
 8005350:	009b      	lsls	r3, r3, #2
 8005352:	4413      	add	r3, r2
 8005354:	009b      	lsls	r3, r3, #2
 8005356:	4a12      	ldr	r2, [pc, #72]	; (80053a0 <prvInitialiseTaskLists+0x60>)
 8005358:	4413      	add	r3, r2
 800535a:	4618      	mov	r0, r3
 800535c:	f7fe fdfe 	bl	8003f5c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	3301      	adds	r3, #1
 8005364:	607b      	str	r3, [r7, #4]
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	2b04      	cmp	r3, #4
 800536a:	d9ef      	bls.n	800534c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800536c:	480d      	ldr	r0, [pc, #52]	; (80053a4 <prvInitialiseTaskLists+0x64>)
 800536e:	f7fe fdf5 	bl	8003f5c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005372:	480d      	ldr	r0, [pc, #52]	; (80053a8 <prvInitialiseTaskLists+0x68>)
 8005374:	f7fe fdf2 	bl	8003f5c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005378:	480c      	ldr	r0, [pc, #48]	; (80053ac <prvInitialiseTaskLists+0x6c>)
 800537a:	f7fe fdef 	bl	8003f5c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800537e:	480c      	ldr	r0, [pc, #48]	; (80053b0 <prvInitialiseTaskLists+0x70>)
 8005380:	f7fe fdec 	bl	8003f5c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005384:	480b      	ldr	r0, [pc, #44]	; (80053b4 <prvInitialiseTaskLists+0x74>)
 8005386:	f7fe fde9 	bl	8003f5c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800538a:	4b0b      	ldr	r3, [pc, #44]	; (80053b8 <prvInitialiseTaskLists+0x78>)
 800538c:	4a05      	ldr	r2, [pc, #20]	; (80053a4 <prvInitialiseTaskLists+0x64>)
 800538e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005390:	4b0a      	ldr	r3, [pc, #40]	; (80053bc <prvInitialiseTaskLists+0x7c>)
 8005392:	4a05      	ldr	r2, [pc, #20]	; (80053a8 <prvInitialiseTaskLists+0x68>)
 8005394:	601a      	str	r2, [r3, #0]
}
 8005396:	bf00      	nop
 8005398:	3708      	adds	r7, #8
 800539a:	46bd      	mov	sp, r7
 800539c:	bd80      	pop	{r7, pc}
 800539e:	bf00      	nop
 80053a0:	2000011c 	.word	0x2000011c
 80053a4:	20000180 	.word	0x20000180
 80053a8:	20000194 	.word	0x20000194
 80053ac:	200001b0 	.word	0x200001b0
 80053b0:	200001c4 	.word	0x200001c4
 80053b4:	200001dc 	.word	0x200001dc
 80053b8:	200001a8 	.word	0x200001a8
 80053bc:	200001ac 	.word	0x200001ac

080053c0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80053c0:	b580      	push	{r7, lr}
 80053c2:	b082      	sub	sp, #8
 80053c4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80053c6:	e019      	b.n	80053fc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80053c8:	f000 fdf4 	bl	8005fb4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80053cc:	4b10      	ldr	r3, [pc, #64]	; (8005410 <prvCheckTasksWaitingTermination+0x50>)
 80053ce:	68db      	ldr	r3, [r3, #12]
 80053d0:	68db      	ldr	r3, [r3, #12]
 80053d2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	3304      	adds	r3, #4
 80053d8:	4618      	mov	r0, r3
 80053da:	f7fe fe49 	bl	8004070 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80053de:	4b0d      	ldr	r3, [pc, #52]	; (8005414 <prvCheckTasksWaitingTermination+0x54>)
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	3b01      	subs	r3, #1
 80053e4:	4a0b      	ldr	r2, [pc, #44]	; (8005414 <prvCheckTasksWaitingTermination+0x54>)
 80053e6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80053e8:	4b0b      	ldr	r3, [pc, #44]	; (8005418 <prvCheckTasksWaitingTermination+0x58>)
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	3b01      	subs	r3, #1
 80053ee:	4a0a      	ldr	r2, [pc, #40]	; (8005418 <prvCheckTasksWaitingTermination+0x58>)
 80053f0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80053f2:	f000 fe0f 	bl	8006014 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80053f6:	6878      	ldr	r0, [r7, #4]
 80053f8:	f000 f810 	bl	800541c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80053fc:	4b06      	ldr	r3, [pc, #24]	; (8005418 <prvCheckTasksWaitingTermination+0x58>)
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	2b00      	cmp	r3, #0
 8005402:	d1e1      	bne.n	80053c8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005404:	bf00      	nop
 8005406:	bf00      	nop
 8005408:	3708      	adds	r7, #8
 800540a:	46bd      	mov	sp, r7
 800540c:	bd80      	pop	{r7, pc}
 800540e:	bf00      	nop
 8005410:	200001c4 	.word	0x200001c4
 8005414:	200001f0 	.word	0x200001f0
 8005418:	200001d8 	.word	0x200001d8

0800541c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800541c:	b580      	push	{r7, lr}
 800541e:	b082      	sub	sp, #8
 8005420:	af00      	add	r7, sp, #0
 8005422:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005428:	4618      	mov	r0, r3
 800542a:	f000 ffa9 	bl	8006380 <vPortFree>
			vPortFree( pxTCB );
 800542e:	6878      	ldr	r0, [r7, #4]
 8005430:	f000 ffa6 	bl	8006380 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005434:	bf00      	nop
 8005436:	3708      	adds	r7, #8
 8005438:	46bd      	mov	sp, r7
 800543a:	bd80      	pop	{r7, pc}

0800543c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800543c:	b480      	push	{r7}
 800543e:	b083      	sub	sp, #12
 8005440:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005442:	4b0c      	ldr	r3, [pc, #48]	; (8005474 <prvResetNextTaskUnblockTime+0x38>)
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	2b00      	cmp	r3, #0
 800544a:	d104      	bne.n	8005456 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800544c:	4b0a      	ldr	r3, [pc, #40]	; (8005478 <prvResetNextTaskUnblockTime+0x3c>)
 800544e:	f04f 32ff 	mov.w	r2, #4294967295
 8005452:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005454:	e008      	b.n	8005468 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005456:	4b07      	ldr	r3, [pc, #28]	; (8005474 <prvResetNextTaskUnblockTime+0x38>)
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	68db      	ldr	r3, [r3, #12]
 800545c:	68db      	ldr	r3, [r3, #12]
 800545e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	685b      	ldr	r3, [r3, #4]
 8005464:	4a04      	ldr	r2, [pc, #16]	; (8005478 <prvResetNextTaskUnblockTime+0x3c>)
 8005466:	6013      	str	r3, [r2, #0]
}
 8005468:	bf00      	nop
 800546a:	370c      	adds	r7, #12
 800546c:	46bd      	mov	sp, r7
 800546e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005472:	4770      	bx	lr
 8005474:	200001a8 	.word	0x200001a8
 8005478:	20000210 	.word	0x20000210

0800547c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800547c:	b480      	push	{r7}
 800547e:	b083      	sub	sp, #12
 8005480:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005482:	4b0b      	ldr	r3, [pc, #44]	; (80054b0 <xTaskGetSchedulerState+0x34>)
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	2b00      	cmp	r3, #0
 8005488:	d102      	bne.n	8005490 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800548a:	2301      	movs	r3, #1
 800548c:	607b      	str	r3, [r7, #4]
 800548e:	e008      	b.n	80054a2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005490:	4b08      	ldr	r3, [pc, #32]	; (80054b4 <xTaskGetSchedulerState+0x38>)
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	2b00      	cmp	r3, #0
 8005496:	d102      	bne.n	800549e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005498:	2302      	movs	r3, #2
 800549a:	607b      	str	r3, [r7, #4]
 800549c:	e001      	b.n	80054a2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800549e:	2300      	movs	r3, #0
 80054a0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80054a2:	687b      	ldr	r3, [r7, #4]
	}
 80054a4:	4618      	mov	r0, r3
 80054a6:	370c      	adds	r7, #12
 80054a8:	46bd      	mov	sp, r7
 80054aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ae:	4770      	bx	lr
 80054b0:	200001fc 	.word	0x200001fc
 80054b4:	20000218 	.word	0x20000218

080054b8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80054b8:	b580      	push	{r7, lr}
 80054ba:	b086      	sub	sp, #24
 80054bc:	af00      	add	r7, sp, #0
 80054be:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80054c4:	2300      	movs	r3, #0
 80054c6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d06e      	beq.n	80055ac <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80054ce:	4b3a      	ldr	r3, [pc, #232]	; (80055b8 <xTaskPriorityDisinherit+0x100>)
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	693a      	ldr	r2, [r7, #16]
 80054d4:	429a      	cmp	r2, r3
 80054d6:	d00a      	beq.n	80054ee <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80054d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054dc:	f383 8811 	msr	BASEPRI, r3
 80054e0:	f3bf 8f6f 	isb	sy
 80054e4:	f3bf 8f4f 	dsb	sy
 80054e8:	60fb      	str	r3, [r7, #12]
}
 80054ea:	bf00      	nop
 80054ec:	e7fe      	b.n	80054ec <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80054ee:	693b      	ldr	r3, [r7, #16]
 80054f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d10a      	bne.n	800550c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80054f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054fa:	f383 8811 	msr	BASEPRI, r3
 80054fe:	f3bf 8f6f 	isb	sy
 8005502:	f3bf 8f4f 	dsb	sy
 8005506:	60bb      	str	r3, [r7, #8]
}
 8005508:	bf00      	nop
 800550a:	e7fe      	b.n	800550a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800550c:	693b      	ldr	r3, [r7, #16]
 800550e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005510:	1e5a      	subs	r2, r3, #1
 8005512:	693b      	ldr	r3, [r7, #16]
 8005514:	645a      	str	r2, [r3, #68]	; 0x44

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005516:	693b      	ldr	r3, [r7, #16]
 8005518:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800551a:	693b      	ldr	r3, [r7, #16]
 800551c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800551e:	429a      	cmp	r2, r3
 8005520:	d044      	beq.n	80055ac <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005522:	693b      	ldr	r3, [r7, #16]
 8005524:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005526:	2b00      	cmp	r3, #0
 8005528:	d140      	bne.n	80055ac <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800552a:	693b      	ldr	r3, [r7, #16]
 800552c:	3304      	adds	r3, #4
 800552e:	4618      	mov	r0, r3
 8005530:	f7fe fd9e 	bl	8004070 <uxListRemove>
 8005534:	4603      	mov	r3, r0
 8005536:	2b00      	cmp	r3, #0
 8005538:	d115      	bne.n	8005566 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800553a:	693b      	ldr	r3, [r7, #16]
 800553c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800553e:	491f      	ldr	r1, [pc, #124]	; (80055bc <xTaskPriorityDisinherit+0x104>)
 8005540:	4613      	mov	r3, r2
 8005542:	009b      	lsls	r3, r3, #2
 8005544:	4413      	add	r3, r2
 8005546:	009b      	lsls	r3, r3, #2
 8005548:	440b      	add	r3, r1
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	2b00      	cmp	r3, #0
 800554e:	d10a      	bne.n	8005566 <xTaskPriorityDisinherit+0xae>
 8005550:	693b      	ldr	r3, [r7, #16]
 8005552:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005554:	2201      	movs	r2, #1
 8005556:	fa02 f303 	lsl.w	r3, r2, r3
 800555a:	43da      	mvns	r2, r3
 800555c:	4b18      	ldr	r3, [pc, #96]	; (80055c0 <xTaskPriorityDisinherit+0x108>)
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	4013      	ands	r3, r2
 8005562:	4a17      	ldr	r2, [pc, #92]	; (80055c0 <xTaskPriorityDisinherit+0x108>)
 8005564:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005566:	693b      	ldr	r3, [r7, #16]
 8005568:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800556a:	693b      	ldr	r3, [r7, #16]
 800556c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800556e:	693b      	ldr	r3, [r7, #16]
 8005570:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005572:	f1c3 0205 	rsb	r2, r3, #5
 8005576:	693b      	ldr	r3, [r7, #16]
 8005578:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800557a:	693b      	ldr	r3, [r7, #16]
 800557c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800557e:	2201      	movs	r2, #1
 8005580:	409a      	lsls	r2, r3
 8005582:	4b0f      	ldr	r3, [pc, #60]	; (80055c0 <xTaskPriorityDisinherit+0x108>)
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	4313      	orrs	r3, r2
 8005588:	4a0d      	ldr	r2, [pc, #52]	; (80055c0 <xTaskPriorityDisinherit+0x108>)
 800558a:	6013      	str	r3, [r2, #0]
 800558c:	693b      	ldr	r3, [r7, #16]
 800558e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005590:	4613      	mov	r3, r2
 8005592:	009b      	lsls	r3, r3, #2
 8005594:	4413      	add	r3, r2
 8005596:	009b      	lsls	r3, r3, #2
 8005598:	4a08      	ldr	r2, [pc, #32]	; (80055bc <xTaskPriorityDisinherit+0x104>)
 800559a:	441a      	add	r2, r3
 800559c:	693b      	ldr	r3, [r7, #16]
 800559e:	3304      	adds	r3, #4
 80055a0:	4619      	mov	r1, r3
 80055a2:	4610      	mov	r0, r2
 80055a4:	f7fe fd07 	bl	8003fb6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80055a8:	2301      	movs	r3, #1
 80055aa:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80055ac:	697b      	ldr	r3, [r7, #20]
	}
 80055ae:	4618      	mov	r0, r3
 80055b0:	3718      	adds	r7, #24
 80055b2:	46bd      	mov	sp, r7
 80055b4:	bd80      	pop	{r7, pc}
 80055b6:	bf00      	nop
 80055b8:	20000118 	.word	0x20000118
 80055bc:	2000011c 	.word	0x2000011c
 80055c0:	200001f8 	.word	0x200001f8

080055c4 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80055c4:	b580      	push	{r7, lr}
 80055c6:	b084      	sub	sp, #16
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	6078      	str	r0, [r7, #4]
 80055cc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80055ce:	4b29      	ldr	r3, [pc, #164]	; (8005674 <prvAddCurrentTaskToDelayedList+0xb0>)
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80055d4:	4b28      	ldr	r3, [pc, #160]	; (8005678 <prvAddCurrentTaskToDelayedList+0xb4>)
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	3304      	adds	r3, #4
 80055da:	4618      	mov	r0, r3
 80055dc:	f7fe fd48 	bl	8004070 <uxListRemove>
 80055e0:	4603      	mov	r3, r0
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d10b      	bne.n	80055fe <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80055e6:	4b24      	ldr	r3, [pc, #144]	; (8005678 <prvAddCurrentTaskToDelayedList+0xb4>)
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055ec:	2201      	movs	r2, #1
 80055ee:	fa02 f303 	lsl.w	r3, r2, r3
 80055f2:	43da      	mvns	r2, r3
 80055f4:	4b21      	ldr	r3, [pc, #132]	; (800567c <prvAddCurrentTaskToDelayedList+0xb8>)
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	4013      	ands	r3, r2
 80055fa:	4a20      	ldr	r2, [pc, #128]	; (800567c <prvAddCurrentTaskToDelayedList+0xb8>)
 80055fc:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005604:	d10a      	bne.n	800561c <prvAddCurrentTaskToDelayedList+0x58>
 8005606:	683b      	ldr	r3, [r7, #0]
 8005608:	2b00      	cmp	r3, #0
 800560a:	d007      	beq.n	800561c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800560c:	4b1a      	ldr	r3, [pc, #104]	; (8005678 <prvAddCurrentTaskToDelayedList+0xb4>)
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	3304      	adds	r3, #4
 8005612:	4619      	mov	r1, r3
 8005614:	481a      	ldr	r0, [pc, #104]	; (8005680 <prvAddCurrentTaskToDelayedList+0xbc>)
 8005616:	f7fe fcce 	bl	8003fb6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800561a:	e026      	b.n	800566a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800561c:	68fa      	ldr	r2, [r7, #12]
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	4413      	add	r3, r2
 8005622:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005624:	4b14      	ldr	r3, [pc, #80]	; (8005678 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	68ba      	ldr	r2, [r7, #8]
 800562a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800562c:	68ba      	ldr	r2, [r7, #8]
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	429a      	cmp	r2, r3
 8005632:	d209      	bcs.n	8005648 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005634:	4b13      	ldr	r3, [pc, #76]	; (8005684 <prvAddCurrentTaskToDelayedList+0xc0>)
 8005636:	681a      	ldr	r2, [r3, #0]
 8005638:	4b0f      	ldr	r3, [pc, #60]	; (8005678 <prvAddCurrentTaskToDelayedList+0xb4>)
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	3304      	adds	r3, #4
 800563e:	4619      	mov	r1, r3
 8005640:	4610      	mov	r0, r2
 8005642:	f7fe fcdc 	bl	8003ffe <vListInsert>
}
 8005646:	e010      	b.n	800566a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005648:	4b0f      	ldr	r3, [pc, #60]	; (8005688 <prvAddCurrentTaskToDelayedList+0xc4>)
 800564a:	681a      	ldr	r2, [r3, #0]
 800564c:	4b0a      	ldr	r3, [pc, #40]	; (8005678 <prvAddCurrentTaskToDelayedList+0xb4>)
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	3304      	adds	r3, #4
 8005652:	4619      	mov	r1, r3
 8005654:	4610      	mov	r0, r2
 8005656:	f7fe fcd2 	bl	8003ffe <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800565a:	4b0c      	ldr	r3, [pc, #48]	; (800568c <prvAddCurrentTaskToDelayedList+0xc8>)
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	68ba      	ldr	r2, [r7, #8]
 8005660:	429a      	cmp	r2, r3
 8005662:	d202      	bcs.n	800566a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8005664:	4a09      	ldr	r2, [pc, #36]	; (800568c <prvAddCurrentTaskToDelayedList+0xc8>)
 8005666:	68bb      	ldr	r3, [r7, #8]
 8005668:	6013      	str	r3, [r2, #0]
}
 800566a:	bf00      	nop
 800566c:	3710      	adds	r7, #16
 800566e:	46bd      	mov	sp, r7
 8005670:	bd80      	pop	{r7, pc}
 8005672:	bf00      	nop
 8005674:	200001f4 	.word	0x200001f4
 8005678:	20000118 	.word	0x20000118
 800567c:	200001f8 	.word	0x200001f8
 8005680:	200001dc 	.word	0x200001dc
 8005684:	200001ac 	.word	0x200001ac
 8005688:	200001a8 	.word	0x200001a8
 800568c:	20000210 	.word	0x20000210

08005690 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005690:	b580      	push	{r7, lr}
 8005692:	b084      	sub	sp, #16
 8005694:	af02      	add	r7, sp, #8
BaseType_t xReturn = pdFAIL;
 8005696:	2300      	movs	r3, #0
 8005698:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800569a:	f000 fb31 	bl	8005d00 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800569e:	4b11      	ldr	r3, [pc, #68]	; (80056e4 <xTimerCreateTimerTask+0x54>)
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d00a      	beq.n	80056bc <xTimerCreateTimerTask+0x2c>
				xReturn = pdPASS;
			}
		}
		#else
		{
			xReturn = xTaskCreate(	prvTimerTask,
 80056a6:	4b10      	ldr	r3, [pc, #64]	; (80056e8 <xTimerCreateTimerTask+0x58>)
 80056a8:	9301      	str	r3, [sp, #4]
 80056aa:	2305      	movs	r3, #5
 80056ac:	9300      	str	r3, [sp, #0]
 80056ae:	2300      	movs	r3, #0
 80056b0:	2280      	movs	r2, #128	; 0x80
 80056b2:	490e      	ldr	r1, [pc, #56]	; (80056ec <xTimerCreateTimerTask+0x5c>)
 80056b4:	480e      	ldr	r0, [pc, #56]	; (80056f0 <xTimerCreateTimerTask+0x60>)
 80056b6:	f7ff f983 	bl	80049c0 <xTaskCreate>
 80056ba:	6078      	str	r0, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d10a      	bne.n	80056d8 <xTimerCreateTimerTask+0x48>
	__asm volatile
 80056c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056c6:	f383 8811 	msr	BASEPRI, r3
 80056ca:	f3bf 8f6f 	isb	sy
 80056ce:	f3bf 8f4f 	dsb	sy
 80056d2:	603b      	str	r3, [r7, #0]
}
 80056d4:	bf00      	nop
 80056d6:	e7fe      	b.n	80056d6 <xTimerCreateTimerTask+0x46>
	return xReturn;
 80056d8:	687b      	ldr	r3, [r7, #4]
}
 80056da:	4618      	mov	r0, r3
 80056dc:	3708      	adds	r7, #8
 80056de:	46bd      	mov	sp, r7
 80056e0:	bd80      	pop	{r7, pc}
 80056e2:	bf00      	nop
 80056e4:	2000024c 	.word	0x2000024c
 80056e8:	20000250 	.word	0x20000250
 80056ec:	08006684 	.word	0x08006684
 80056f0:	080058e1 	.word	0x080058e1

080056f4 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 80056f4:	b580      	push	{r7, lr}
 80056f6:	b088      	sub	sp, #32
 80056f8:	af02      	add	r7, sp, #8
 80056fa:	60f8      	str	r0, [r7, #12]
 80056fc:	60b9      	str	r1, [r7, #8]
 80056fe:	607a      	str	r2, [r7, #4]
 8005700:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8005702:	2028      	movs	r0, #40	; 0x28
 8005704:	f000 fd78 	bl	80061f8 <pvPortMalloc>
 8005708:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 800570a:	697b      	ldr	r3, [r7, #20]
 800570c:	2b00      	cmp	r3, #0
 800570e:	d00d      	beq.n	800572c <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The autoreload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 8005710:	697b      	ldr	r3, [r7, #20]
 8005712:	2200      	movs	r2, #0
 8005714:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8005718:	697b      	ldr	r3, [r7, #20]
 800571a:	9301      	str	r3, [sp, #4]
 800571c:	6a3b      	ldr	r3, [r7, #32]
 800571e:	9300      	str	r3, [sp, #0]
 8005720:	683b      	ldr	r3, [r7, #0]
 8005722:	687a      	ldr	r2, [r7, #4]
 8005724:	68b9      	ldr	r1, [r7, #8]
 8005726:	68f8      	ldr	r0, [r7, #12]
 8005728:	f000 f805 	bl	8005736 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800572c:	697b      	ldr	r3, [r7, #20]
	}
 800572e:	4618      	mov	r0, r3
 8005730:	3718      	adds	r7, #24
 8005732:	46bd      	mov	sp, r7
 8005734:	bd80      	pop	{r7, pc}

08005736 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 8005736:	b580      	push	{r7, lr}
 8005738:	b086      	sub	sp, #24
 800573a:	af00      	add	r7, sp, #0
 800573c:	60f8      	str	r0, [r7, #12]
 800573e:	60b9      	str	r1, [r7, #8]
 8005740:	607a      	str	r2, [r7, #4]
 8005742:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8005744:	68bb      	ldr	r3, [r7, #8]
 8005746:	2b00      	cmp	r3, #0
 8005748:	d10a      	bne.n	8005760 <prvInitialiseNewTimer+0x2a>
	__asm volatile
 800574a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800574e:	f383 8811 	msr	BASEPRI, r3
 8005752:	f3bf 8f6f 	isb	sy
 8005756:	f3bf 8f4f 	dsb	sy
 800575a:	617b      	str	r3, [r7, #20]
}
 800575c:	bf00      	nop
 800575e:	e7fe      	b.n	800575e <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 8005760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005762:	2b00      	cmp	r3, #0
 8005764:	d01e      	beq.n	80057a4 <prvInitialiseNewTimer+0x6e>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 8005766:	f000 facb 	bl	8005d00 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 800576a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800576c:	68fa      	ldr	r2, [r7, #12]
 800576e:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8005770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005772:	68ba      	ldr	r2, [r7, #8]
 8005774:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 8005776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005778:	683a      	ldr	r2, [r7, #0]
 800577a:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800577c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800577e:	6a3a      	ldr	r2, [r7, #32]
 8005780:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8005782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005784:	3304      	adds	r3, #4
 8005786:	4618      	mov	r0, r3
 8005788:	f7fe fc08 	bl	8003f9c <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	2b00      	cmp	r3, #0
 8005790:	d008      	beq.n	80057a4 <prvInitialiseNewTimer+0x6e>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8005792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005794:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005798:	f043 0304 	orr.w	r3, r3, #4
 800579c:	b2da      	uxtb	r2, r3
 800579e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057a0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 80057a4:	bf00      	nop
 80057a6:	3718      	adds	r7, #24
 80057a8:	46bd      	mov	sp, r7
 80057aa:	bd80      	pop	{r7, pc}

080057ac <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80057ac:	b580      	push	{r7, lr}
 80057ae:	b08a      	sub	sp, #40	; 0x28
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	60f8      	str	r0, [r7, #12]
 80057b4:	60b9      	str	r1, [r7, #8]
 80057b6:	607a      	str	r2, [r7, #4]
 80057b8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80057ba:	2300      	movs	r3, #0
 80057bc:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d10a      	bne.n	80057da <xTimerGenericCommand+0x2e>
	__asm volatile
 80057c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057c8:	f383 8811 	msr	BASEPRI, r3
 80057cc:	f3bf 8f6f 	isb	sy
 80057d0:	f3bf 8f4f 	dsb	sy
 80057d4:	623b      	str	r3, [r7, #32]
}
 80057d6:	bf00      	nop
 80057d8:	e7fe      	b.n	80057d8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80057da:	4b1a      	ldr	r3, [pc, #104]	; (8005844 <xTimerGenericCommand+0x98>)
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d02a      	beq.n	8005838 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80057e2:	68bb      	ldr	r3, [r7, #8]
 80057e4:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80057ee:	68bb      	ldr	r3, [r7, #8]
 80057f0:	2b05      	cmp	r3, #5
 80057f2:	dc18      	bgt.n	8005826 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80057f4:	f7ff fe42 	bl	800547c <xTaskGetSchedulerState>
 80057f8:	4603      	mov	r3, r0
 80057fa:	2b02      	cmp	r3, #2
 80057fc:	d109      	bne.n	8005812 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80057fe:	4b11      	ldr	r3, [pc, #68]	; (8005844 <xTimerGenericCommand+0x98>)
 8005800:	6818      	ldr	r0, [r3, #0]
 8005802:	f107 0114 	add.w	r1, r7, #20
 8005806:	2300      	movs	r3, #0
 8005808:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800580a:	f7fe fd1f 	bl	800424c <xQueueGenericSend>
 800580e:	6278      	str	r0, [r7, #36]	; 0x24
 8005810:	e012      	b.n	8005838 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005812:	4b0c      	ldr	r3, [pc, #48]	; (8005844 <xTimerGenericCommand+0x98>)
 8005814:	6818      	ldr	r0, [r3, #0]
 8005816:	f107 0114 	add.w	r1, r7, #20
 800581a:	2300      	movs	r3, #0
 800581c:	2200      	movs	r2, #0
 800581e:	f7fe fd15 	bl	800424c <xQueueGenericSend>
 8005822:	6278      	str	r0, [r7, #36]	; 0x24
 8005824:	e008      	b.n	8005838 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005826:	4b07      	ldr	r3, [pc, #28]	; (8005844 <xTimerGenericCommand+0x98>)
 8005828:	6818      	ldr	r0, [r3, #0]
 800582a:	f107 0114 	add.w	r1, r7, #20
 800582e:	2300      	movs	r3, #0
 8005830:	683a      	ldr	r2, [r7, #0]
 8005832:	f7fe fe09 	bl	8004448 <xQueueGenericSendFromISR>
 8005836:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800583a:	4618      	mov	r0, r3
 800583c:	3728      	adds	r7, #40	; 0x28
 800583e:	46bd      	mov	sp, r7
 8005840:	bd80      	pop	{r7, pc}
 8005842:	bf00      	nop
 8005844:	2000024c 	.word	0x2000024c

08005848 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005848:	b580      	push	{r7, lr}
 800584a:	b088      	sub	sp, #32
 800584c:	af02      	add	r7, sp, #8
 800584e:	6078      	str	r0, [r7, #4]
 8005850:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005852:	4b22      	ldr	r3, [pc, #136]	; (80058dc <prvProcessExpiredTimer+0x94>)
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	68db      	ldr	r3, [r3, #12]
 8005858:	68db      	ldr	r3, [r3, #12]
 800585a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800585c:	697b      	ldr	r3, [r7, #20]
 800585e:	3304      	adds	r3, #4
 8005860:	4618      	mov	r0, r3
 8005862:	f7fe fc05 	bl	8004070 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005866:	697b      	ldr	r3, [r7, #20]
 8005868:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800586c:	f003 0304 	and.w	r3, r3, #4
 8005870:	2b00      	cmp	r3, #0
 8005872:	d022      	beq.n	80058ba <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005874:	697b      	ldr	r3, [r7, #20]
 8005876:	699a      	ldr	r2, [r3, #24]
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	18d1      	adds	r1, r2, r3
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	683a      	ldr	r2, [r7, #0]
 8005880:	6978      	ldr	r0, [r7, #20]
 8005882:	f000 f8d1 	bl	8005a28 <prvInsertTimerInActiveList>
 8005886:	4603      	mov	r3, r0
 8005888:	2b00      	cmp	r3, #0
 800588a:	d01f      	beq.n	80058cc <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800588c:	2300      	movs	r3, #0
 800588e:	9300      	str	r3, [sp, #0]
 8005890:	2300      	movs	r3, #0
 8005892:	687a      	ldr	r2, [r7, #4]
 8005894:	2100      	movs	r1, #0
 8005896:	6978      	ldr	r0, [r7, #20]
 8005898:	f7ff ff88 	bl	80057ac <xTimerGenericCommand>
 800589c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800589e:	693b      	ldr	r3, [r7, #16]
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d113      	bne.n	80058cc <prvProcessExpiredTimer+0x84>
	__asm volatile
 80058a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058a8:	f383 8811 	msr	BASEPRI, r3
 80058ac:	f3bf 8f6f 	isb	sy
 80058b0:	f3bf 8f4f 	dsb	sy
 80058b4:	60fb      	str	r3, [r7, #12]
}
 80058b6:	bf00      	nop
 80058b8:	e7fe      	b.n	80058b8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80058ba:	697b      	ldr	r3, [r7, #20]
 80058bc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80058c0:	f023 0301 	bic.w	r3, r3, #1
 80058c4:	b2da      	uxtb	r2, r3
 80058c6:	697b      	ldr	r3, [r7, #20]
 80058c8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80058cc:	697b      	ldr	r3, [r7, #20]
 80058ce:	6a1b      	ldr	r3, [r3, #32]
 80058d0:	6978      	ldr	r0, [r7, #20]
 80058d2:	4798      	blx	r3
}
 80058d4:	bf00      	nop
 80058d6:	3718      	adds	r7, #24
 80058d8:	46bd      	mov	sp, r7
 80058da:	bd80      	pop	{r7, pc}
 80058dc:	20000244 	.word	0x20000244

080058e0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80058e0:	b580      	push	{r7, lr}
 80058e2:	b084      	sub	sp, #16
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80058e8:	f107 0308 	add.w	r3, r7, #8
 80058ec:	4618      	mov	r0, r3
 80058ee:	f000 f857 	bl	80059a0 <prvGetNextExpireTime>
 80058f2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80058f4:	68bb      	ldr	r3, [r7, #8]
 80058f6:	4619      	mov	r1, r3
 80058f8:	68f8      	ldr	r0, [r7, #12]
 80058fa:	f000 f803 	bl	8005904 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80058fe:	f000 f8d5 	bl	8005aac <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005902:	e7f1      	b.n	80058e8 <prvTimerTask+0x8>

08005904 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005904:	b580      	push	{r7, lr}
 8005906:	b084      	sub	sp, #16
 8005908:	af00      	add	r7, sp, #0
 800590a:	6078      	str	r0, [r7, #4]
 800590c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800590e:	f7ff fa0b 	bl	8004d28 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005912:	f107 0308 	add.w	r3, r7, #8
 8005916:	4618      	mov	r0, r3
 8005918:	f000 f866 	bl	80059e8 <prvSampleTimeNow>
 800591c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800591e:	68bb      	ldr	r3, [r7, #8]
 8005920:	2b00      	cmp	r3, #0
 8005922:	d130      	bne.n	8005986 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005924:	683b      	ldr	r3, [r7, #0]
 8005926:	2b00      	cmp	r3, #0
 8005928:	d10a      	bne.n	8005940 <prvProcessTimerOrBlockTask+0x3c>
 800592a:	687a      	ldr	r2, [r7, #4]
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	429a      	cmp	r2, r3
 8005930:	d806      	bhi.n	8005940 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005932:	f7ff fa07 	bl	8004d44 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005936:	68f9      	ldr	r1, [r7, #12]
 8005938:	6878      	ldr	r0, [r7, #4]
 800593a:	f7ff ff85 	bl	8005848 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800593e:	e024      	b.n	800598a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005940:	683b      	ldr	r3, [r7, #0]
 8005942:	2b00      	cmp	r3, #0
 8005944:	d008      	beq.n	8005958 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005946:	4b13      	ldr	r3, [pc, #76]	; (8005994 <prvProcessTimerOrBlockTask+0x90>)
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	2b00      	cmp	r3, #0
 800594e:	d101      	bne.n	8005954 <prvProcessTimerOrBlockTask+0x50>
 8005950:	2301      	movs	r3, #1
 8005952:	e000      	b.n	8005956 <prvProcessTimerOrBlockTask+0x52>
 8005954:	2300      	movs	r3, #0
 8005956:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005958:	4b0f      	ldr	r3, [pc, #60]	; (8005998 <prvProcessTimerOrBlockTask+0x94>)
 800595a:	6818      	ldr	r0, [r3, #0]
 800595c:	687a      	ldr	r2, [r7, #4]
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	1ad3      	subs	r3, r2, r3
 8005962:	683a      	ldr	r2, [r7, #0]
 8005964:	4619      	mov	r1, r3
 8005966:	f7fe fff7 	bl	8004958 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800596a:	f7ff f9eb 	bl	8004d44 <xTaskResumeAll>
 800596e:	4603      	mov	r3, r0
 8005970:	2b00      	cmp	r3, #0
 8005972:	d10a      	bne.n	800598a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005974:	4b09      	ldr	r3, [pc, #36]	; (800599c <prvProcessTimerOrBlockTask+0x98>)
 8005976:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800597a:	601a      	str	r2, [r3, #0]
 800597c:	f3bf 8f4f 	dsb	sy
 8005980:	f3bf 8f6f 	isb	sy
}
 8005984:	e001      	b.n	800598a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005986:	f7ff f9dd 	bl	8004d44 <xTaskResumeAll>
}
 800598a:	bf00      	nop
 800598c:	3710      	adds	r7, #16
 800598e:	46bd      	mov	sp, r7
 8005990:	bd80      	pop	{r7, pc}
 8005992:	bf00      	nop
 8005994:	20000248 	.word	0x20000248
 8005998:	2000024c 	.word	0x2000024c
 800599c:	e000ed04 	.word	0xe000ed04

080059a0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80059a0:	b480      	push	{r7}
 80059a2:	b085      	sub	sp, #20
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80059a8:	4b0e      	ldr	r3, [pc, #56]	; (80059e4 <prvGetNextExpireTime+0x44>)
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d101      	bne.n	80059b6 <prvGetNextExpireTime+0x16>
 80059b2:	2201      	movs	r2, #1
 80059b4:	e000      	b.n	80059b8 <prvGetNextExpireTime+0x18>
 80059b6:	2200      	movs	r2, #0
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d105      	bne.n	80059d0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80059c4:	4b07      	ldr	r3, [pc, #28]	; (80059e4 <prvGetNextExpireTime+0x44>)
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	68db      	ldr	r3, [r3, #12]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	60fb      	str	r3, [r7, #12]
 80059ce:	e001      	b.n	80059d4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80059d0:	2300      	movs	r3, #0
 80059d2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80059d4:	68fb      	ldr	r3, [r7, #12]
}
 80059d6:	4618      	mov	r0, r3
 80059d8:	3714      	adds	r7, #20
 80059da:	46bd      	mov	sp, r7
 80059dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e0:	4770      	bx	lr
 80059e2:	bf00      	nop
 80059e4:	20000244 	.word	0x20000244

080059e8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80059e8:	b580      	push	{r7, lr}
 80059ea:	b084      	sub	sp, #16
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80059f0:	f7ff fa44 	bl	8004e7c <xTaskGetTickCount>
 80059f4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80059f6:	4b0b      	ldr	r3, [pc, #44]	; (8005a24 <prvSampleTimeNow+0x3c>)
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	68fa      	ldr	r2, [r7, #12]
 80059fc:	429a      	cmp	r2, r3
 80059fe:	d205      	bcs.n	8005a0c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005a00:	f000 f91a 	bl	8005c38 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	2201      	movs	r2, #1
 8005a08:	601a      	str	r2, [r3, #0]
 8005a0a:	e002      	b.n	8005a12 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	2200      	movs	r2, #0
 8005a10:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005a12:	4a04      	ldr	r2, [pc, #16]	; (8005a24 <prvSampleTimeNow+0x3c>)
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005a18:	68fb      	ldr	r3, [r7, #12]
}
 8005a1a:	4618      	mov	r0, r3
 8005a1c:	3710      	adds	r7, #16
 8005a1e:	46bd      	mov	sp, r7
 8005a20:	bd80      	pop	{r7, pc}
 8005a22:	bf00      	nop
 8005a24:	20000254 	.word	0x20000254

08005a28 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005a28:	b580      	push	{r7, lr}
 8005a2a:	b086      	sub	sp, #24
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	60f8      	str	r0, [r7, #12]
 8005a30:	60b9      	str	r1, [r7, #8]
 8005a32:	607a      	str	r2, [r7, #4]
 8005a34:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8005a36:	2300      	movs	r3, #0
 8005a38:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	68ba      	ldr	r2, [r7, #8]
 8005a3e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	68fa      	ldr	r2, [r7, #12]
 8005a44:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005a46:	68ba      	ldr	r2, [r7, #8]
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	429a      	cmp	r2, r3
 8005a4c:	d812      	bhi.n	8005a74 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005a4e:	687a      	ldr	r2, [r7, #4]
 8005a50:	683b      	ldr	r3, [r7, #0]
 8005a52:	1ad2      	subs	r2, r2, r3
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	699b      	ldr	r3, [r3, #24]
 8005a58:	429a      	cmp	r2, r3
 8005a5a:	d302      	bcc.n	8005a62 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005a5c:	2301      	movs	r3, #1
 8005a5e:	617b      	str	r3, [r7, #20]
 8005a60:	e01b      	b.n	8005a9a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005a62:	4b10      	ldr	r3, [pc, #64]	; (8005aa4 <prvInsertTimerInActiveList+0x7c>)
 8005a64:	681a      	ldr	r2, [r3, #0]
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	3304      	adds	r3, #4
 8005a6a:	4619      	mov	r1, r3
 8005a6c:	4610      	mov	r0, r2
 8005a6e:	f7fe fac6 	bl	8003ffe <vListInsert>
 8005a72:	e012      	b.n	8005a9a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005a74:	687a      	ldr	r2, [r7, #4]
 8005a76:	683b      	ldr	r3, [r7, #0]
 8005a78:	429a      	cmp	r2, r3
 8005a7a:	d206      	bcs.n	8005a8a <prvInsertTimerInActiveList+0x62>
 8005a7c:	68ba      	ldr	r2, [r7, #8]
 8005a7e:	683b      	ldr	r3, [r7, #0]
 8005a80:	429a      	cmp	r2, r3
 8005a82:	d302      	bcc.n	8005a8a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005a84:	2301      	movs	r3, #1
 8005a86:	617b      	str	r3, [r7, #20]
 8005a88:	e007      	b.n	8005a9a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005a8a:	4b07      	ldr	r3, [pc, #28]	; (8005aa8 <prvInsertTimerInActiveList+0x80>)
 8005a8c:	681a      	ldr	r2, [r3, #0]
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	3304      	adds	r3, #4
 8005a92:	4619      	mov	r1, r3
 8005a94:	4610      	mov	r0, r2
 8005a96:	f7fe fab2 	bl	8003ffe <vListInsert>
		}
	}

	return xProcessTimerNow;
 8005a9a:	697b      	ldr	r3, [r7, #20]
}
 8005a9c:	4618      	mov	r0, r3
 8005a9e:	3718      	adds	r7, #24
 8005aa0:	46bd      	mov	sp, r7
 8005aa2:	bd80      	pop	{r7, pc}
 8005aa4:	20000248 	.word	0x20000248
 8005aa8:	20000244 	.word	0x20000244

08005aac <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005aac:	b580      	push	{r7, lr}
 8005aae:	b08c      	sub	sp, #48	; 0x30
 8005ab0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005ab2:	e0ae      	b.n	8005c12 <prvProcessReceivedCommands+0x166>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005ab4:	68bb      	ldr	r3, [r7, #8]
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	f2c0 80ab 	blt.w	8005c12 <prvProcessReceivedCommands+0x166>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005abc:	693b      	ldr	r3, [r7, #16]
 8005abe:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ac2:	695b      	ldr	r3, [r3, #20]
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d004      	beq.n	8005ad2 <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aca:	3304      	adds	r3, #4
 8005acc:	4618      	mov	r0, r3
 8005ace:	f7fe facf 	bl	8004070 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005ad2:	1d3b      	adds	r3, r7, #4
 8005ad4:	4618      	mov	r0, r3
 8005ad6:	f7ff ff87 	bl	80059e8 <prvSampleTimeNow>
 8005ada:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 8005adc:	68bb      	ldr	r3, [r7, #8]
 8005ade:	2b09      	cmp	r3, #9
 8005ae0:	f200 8096 	bhi.w	8005c10 <prvProcessReceivedCommands+0x164>
 8005ae4:	a201      	add	r2, pc, #4	; (adr r2, 8005aec <prvProcessReceivedCommands+0x40>)
 8005ae6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005aea:	bf00      	nop
 8005aec:	08005b15 	.word	0x08005b15
 8005af0:	08005b15 	.word	0x08005b15
 8005af4:	08005b15 	.word	0x08005b15
 8005af8:	08005b89 	.word	0x08005b89
 8005afc:	08005b9d 	.word	0x08005b9d
 8005b00:	08005be7 	.word	0x08005be7
 8005b04:	08005b15 	.word	0x08005b15
 8005b08:	08005b15 	.word	0x08005b15
 8005b0c:	08005b89 	.word	0x08005b89
 8005b10:	08005b9d 	.word	0x08005b9d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b16:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005b1a:	f043 0301 	orr.w	r3, r3, #1
 8005b1e:	b2da      	uxtb	r2, r3
 8005b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b22:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005b26:	68fa      	ldr	r2, [r7, #12]
 8005b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b2a:	699b      	ldr	r3, [r3, #24]
 8005b2c:	18d1      	adds	r1, r2, r3
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	6a3a      	ldr	r2, [r7, #32]
 8005b32:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005b34:	f7ff ff78 	bl	8005a28 <prvInsertTimerInActiveList>
 8005b38:	4603      	mov	r3, r0
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d069      	beq.n	8005c12 <prvProcessReceivedCommands+0x166>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b40:	6a1b      	ldr	r3, [r3, #32]
 8005b42:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005b44:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b48:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005b4c:	f003 0304 	and.w	r3, r3, #4
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d05e      	beq.n	8005c12 <prvProcessReceivedCommands+0x166>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005b54:	68fa      	ldr	r2, [r7, #12]
 8005b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b58:	699b      	ldr	r3, [r3, #24]
 8005b5a:	441a      	add	r2, r3
 8005b5c:	2300      	movs	r3, #0
 8005b5e:	9300      	str	r3, [sp, #0]
 8005b60:	2300      	movs	r3, #0
 8005b62:	2100      	movs	r1, #0
 8005b64:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005b66:	f7ff fe21 	bl	80057ac <xTimerGenericCommand>
 8005b6a:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 8005b6c:	69fb      	ldr	r3, [r7, #28]
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d14f      	bne.n	8005c12 <prvProcessReceivedCommands+0x166>
	__asm volatile
 8005b72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b76:	f383 8811 	msr	BASEPRI, r3
 8005b7a:	f3bf 8f6f 	isb	sy
 8005b7e:	f3bf 8f4f 	dsb	sy
 8005b82:	61bb      	str	r3, [r7, #24]
}
 8005b84:	bf00      	nop
 8005b86:	e7fe      	b.n	8005b86 <prvProcessReceivedCommands+0xda>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b8a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005b8e:	f023 0301 	bic.w	r3, r3, #1
 8005b92:	b2da      	uxtb	r2, r3
 8005b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b96:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					break;
 8005b9a:	e03a      	b.n	8005c12 <prvProcessReceivedCommands+0x166>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b9e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005ba2:	f043 0301 	orr.w	r3, r3, #1
 8005ba6:	b2da      	uxtb	r2, r3
 8005ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005baa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005bae:	68fa      	ldr	r2, [r7, #12]
 8005bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bb2:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bb6:	699b      	ldr	r3, [r3, #24]
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d10a      	bne.n	8005bd2 <prvProcessReceivedCommands+0x126>
	__asm volatile
 8005bbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bc0:	f383 8811 	msr	BASEPRI, r3
 8005bc4:	f3bf 8f6f 	isb	sy
 8005bc8:	f3bf 8f4f 	dsb	sy
 8005bcc:	617b      	str	r3, [r7, #20]
}
 8005bce:	bf00      	nop
 8005bd0:	e7fe      	b.n	8005bd0 <prvProcessReceivedCommands+0x124>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bd4:	699a      	ldr	r2, [r3, #24]
 8005bd6:	6a3b      	ldr	r3, [r7, #32]
 8005bd8:	18d1      	adds	r1, r2, r3
 8005bda:	6a3b      	ldr	r3, [r7, #32]
 8005bdc:	6a3a      	ldr	r2, [r7, #32]
 8005bde:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005be0:	f7ff ff22 	bl	8005a28 <prvInsertTimerInActiveList>
					break;
 8005be4:	e015      	b.n	8005c12 <prvProcessReceivedCommands+0x166>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8005be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005be8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005bec:	f003 0302 	and.w	r3, r3, #2
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d103      	bne.n	8005bfc <prvProcessReceivedCommands+0x150>
						{
							vPortFree( pxTimer );
 8005bf4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005bf6:	f000 fbc3 	bl	8006380 <vPortFree>
 8005bfa:	e00a      	b.n	8005c12 <prvProcessReceivedCommands+0x166>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bfe:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005c02:	f023 0301 	bic.w	r3, r3, #1
 8005c06:	b2da      	uxtb	r2, r3
 8005c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c0a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8005c0e:	e000      	b.n	8005c12 <prvProcessReceivedCommands+0x166>

				default	:
					/* Don't expect to get here. */
					break;
 8005c10:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005c12:	4b08      	ldr	r3, [pc, #32]	; (8005c34 <prvProcessReceivedCommands+0x188>)
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	f107 0108 	add.w	r1, r7, #8
 8005c1a:	2200      	movs	r2, #0
 8005c1c:	4618      	mov	r0, r3
 8005c1e:	f7fe fcab 	bl	8004578 <xQueueReceive>
 8005c22:	4603      	mov	r3, r0
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	f47f af45 	bne.w	8005ab4 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8005c2a:	bf00      	nop
 8005c2c:	bf00      	nop
 8005c2e:	3728      	adds	r7, #40	; 0x28
 8005c30:	46bd      	mov	sp, r7
 8005c32:	bd80      	pop	{r7, pc}
 8005c34:	2000024c 	.word	0x2000024c

08005c38 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005c38:	b580      	push	{r7, lr}
 8005c3a:	b088      	sub	sp, #32
 8005c3c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005c3e:	e048      	b.n	8005cd2 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005c40:	4b2d      	ldr	r3, [pc, #180]	; (8005cf8 <prvSwitchTimerLists+0xc0>)
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	68db      	ldr	r3, [r3, #12]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005c4a:	4b2b      	ldr	r3, [pc, #172]	; (8005cf8 <prvSwitchTimerLists+0xc0>)
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	68db      	ldr	r3, [r3, #12]
 8005c50:	68db      	ldr	r3, [r3, #12]
 8005c52:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	3304      	adds	r3, #4
 8005c58:	4618      	mov	r0, r3
 8005c5a:	f7fe fa09 	bl	8004070 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	6a1b      	ldr	r3, [r3, #32]
 8005c62:	68f8      	ldr	r0, [r7, #12]
 8005c64:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005c6c:	f003 0304 	and.w	r3, r3, #4
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d02e      	beq.n	8005cd2 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	699b      	ldr	r3, [r3, #24]
 8005c78:	693a      	ldr	r2, [r7, #16]
 8005c7a:	4413      	add	r3, r2
 8005c7c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8005c7e:	68ba      	ldr	r2, [r7, #8]
 8005c80:	693b      	ldr	r3, [r7, #16]
 8005c82:	429a      	cmp	r2, r3
 8005c84:	d90e      	bls.n	8005ca4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	68ba      	ldr	r2, [r7, #8]
 8005c8a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	68fa      	ldr	r2, [r7, #12]
 8005c90:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005c92:	4b19      	ldr	r3, [pc, #100]	; (8005cf8 <prvSwitchTimerLists+0xc0>)
 8005c94:	681a      	ldr	r2, [r3, #0]
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	3304      	adds	r3, #4
 8005c9a:	4619      	mov	r1, r3
 8005c9c:	4610      	mov	r0, r2
 8005c9e:	f7fe f9ae 	bl	8003ffe <vListInsert>
 8005ca2:	e016      	b.n	8005cd2 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005ca4:	2300      	movs	r3, #0
 8005ca6:	9300      	str	r3, [sp, #0]
 8005ca8:	2300      	movs	r3, #0
 8005caa:	693a      	ldr	r2, [r7, #16]
 8005cac:	2100      	movs	r1, #0
 8005cae:	68f8      	ldr	r0, [r7, #12]
 8005cb0:	f7ff fd7c 	bl	80057ac <xTimerGenericCommand>
 8005cb4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d10a      	bne.n	8005cd2 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8005cbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cc0:	f383 8811 	msr	BASEPRI, r3
 8005cc4:	f3bf 8f6f 	isb	sy
 8005cc8:	f3bf 8f4f 	dsb	sy
 8005ccc:	603b      	str	r3, [r7, #0]
}
 8005cce:	bf00      	nop
 8005cd0:	e7fe      	b.n	8005cd0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005cd2:	4b09      	ldr	r3, [pc, #36]	; (8005cf8 <prvSwitchTimerLists+0xc0>)
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d1b1      	bne.n	8005c40 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8005cdc:	4b06      	ldr	r3, [pc, #24]	; (8005cf8 <prvSwitchTimerLists+0xc0>)
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8005ce2:	4b06      	ldr	r3, [pc, #24]	; (8005cfc <prvSwitchTimerLists+0xc4>)
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	4a04      	ldr	r2, [pc, #16]	; (8005cf8 <prvSwitchTimerLists+0xc0>)
 8005ce8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8005cea:	4a04      	ldr	r2, [pc, #16]	; (8005cfc <prvSwitchTimerLists+0xc4>)
 8005cec:	697b      	ldr	r3, [r7, #20]
 8005cee:	6013      	str	r3, [r2, #0]
}
 8005cf0:	bf00      	nop
 8005cf2:	3718      	adds	r7, #24
 8005cf4:	46bd      	mov	sp, r7
 8005cf6:	bd80      	pop	{r7, pc}
 8005cf8:	20000244 	.word	0x20000244
 8005cfc:	20000248 	.word	0x20000248

08005d00 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005d00:	b580      	push	{r7, lr}
 8005d02:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005d04:	f000 f956 	bl	8005fb4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8005d08:	4b0d      	ldr	r3, [pc, #52]	; (8005d40 <prvCheckForValidListAndQueue+0x40>)
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d113      	bne.n	8005d38 <prvCheckForValidListAndQueue+0x38>
		{
			vListInitialise( &xActiveTimerList1 );
 8005d10:	480c      	ldr	r0, [pc, #48]	; (8005d44 <prvCheckForValidListAndQueue+0x44>)
 8005d12:	f7fe f923 	bl	8003f5c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005d16:	480c      	ldr	r0, [pc, #48]	; (8005d48 <prvCheckForValidListAndQueue+0x48>)
 8005d18:	f7fe f920 	bl	8003f5c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005d1c:	4b0b      	ldr	r3, [pc, #44]	; (8005d4c <prvCheckForValidListAndQueue+0x4c>)
 8005d1e:	4a09      	ldr	r2, [pc, #36]	; (8005d44 <prvCheckForValidListAndQueue+0x44>)
 8005d20:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005d22:	4b0b      	ldr	r3, [pc, #44]	; (8005d50 <prvCheckForValidListAndQueue+0x50>)
 8005d24:	4a08      	ldr	r2, [pc, #32]	; (8005d48 <prvCheckForValidListAndQueue+0x48>)
 8005d26:	601a      	str	r2, [r3, #0]

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8005d28:	2200      	movs	r2, #0
 8005d2a:	210c      	movs	r1, #12
 8005d2c:	2005      	movs	r0, #5
 8005d2e:	f7fe fa31 	bl	8004194 <xQueueGenericCreate>
 8005d32:	4603      	mov	r3, r0
 8005d34:	4a02      	ldr	r2, [pc, #8]	; (8005d40 <prvCheckForValidListAndQueue+0x40>)
 8005d36:	6013      	str	r3, [r2, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005d38:	f000 f96c 	bl	8006014 <vPortExitCritical>
}
 8005d3c:	bf00      	nop
 8005d3e:	bd80      	pop	{r7, pc}
 8005d40:	2000024c 	.word	0x2000024c
 8005d44:	2000021c 	.word	0x2000021c
 8005d48:	20000230 	.word	0x20000230
 8005d4c:	20000244 	.word	0x20000244
 8005d50:	20000248 	.word	0x20000248

08005d54 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005d54:	b480      	push	{r7}
 8005d56:	b085      	sub	sp, #20
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	60f8      	str	r0, [r7, #12]
 8005d5c:	60b9      	str	r1, [r7, #8]
 8005d5e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	3b04      	subs	r3, #4
 8005d64:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005d6c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	3b04      	subs	r3, #4
 8005d72:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005d74:	68bb      	ldr	r3, [r7, #8]
 8005d76:	f023 0201 	bic.w	r2, r3, #1
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	3b04      	subs	r3, #4
 8005d82:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005d84:	4a0c      	ldr	r2, [pc, #48]	; (8005db8 <pxPortInitialiseStack+0x64>)
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	3b14      	subs	r3, #20
 8005d8e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005d90:	687a      	ldr	r2, [r7, #4]
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	3b04      	subs	r3, #4
 8005d9a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	f06f 0202 	mvn.w	r2, #2
 8005da2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	3b20      	subs	r3, #32
 8005da8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005daa:	68fb      	ldr	r3, [r7, #12]
}
 8005dac:	4618      	mov	r0, r3
 8005dae:	3714      	adds	r7, #20
 8005db0:	46bd      	mov	sp, r7
 8005db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db6:	4770      	bx	lr
 8005db8:	08005dbd 	.word	0x08005dbd

08005dbc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005dbc:	b480      	push	{r7}
 8005dbe:	b085      	sub	sp, #20
 8005dc0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005dc2:	2300      	movs	r3, #0
 8005dc4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005dc6:	4b12      	ldr	r3, [pc, #72]	; (8005e10 <prvTaskExitError+0x54>)
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dce:	d00a      	beq.n	8005de6 <prvTaskExitError+0x2a>
	__asm volatile
 8005dd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dd4:	f383 8811 	msr	BASEPRI, r3
 8005dd8:	f3bf 8f6f 	isb	sy
 8005ddc:	f3bf 8f4f 	dsb	sy
 8005de0:	60fb      	str	r3, [r7, #12]
}
 8005de2:	bf00      	nop
 8005de4:	e7fe      	b.n	8005de4 <prvTaskExitError+0x28>
	__asm volatile
 8005de6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dea:	f383 8811 	msr	BASEPRI, r3
 8005dee:	f3bf 8f6f 	isb	sy
 8005df2:	f3bf 8f4f 	dsb	sy
 8005df6:	60bb      	str	r3, [r7, #8]
}
 8005df8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005dfa:	bf00      	nop
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d0fc      	beq.n	8005dfc <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005e02:	bf00      	nop
 8005e04:	bf00      	nop
 8005e06:	3714      	adds	r7, #20
 8005e08:	46bd      	mov	sp, r7
 8005e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e0e:	4770      	bx	lr
 8005e10:	2000000c 	.word	0x2000000c
	...

08005e20 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005e20:	4b07      	ldr	r3, [pc, #28]	; (8005e40 <pxCurrentTCBConst2>)
 8005e22:	6819      	ldr	r1, [r3, #0]
 8005e24:	6808      	ldr	r0, [r1, #0]
 8005e26:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e2a:	f380 8809 	msr	PSP, r0
 8005e2e:	f3bf 8f6f 	isb	sy
 8005e32:	f04f 0000 	mov.w	r0, #0
 8005e36:	f380 8811 	msr	BASEPRI, r0
 8005e3a:	4770      	bx	lr
 8005e3c:	f3af 8000 	nop.w

08005e40 <pxCurrentTCBConst2>:
 8005e40:	20000118 	.word	0x20000118
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005e44:	bf00      	nop
 8005e46:	bf00      	nop

08005e48 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005e48:	4808      	ldr	r0, [pc, #32]	; (8005e6c <prvPortStartFirstTask+0x24>)
 8005e4a:	6800      	ldr	r0, [r0, #0]
 8005e4c:	6800      	ldr	r0, [r0, #0]
 8005e4e:	f380 8808 	msr	MSP, r0
 8005e52:	f04f 0000 	mov.w	r0, #0
 8005e56:	f380 8814 	msr	CONTROL, r0
 8005e5a:	b662      	cpsie	i
 8005e5c:	b661      	cpsie	f
 8005e5e:	f3bf 8f4f 	dsb	sy
 8005e62:	f3bf 8f6f 	isb	sy
 8005e66:	df00      	svc	0
 8005e68:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005e6a:	bf00      	nop
 8005e6c:	e000ed08 	.word	0xe000ed08

08005e70 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005e70:	b580      	push	{r7, lr}
 8005e72:	b086      	sub	sp, #24
 8005e74:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005e76:	4b46      	ldr	r3, [pc, #280]	; (8005f90 <xPortStartScheduler+0x120>)
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	4a46      	ldr	r2, [pc, #280]	; (8005f94 <xPortStartScheduler+0x124>)
 8005e7c:	4293      	cmp	r3, r2
 8005e7e:	d10a      	bne.n	8005e96 <xPortStartScheduler+0x26>
	__asm volatile
 8005e80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e84:	f383 8811 	msr	BASEPRI, r3
 8005e88:	f3bf 8f6f 	isb	sy
 8005e8c:	f3bf 8f4f 	dsb	sy
 8005e90:	613b      	str	r3, [r7, #16]
}
 8005e92:	bf00      	nop
 8005e94:	e7fe      	b.n	8005e94 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005e96:	4b3e      	ldr	r3, [pc, #248]	; (8005f90 <xPortStartScheduler+0x120>)
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	4a3f      	ldr	r2, [pc, #252]	; (8005f98 <xPortStartScheduler+0x128>)
 8005e9c:	4293      	cmp	r3, r2
 8005e9e:	d10a      	bne.n	8005eb6 <xPortStartScheduler+0x46>
	__asm volatile
 8005ea0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ea4:	f383 8811 	msr	BASEPRI, r3
 8005ea8:	f3bf 8f6f 	isb	sy
 8005eac:	f3bf 8f4f 	dsb	sy
 8005eb0:	60fb      	str	r3, [r7, #12]
}
 8005eb2:	bf00      	nop
 8005eb4:	e7fe      	b.n	8005eb4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005eb6:	4b39      	ldr	r3, [pc, #228]	; (8005f9c <xPortStartScheduler+0x12c>)
 8005eb8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005eba:	697b      	ldr	r3, [r7, #20]
 8005ebc:	781b      	ldrb	r3, [r3, #0]
 8005ebe:	b2db      	uxtb	r3, r3
 8005ec0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005ec2:	697b      	ldr	r3, [r7, #20]
 8005ec4:	22ff      	movs	r2, #255	; 0xff
 8005ec6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005ec8:	697b      	ldr	r3, [r7, #20]
 8005eca:	781b      	ldrb	r3, [r3, #0]
 8005ecc:	b2db      	uxtb	r3, r3
 8005ece:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005ed0:	78fb      	ldrb	r3, [r7, #3]
 8005ed2:	b2db      	uxtb	r3, r3
 8005ed4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005ed8:	b2da      	uxtb	r2, r3
 8005eda:	4b31      	ldr	r3, [pc, #196]	; (8005fa0 <xPortStartScheduler+0x130>)
 8005edc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005ede:	4b31      	ldr	r3, [pc, #196]	; (8005fa4 <xPortStartScheduler+0x134>)
 8005ee0:	2207      	movs	r2, #7
 8005ee2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005ee4:	e009      	b.n	8005efa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8005ee6:	4b2f      	ldr	r3, [pc, #188]	; (8005fa4 <xPortStartScheduler+0x134>)
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	3b01      	subs	r3, #1
 8005eec:	4a2d      	ldr	r2, [pc, #180]	; (8005fa4 <xPortStartScheduler+0x134>)
 8005eee:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005ef0:	78fb      	ldrb	r3, [r7, #3]
 8005ef2:	b2db      	uxtb	r3, r3
 8005ef4:	005b      	lsls	r3, r3, #1
 8005ef6:	b2db      	uxtb	r3, r3
 8005ef8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005efa:	78fb      	ldrb	r3, [r7, #3]
 8005efc:	b2db      	uxtb	r3, r3
 8005efe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f02:	2b80      	cmp	r3, #128	; 0x80
 8005f04:	d0ef      	beq.n	8005ee6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005f06:	4b27      	ldr	r3, [pc, #156]	; (8005fa4 <xPortStartScheduler+0x134>)
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	f1c3 0307 	rsb	r3, r3, #7
 8005f0e:	2b04      	cmp	r3, #4
 8005f10:	d00a      	beq.n	8005f28 <xPortStartScheduler+0xb8>
	__asm volatile
 8005f12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f16:	f383 8811 	msr	BASEPRI, r3
 8005f1a:	f3bf 8f6f 	isb	sy
 8005f1e:	f3bf 8f4f 	dsb	sy
 8005f22:	60bb      	str	r3, [r7, #8]
}
 8005f24:	bf00      	nop
 8005f26:	e7fe      	b.n	8005f26 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005f28:	4b1e      	ldr	r3, [pc, #120]	; (8005fa4 <xPortStartScheduler+0x134>)
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	021b      	lsls	r3, r3, #8
 8005f2e:	4a1d      	ldr	r2, [pc, #116]	; (8005fa4 <xPortStartScheduler+0x134>)
 8005f30:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005f32:	4b1c      	ldr	r3, [pc, #112]	; (8005fa4 <xPortStartScheduler+0x134>)
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005f3a:	4a1a      	ldr	r2, [pc, #104]	; (8005fa4 <xPortStartScheduler+0x134>)
 8005f3c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	b2da      	uxtb	r2, r3
 8005f42:	697b      	ldr	r3, [r7, #20]
 8005f44:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005f46:	4b18      	ldr	r3, [pc, #96]	; (8005fa8 <xPortStartScheduler+0x138>)
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	4a17      	ldr	r2, [pc, #92]	; (8005fa8 <xPortStartScheduler+0x138>)
 8005f4c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005f50:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005f52:	4b15      	ldr	r3, [pc, #84]	; (8005fa8 <xPortStartScheduler+0x138>)
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	4a14      	ldr	r2, [pc, #80]	; (8005fa8 <xPortStartScheduler+0x138>)
 8005f58:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005f5c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005f5e:	f000 f8dd 	bl	800611c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005f62:	4b12      	ldr	r3, [pc, #72]	; (8005fac <xPortStartScheduler+0x13c>)
 8005f64:	2200      	movs	r2, #0
 8005f66:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005f68:	f000 f8fc 	bl	8006164 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005f6c:	4b10      	ldr	r3, [pc, #64]	; (8005fb0 <xPortStartScheduler+0x140>)
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	4a0f      	ldr	r2, [pc, #60]	; (8005fb0 <xPortStartScheduler+0x140>)
 8005f72:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005f76:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005f78:	f7ff ff66 	bl	8005e48 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005f7c:	f7ff f846 	bl	800500c <vTaskSwitchContext>
	prvTaskExitError();
 8005f80:	f7ff ff1c 	bl	8005dbc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005f84:	2300      	movs	r3, #0
}
 8005f86:	4618      	mov	r0, r3
 8005f88:	3718      	adds	r7, #24
 8005f8a:	46bd      	mov	sp, r7
 8005f8c:	bd80      	pop	{r7, pc}
 8005f8e:	bf00      	nop
 8005f90:	e000ed00 	.word	0xe000ed00
 8005f94:	410fc271 	.word	0x410fc271
 8005f98:	410fc270 	.word	0x410fc270
 8005f9c:	e000e400 	.word	0xe000e400
 8005fa0:	20000258 	.word	0x20000258
 8005fa4:	2000025c 	.word	0x2000025c
 8005fa8:	e000ed20 	.word	0xe000ed20
 8005fac:	2000000c 	.word	0x2000000c
 8005fb0:	e000ef34 	.word	0xe000ef34

08005fb4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005fb4:	b480      	push	{r7}
 8005fb6:	b083      	sub	sp, #12
 8005fb8:	af00      	add	r7, sp, #0
	__asm volatile
 8005fba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fbe:	f383 8811 	msr	BASEPRI, r3
 8005fc2:	f3bf 8f6f 	isb	sy
 8005fc6:	f3bf 8f4f 	dsb	sy
 8005fca:	607b      	str	r3, [r7, #4]
}
 8005fcc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005fce:	4b0f      	ldr	r3, [pc, #60]	; (800600c <vPortEnterCritical+0x58>)
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	3301      	adds	r3, #1
 8005fd4:	4a0d      	ldr	r2, [pc, #52]	; (800600c <vPortEnterCritical+0x58>)
 8005fd6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005fd8:	4b0c      	ldr	r3, [pc, #48]	; (800600c <vPortEnterCritical+0x58>)
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	2b01      	cmp	r3, #1
 8005fde:	d10f      	bne.n	8006000 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005fe0:	4b0b      	ldr	r3, [pc, #44]	; (8006010 <vPortEnterCritical+0x5c>)
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	b2db      	uxtb	r3, r3
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d00a      	beq.n	8006000 <vPortEnterCritical+0x4c>
	__asm volatile
 8005fea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fee:	f383 8811 	msr	BASEPRI, r3
 8005ff2:	f3bf 8f6f 	isb	sy
 8005ff6:	f3bf 8f4f 	dsb	sy
 8005ffa:	603b      	str	r3, [r7, #0]
}
 8005ffc:	bf00      	nop
 8005ffe:	e7fe      	b.n	8005ffe <vPortEnterCritical+0x4a>
	}
}
 8006000:	bf00      	nop
 8006002:	370c      	adds	r7, #12
 8006004:	46bd      	mov	sp, r7
 8006006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600a:	4770      	bx	lr
 800600c:	2000000c 	.word	0x2000000c
 8006010:	e000ed04 	.word	0xe000ed04

08006014 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006014:	b480      	push	{r7}
 8006016:	b083      	sub	sp, #12
 8006018:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800601a:	4b12      	ldr	r3, [pc, #72]	; (8006064 <vPortExitCritical+0x50>)
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	2b00      	cmp	r3, #0
 8006020:	d10a      	bne.n	8006038 <vPortExitCritical+0x24>
	__asm volatile
 8006022:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006026:	f383 8811 	msr	BASEPRI, r3
 800602a:	f3bf 8f6f 	isb	sy
 800602e:	f3bf 8f4f 	dsb	sy
 8006032:	607b      	str	r3, [r7, #4]
}
 8006034:	bf00      	nop
 8006036:	e7fe      	b.n	8006036 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006038:	4b0a      	ldr	r3, [pc, #40]	; (8006064 <vPortExitCritical+0x50>)
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	3b01      	subs	r3, #1
 800603e:	4a09      	ldr	r2, [pc, #36]	; (8006064 <vPortExitCritical+0x50>)
 8006040:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006042:	4b08      	ldr	r3, [pc, #32]	; (8006064 <vPortExitCritical+0x50>)
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	2b00      	cmp	r3, #0
 8006048:	d105      	bne.n	8006056 <vPortExitCritical+0x42>
 800604a:	2300      	movs	r3, #0
 800604c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800604e:	683b      	ldr	r3, [r7, #0]
 8006050:	f383 8811 	msr	BASEPRI, r3
}
 8006054:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006056:	bf00      	nop
 8006058:	370c      	adds	r7, #12
 800605a:	46bd      	mov	sp, r7
 800605c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006060:	4770      	bx	lr
 8006062:	bf00      	nop
 8006064:	2000000c 	.word	0x2000000c
	...

08006070 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006070:	f3ef 8009 	mrs	r0, PSP
 8006074:	f3bf 8f6f 	isb	sy
 8006078:	4b15      	ldr	r3, [pc, #84]	; (80060d0 <pxCurrentTCBConst>)
 800607a:	681a      	ldr	r2, [r3, #0]
 800607c:	f01e 0f10 	tst.w	lr, #16
 8006080:	bf08      	it	eq
 8006082:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006086:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800608a:	6010      	str	r0, [r2, #0]
 800608c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006090:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006094:	f380 8811 	msr	BASEPRI, r0
 8006098:	f3bf 8f4f 	dsb	sy
 800609c:	f3bf 8f6f 	isb	sy
 80060a0:	f7fe ffb4 	bl	800500c <vTaskSwitchContext>
 80060a4:	f04f 0000 	mov.w	r0, #0
 80060a8:	f380 8811 	msr	BASEPRI, r0
 80060ac:	bc09      	pop	{r0, r3}
 80060ae:	6819      	ldr	r1, [r3, #0]
 80060b0:	6808      	ldr	r0, [r1, #0]
 80060b2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060b6:	f01e 0f10 	tst.w	lr, #16
 80060ba:	bf08      	it	eq
 80060bc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80060c0:	f380 8809 	msr	PSP, r0
 80060c4:	f3bf 8f6f 	isb	sy
 80060c8:	4770      	bx	lr
 80060ca:	bf00      	nop
 80060cc:	f3af 8000 	nop.w

080060d0 <pxCurrentTCBConst>:
 80060d0:	20000118 	.word	0x20000118
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80060d4:	bf00      	nop
 80060d6:	bf00      	nop

080060d8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80060d8:	b580      	push	{r7, lr}
 80060da:	b082      	sub	sp, #8
 80060dc:	af00      	add	r7, sp, #0
	__asm volatile
 80060de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060e2:	f383 8811 	msr	BASEPRI, r3
 80060e6:	f3bf 8f6f 	isb	sy
 80060ea:	f3bf 8f4f 	dsb	sy
 80060ee:	607b      	str	r3, [r7, #4]
}
 80060f0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80060f2:	f7fe fed3 	bl	8004e9c <xTaskIncrementTick>
 80060f6:	4603      	mov	r3, r0
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d003      	beq.n	8006104 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80060fc:	4b06      	ldr	r3, [pc, #24]	; (8006118 <SysTick_Handler+0x40>)
 80060fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006102:	601a      	str	r2, [r3, #0]
 8006104:	2300      	movs	r3, #0
 8006106:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006108:	683b      	ldr	r3, [r7, #0]
 800610a:	f383 8811 	msr	BASEPRI, r3
}
 800610e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006110:	bf00      	nop
 8006112:	3708      	adds	r7, #8
 8006114:	46bd      	mov	sp, r7
 8006116:	bd80      	pop	{r7, pc}
 8006118:	e000ed04 	.word	0xe000ed04

0800611c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800611c:	b480      	push	{r7}
 800611e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006120:	4b0b      	ldr	r3, [pc, #44]	; (8006150 <vPortSetupTimerInterrupt+0x34>)
 8006122:	2200      	movs	r2, #0
 8006124:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006126:	4b0b      	ldr	r3, [pc, #44]	; (8006154 <vPortSetupTimerInterrupt+0x38>)
 8006128:	2200      	movs	r2, #0
 800612a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800612c:	4b0a      	ldr	r3, [pc, #40]	; (8006158 <vPortSetupTimerInterrupt+0x3c>)
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	4a0a      	ldr	r2, [pc, #40]	; (800615c <vPortSetupTimerInterrupt+0x40>)
 8006132:	fba2 2303 	umull	r2, r3, r2, r3
 8006136:	099b      	lsrs	r3, r3, #6
 8006138:	4a09      	ldr	r2, [pc, #36]	; (8006160 <vPortSetupTimerInterrupt+0x44>)
 800613a:	3b01      	subs	r3, #1
 800613c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800613e:	4b04      	ldr	r3, [pc, #16]	; (8006150 <vPortSetupTimerInterrupt+0x34>)
 8006140:	2207      	movs	r2, #7
 8006142:	601a      	str	r2, [r3, #0]
}
 8006144:	bf00      	nop
 8006146:	46bd      	mov	sp, r7
 8006148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800614c:	4770      	bx	lr
 800614e:	bf00      	nop
 8006150:	e000e010 	.word	0xe000e010
 8006154:	e000e018 	.word	0xe000e018
 8006158:	20000000 	.word	0x20000000
 800615c:	10624dd3 	.word	0x10624dd3
 8006160:	e000e014 	.word	0xe000e014

08006164 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006164:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006174 <vPortEnableVFP+0x10>
 8006168:	6801      	ldr	r1, [r0, #0]
 800616a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800616e:	6001      	str	r1, [r0, #0]
 8006170:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006172:	bf00      	nop
 8006174:	e000ed88 	.word	0xe000ed88

08006178 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006178:	b480      	push	{r7}
 800617a:	b085      	sub	sp, #20
 800617c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800617e:	f3ef 8305 	mrs	r3, IPSR
 8006182:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	2b0f      	cmp	r3, #15
 8006188:	d914      	bls.n	80061b4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800618a:	4a17      	ldr	r2, [pc, #92]	; (80061e8 <vPortValidateInterruptPriority+0x70>)
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	4413      	add	r3, r2
 8006190:	781b      	ldrb	r3, [r3, #0]
 8006192:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006194:	4b15      	ldr	r3, [pc, #84]	; (80061ec <vPortValidateInterruptPriority+0x74>)
 8006196:	781b      	ldrb	r3, [r3, #0]
 8006198:	7afa      	ldrb	r2, [r7, #11]
 800619a:	429a      	cmp	r2, r3
 800619c:	d20a      	bcs.n	80061b4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800619e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061a2:	f383 8811 	msr	BASEPRI, r3
 80061a6:	f3bf 8f6f 	isb	sy
 80061aa:	f3bf 8f4f 	dsb	sy
 80061ae:	607b      	str	r3, [r7, #4]
}
 80061b0:	bf00      	nop
 80061b2:	e7fe      	b.n	80061b2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80061b4:	4b0e      	ldr	r3, [pc, #56]	; (80061f0 <vPortValidateInterruptPriority+0x78>)
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80061bc:	4b0d      	ldr	r3, [pc, #52]	; (80061f4 <vPortValidateInterruptPriority+0x7c>)
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	429a      	cmp	r2, r3
 80061c2:	d90a      	bls.n	80061da <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80061c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061c8:	f383 8811 	msr	BASEPRI, r3
 80061cc:	f3bf 8f6f 	isb	sy
 80061d0:	f3bf 8f4f 	dsb	sy
 80061d4:	603b      	str	r3, [r7, #0]
}
 80061d6:	bf00      	nop
 80061d8:	e7fe      	b.n	80061d8 <vPortValidateInterruptPriority+0x60>
	}
 80061da:	bf00      	nop
 80061dc:	3714      	adds	r7, #20
 80061de:	46bd      	mov	sp, r7
 80061e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e4:	4770      	bx	lr
 80061e6:	bf00      	nop
 80061e8:	e000e3f0 	.word	0xe000e3f0
 80061ec:	20000258 	.word	0x20000258
 80061f0:	e000ed0c 	.word	0xe000ed0c
 80061f4:	2000025c 	.word	0x2000025c

080061f8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80061f8:	b580      	push	{r7, lr}
 80061fa:	b08a      	sub	sp, #40	; 0x28
 80061fc:	af00      	add	r7, sp, #0
 80061fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006200:	2300      	movs	r3, #0
 8006202:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006204:	f7fe fd90 	bl	8004d28 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006208:	4b58      	ldr	r3, [pc, #352]	; (800636c <pvPortMalloc+0x174>)
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	2b00      	cmp	r3, #0
 800620e:	d101      	bne.n	8006214 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006210:	f000 f910 	bl	8006434 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006214:	4b56      	ldr	r3, [pc, #344]	; (8006370 <pvPortMalloc+0x178>)
 8006216:	681a      	ldr	r2, [r3, #0]
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	4013      	ands	r3, r2
 800621c:	2b00      	cmp	r3, #0
 800621e:	f040 808e 	bne.w	800633e <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	2b00      	cmp	r3, #0
 8006226:	d01d      	beq.n	8006264 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8006228:	2208      	movs	r2, #8
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	4413      	add	r3, r2
 800622e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	f003 0307 	and.w	r3, r3, #7
 8006236:	2b00      	cmp	r3, #0
 8006238:	d014      	beq.n	8006264 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	f023 0307 	bic.w	r3, r3, #7
 8006240:	3308      	adds	r3, #8
 8006242:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	f003 0307 	and.w	r3, r3, #7
 800624a:	2b00      	cmp	r3, #0
 800624c:	d00a      	beq.n	8006264 <pvPortMalloc+0x6c>
	__asm volatile
 800624e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006252:	f383 8811 	msr	BASEPRI, r3
 8006256:	f3bf 8f6f 	isb	sy
 800625a:	f3bf 8f4f 	dsb	sy
 800625e:	617b      	str	r3, [r7, #20]
}
 8006260:	bf00      	nop
 8006262:	e7fe      	b.n	8006262 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	2b00      	cmp	r3, #0
 8006268:	d069      	beq.n	800633e <pvPortMalloc+0x146>
 800626a:	4b42      	ldr	r3, [pc, #264]	; (8006374 <pvPortMalloc+0x17c>)
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	687a      	ldr	r2, [r7, #4]
 8006270:	429a      	cmp	r2, r3
 8006272:	d864      	bhi.n	800633e <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006274:	4b40      	ldr	r3, [pc, #256]	; (8006378 <pvPortMalloc+0x180>)
 8006276:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006278:	4b3f      	ldr	r3, [pc, #252]	; (8006378 <pvPortMalloc+0x180>)
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800627e:	e004      	b.n	800628a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006282:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800628a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800628c:	685b      	ldr	r3, [r3, #4]
 800628e:	687a      	ldr	r2, [r7, #4]
 8006290:	429a      	cmp	r2, r3
 8006292:	d903      	bls.n	800629c <pvPortMalloc+0xa4>
 8006294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	2b00      	cmp	r3, #0
 800629a:	d1f1      	bne.n	8006280 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800629c:	4b33      	ldr	r3, [pc, #204]	; (800636c <pvPortMalloc+0x174>)
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80062a2:	429a      	cmp	r2, r3
 80062a4:	d04b      	beq.n	800633e <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80062a6:	6a3b      	ldr	r3, [r7, #32]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	2208      	movs	r2, #8
 80062ac:	4413      	add	r3, r2
 80062ae:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80062b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062b2:	681a      	ldr	r2, [r3, #0]
 80062b4:	6a3b      	ldr	r3, [r7, #32]
 80062b6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80062b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062ba:	685a      	ldr	r2, [r3, #4]
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	1ad2      	subs	r2, r2, r3
 80062c0:	2308      	movs	r3, #8
 80062c2:	005b      	lsls	r3, r3, #1
 80062c4:	429a      	cmp	r2, r3
 80062c6:	d91f      	bls.n	8006308 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80062c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	4413      	add	r3, r2
 80062ce:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80062d0:	69bb      	ldr	r3, [r7, #24]
 80062d2:	f003 0307 	and.w	r3, r3, #7
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d00a      	beq.n	80062f0 <pvPortMalloc+0xf8>
	__asm volatile
 80062da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062de:	f383 8811 	msr	BASEPRI, r3
 80062e2:	f3bf 8f6f 	isb	sy
 80062e6:	f3bf 8f4f 	dsb	sy
 80062ea:	613b      	str	r3, [r7, #16]
}
 80062ec:	bf00      	nop
 80062ee:	e7fe      	b.n	80062ee <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80062f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062f2:	685a      	ldr	r2, [r3, #4]
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	1ad2      	subs	r2, r2, r3
 80062f8:	69bb      	ldr	r3, [r7, #24]
 80062fa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80062fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062fe:	687a      	ldr	r2, [r7, #4]
 8006300:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006302:	69b8      	ldr	r0, [r7, #24]
 8006304:	f000 f8f8 	bl	80064f8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006308:	4b1a      	ldr	r3, [pc, #104]	; (8006374 <pvPortMalloc+0x17c>)
 800630a:	681a      	ldr	r2, [r3, #0]
 800630c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800630e:	685b      	ldr	r3, [r3, #4]
 8006310:	1ad3      	subs	r3, r2, r3
 8006312:	4a18      	ldr	r2, [pc, #96]	; (8006374 <pvPortMalloc+0x17c>)
 8006314:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006316:	4b17      	ldr	r3, [pc, #92]	; (8006374 <pvPortMalloc+0x17c>)
 8006318:	681a      	ldr	r2, [r3, #0]
 800631a:	4b18      	ldr	r3, [pc, #96]	; (800637c <pvPortMalloc+0x184>)
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	429a      	cmp	r2, r3
 8006320:	d203      	bcs.n	800632a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006322:	4b14      	ldr	r3, [pc, #80]	; (8006374 <pvPortMalloc+0x17c>)
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	4a15      	ldr	r2, [pc, #84]	; (800637c <pvPortMalloc+0x184>)
 8006328:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800632a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800632c:	685a      	ldr	r2, [r3, #4]
 800632e:	4b10      	ldr	r3, [pc, #64]	; (8006370 <pvPortMalloc+0x178>)
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	431a      	orrs	r2, r3
 8006334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006336:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800633a:	2200      	movs	r2, #0
 800633c:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800633e:	f7fe fd01 	bl	8004d44 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006342:	69fb      	ldr	r3, [r7, #28]
 8006344:	f003 0307 	and.w	r3, r3, #7
 8006348:	2b00      	cmp	r3, #0
 800634a:	d00a      	beq.n	8006362 <pvPortMalloc+0x16a>
	__asm volatile
 800634c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006350:	f383 8811 	msr	BASEPRI, r3
 8006354:	f3bf 8f6f 	isb	sy
 8006358:	f3bf 8f4f 	dsb	sy
 800635c:	60fb      	str	r3, [r7, #12]
}
 800635e:	bf00      	nop
 8006360:	e7fe      	b.n	8006360 <pvPortMalloc+0x168>
	return pvReturn;
 8006362:	69fb      	ldr	r3, [r7, #28]
}
 8006364:	4618      	mov	r0, r3
 8006366:	3728      	adds	r7, #40	; 0x28
 8006368:	46bd      	mov	sp, r7
 800636a:	bd80      	pop	{r7, pc}
 800636c:	2001e268 	.word	0x2001e268
 8006370:	2001e274 	.word	0x2001e274
 8006374:	2001e26c 	.word	0x2001e26c
 8006378:	2001e260 	.word	0x2001e260
 800637c:	2001e270 	.word	0x2001e270

08006380 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006380:	b580      	push	{r7, lr}
 8006382:	b086      	sub	sp, #24
 8006384:	af00      	add	r7, sp, #0
 8006386:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	2b00      	cmp	r3, #0
 8006390:	d048      	beq.n	8006424 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006392:	2308      	movs	r3, #8
 8006394:	425b      	negs	r3, r3
 8006396:	697a      	ldr	r2, [r7, #20]
 8006398:	4413      	add	r3, r2
 800639a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800639c:	697b      	ldr	r3, [r7, #20]
 800639e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80063a0:	693b      	ldr	r3, [r7, #16]
 80063a2:	685a      	ldr	r2, [r3, #4]
 80063a4:	4b21      	ldr	r3, [pc, #132]	; (800642c <vPortFree+0xac>)
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	4013      	ands	r3, r2
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d10a      	bne.n	80063c4 <vPortFree+0x44>
	__asm volatile
 80063ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063b2:	f383 8811 	msr	BASEPRI, r3
 80063b6:	f3bf 8f6f 	isb	sy
 80063ba:	f3bf 8f4f 	dsb	sy
 80063be:	60fb      	str	r3, [r7, #12]
}
 80063c0:	bf00      	nop
 80063c2:	e7fe      	b.n	80063c2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80063c4:	693b      	ldr	r3, [r7, #16]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d00a      	beq.n	80063e2 <vPortFree+0x62>
	__asm volatile
 80063cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063d0:	f383 8811 	msr	BASEPRI, r3
 80063d4:	f3bf 8f6f 	isb	sy
 80063d8:	f3bf 8f4f 	dsb	sy
 80063dc:	60bb      	str	r3, [r7, #8]
}
 80063de:	bf00      	nop
 80063e0:	e7fe      	b.n	80063e0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80063e2:	693b      	ldr	r3, [r7, #16]
 80063e4:	685a      	ldr	r2, [r3, #4]
 80063e6:	4b11      	ldr	r3, [pc, #68]	; (800642c <vPortFree+0xac>)
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	4013      	ands	r3, r2
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d019      	beq.n	8006424 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80063f0:	693b      	ldr	r3, [r7, #16]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d115      	bne.n	8006424 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80063f8:	693b      	ldr	r3, [r7, #16]
 80063fa:	685a      	ldr	r2, [r3, #4]
 80063fc:	4b0b      	ldr	r3, [pc, #44]	; (800642c <vPortFree+0xac>)
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	43db      	mvns	r3, r3
 8006402:	401a      	ands	r2, r3
 8006404:	693b      	ldr	r3, [r7, #16]
 8006406:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006408:	f7fe fc8e 	bl	8004d28 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800640c:	693b      	ldr	r3, [r7, #16]
 800640e:	685a      	ldr	r2, [r3, #4]
 8006410:	4b07      	ldr	r3, [pc, #28]	; (8006430 <vPortFree+0xb0>)
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	4413      	add	r3, r2
 8006416:	4a06      	ldr	r2, [pc, #24]	; (8006430 <vPortFree+0xb0>)
 8006418:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800641a:	6938      	ldr	r0, [r7, #16]
 800641c:	f000 f86c 	bl	80064f8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8006420:	f7fe fc90 	bl	8004d44 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006424:	bf00      	nop
 8006426:	3718      	adds	r7, #24
 8006428:	46bd      	mov	sp, r7
 800642a:	bd80      	pop	{r7, pc}
 800642c:	2001e274 	.word	0x2001e274
 8006430:	2001e26c 	.word	0x2001e26c

08006434 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006434:	b480      	push	{r7}
 8006436:	b085      	sub	sp, #20
 8006438:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800643a:	f44f 33f0 	mov.w	r3, #122880	; 0x1e000
 800643e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006440:	4b27      	ldr	r3, [pc, #156]	; (80064e0 <prvHeapInit+0xac>)
 8006442:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	f003 0307 	and.w	r3, r3, #7
 800644a:	2b00      	cmp	r3, #0
 800644c:	d00c      	beq.n	8006468 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	3307      	adds	r3, #7
 8006452:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	f023 0307 	bic.w	r3, r3, #7
 800645a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800645c:	68ba      	ldr	r2, [r7, #8]
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	1ad3      	subs	r3, r2, r3
 8006462:	4a1f      	ldr	r2, [pc, #124]	; (80064e0 <prvHeapInit+0xac>)
 8006464:	4413      	add	r3, r2
 8006466:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800646c:	4a1d      	ldr	r2, [pc, #116]	; (80064e4 <prvHeapInit+0xb0>)
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006472:	4b1c      	ldr	r3, [pc, #112]	; (80064e4 <prvHeapInit+0xb0>)
 8006474:	2200      	movs	r2, #0
 8006476:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	68ba      	ldr	r2, [r7, #8]
 800647c:	4413      	add	r3, r2
 800647e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006480:	2208      	movs	r2, #8
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	1a9b      	subs	r3, r3, r2
 8006486:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	f023 0307 	bic.w	r3, r3, #7
 800648e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	4a15      	ldr	r2, [pc, #84]	; (80064e8 <prvHeapInit+0xb4>)
 8006494:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006496:	4b14      	ldr	r3, [pc, #80]	; (80064e8 <prvHeapInit+0xb4>)
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	2200      	movs	r2, #0
 800649c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800649e:	4b12      	ldr	r3, [pc, #72]	; (80064e8 <prvHeapInit+0xb4>)
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	2200      	movs	r2, #0
 80064a4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80064aa:	683b      	ldr	r3, [r7, #0]
 80064ac:	68fa      	ldr	r2, [r7, #12]
 80064ae:	1ad2      	subs	r2, r2, r3
 80064b0:	683b      	ldr	r3, [r7, #0]
 80064b2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80064b4:	4b0c      	ldr	r3, [pc, #48]	; (80064e8 <prvHeapInit+0xb4>)
 80064b6:	681a      	ldr	r2, [r3, #0]
 80064b8:	683b      	ldr	r3, [r7, #0]
 80064ba:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80064bc:	683b      	ldr	r3, [r7, #0]
 80064be:	685b      	ldr	r3, [r3, #4]
 80064c0:	4a0a      	ldr	r2, [pc, #40]	; (80064ec <prvHeapInit+0xb8>)
 80064c2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80064c4:	683b      	ldr	r3, [r7, #0]
 80064c6:	685b      	ldr	r3, [r3, #4]
 80064c8:	4a09      	ldr	r2, [pc, #36]	; (80064f0 <prvHeapInit+0xbc>)
 80064ca:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80064cc:	4b09      	ldr	r3, [pc, #36]	; (80064f4 <prvHeapInit+0xc0>)
 80064ce:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80064d2:	601a      	str	r2, [r3, #0]
}
 80064d4:	bf00      	nop
 80064d6:	3714      	adds	r7, #20
 80064d8:	46bd      	mov	sp, r7
 80064da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064de:	4770      	bx	lr
 80064e0:	20000260 	.word	0x20000260
 80064e4:	2001e260 	.word	0x2001e260
 80064e8:	2001e268 	.word	0x2001e268
 80064ec:	2001e270 	.word	0x2001e270
 80064f0:	2001e26c 	.word	0x2001e26c
 80064f4:	2001e274 	.word	0x2001e274

080064f8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80064f8:	b480      	push	{r7}
 80064fa:	b085      	sub	sp, #20
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006500:	4b28      	ldr	r3, [pc, #160]	; (80065a4 <prvInsertBlockIntoFreeList+0xac>)
 8006502:	60fb      	str	r3, [r7, #12]
 8006504:	e002      	b.n	800650c <prvInsertBlockIntoFreeList+0x14>
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	60fb      	str	r3, [r7, #12]
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	687a      	ldr	r2, [r7, #4]
 8006512:	429a      	cmp	r2, r3
 8006514:	d8f7      	bhi.n	8006506 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	685b      	ldr	r3, [r3, #4]
 800651e:	68ba      	ldr	r2, [r7, #8]
 8006520:	4413      	add	r3, r2
 8006522:	687a      	ldr	r2, [r7, #4]
 8006524:	429a      	cmp	r2, r3
 8006526:	d108      	bne.n	800653a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	685a      	ldr	r2, [r3, #4]
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	685b      	ldr	r3, [r3, #4]
 8006530:	441a      	add	r2, r3
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	685b      	ldr	r3, [r3, #4]
 8006542:	68ba      	ldr	r2, [r7, #8]
 8006544:	441a      	add	r2, r3
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	429a      	cmp	r2, r3
 800654c:	d118      	bne.n	8006580 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	681a      	ldr	r2, [r3, #0]
 8006552:	4b15      	ldr	r3, [pc, #84]	; (80065a8 <prvInsertBlockIntoFreeList+0xb0>)
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	429a      	cmp	r2, r3
 8006558:	d00d      	beq.n	8006576 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	685a      	ldr	r2, [r3, #4]
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	685b      	ldr	r3, [r3, #4]
 8006564:	441a      	add	r2, r3
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	681a      	ldr	r2, [r3, #0]
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	601a      	str	r2, [r3, #0]
 8006574:	e008      	b.n	8006588 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006576:	4b0c      	ldr	r3, [pc, #48]	; (80065a8 <prvInsertBlockIntoFreeList+0xb0>)
 8006578:	681a      	ldr	r2, [r3, #0]
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	601a      	str	r2, [r3, #0]
 800657e:	e003      	b.n	8006588 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	681a      	ldr	r2, [r3, #0]
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006588:	68fa      	ldr	r2, [r7, #12]
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	429a      	cmp	r2, r3
 800658e:	d002      	beq.n	8006596 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	687a      	ldr	r2, [r7, #4]
 8006594:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006596:	bf00      	nop
 8006598:	3714      	adds	r7, #20
 800659a:	46bd      	mov	sp, r7
 800659c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a0:	4770      	bx	lr
 80065a2:	bf00      	nop
 80065a4:	2001e260 	.word	0x2001e260
 80065a8:	2001e268 	.word	0x2001e268

080065ac <memset>:
 80065ac:	4402      	add	r2, r0
 80065ae:	4603      	mov	r3, r0
 80065b0:	4293      	cmp	r3, r2
 80065b2:	d100      	bne.n	80065b6 <memset+0xa>
 80065b4:	4770      	bx	lr
 80065b6:	f803 1b01 	strb.w	r1, [r3], #1
 80065ba:	e7f9      	b.n	80065b0 <memset+0x4>

080065bc <__libc_init_array>:
 80065bc:	b570      	push	{r4, r5, r6, lr}
 80065be:	4d0d      	ldr	r5, [pc, #52]	; (80065f4 <__libc_init_array+0x38>)
 80065c0:	4c0d      	ldr	r4, [pc, #52]	; (80065f8 <__libc_init_array+0x3c>)
 80065c2:	1b64      	subs	r4, r4, r5
 80065c4:	10a4      	asrs	r4, r4, #2
 80065c6:	2600      	movs	r6, #0
 80065c8:	42a6      	cmp	r6, r4
 80065ca:	d109      	bne.n	80065e0 <__libc_init_array+0x24>
 80065cc:	4d0b      	ldr	r5, [pc, #44]	; (80065fc <__libc_init_array+0x40>)
 80065ce:	4c0c      	ldr	r4, [pc, #48]	; (8006600 <__libc_init_array+0x44>)
 80065d0:	f000 f826 	bl	8006620 <_init>
 80065d4:	1b64      	subs	r4, r4, r5
 80065d6:	10a4      	asrs	r4, r4, #2
 80065d8:	2600      	movs	r6, #0
 80065da:	42a6      	cmp	r6, r4
 80065dc:	d105      	bne.n	80065ea <__libc_init_array+0x2e>
 80065de:	bd70      	pop	{r4, r5, r6, pc}
 80065e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80065e4:	4798      	blx	r3
 80065e6:	3601      	adds	r6, #1
 80065e8:	e7ee      	b.n	80065c8 <__libc_init_array+0xc>
 80065ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80065ee:	4798      	blx	r3
 80065f0:	3601      	adds	r6, #1
 80065f2:	e7f2      	b.n	80065da <__libc_init_array+0x1e>
 80065f4:	08006704 	.word	0x08006704
 80065f8:	08006704 	.word	0x08006704
 80065fc:	08006704 	.word	0x08006704
 8006600:	08006708 	.word	0x08006708

08006604 <memcpy>:
 8006604:	440a      	add	r2, r1
 8006606:	4291      	cmp	r1, r2
 8006608:	f100 33ff 	add.w	r3, r0, #4294967295
 800660c:	d100      	bne.n	8006610 <memcpy+0xc>
 800660e:	4770      	bx	lr
 8006610:	b510      	push	{r4, lr}
 8006612:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006616:	f803 4f01 	strb.w	r4, [r3, #1]!
 800661a:	4291      	cmp	r1, r2
 800661c:	d1f9      	bne.n	8006612 <memcpy+0xe>
 800661e:	bd10      	pop	{r4, pc}

08006620 <_init>:
 8006620:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006622:	bf00      	nop
 8006624:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006626:	bc08      	pop	{r3}
 8006628:	469e      	mov	lr, r3
 800662a:	4770      	bx	lr

0800662c <_fini>:
 800662c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800662e:	bf00      	nop
 8006630:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006632:	bc08      	pop	{r3}
 8006634:	469e      	mov	lr, r3
 8006636:	4770      	bx	lr
